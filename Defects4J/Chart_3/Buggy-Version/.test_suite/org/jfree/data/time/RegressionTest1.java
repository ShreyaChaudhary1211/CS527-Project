package org.jfree.data.time;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        timeSeries2.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        org.jfree.data.time.TimeSeries timeSeries34 = timeSeries2.addAndOrUpdate(timeSeries10);
        timeSeries34.fireSeriesChanged();
        boolean boolean36 = fixedMillisecond0.equals((java.lang.Object) timeSeries34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = fixedMillisecond0.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = fixedMillisecond0.previous();
        long long39 = fixedMillisecond0.getFirstMillisecond();
        long long40 = fixedMillisecond0.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(timeSeries34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1711995787183L + "'", long39 == 1711995787183L);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1711995787183L + "'", long40 == 1711995787183L);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        java.lang.Number number25 = timeSeriesDataItem23.getValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = timeSeriesDataItem23.getPeriod();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 0.0d + "'", number25, 0.0d);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = month4.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod20, (java.lang.Number) 1);
        long long23 = regularTimePeriod20.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 24293L + "'", long23 == 24293L);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getLastMillisecond();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        int int3 = month0.compareTo((java.lang.Object) month2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = month2.previous();
        java.lang.String str5 = month2.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1714546799999L + "'", long1 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "April 2024" + "'", str5, "April 2024");
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        timeSeries13.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries13.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent22 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean23 = timeSeries13.equals((java.lang.Object) seriesChangeEvent22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        int int26 = day24.compareTo((java.lang.Object) (short) 100);
        java.lang.String str27 = day24.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries13.getDataItem((org.jfree.data.time.RegularTimePeriod) day24);
        timeSeries6.add(timeSeriesDataItem28);
        timeSeries1.add(timeSeriesDataItem28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number32 = timeSeries1.getValue(regularTimePeriod31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'period' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1-April-2024" + "'", str27, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getLastMillisecond();
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month();
        int int21 = month18.compareTo((java.lang.Object) month20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list24 = timeSeries23.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener25 = null;
        timeSeries23.addChangeListener(seriesChangeListener25);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        org.jfree.data.time.Month month31 = new org.jfree.data.time.Month();
        long long32 = month31.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.removeChangeListener(seriesChangeListener35);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries34.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day39, (java.lang.Number) 10L);
        long long45 = day39.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries46 = timeSeries28.createCopy((org.jfree.data.time.RegularTimePeriod) month31, (org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries28.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries28.removeChangeListener(seriesChangeListener49);
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries23.addAndOrUpdate(timeSeries28);
        int int52 = month18.compareTo((java.lang.Object) timeSeries28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = month18.next();
        org.jfree.data.time.FixedMillisecond fixedMillisecond55 = new org.jfree.data.time.FixedMillisecond((long) ' ');
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy(regularTimePeriod53, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond55);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = fixedMillisecond55.next();
        long long58 = fixedMillisecond55.getLastMillisecond();
        long long59 = fixedMillisecond55.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1714546799999L + "'", long19 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711954800000L + "'", long32 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711997999999L + "'", long45 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries46);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 32L + "'", long58 == 32L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 32L + "'", long59 == 32L);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getLastMillisecond();
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        int int12 = month9.compareTo((java.lang.Object) month11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        int int43 = month9.compareTo((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day50);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day59 = new org.jfree.data.time.Day();
        timeSeries58.add((org.jfree.data.time.RegularTimePeriod) day59, (double) (short) 0, false);
        java.util.Date date63 = day59.getStart();
        org.jfree.data.time.SerialDate serialDate64 = day59.getSerialDate();
        org.jfree.data.time.SerialDate serialDate65 = day59.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem66 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day59);
        java.lang.Class class67 = timeSeries1.timePeriodClass;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener68 = null;
        timeSeries1.addChangeListener(seriesChangeListener68);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate64);
        org.junit.Assert.assertNotNull(serialDate65);
        org.junit.Assert.assertNotNull(timeSeriesDataItem66);
        org.junit.Assert.assertNotNull(class67);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.removeChangeListener(seriesChangeListener4);
        java.lang.String str6 = timeSeries3.getRangeDescription();
        java.util.List list7 = timeSeries3.getItems();
        java.util.List list8 = timeSeries3.getItems();
        java.util.Collection collection9 = timeSeries3.getTimePeriods();
        timeSeries3.setKey((java.lang.Comparable) 1712041199999L);
        java.util.Collection collection12 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number14 = timeSeries3.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value" + "'", str6, "Value");
        org.junit.Assert.assertNotNull(list7);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertNotNull(collection12);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        int int8 = day2.getYear();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2024 + "'", int8 == 2024);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        double double20 = timeSeries19.getMinY();
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener23 = null;
        timeSeries22.addChangeListener(seriesChangeListener23);
        long long25 = timeSeries22.getMaximumItemAge();
        java.lang.String str26 = timeSeries22.getDescription();
        double double27 = timeSeries22.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = timeSeries29.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent38 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean39 = timeSeries29.equals((java.lang.Object) seriesChangeEvent38);
        org.jfree.data.time.Day day40 = new org.jfree.data.time.Day();
        int int42 = day40.compareTo((java.lang.Object) (short) 100);
        java.lang.String str43 = day40.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries29.getDataItem((org.jfree.data.time.RegularTimePeriod) day40);
        timeSeries22.add(timeSeriesDataItem44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener48 = null;
        timeSeries47.addChangeListener(seriesChangeListener48);
        long long50 = timeSeries47.getMaximumItemAge();
        java.lang.String str51 = timeSeries47.getDescription();
        timeSeries47.fireSeriesChanged();
        timeSeries47.removeAgedItems(false);
        java.lang.String str55 = timeSeries47.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries22.addAndOrUpdate(timeSeries47);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener59 = null;
        timeSeries58.addChangeListener(seriesChangeListener59);
        org.jfree.data.time.Month month61 = new org.jfree.data.time.Month();
        long long62 = month61.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries64 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener65 = null;
        timeSeries64.removeChangeListener(seriesChangeListener65);
        org.jfree.data.time.TimeSeries timeSeries68 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day69 = new org.jfree.data.time.Day();
        timeSeries68.add((org.jfree.data.time.RegularTimePeriod) day69, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem74 = timeSeries64.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day69, (java.lang.Number) 10L);
        long long75 = day69.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries76 = timeSeries58.createCopy((org.jfree.data.time.RegularTimePeriod) month61, (org.jfree.data.time.RegularTimePeriod) day69);
        long long77 = month61.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = month61.next();
        org.jfree.data.time.Year year79 = month61.getYear();
        timeSeries56.add((org.jfree.data.time.RegularTimePeriod) month61, (java.lang.Number) 10, true);
        org.jfree.data.time.Day day83 = new org.jfree.data.time.Day();
        long long84 = day83.getSerialIndex();
        int int85 = month61.compareTo((java.lang.Object) long84);
        long long86 = month61.getSerialIndex();
        timeSeries19.setKey((java.lang.Comparable) month61);
        long long88 = month61.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 9223372036854775807L + "'", long25 == 9223372036854775807L);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1-April-2024" + "'", str43, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 9223372036854775807L + "'", long50 == 9223372036854775807L);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Value" + "'", str55, "Value");
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1711954800000L + "'", long62 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1711997999999L + "'", long75 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 24292L + "'", long77 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(year79);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 45383L + "'", long84 == 45383L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 24292L + "'", long86 == 24292L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 24292L + "'", long88 == 24292L);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.util.Date date16 = day10.getEnd();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem18 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 0L);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 0L);
        timeSeries19.setMaximumItemCount(2024);
        int int22 = timeSeries19.getMaximumItemCount();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2024 + "'", int22 == 2024);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeriesDataItem23.setSelected(false);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean29 = timeSeries28.isEmpty();
        timeSeries28.clear();
        timeSeries28.setNotify(false);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        int int34 = timeSeries28.getIndex((org.jfree.data.time.RegularTimePeriod) day33);
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double37 = timeSeries36.getMaxY();
        java.util.Collection collection38 = timeSeries36.getTimePeriods();
        boolean boolean39 = timeSeries28.equals((java.lang.Object) collection38);
        boolean boolean40 = timeSeriesDataItem23.equals((java.lang.Object) timeSeries28);
        org.jfree.data.time.TimeSeries timeSeries42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener43 = null;
        timeSeries42.addChangeListener(seriesChangeListener43);
        long long45 = timeSeries42.getMaximumItemAge();
        java.lang.String str46 = timeSeries42.getDescription();
        double double47 = timeSeries42.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        timeSeries49.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = timeSeries49.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent58 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean59 = timeSeries49.equals((java.lang.Object) seriesChangeEvent58);
        org.jfree.data.time.Day day60 = new org.jfree.data.time.Day();
        int int62 = day60.compareTo((java.lang.Object) (short) 100);
        java.lang.String str63 = day60.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem64 = timeSeries49.getDataItem((org.jfree.data.time.RegularTimePeriod) day60);
        timeSeries42.add(timeSeriesDataItem64);
        timeSeries42.setDescription("");
        timeSeries42.removeAgedItems(true);
        org.jfree.data.time.TimeSeries timeSeries71 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day72 = new org.jfree.data.time.Day();
        timeSeries71.add((org.jfree.data.time.RegularTimePeriod) day72, (double) (short) 0, false);
        timeSeries71.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = timeSeries71.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent80 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean81 = timeSeries71.equals((java.lang.Object) seriesChangeEvent80);
        org.jfree.data.time.Day day82 = new org.jfree.data.time.Day();
        int int84 = day82.compareTo((java.lang.Object) (short) 100);
        java.lang.String str85 = day82.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem86 = timeSeries71.getDataItem((org.jfree.data.time.RegularTimePeriod) day82);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem87 = timeSeries42.addOrUpdate(timeSeriesDataItem86);
        timeSeries28.add(timeSeriesDataItem87);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 9223372036854775807L + "'", long45 == 9223372036854775807L);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1-April-2024" + "'", str63, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem64);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1-April-2024" + "'", str85, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem86);
        org.junit.Assert.assertNotNull(timeSeriesDataItem87);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.Year year19 = new org.jfree.data.time.Year(2);
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) year19);
        long long21 = timeSeries1.getMaximumItemAge();
        java.lang.Comparable comparable22 = timeSeries1.getKey();
        boolean boolean23 = timeSeries1.isEmpty();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertEquals("'" + comparable22 + "' != '" + 100L + "'", comparable22, 100L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem8 = timeSeries1.getDataItem(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.removeChangeListener(seriesChangeListener4);
        java.lang.String str6 = timeSeries3.getRangeDescription();
        java.util.List list7 = timeSeries3.getItems();
        java.util.List list8 = timeSeries3.getItems();
        java.util.Collection collection9 = timeSeries3.getTimePeriods();
        timeSeries3.setKey((java.lang.Comparable) 1712041199999L);
        java.util.Collection collection12 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries3);
        timeSeries1.setRangeDescription("org.jfree.data.event.SeriesChangeEvent[source=0.0]");
        org.jfree.data.time.FixedMillisecond fixedMillisecond15 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = fixedMillisecond15.next();
        java.util.Date date17 = fixedMillisecond15.getTime();
        long long18 = fixedMillisecond15.getLastMillisecond();
        java.util.Date date19 = fixedMillisecond15.getTime();
        java.util.Date date20 = fixedMillisecond15.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond21 = new org.jfree.data.time.FixedMillisecond(date20);
        java.util.Calendar calendar22 = null;
        fixedMillisecond21.peg(calendar22);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.update((org.jfree.data.time.RegularTimePeriod) fixedMillisecond21, (java.lang.Number) 1711995779265L);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: There is no existing value for the specified 'period'.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value" + "'", str6, "Value");
        org.junit.Assert.assertNotNull(list7);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertNotNull(collection9);
        org.junit.Assert.assertNotNull(collection12);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Mon Apr 01 11:23:09 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711995789986L + "'", long18 == 1711995789986L);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Mon Apr 01 11:23:09 PDT 2024");
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon Apr 01 11:23:09 PDT 2024");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        long long25 = month6.getLastMillisecond();
        org.jfree.data.time.FixedMillisecond fixedMillisecond26 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = fixedMillisecond26.next();
        java.util.Date date28 = fixedMillisecond26.getTime();
        long long29 = fixedMillisecond26.getLastMillisecond();
        java.util.Date date30 = fixedMillisecond26.getTime();
        java.util.Calendar calendar31 = null;
        fixedMillisecond26.peg(calendar31);
        long long33 = fixedMillisecond26.getLastMillisecond();
        boolean boolean34 = month6.equals((java.lang.Object) fixedMillisecond26);
        java.util.Calendar calendar35 = null;
        fixedMillisecond26.peg(calendar35);
        java.util.Calendar calendar37 = null;
        long long38 = fixedMillisecond26.getMiddleMillisecond(calendar37);
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1714546799999L + "'", long25 == 1714546799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Mon Apr 01 11:23:10 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711995790055L + "'", long29 == 1711995790055L);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Apr 01 11:23:10 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711995790055L + "'", long33 == 1711995790055L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1711995790055L + "'", long38 == 1711995790055L);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.setMaximumItemCount((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative 'maximum' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        long long7 = day2.getFirstMillisecond();
        java.util.Date date8 = day2.getStart();
        org.jfree.data.time.Year year9 = new org.jfree.data.time.Year(date8);
        java.util.TimeZone timeZone10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Day day11 = new org.jfree.data.time.Day(date8, timeZone10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        timeSeries1.removeAgedItems(false);
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year10 = month9.getYear();
        long long11 = month9.getFirstMillisecond();
        java.util.Date date12 = month9.getEnd();
        long long13 = month9.getSerialIndex();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) month9, (double) 1711995754182L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711954800000L + "'", long11 == 1711954800000L);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Apr 30 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 24292L + "'", long13 == 24292L);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = month4.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod20, (java.lang.Number) 1);
        java.lang.Object obj23 = timeSeriesDataItem22.clone();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(obj23);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        int int6 = day2.getDayOfMonth();
        int int7 = day2.getMonth();
        java.util.Date date8 = day2.getStart();
        java.util.TimeZone timeZone9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year10 = new org.jfree.data.time.Year(date8, timeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        timeSeries1.removeAgedItems(false);
        java.lang.String str9 = timeSeries1.getRangeDescription();
        int int10 = timeSeries1.getItemCount();
        java.beans.PropertyChangeListener propertyChangeListener11 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener11);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value" + "'", str9, "Value");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        timeSeries2.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        org.jfree.data.time.TimeSeries timeSeries34 = timeSeries2.addAndOrUpdate(timeSeries10);
        timeSeries34.fireSeriesChanged();
        boolean boolean36 = fixedMillisecond0.equals((java.lang.Object) timeSeries34);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener39 = null;
        timeSeries38.addChangeListener(seriesChangeListener39);
        long long41 = timeSeries38.getMaximumItemAge();
        java.lang.String str42 = timeSeries38.getDescription();
        double double43 = timeSeries38.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day46 = new org.jfree.data.time.Day();
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day46, (double) (short) 0, false);
        timeSeries45.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = timeSeries45.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent54 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean55 = timeSeries45.equals((java.lang.Object) seriesChangeEvent54);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        int int58 = day56.compareTo((java.lang.Object) (short) 100);
        java.lang.String str59 = day56.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem60 = timeSeries45.getDataItem((org.jfree.data.time.RegularTimePeriod) day56);
        timeSeries38.add(timeSeriesDataItem60);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem62 = timeSeries34.addOrUpdate(timeSeriesDataItem60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = timeSeriesDataItem60.getPeriod();
        java.lang.Number number64 = null;
        timeSeriesDataItem60.setValue(number64);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(timeSeries34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 9223372036854775807L + "'", long41 == 9223372036854775807L);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1-April-2024" + "'", str59, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem60);
        org.junit.Assert.assertNotNull(timeSeriesDataItem62);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        timeSeries13.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries13.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent22 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean23 = timeSeries13.equals((java.lang.Object) seriesChangeEvent22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        int int26 = day24.compareTo((java.lang.Object) (short) 100);
        java.lang.String str27 = day24.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries13.getDataItem((org.jfree.data.time.RegularTimePeriod) day24);
        timeSeries6.add(timeSeriesDataItem28);
        timeSeries1.add(timeSeriesDataItem28);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.delete((int) '4', 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1-April-2024" + "'", str27, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = day2.next();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = day2.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        java.util.Date date25 = year24.getStart();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Jan 01 00:00:00 PST 2024");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        int int18 = timeSeries1.getItemCount();
        java.lang.Class class19 = timeSeries1.timePeriodClass;
        long long20 = timeSeries1.getMaximumItemAge();
        timeSeries1.setMaximumItemAge(1711995790055L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.Year year19 = new org.jfree.data.time.Year(2);
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) year19);
        long long21 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        int int24 = day22.compareTo((java.lang.Object) (short) 100);
        java.lang.String str25 = day22.toString();
        int int26 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day22);
        boolean boolean28 = timeSeries1.equals((java.lang.Object) 1711995697416L);
        double double29 = timeSeries1.getMaxY();
        org.jfree.data.time.FixedMillisecond fixedMillisecond30 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = fixedMillisecond30.next();
        java.lang.Number number32 = timeSeries1.getValue(regularTimePeriod31);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = timeSeries1.getTimePeriod((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1-April-2024" + "'", str25, "1-April-2024");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNull(number32);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        timeSeries1.removeAgedItems(true);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond31 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = fixedMillisecond31.next();
        timeSeries30.setKey((java.lang.Comparable) fixedMillisecond31);
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener36 = null;
        timeSeries35.addChangeListener(seriesChangeListener36);
        long long38 = timeSeries35.getMaximumItemAge();
        java.lang.String str39 = timeSeries35.getDescription();
        double double40 = timeSeries35.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        timeSeries42.add((org.jfree.data.time.RegularTimePeriod) day43, (double) (short) 0, false);
        timeSeries42.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = timeSeries42.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent51 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean52 = timeSeries42.equals((java.lang.Object) seriesChangeEvent51);
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        int int55 = day53.compareTo((java.lang.Object) (short) 100);
        java.lang.String str56 = day53.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem57 = timeSeries42.getDataItem((org.jfree.data.time.RegularTimePeriod) day53);
        timeSeries35.add(timeSeriesDataItem57);
        timeSeries30.add(timeSeriesDataItem57);
        boolean boolean60 = timeSeries1.equals((java.lang.Object) timeSeries30);
        org.jfree.data.time.TimeSeries timeSeries61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeries timeSeries62 = timeSeries30.addAndOrUpdate(timeSeries61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 9223372036854775807L + "'", long38 == 9223372036854775807L);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1-April-2024" + "'", str56, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection collection8 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem4 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add(timeSeriesDataItem4, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'item' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(3, (int) '4');
        java.lang.String str3 = month2.toString();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = month2.getFirstMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "March 52" + "'", str3, "March 52");
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        boolean boolean7 = timeSeries1.getNotify();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year3 = month2.getYear();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries5.addChangeListener(seriesChangeListener6);
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.removeChangeListener(seriesChangeListener12);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries11.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day16, (java.lang.Number) 10L);
        long long22 = day16.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries23 = timeSeries5.createCopy((org.jfree.data.time.RegularTimePeriod) month8, (org.jfree.data.time.RegularTimePeriod) day16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = month8.next();
        int int25 = year3.compareTo((java.lang.Object) month8);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = year3.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = year3.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = year3.previous();
        boolean boolean29 = year1.equals((java.lang.Object) regularTimePeriod28);
        long long30 = year1.getLastMillisecond();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954800000L + "'", long9 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711997999999L + "'", long22 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1735718399999L + "'", long30 == 1735718399999L);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year((int) (short) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod2 = year1.next();
        org.junit.Assert.assertNotNull(regularTimePeriod2);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        long long40 = timeSeries37.getMaximumItemAge();
        java.lang.String str41 = timeSeries37.getDescription();
        double double42 = timeSeries37.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        timeSeries44.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeries44.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent53 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean54 = timeSeries44.equals((java.lang.Object) seriesChangeEvent53);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        int int57 = day55.compareTo((java.lang.Object) (short) 100);
        java.lang.String str58 = day55.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries44.getDataItem((org.jfree.data.time.RegularTimePeriod) day55);
        timeSeries37.add(timeSeriesDataItem59);
        org.jfree.data.time.TimeSeries timeSeries61 = timeSeries29.addAndOrUpdate(timeSeries37);
        timeSeries61.fireSeriesChanged();
        boolean boolean63 = fixedMillisecond27.equals((java.lang.Object) timeSeries61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = fixedMillisecond27.previous();
        java.util.Calendar calendar65 = null;
        fixedMillisecond27.peg(calendar65);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = year68.previous();
        org.jfree.data.time.TimeSeries timeSeries70 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond27, (org.jfree.data.time.RegularTimePeriod) year68);
        java.lang.Object obj71 = timeSeries70.clone();
        timeSeries70.setNotify(false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223372036854775807L + "'", long40 == 9223372036854775807L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1-April-2024" + "'", str58, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(timeSeries61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeSeries70);
        org.junit.Assert.assertNotNull(obj71);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (byte) 1);
        java.util.Collection collection5 = timeSeries4.getTimePeriods();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        timeSeries7.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        java.util.Date date20 = day16.getStart();
        org.jfree.data.time.SerialDate serialDate21 = day16.getSerialDate();
        java.lang.Number number22 = null;
        timeSeries7.update((org.jfree.data.time.RegularTimePeriod) day16, number22);
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem38 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) (byte) 10);
        double double39 = timeSeries7.getMaxY();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem41 = timeSeries7.getDataItem(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = timeSeries4.addOrUpdate(timeSeriesDataItem41);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries1.addOrUpdate(timeSeriesDataItem42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'period' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(collection5);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate21);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(timeSeriesDataItem41);
        org.junit.Assert.assertNull(timeSeriesDataItem42);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        int int6 = day2.getDayOfMonth();
        long long7 = day2.getLastMillisecond();
        int int8 = day2.getMonth();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = day2.previous();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1712041199999L + "'", long7 == 1712041199999L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getLastMillisecond();
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month();
        int int21 = month18.compareTo((java.lang.Object) month20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list24 = timeSeries23.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener25 = null;
        timeSeries23.addChangeListener(seriesChangeListener25);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        org.jfree.data.time.Month month31 = new org.jfree.data.time.Month();
        long long32 = month31.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.removeChangeListener(seriesChangeListener35);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries34.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day39, (java.lang.Number) 10L);
        long long45 = day39.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries46 = timeSeries28.createCopy((org.jfree.data.time.RegularTimePeriod) month31, (org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries28.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries28.removeChangeListener(seriesChangeListener49);
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries23.addAndOrUpdate(timeSeries28);
        int int52 = month18.compareTo((java.lang.Object) timeSeries28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = month18.next();
        org.jfree.data.time.FixedMillisecond fixedMillisecond55 = new org.jfree.data.time.FixedMillisecond((long) ' ');
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy(regularTimePeriod53, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond55);
        java.util.Calendar calendar57 = null;
        long long58 = fixedMillisecond55.getMiddleMillisecond(calendar57);
        java.util.Calendar calendar59 = null;
        long long60 = fixedMillisecond55.getFirstMillisecond(calendar59);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1714546799999L + "'", long19 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711954800000L + "'", long32 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711997999999L + "'", long45 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries46);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 32L + "'", long58 == 32L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 32L + "'", long60 == 32L);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Year year19 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        java.util.Date date26 = day22.getStart();
        org.jfree.data.time.SerialDate serialDate27 = day22.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo29);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo31 = seriesChangeEvent30.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo32 = null;
        seriesChangeEvent30.setSummary(seriesChangeInfo32);
        int int34 = day22.compareTo((java.lang.Object) seriesChangeEvent30);
        int int35 = year19.compareTo((java.lang.Object) seriesChangeEvent30);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        boolean boolean57 = year19.equals((java.lang.Object) month40);
        timeSeries1.setKey((java.lang.Comparable) year19);
        int int60 = year19.compareTo((java.lang.Object) 1);
        java.util.Calendar calendar61 = null;
        // The following exception was thrown during execution in test generation
        try {
            year19.peg(calendar61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate27);
        org.junit.Assert.assertNull(seriesChangeInfo31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        long long29 = timeSeries26.getMaximumItemAge();
        java.lang.String str30 = timeSeries26.getDescription();
        timeSeries26.fireSeriesChanged();
        timeSeries26.removeAgedItems(false);
        java.lang.String str34 = timeSeries26.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries1.addAndOrUpdate(timeSeries26);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = month40.next();
        org.jfree.data.time.Year year58 = month40.getYear();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) month40, (java.lang.Number) 10, true);
        java.lang.String str62 = timeSeries35.getDomainDescription();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9223372036854775807L + "'", long29 == 9223372036854775807L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Value" + "'", str34, "Value");
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(year58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Time" + "'", str62, "Time");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getLastMillisecond();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year3 = month2.getYear();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries5.addChangeListener(seriesChangeListener6);
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.removeChangeListener(seriesChangeListener12);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries11.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day16, (java.lang.Number) 10L);
        long long22 = day16.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries23 = timeSeries5.createCopy((org.jfree.data.time.RegularTimePeriod) month8, (org.jfree.data.time.RegularTimePeriod) day16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = month8.next();
        int int25 = year3.compareTo((java.lang.Object) month8);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = year3.next();
        boolean boolean27 = month0.equals((java.lang.Object) year3);
        long long28 = month0.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1714546799999L + "'", long1 == 1714546799999L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954800000L + "'", long9 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711997999999L + "'", long22 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1711954800000L + "'", long28 == 1711954800000L);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond(1711995675684L);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        long long2 = month0.getFirstMillisecond();
        java.util.Date date3 = month0.getStart();
        org.jfree.data.time.Year year4 = new org.jfree.data.time.Year(date3);
        org.jfree.data.time.FixedMillisecond fixedMillisecond5 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        timeSeries7.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries15.addChangeListener(seriesChangeListener16);
        long long18 = timeSeries15.getMaximumItemAge();
        java.lang.String str19 = timeSeries15.getDescription();
        double double20 = timeSeries15.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        timeSeries22.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = timeSeries22.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent31 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean32 = timeSeries22.equals((java.lang.Object) seriesChangeEvent31);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        int int35 = day33.compareTo((java.lang.Object) (short) 100);
        java.lang.String str36 = day33.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries22.getDataItem((org.jfree.data.time.RegularTimePeriod) day33);
        timeSeries15.add(timeSeriesDataItem37);
        org.jfree.data.time.TimeSeries timeSeries39 = timeSeries7.addAndOrUpdate(timeSeries15);
        timeSeries39.fireSeriesChanged();
        boolean boolean41 = fixedMillisecond5.equals((java.lang.Object) timeSeries39);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = fixedMillisecond5.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = fixedMillisecond5.previous();
        long long44 = fixedMillisecond5.getFirstMillisecond();
        long long45 = fixedMillisecond5.getLastMillisecond();
        int int46 = year4.compareTo((java.lang.Object) fixedMillisecond5);
        java.util.Calendar calendar47 = null;
        long long48 = fixedMillisecond5.getFirstMillisecond(calendar47);
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954800000L + "'", long2 == 1711954800000L);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 9223372036854775807L + "'", long18 == 9223372036854775807L);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1-April-2024" + "'", str36, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem37);
        org.junit.Assert.assertNotNull(timeSeries39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1711995797784L + "'", long44 == 1711995797784L);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711995797784L + "'", long45 == 1711995797784L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1711995797784L + "'", long48 == 1711995797784L);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Year year19 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        java.util.Date date26 = day22.getStart();
        org.jfree.data.time.SerialDate serialDate27 = day22.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo29);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo31 = seriesChangeEvent30.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo32 = null;
        seriesChangeEvent30.setSummary(seriesChangeInfo32);
        int int34 = day22.compareTo((java.lang.Object) seriesChangeEvent30);
        int int35 = year19.compareTo((java.lang.Object) seriesChangeEvent30);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        boolean boolean57 = year19.equals((java.lang.Object) month40);
        timeSeries1.setKey((java.lang.Comparable) year19);
        boolean boolean59 = timeSeries1.isEmpty();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate27);
        org.junit.Assert.assertNull(seriesChangeInfo31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year1 = org.jfree.data.time.Year.parseYear("November -1");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Cannot parse string.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        long long40 = timeSeries37.getMaximumItemAge();
        java.lang.String str41 = timeSeries37.getDescription();
        double double42 = timeSeries37.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        timeSeries44.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeries44.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent53 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean54 = timeSeries44.equals((java.lang.Object) seriesChangeEvent53);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        int int57 = day55.compareTo((java.lang.Object) (short) 100);
        java.lang.String str58 = day55.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries44.getDataItem((org.jfree.data.time.RegularTimePeriod) day55);
        timeSeries37.add(timeSeriesDataItem59);
        org.jfree.data.time.TimeSeries timeSeries61 = timeSeries29.addAndOrUpdate(timeSeries37);
        timeSeries61.fireSeriesChanged();
        boolean boolean63 = fixedMillisecond27.equals((java.lang.Object) timeSeries61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = fixedMillisecond27.previous();
        java.util.Calendar calendar65 = null;
        fixedMillisecond27.peg(calendar65);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = year68.previous();
        org.jfree.data.time.TimeSeries timeSeries70 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond27, (org.jfree.data.time.RegularTimePeriod) year68);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem72 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond27, (double) 1711995673321L);
        long long73 = fixedMillisecond27.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223372036854775807L + "'", long40 == 9223372036854775807L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1-April-2024" + "'", str58, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(timeSeries61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeSeries70);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1711995800237L + "'", long73 == 1711995800237L);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.setMaximumItemCount(2024);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        timeSeries6.add((org.jfree.data.time.RegularTimePeriod) day7, (double) (short) 0, false);
        java.util.Date date11 = day7.getStart();
        boolean boolean12 = timeSeries1.equals((java.lang.Object) date11);
        org.jfree.data.time.Month month13 = new org.jfree.data.time.Month(date11);
        java.util.TimeZone timeZone14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month15 = new org.jfree.data.time.Month(date11, timeZone14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        int int8 = day3.compareTo((java.lang.Object) 2);
        int int9 = day3.getYear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2024 + "'", int9 == 2024);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.addChangeListener(seriesChangeListener10);
        long long12 = timeSeries9.getMaximumItemAge();
        java.lang.String str13 = timeSeries9.getDescription();
        double double14 = timeSeries9.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        timeSeries16.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = timeSeries16.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent25 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean26 = timeSeries16.equals((java.lang.Object) seriesChangeEvent25);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        int int29 = day27.compareTo((java.lang.Object) (short) 100);
        java.lang.String str30 = day27.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = timeSeries16.getDataItem((org.jfree.data.time.RegularTimePeriod) day27);
        timeSeries9.add(timeSeriesDataItem31);
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries1.addAndOrUpdate(timeSeries9);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo34 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent35 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries9, seriesChangeInfo34);
        java.beans.PropertyChangeListener propertyChangeListener36 = null;
        timeSeries9.addPropertyChangeListener(propertyChangeListener36);
        timeSeries9.removeAgedItems((long) 9, false);
        org.jfree.data.time.TimeSeries timeSeries42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        timeSeries42.add((org.jfree.data.time.RegularTimePeriod) day43, (double) (short) 0, false);
        java.util.Date date47 = day43.getEnd();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem48 = timeSeries9.getDataItem((org.jfree.data.time.RegularTimePeriod) day43);
        timeSeriesDataItem48.setValue((java.lang.Number) Double.NaN);
        timeSeriesDataItem48.setValue((java.lang.Number) 1711995800237L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9223372036854775807L + "'", long12 == 9223372036854775807L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1-April-2024" + "'", str30, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem31);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem48);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.next();
        java.util.Date date2 = fixedMillisecond0.getTime();
        long long3 = fixedMillisecond0.getLastMillisecond();
        java.util.Date date4 = fixedMillisecond0.getTime();
        java.util.Calendar calendar5 = null;
        fixedMillisecond0.peg(calendar5);
        long long7 = fixedMillisecond0.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = fixedMillisecond0.next();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) regularTimePeriod8, "November -1", "Mon Apr 01 11:21:58 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Apr 01 11:23:20 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711995800891L + "'", long3 == 1711995800891L);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Apr 01 11:23:20 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711995800891L + "'", long7 == 1711995800891L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        java.lang.Number number34 = timeSeriesDataItem32.getValue();
        timeSeriesDataItem32.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries1.addOrUpdate(timeSeriesDataItem32);
        int int38 = timeSeries1.getItemCount();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        timeSeries41.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = timeSeries41.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent50 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean51 = timeSeries41.equals((java.lang.Object) seriesChangeEvent50);
        org.jfree.data.time.Day day52 = new org.jfree.data.time.Day();
        int int54 = day52.compareTo((java.lang.Object) (short) 100);
        java.lang.String str55 = day52.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem56 = timeSeries41.getDataItem((org.jfree.data.time.RegularTimePeriod) day52);
        java.lang.Object obj57 = null;
        int int58 = timeSeriesDataItem56.compareTo(obj57);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries1.addOrUpdate(timeSeriesDataItem56);
        boolean boolean61 = timeSeriesDataItem59.equals((java.lang.Object) 1711995731394L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 0.0d + "'", number34, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1-April-2024" + "'", str55, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        long long3 = month0.getLastMillisecond();
        long long4 = month0.getSerialIndex();
        org.jfree.data.time.Year year5 = month0.getYear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1711954800000L + "'", long1 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24292L + "'", long2 == 24292L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1714546799999L + "'", long3 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24292L + "'", long4 == 24292L);
        org.junit.Assert.assertNotNull(year5);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        long long24 = timeSeries21.getMaximumItemAge();
        java.lang.String str25 = timeSeries21.getDescription();
        double double26 = timeSeries21.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        timeSeries28.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = timeSeries28.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent37 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean38 = timeSeries28.equals((java.lang.Object) seriesChangeEvent37);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        int int41 = day39.compareTo((java.lang.Object) (short) 100);
        java.lang.String str42 = day39.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries28.getDataItem((org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries21.add(timeSeriesDataItem43);
        java.lang.Number number45 = timeSeriesDataItem43.getValue();
        java.lang.Number number46 = timeSeriesDataItem43.getValue();
        timeSeries19.add(timeSeriesDataItem43, false);
        java.util.List list49 = timeSeries19.data;
        org.jfree.data.time.TimeSeries timeSeries51 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day52 = new org.jfree.data.time.Day();
        timeSeries51.add((org.jfree.data.time.RegularTimePeriod) day52, (double) (short) 0, false);
        long long56 = day52.getFirstMillisecond();
        java.util.Date date57 = day52.getEnd();
        org.jfree.data.time.Month month58 = new org.jfree.data.time.Month();
        long long59 = month58.getLastMillisecond();
        org.jfree.data.time.Month month60 = new org.jfree.data.time.Month();
        int int61 = month58.compareTo((java.lang.Object) month60);
        java.lang.String str62 = month58.toString();
        long long63 = month58.getLastMillisecond();
        org.jfree.data.time.TimeSeries timeSeries64 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) day52, (org.jfree.data.time.RegularTimePeriod) month58);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1-April-2024" + "'", str42, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertEquals("'" + number45 + "' != '" + 0.0d + "'", number45, 0.0d);
        org.junit.Assert.assertEquals("'" + number46 + "' != '" + 0.0d + "'", number46, 0.0d);
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1711954800000L + "'", long56 == 1711954800000L);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1714546799999L + "'", long59 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "April 2024" + "'", str62, "April 2024");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1714546799999L + "'", long63 == 1714546799999L);
        org.junit.Assert.assertNotNull(timeSeries64);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = day2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = day2.previous();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Year year19 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        java.util.Date date26 = day22.getStart();
        org.jfree.data.time.SerialDate serialDate27 = day22.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo29);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo31 = seriesChangeEvent30.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo32 = null;
        seriesChangeEvent30.setSummary(seriesChangeInfo32);
        int int34 = day22.compareTo((java.lang.Object) seriesChangeEvent30);
        int int35 = year19.compareTo((java.lang.Object) seriesChangeEvent30);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        boolean boolean57 = year19.equals((java.lang.Object) month40);
        timeSeries1.setKey((java.lang.Comparable) year19);
        int int59 = year19.getYear();
        java.util.Calendar calendar60 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long61 = year19.getFirstMillisecond(calendar60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate27);
        org.junit.Assert.assertNull(seriesChangeInfo31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        java.lang.Class class9 = timeSeries1.getTimePeriodClass();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNull(class9);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 12);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.lang.Class<?> wildcardClass5 = timeSeries1.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        double double20 = timeSeries19.getMinY();
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener23 = null;
        timeSeries22.addChangeListener(seriesChangeListener23);
        long long25 = timeSeries22.getMaximumItemAge();
        java.lang.String str26 = timeSeries22.getDescription();
        double double27 = timeSeries22.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = timeSeries29.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent38 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean39 = timeSeries29.equals((java.lang.Object) seriesChangeEvent38);
        org.jfree.data.time.Day day40 = new org.jfree.data.time.Day();
        int int42 = day40.compareTo((java.lang.Object) (short) 100);
        java.lang.String str43 = day40.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries29.getDataItem((org.jfree.data.time.RegularTimePeriod) day40);
        timeSeries22.add(timeSeriesDataItem44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener48 = null;
        timeSeries47.addChangeListener(seriesChangeListener48);
        long long50 = timeSeries47.getMaximumItemAge();
        java.lang.String str51 = timeSeries47.getDescription();
        timeSeries47.fireSeriesChanged();
        timeSeries47.removeAgedItems(false);
        java.lang.String str55 = timeSeries47.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries22.addAndOrUpdate(timeSeries47);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener59 = null;
        timeSeries58.addChangeListener(seriesChangeListener59);
        org.jfree.data.time.Month month61 = new org.jfree.data.time.Month();
        long long62 = month61.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries64 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener65 = null;
        timeSeries64.removeChangeListener(seriesChangeListener65);
        org.jfree.data.time.TimeSeries timeSeries68 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day69 = new org.jfree.data.time.Day();
        timeSeries68.add((org.jfree.data.time.RegularTimePeriod) day69, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem74 = timeSeries64.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day69, (java.lang.Number) 10L);
        long long75 = day69.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries76 = timeSeries58.createCopy((org.jfree.data.time.RegularTimePeriod) month61, (org.jfree.data.time.RegularTimePeriod) day69);
        long long77 = month61.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = month61.next();
        org.jfree.data.time.Year year79 = month61.getYear();
        timeSeries56.add((org.jfree.data.time.RegularTimePeriod) month61, (java.lang.Number) 10, true);
        org.jfree.data.time.Day day83 = new org.jfree.data.time.Day();
        long long84 = day83.getSerialIndex();
        int int85 = month61.compareTo((java.lang.Object) long84);
        long long86 = month61.getSerialIndex();
        timeSeries19.setKey((java.lang.Comparable) month61);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries19.delete((int) '#', (-1), true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 9223372036854775807L + "'", long25 == 9223372036854775807L);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1-April-2024" + "'", str43, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 9223372036854775807L + "'", long50 == 9223372036854775807L);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Value" + "'", str55, "Value");
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1711954800000L + "'", long62 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1711997999999L + "'", long75 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 24292L + "'", long77 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(year79);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 45383L + "'", long84 == 45383L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 24292L + "'", long86 == 24292L);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.jfree.data.time.Year year2 = new org.jfree.data.time.Year((int) (short) -1);
        org.jfree.data.time.Month month3 = new org.jfree.data.time.Month(11, year2);
        org.jfree.data.time.Year year5 = new org.jfree.data.time.Year(1);
        int int6 = month3.compareTo((java.lang.Object) 1);
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        java.util.Date date21 = day17.getStart();
        org.jfree.data.time.SerialDate serialDate22 = day17.getSerialDate();
        java.lang.Number number23 = null;
        timeSeries8.update((org.jfree.data.time.RegularTimePeriod) day17, number23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = timeSeries26.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day31, (java.lang.Number) 10L);
        long long37 = day31.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries8.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day31, (java.lang.Number) (byte) 10);
        double double40 = timeSeries8.getMaxY();
        org.jfree.data.time.Day day41 = new org.jfree.data.time.Day();
        long long42 = day41.getSerialIndex();
        timeSeries8.delete((org.jfree.data.time.RegularTimePeriod) day41);
        timeSeries8.setMaximumItemCount(100);
        int int46 = month3.compareTo((java.lang.Object) timeSeries8);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries8.delete(6, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate22);
        org.junit.Assert.assertNull(timeSeriesDataItem36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711997999999L + "'", long37 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 45383L + "'", long42 == 45383L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getLastMillisecond();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        int int3 = month0.compareTo((java.lang.Object) month2);
        int int4 = month0.getYearValue();
        long long5 = month0.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = month0.previous();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = month0.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1714546799999L + "'", long1 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        long long2 = month0.getFirstMillisecond();
        long long3 = month0.getSerialIndex();
        long long4 = month0.getSerialIndex();
        long long5 = month0.getFirstMillisecond();
        long long6 = month0.getFirstMillisecond();
        int int8 = month0.compareTo((java.lang.Object) true);
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954800000L + "'", long2 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 24292L + "'", long3 == 24292L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24292L + "'", long4 == 24292L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711954800000L + "'", long6 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getLastMillisecond();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        int int3 = month0.compareTo((java.lang.Object) month2);
        int int4 = month0.getYearValue();
        long long5 = month0.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = month0.previous();
        int int7 = month0.getMonth();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem9 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month0, (double) 1711995683606L);
        java.lang.Class<?> wildcardClass10 = month0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1714546799999L + "'", long1 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.addChangeListener(seriesChangeListener9);
        boolean boolean11 = timeSeries1.getNotify();
        boolean boolean12 = timeSeries1.isEmpty();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        long long30 = day24.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) (byte) 10);
        java.util.Date date33 = day24.getEnd();
        java.util.Calendar calendar34 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long35 = day24.getFirstMillisecond(calendar34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711997999999L + "'", long30 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Mon Apr 01 23:59:59 PDT 2024");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        java.lang.Object obj9 = timeSeries1.clone();
        java.lang.String str10 = timeSeries1.getRangeDescription();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value" + "'", str10, "Value");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        long long25 = month6.getLastMillisecond();
        org.jfree.data.time.FixedMillisecond fixedMillisecond26 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = fixedMillisecond26.next();
        java.util.Date date28 = fixedMillisecond26.getTime();
        long long29 = fixedMillisecond26.getLastMillisecond();
        java.util.Date date30 = fixedMillisecond26.getTime();
        java.util.Calendar calendar31 = null;
        fixedMillisecond26.peg(calendar31);
        long long33 = fixedMillisecond26.getLastMillisecond();
        boolean boolean34 = month6.equals((java.lang.Object) fixedMillisecond26);
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener37 = null;
        timeSeries36.addChangeListener(seriesChangeListener37);
        long long39 = timeSeries36.getMaximumItemAge();
        java.lang.String str40 = timeSeries36.getDescription();
        timeSeries36.fireSeriesChanged();
        timeSeries36.removeAgedItems(false);
        java.lang.String str44 = timeSeries36.getRangeDescription();
        java.lang.Object obj45 = timeSeries36.clone();
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        timeSeries47.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        timeSeries55.add((org.jfree.data.time.RegularTimePeriod) day56, (double) (short) 0, false);
        java.util.Date date60 = day56.getStart();
        int int61 = timeSeries47.getIndex((org.jfree.data.time.RegularTimePeriod) day56);
        java.util.Date date62 = day56.getEnd();
        org.jfree.data.time.Day day63 = new org.jfree.data.time.Day(date62);
        timeSeries36.add((org.jfree.data.time.RegularTimePeriod) day63, (double) (short) 10);
        boolean boolean66 = fixedMillisecond26.equals((java.lang.Object) (short) 10);
        java.util.Date date67 = fixedMillisecond26.getEnd();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1714546799999L + "'", long25 == 1714546799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Mon Apr 01 11:23:24 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711995804279L + "'", long29 == 1711995804279L);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Apr 01 11:23:24 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711995804279L + "'", long33 == 1711995804279L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9223372036854775807L + "'", long39 == 9223372036854775807L);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Value" + "'", str44, "Value");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(date67);
// flaky:         org.junit.Assert.assertEquals(date67.toString(), "Mon Apr 01 11:23:24 PDT 2024");
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.util.Date date16 = day10.getEnd();
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day(date16);
        java.util.TimeZone timeZone18 = null;
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month20 = new org.jfree.data.time.Month(date16, timeZone18, locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Apr 01 23:59:59 PDT 2024");
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        java.lang.Number number34 = timeSeriesDataItem32.getValue();
        timeSeriesDataItem32.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries1.addOrUpdate(timeSeriesDataItem32);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries1.getNextTimePeriod();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 0.0d + "'", number34, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond((long) 'a');
        java.util.Calendar calendar2 = null;
        long long3 = fixedMillisecond1.getMiddleMillisecond(calendar2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year((int) (byte) 1);
        java.lang.String str2 = year1.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year1.next();
        long long4 = year1.getFirstMillisecond();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1" + "'", str2, "1");
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62135740800000L) + "'", long4 == (-62135740800000L));
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        java.util.Calendar calendar25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = month6.getLastMillisecond(calendar25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(3, (int) '4');
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) '4');
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        long long24 = timeSeries21.getMaximumItemAge();
        java.lang.String str25 = timeSeries21.getDescription();
        double double26 = timeSeries21.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        timeSeries28.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = timeSeries28.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent37 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean38 = timeSeries28.equals((java.lang.Object) seriesChangeEvent37);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        int int41 = day39.compareTo((java.lang.Object) (short) 100);
        java.lang.String str42 = day39.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries28.getDataItem((org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries21.add(timeSeriesDataItem43);
        java.lang.Number number45 = timeSeriesDataItem43.getValue();
        java.lang.Number number46 = timeSeriesDataItem43.getValue();
        timeSeries19.add(timeSeriesDataItem43, false);
        int int49 = timeSeries19.getMaximumItemCount();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo50 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent51 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries19, seriesChangeInfo50);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1-April-2024" + "'", str42, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertEquals("'" + number45 + "' != '" + 0.0d + "'", number45, 0.0d);
        org.junit.Assert.assertEquals("'" + number46 + "' != '" + 0.0d + "'", number46, 0.0d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2147483647 + "'", int49 == 2147483647);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.Object obj4 = timeSeries1.clone();
        org.junit.Assert.assertNotNull(obj4);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = day12.previous();
        long long18 = day12.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711954800000L + "'", long18 == 1711954800000L);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries5.addChangeListener(seriesChangeListener6);
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.removeChangeListener(seriesChangeListener12);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries11.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day16, (java.lang.Number) 10L);
        long long22 = day16.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries23 = timeSeries5.createCopy((org.jfree.data.time.RegularTimePeriod) month8, (org.jfree.data.time.RegularTimePeriod) day16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = month8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = month8.next();
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) month8);
        java.lang.Object obj27 = timeSeries1.clone();
        timeSeries1.setDomainDescription("31-March-2024");
        timeSeries1.removeAgedItems(true);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.addChangeListener(seriesChangeListener34);
        long long36 = timeSeries33.getMaximumItemAge();
        java.lang.String str37 = timeSeries33.getDescription();
        double double38 = timeSeries33.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day41 = new org.jfree.data.time.Day();
        timeSeries40.add((org.jfree.data.time.RegularTimePeriod) day41, (double) (short) 0, false);
        timeSeries40.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = timeSeries40.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent49 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean50 = timeSeries40.equals((java.lang.Object) seriesChangeEvent49);
        org.jfree.data.time.Day day51 = new org.jfree.data.time.Day();
        int int53 = day51.compareTo((java.lang.Object) (short) 100);
        java.lang.String str54 = day51.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries40.getDataItem((org.jfree.data.time.RegularTimePeriod) day51);
        timeSeries33.add(timeSeriesDataItem55);
        timeSeries33.setDescription("");
        timeSeries33.removeAgedItems(true);
        org.jfree.data.time.TimeSeries timeSeries61 = timeSeries1.addAndOrUpdate(timeSeries33);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954800000L + "'", long9 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711997999999L + "'", long22 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 9223372036854775807L + "'", long36 == 9223372036854775807L);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1-April-2024" + "'", str54, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries61);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond(2023L);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        long long27 = timeSeries1.getMaximumItemAge();
        java.lang.Object obj28 = timeSeries1.clone();
        timeSeries1.setDomainDescription("");
        int int31 = timeSeries1.getMaximumItemCount();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.delete(11, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 9223372036854775807L + "'", long27 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.next();
        java.util.Date date2 = fixedMillisecond0.getTime();
        org.jfree.data.time.FixedMillisecond fixedMillisecond3 = new org.jfree.data.time.FixedMillisecond(date2);
        long long4 = fixedMillisecond3.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Apr 01 11:23:28 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1711995808488L + "'", long4 == 1711995808488L);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = month4.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = month4.next();
        long long22 = month4.getFirstMillisecond();
        long long23 = month4.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = month4.previous();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711954800000L + "'", long22 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 24292L + "'", long23 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.clear();
        java.lang.Object obj4 = timeSeries1.clone();
        java.lang.Object obj5 = timeSeries1.clone();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.delete(2, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(obj5);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.next();
        java.util.Date date2 = fixedMillisecond0.getTime();
        long long3 = fixedMillisecond0.getLastMillisecond();
        java.util.Date date4 = fixedMillisecond0.getTime();
        java.util.Date date5 = fixedMillisecond0.getStart();
        java.util.TimeZone timeZone6 = null;
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year8 = new org.jfree.data.time.Year(date5, timeZone6, locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Apr 01 11:23:28 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711995808650L + "'", long3 == 1711995808650L);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Apr 01 11:23:28 PDT 2024");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Apr 01 11:23:28 PDT 2024");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) Double.NaN, "", "Value");
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        long long7 = day2.getFirstMillisecond();
        java.lang.String str8 = day2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = day2.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = day2.next();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1-April-2024" + "'", str8, "1-April-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.jfree.data.time.Year year2 = new org.jfree.data.time.Year((int) (byte) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        java.lang.String str4 = year2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month5 = new org.jfree.data.time.Month(2024, year2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Month outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.util.List list5 = timeSeries1.getItems();
        java.util.List list6 = timeSeries1.getItems();
        java.util.Collection collection7 = timeSeries1.getTimePeriods();
        timeSeries1.setDomainDescription("org.jfree.data.time.TimePeriodFormatException: ");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number11 = timeSeries1.getValue((-9999));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(collection7);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        long long7 = day2.getFirstMillisecond();
        java.lang.String str8 = day2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = day2.previous();
        int int10 = day2.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = day2.next();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1-April-2024" + "'", str8, "1-April-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2024 + "'", int10 == 2024);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        timeSeries1.setKey((java.lang.Comparable) "hi!");
        boolean boolean18 = timeSeries1.isEmpty();
        java.util.List list19 = timeSeries1.getItems();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(list19);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        long long2 = month0.getFirstMillisecond();
        long long3 = month0.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = month0.previous();
        java.lang.String str5 = month0.toString();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954800000L + "'", long2 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 24292L + "'", long3 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "April 2024" + "'", str5, "April 2024");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        long long24 = timeSeries21.getMaximumItemAge();
        java.lang.String str25 = timeSeries21.getDescription();
        double double26 = timeSeries21.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        timeSeries28.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = timeSeries28.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent37 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean38 = timeSeries28.equals((java.lang.Object) seriesChangeEvent37);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        int int41 = day39.compareTo((java.lang.Object) (short) 100);
        java.lang.String str42 = day39.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries28.getDataItem((org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries21.add(timeSeriesDataItem43);
        java.lang.Number number45 = timeSeriesDataItem43.getValue();
        java.lang.Number number46 = timeSeriesDataItem43.getValue();
        timeSeries19.add(timeSeriesDataItem43, false);
        timeSeriesDataItem43.setSelected(false);
        org.jfree.data.time.TimeSeries timeSeries52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        timeSeries52.add((org.jfree.data.time.RegularTimePeriod) day53, (double) (short) 0, false);
        java.lang.String str57 = day53.toString();
        int int58 = timeSeriesDataItem43.compareTo((java.lang.Object) str57);
        java.lang.Object obj59 = timeSeriesDataItem43.clone();
        java.lang.Object obj60 = null;
        boolean boolean61 = timeSeriesDataItem43.equals(obj60);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1-April-2024" + "'", str42, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertEquals("'" + number45 + "' != '" + 0.0d + "'", number45, 0.0d);
        org.junit.Assert.assertEquals("'" + number46 + "' != '" + 0.0d + "'", number46, 0.0d);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1-April-2024" + "'", str57, "1-April-2024");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        timeSeries7.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = timeSeries7.getNextTimePeriod();
        timeSeries1.add(regularTimePeriod14, (java.lang.Number) 1.0f, true);
        java.lang.Object obj18 = null;
        boolean boolean19 = timeSeries1.equals(obj18);
        timeSeries1.removeAgedItems(true);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.delete(0, 3, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        timeSeries1.setRangeDescription("Value");
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        int int13 = day11.compareTo((java.lang.Object) (short) 100);
        java.util.Date date14 = day11.getEnd();
        long long15 = day11.getLastMillisecond();
        int int16 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day11);
        java.lang.String str17 = timeSeries1.getDescription();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1712041199999L + "'", long15 == 1712041199999L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        long long25 = month6.getLastMillisecond();
        org.jfree.data.time.FixedMillisecond fixedMillisecond26 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = fixedMillisecond26.next();
        java.util.Date date28 = fixedMillisecond26.getTime();
        long long29 = fixedMillisecond26.getLastMillisecond();
        java.util.Date date30 = fixedMillisecond26.getTime();
        java.util.Calendar calendar31 = null;
        fixedMillisecond26.peg(calendar31);
        long long33 = fixedMillisecond26.getLastMillisecond();
        boolean boolean34 = month6.equals((java.lang.Object) fixedMillisecond26);
        java.util.Date date35 = fixedMillisecond26.getTime();
        long long36 = fixedMillisecond26.getFirstMillisecond();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1714546799999L + "'", long25 == 1714546799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Mon Apr 01 11:23:30 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711995810272L + "'", long29 == 1711995810272L);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Apr 01 11:23:30 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711995810272L + "'", long33 == 1711995810272L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Mon Apr 01 11:23:30 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711995810272L + "'", long36 == 1711995810272L);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        long long40 = timeSeries37.getMaximumItemAge();
        java.lang.String str41 = timeSeries37.getDescription();
        double double42 = timeSeries37.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        timeSeries44.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeries44.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent53 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean54 = timeSeries44.equals((java.lang.Object) seriesChangeEvent53);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        int int57 = day55.compareTo((java.lang.Object) (short) 100);
        java.lang.String str58 = day55.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries44.getDataItem((org.jfree.data.time.RegularTimePeriod) day55);
        timeSeries37.add(timeSeriesDataItem59);
        org.jfree.data.time.TimeSeries timeSeries61 = timeSeries29.addAndOrUpdate(timeSeries37);
        timeSeries61.fireSeriesChanged();
        boolean boolean63 = fixedMillisecond27.equals((java.lang.Object) timeSeries61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = fixedMillisecond27.previous();
        java.util.Calendar calendar65 = null;
        fixedMillisecond27.peg(calendar65);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = year68.previous();
        org.jfree.data.time.TimeSeries timeSeries70 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond27, (org.jfree.data.time.RegularTimePeriod) year68);
        java.lang.Object obj71 = timeSeries70.clone();
        java.util.Collection collection72 = timeSeries70.getTimePeriods();
        java.lang.Class class73 = timeSeries70.timePeriodClass;
        org.jfree.data.time.TimeSeries timeSeries75 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean76 = timeSeries75.isEmpty();
        timeSeries75.setMaximumItemCount(2024);
        org.jfree.data.time.TimeSeries timeSeries80 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day81 = new org.jfree.data.time.Day();
        timeSeries80.add((org.jfree.data.time.RegularTimePeriod) day81, (double) (short) 0, false);
        java.util.Date date85 = day81.getStart();
        boolean boolean86 = timeSeries75.equals((java.lang.Object) date85);
        org.jfree.data.time.Month month87 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year88 = month87.getYear();
        long long89 = year88.getLastMillisecond();
        timeSeries75.add((org.jfree.data.time.RegularTimePeriod) year88, (java.lang.Number) 6);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem92 = timeSeries70.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year88);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = year88.previous();
        int int94 = year88.getYear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223372036854775807L + "'", long40 == 9223372036854775807L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1-April-2024" + "'", str58, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(timeSeries61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeSeries70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(year88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1735718399999L + "'", long89 == 1735718399999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem92);
        org.junit.Assert.assertNotNull(regularTimePeriod93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2024 + "'", int94 == 2024);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries5.addChangeListener(seriesChangeListener6);
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.removeChangeListener(seriesChangeListener12);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries11.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day16, (java.lang.Number) 10L);
        long long22 = day16.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries23 = timeSeries5.createCopy((org.jfree.data.time.RegularTimePeriod) month8, (org.jfree.data.time.RegularTimePeriod) day16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = month8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = month8.next();
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) month8);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        long long31 = timeSeries28.getMaximumItemAge();
        java.lang.String str32 = timeSeries28.getDescription();
        double double33 = timeSeries28.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        timeSeries35.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = timeSeries35.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent44 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean45 = timeSeries35.equals((java.lang.Object) seriesChangeEvent44);
        org.jfree.data.time.Day day46 = new org.jfree.data.time.Day();
        int int48 = day46.compareTo((java.lang.Object) (short) 100);
        java.lang.String str49 = day46.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries35.getDataItem((org.jfree.data.time.RegularTimePeriod) day46);
        timeSeries28.add(timeSeriesDataItem50);
        org.jfree.data.time.TimeSeries timeSeries53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener54 = null;
        timeSeries53.addChangeListener(seriesChangeListener54);
        long long56 = timeSeries53.getMaximumItemAge();
        java.lang.String str57 = timeSeries53.getDescription();
        timeSeries53.fireSeriesChanged();
        timeSeries53.removeAgedItems(false);
        java.lang.String str61 = timeSeries53.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries62 = timeSeries28.addAndOrUpdate(timeSeries53);
        boolean boolean63 = timeSeries1.equals((java.lang.Object) timeSeries53);
        org.jfree.data.time.TimeSeries timeSeries65 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener66 = null;
        timeSeries65.addChangeListener(seriesChangeListener66);
        org.jfree.data.time.Month month68 = new org.jfree.data.time.Month();
        long long69 = month68.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries71 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener72 = null;
        timeSeries71.removeChangeListener(seriesChangeListener72);
        org.jfree.data.time.TimeSeries timeSeries75 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day76 = new org.jfree.data.time.Day();
        timeSeries75.add((org.jfree.data.time.RegularTimePeriod) day76, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem81 = timeSeries71.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day76, (java.lang.Number) 10L);
        long long82 = day76.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries83 = timeSeries65.createCopy((org.jfree.data.time.RegularTimePeriod) month68, (org.jfree.data.time.RegularTimePeriod) day76);
        long long84 = month68.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod85 = month68.next();
        org.jfree.data.time.Year year86 = month68.getYear();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries53.update((org.jfree.data.time.RegularTimePeriod) month68, (java.lang.Number) 24292L);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: There is no existing value for the specified 'period'.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954800000L + "'", long9 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711997999999L + "'", long22 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 9223372036854775807L + "'", long31 == 9223372036854775807L);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1-April-2024" + "'", str49, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 9223372036854775807L + "'", long56 == 9223372036854775807L);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Value" + "'", str61, "Value");
        org.junit.Assert.assertNotNull(timeSeries62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1711954800000L + "'", long69 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1711997999999L + "'", long82 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 24292L + "'", long84 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod85);
        org.junit.Assert.assertNotNull(year86);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (byte) 1);
        timeSeries1.setRangeDescription("");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        long long2 = month0.getFirstMillisecond();
        long long3 = month0.getSerialIndex();
        long long4 = month0.getSerialIndex();
        long long5 = month0.getFirstMillisecond();
        java.util.Date date6 = month0.getEnd();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo7 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent8 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) month0, seriesChangeInfo7);
        org.jfree.data.time.Year year9 = month0.getYear();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954800000L + "'", long2 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 24292L + "'", long3 == 24292L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24292L + "'", long4 == 24292L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Apr 30 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(year9);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = year1.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = year1.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = year1.previous();
        int int27 = year1.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = year1.next();
        java.util.Calendar calendar29 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long30 = year1.getFirstMillisecond(calendar29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2024 + "'", int27 == 2024);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        java.lang.Number number34 = timeSeriesDataItem32.getValue();
        timeSeriesDataItem32.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries1.addOrUpdate(timeSeriesDataItem32);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = timeSeries1.getNextTimePeriod();
        double double39 = timeSeries1.getMinY();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 0.0d + "'", number34, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        long long24 = timeSeries21.getMaximumItemAge();
        java.lang.String str25 = timeSeries21.getDescription();
        double double26 = timeSeries21.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        timeSeries28.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = timeSeries28.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent37 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean38 = timeSeries28.equals((java.lang.Object) seriesChangeEvent37);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        int int41 = day39.compareTo((java.lang.Object) (short) 100);
        java.lang.String str42 = day39.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries28.getDataItem((org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries21.add(timeSeriesDataItem43);
        java.lang.Number number45 = timeSeriesDataItem43.getValue();
        java.lang.Number number46 = timeSeriesDataItem43.getValue();
        timeSeries19.add(timeSeriesDataItem43, false);
        timeSeriesDataItem43.setSelected(false);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeriesDataItem43.getPeriod();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = regularTimePeriod51.next();
        java.util.Calendar calendar53 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long54 = regularTimePeriod52.getMiddleMillisecond(calendar53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1-April-2024" + "'", str42, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertEquals("'" + number45 + "' != '" + 0.0d + "'", number45, 0.0d);
        org.junit.Assert.assertEquals("'" + number46 + "' != '" + 0.0d + "'", number46, 0.0d);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.setMaximumItemCount(2024);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        timeSeries6.add((org.jfree.data.time.RegularTimePeriod) day7, (double) (short) 0, false);
        java.util.Date date11 = day7.getStart();
        boolean boolean12 = timeSeries1.equals((java.lang.Object) date11);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day(date11);
        org.jfree.data.time.Month month14 = new org.jfree.data.time.Month(date11);
        org.jfree.data.time.Year year15 = new org.jfree.data.time.Year(date11);
        java.util.TimeZone timeZone16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month17 = new org.jfree.data.time.Month(date11, timeZone16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Day day3 = new org.jfree.data.time.Day(0, 8, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The 'year' argument must be in range 1900 to 9999.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries1.removeChangeListener(seriesChangeListener22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        long long25 = day24.getSerialIndex();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 1.0f, true);
        long long29 = day24.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 45383L + "'", long25 == 45383L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711954800000L + "'", long29 == 1711954800000L);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener3 = null;
        timeSeries1.addChangeListener(seriesChangeListener3);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.removeChangeListener(seriesChangeListener13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 10L);
        long long23 = day17.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries24 = timeSeries6.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day17);
        timeSeries6.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries6.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries1.addAndOrUpdate(timeSeries6);
        java.beans.PropertyChangeListener propertyChangeListener30 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.addChangeListener(seriesChangeListener34);
        org.jfree.data.time.Month month36 = new org.jfree.data.time.Month();
        long long37 = month36.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries39.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem49 = timeSeries39.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day44, (java.lang.Number) 10L);
        long long50 = day44.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries33.createCopy((org.jfree.data.time.RegularTimePeriod) month36, (org.jfree.data.time.RegularTimePeriod) day44);
        timeSeries33.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener54 = null;
        timeSeries33.removeChangeListener(seriesChangeListener54);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        long long57 = day56.getSerialIndex();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day56, (java.lang.Number) 1.0f, true);
        boolean boolean61 = timeSeries1.equals((java.lang.Object) true);
        org.jfree.data.time.TimeSeries timeSeries63 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day64 = new org.jfree.data.time.Day();
        timeSeries63.add((org.jfree.data.time.RegularTimePeriod) day64, (double) (short) 0, false);
        timeSeries63.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = timeSeries63.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent72 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean73 = timeSeries63.equals((java.lang.Object) seriesChangeEvent72);
        org.jfree.data.time.Day day74 = new org.jfree.data.time.Day();
        int int76 = day74.compareTo((java.lang.Object) (short) 100);
        java.lang.String str77 = day74.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem78 = timeSeries63.getDataItem((org.jfree.data.time.RegularTimePeriod) day74);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = day74.previous();
        org.jfree.data.time.TimeSeries timeSeries81 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day82 = new org.jfree.data.time.Day();
        timeSeries81.add((org.jfree.data.time.RegularTimePeriod) day82, (double) (short) 0, false);
        java.util.Date date86 = day82.getStart();
        org.jfree.data.time.Year year87 = new org.jfree.data.time.Year(date86);
        boolean boolean88 = day74.equals((java.lang.Object) year87);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day74, (java.lang.Number) 45383L);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: There is no existing value for the specified 'period'.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711954800000L + "'", long10 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711997999999L + "'", long23 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries24);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711954800000L + "'", long37 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711997999999L + "'", long50 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 45383L + "'", long57 == 45383L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1-April-2024" + "'", str77, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem78);
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod2 = year1.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year1.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = year1.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = year1.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem7 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) year1, (java.lang.Number) 1711995746576L);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        long long15 = day10.getFirstMillisecond();
        java.util.Date date16 = day10.getStart();
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day(date16);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day(date16);
        boolean boolean19 = timeSeriesDataItem7.equals((java.lang.Object) day18);
        org.junit.Assert.assertNotNull(regularTimePeriod2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1711954800000L + "'", long15 == 1711954800000L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        int int7 = day3.getDayOfMonth();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException1 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException3 = new org.jfree.data.time.TimePeriodFormatException("");
        java.lang.Throwable[] throwableArray4 = timePeriodFormatException3.getSuppressed();
        timePeriodFormatException1.addSuppressed((java.lang.Throwable) timePeriodFormatException3);
        java.lang.Throwable[] throwableArray6 = timePeriodFormatException1.getSuppressed();
        java.lang.Throwable[] throwableArray7 = timePeriodFormatException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        timeSeries2.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        org.jfree.data.time.TimeSeries timeSeries34 = timeSeries2.addAndOrUpdate(timeSeries10);
        timeSeries34.fireSeriesChanged();
        boolean boolean36 = fixedMillisecond0.equals((java.lang.Object) timeSeries34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = fixedMillisecond0.previous();
        java.util.Calendar calendar38 = null;
        fixedMillisecond0.peg(calendar38);
        long long40 = fixedMillisecond0.getFirstMillisecond();
        long long41 = fixedMillisecond0.getMiddleMillisecond();
        java.util.Calendar calendar42 = null;
        long long43 = fixedMillisecond0.getFirstMillisecond(calendar42);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(timeSeries34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1711995811910L + "'", long40 == 1711995811910L);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711995811910L + "'", long41 == 1711995811910L);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1711995811910L + "'", long43 == 1711995811910L);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        long long1 = day0.getSerialIndex();
        long long2 = day0.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = day0.previous();
        long long4 = day0.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 45383L + "'", long1 == 45383L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1712041199999L + "'", long2 == 1712041199999L);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 45383L + "'", long4 == 45383L);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        long long30 = day24.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) (byte) 10);
        double double33 = timeSeries1.getMaxY();
        java.lang.Object obj34 = timeSeries1.clone();
        boolean boolean35 = timeSeries1.getNotify();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711997999999L + "'", long30 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.util.List list5 = timeSeries1.getItems();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list8 = timeSeries7.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries7.addChangeListener(seriesChangeListener9);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.addChangeListener(seriesChangeListener13);
        org.jfree.data.time.Month month15 = new org.jfree.data.time.Month();
        long long16 = month15.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.removeChangeListener(seriesChangeListener19);
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries18.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day23, (java.lang.Number) 10L);
        long long29 = day23.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries30 = timeSeries12.createCopy((org.jfree.data.time.RegularTimePeriod) month15, (org.jfree.data.time.RegularTimePeriod) day23);
        timeSeries12.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries12.removeChangeListener(seriesChangeListener33);
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries7.addAndOrUpdate(timeSeries12);
        org.jfree.data.time.TimeSeries timeSeries36 = timeSeries1.addAndOrUpdate(timeSeries7);
        int int37 = timeSeries1.getMaximumItemCount();
        long long38 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number40 = timeSeries1.getValue(regularTimePeriod39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'period' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711954800000L + "'", long16 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711997999999L + "'", long29 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries30);
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertNotNull(timeSeries36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 9223372036854775807L + "'", long38 == 9223372036854775807L);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener24 = null;
        timeSeries23.addChangeListener(seriesChangeListener24);
        long long26 = timeSeries23.getMaximumItemAge();
        java.lang.String str27 = timeSeries23.getDescription();
        double double28 = timeSeries23.getMaxY();
        timeSeries23.setDescription("hi!");
        java.util.List list31 = timeSeries23.data;
        timeSeries1.data = list31;
        java.lang.Comparable comparable33 = timeSeries1.getKey();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 9223372036854775807L + "'", long26 == 9223372036854775807L);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertEquals("'" + comparable33 + "' != '" + 100L + "'", comparable33, 100L);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month1 = org.jfree.data.time.Month.parseMonth("2");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 5");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries1.removeChangeListener(seriesChangeListener22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        long long25 = day24.getSerialIndex();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 1.0f, true);
        long long29 = day24.getLastMillisecond();
        java.util.Date date30 = day24.getStart();
        java.util.TimeZone timeZone31 = null;
        java.util.Locale locale32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month33 = new org.jfree.data.time.Month(date30, timeZone31, locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 45383L + "'", long25 == 45383L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1712041199999L + "'", long29 == 1712041199999L);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.setMaximumItemCount(2024);
        org.jfree.data.time.Month month7 = new org.jfree.data.time.Month(3, (int) '4');
        java.lang.Number number8 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) month7);
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = month7.getLastMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(number8);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener24 = null;
        timeSeries23.addChangeListener(seriesChangeListener24);
        long long26 = timeSeries23.getMaximumItemAge();
        java.lang.String str27 = timeSeries23.getDescription();
        double double28 = timeSeries23.getMaxY();
        timeSeries23.setDescription("hi!");
        java.util.List list31 = timeSeries23.data;
        timeSeries1.data = list31;
        java.util.Collection collection33 = timeSeries1.getTimePeriods();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 9223372036854775807L + "'", long26 == 9223372036854775807L);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertNotNull(collection33);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener3 = null;
        timeSeries1.addChangeListener(seriesChangeListener3);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.removeChangeListener(seriesChangeListener13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 10L);
        long long23 = day17.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries24 = timeSeries6.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day17);
        timeSeries6.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries6.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries1.addAndOrUpdate(timeSeries6);
        java.lang.Object obj30 = timeSeries29.clone();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711954800000L + "'", long10 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711997999999L + "'", long23 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries24);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(11, 8);
        java.util.Calendar calendar3 = null;
        // The following exception was thrown during execution in test generation
        try {
            month2.peg(calendar3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        timeSeries2.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        org.jfree.data.time.TimeSeries timeSeries34 = timeSeries2.addAndOrUpdate(timeSeries10);
        timeSeries34.fireSeriesChanged();
        boolean boolean36 = fixedMillisecond0.equals((java.lang.Object) timeSeries34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = fixedMillisecond0.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = fixedMillisecond0.previous();
        java.util.Date date39 = fixedMillisecond0.getEnd();
        org.jfree.data.time.FixedMillisecond fixedMillisecond40 = new org.jfree.data.time.FixedMillisecond(date39);
        java.util.Calendar calendar41 = null;
        fixedMillisecond40.peg(calendar41);
        java.util.Calendar calendar43 = null;
        long long44 = fixedMillisecond40.getLastMillisecond(calendar43);
        java.util.Calendar calendar45 = null;
        fixedMillisecond40.peg(calendar45);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(timeSeries34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Mon Apr 01 11:23:32 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1711995812954L + "'", long44 == 1711995812954L);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries1.removeChangeListener(seriesChangeListener22);
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        timeSeries25.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = timeSeries25.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent34 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean35 = timeSeries25.equals((java.lang.Object) seriesChangeEvent34);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        int int38 = day36.compareTo((java.lang.Object) (short) 100);
        java.lang.String str39 = day36.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries25.getDataItem((org.jfree.data.time.RegularTimePeriod) day36);
        timeSeries1.add(timeSeriesDataItem40);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries1.getDataItem((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1-April-2024" + "'", str39, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries5.addChangeListener(seriesChangeListener6);
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.removeChangeListener(seriesChangeListener12);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries11.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day16, (java.lang.Number) 10L);
        long long22 = day16.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries23 = timeSeries5.createCopy((org.jfree.data.time.RegularTimePeriod) month8, (org.jfree.data.time.RegularTimePeriod) day16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = month8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = month8.next();
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) month8);
        java.lang.Object obj27 = timeSeries1.clone();
        timeSeries1.setDomainDescription("31-March-2024");
        java.lang.Object obj30 = timeSeries1.clone();
        timeSeries1.removeAgedItems(false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954800000L + "'", long9 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711997999999L + "'", long22 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries5.addChangeListener(seriesChangeListener6);
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.removeChangeListener(seriesChangeListener12);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries11.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day16, (java.lang.Number) 10L);
        long long22 = day16.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries23 = timeSeries5.createCopy((org.jfree.data.time.RegularTimePeriod) month8, (org.jfree.data.time.RegularTimePeriod) day16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = month8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = month8.next();
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) month8);
        java.lang.Object obj27 = timeSeries1.clone();
        timeSeries1.setDomainDescription("31-March-2024");
        java.lang.String str30 = timeSeries1.getDescription();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954800000L + "'", long9 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711997999999L + "'", long22 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        double double20 = timeSeries19.getMinY();
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener23 = null;
        timeSeries22.addChangeListener(seriesChangeListener23);
        long long25 = timeSeries22.getMaximumItemAge();
        java.lang.String str26 = timeSeries22.getDescription();
        double double27 = timeSeries22.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = timeSeries29.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent38 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean39 = timeSeries29.equals((java.lang.Object) seriesChangeEvent38);
        org.jfree.data.time.Day day40 = new org.jfree.data.time.Day();
        int int42 = day40.compareTo((java.lang.Object) (short) 100);
        java.lang.String str43 = day40.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries29.getDataItem((org.jfree.data.time.RegularTimePeriod) day40);
        timeSeries22.add(timeSeriesDataItem44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener48 = null;
        timeSeries47.addChangeListener(seriesChangeListener48);
        long long50 = timeSeries47.getMaximumItemAge();
        java.lang.String str51 = timeSeries47.getDescription();
        timeSeries47.fireSeriesChanged();
        timeSeries47.removeAgedItems(false);
        java.lang.String str55 = timeSeries47.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries22.addAndOrUpdate(timeSeries47);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener59 = null;
        timeSeries58.addChangeListener(seriesChangeListener59);
        org.jfree.data.time.Month month61 = new org.jfree.data.time.Month();
        long long62 = month61.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries64 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener65 = null;
        timeSeries64.removeChangeListener(seriesChangeListener65);
        org.jfree.data.time.TimeSeries timeSeries68 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day69 = new org.jfree.data.time.Day();
        timeSeries68.add((org.jfree.data.time.RegularTimePeriod) day69, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem74 = timeSeries64.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day69, (java.lang.Number) 10L);
        long long75 = day69.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries76 = timeSeries58.createCopy((org.jfree.data.time.RegularTimePeriod) month61, (org.jfree.data.time.RegularTimePeriod) day69);
        long long77 = month61.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = month61.next();
        org.jfree.data.time.Year year79 = month61.getYear();
        timeSeries56.add((org.jfree.data.time.RegularTimePeriod) month61, (java.lang.Number) 10, true);
        org.jfree.data.time.Day day83 = new org.jfree.data.time.Day();
        long long84 = day83.getSerialIndex();
        int int85 = month61.compareTo((java.lang.Object) long84);
        long long86 = month61.getSerialIndex();
        timeSeries19.setKey((java.lang.Comparable) month61);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem89 = timeSeries19.getRawDataItem((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 9223372036854775807L + "'", long25 == 9223372036854775807L);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1-April-2024" + "'", str43, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 9223372036854775807L + "'", long50 == 9223372036854775807L);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Value" + "'", str55, "Value");
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1711954800000L + "'", long62 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1711997999999L + "'", long75 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 24292L + "'", long77 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertNotNull(year79);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 45383L + "'", long84 == 45383L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 24292L + "'", long86 == 24292L);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getLastMillisecond();
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month();
        int int21 = month18.compareTo((java.lang.Object) month20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list24 = timeSeries23.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener25 = null;
        timeSeries23.addChangeListener(seriesChangeListener25);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        org.jfree.data.time.Month month31 = new org.jfree.data.time.Month();
        long long32 = month31.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.removeChangeListener(seriesChangeListener35);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries34.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day39, (java.lang.Number) 10L);
        long long45 = day39.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries46 = timeSeries28.createCopy((org.jfree.data.time.RegularTimePeriod) month31, (org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries28.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries28.removeChangeListener(seriesChangeListener49);
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries23.addAndOrUpdate(timeSeries28);
        int int52 = month18.compareTo((java.lang.Object) timeSeries28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = month18.next();
        org.jfree.data.time.FixedMillisecond fixedMillisecond55 = new org.jfree.data.time.FixedMillisecond((long) ' ');
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy(regularTimePeriod53, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond55);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = fixedMillisecond55.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = fixedMillisecond55.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = fixedMillisecond55.next();
        java.util.Date date60 = fixedMillisecond55.getTime();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1714546799999L + "'", long19 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711954800000L + "'", long32 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711997999999L + "'", long45 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries46);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 16:00:00 PST 1969");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.jfree.data.time.Year year0 = new org.jfree.data.time.Year();
        int int1 = year0.getYear();
        long long2 = year0.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2024 + "'", int1 == 2024);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1735718399999L + "'", long2 == 1735718399999L);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 2);
        int int17 = timeSeriesDataItem15.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) int17, "Value", "");
        timeSeries20.setDescription("1");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        int int6 = day2.getDayOfMonth();
        int int7 = day2.getMonth();
        java.util.Date date8 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond9 = new org.jfree.data.time.FixedMillisecond(date8);
        java.util.TimeZone timeZone10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year11 = new org.jfree.data.time.Year(date8, timeZone10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.Year year7 = new org.jfree.data.time.Year(date6);
        org.jfree.data.time.Year year8 = new org.jfree.data.time.Year(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = year8.previous();
        java.lang.Class<?> wildcardClass10 = regularTimePeriod9.getClass();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        long long29 = timeSeries26.getMaximumItemAge();
        java.lang.String str30 = timeSeries26.getDescription();
        timeSeries26.fireSeriesChanged();
        timeSeries26.removeAgedItems(false);
        java.lang.String str34 = timeSeries26.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries1.addAndOrUpdate(timeSeries26);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = month40.next();
        org.jfree.data.time.Year year58 = month40.getYear();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) month40, (java.lang.Number) 10, true);
        java.lang.Object obj62 = timeSeries35.clone();
        org.jfree.data.time.Month month63 = new org.jfree.data.time.Month();
        long long64 = month63.getFirstMillisecond();
        long long65 = month63.getSerialIndex();
        java.lang.Object obj66 = null;
        boolean boolean67 = month63.equals(obj66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = month63.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = timeSeries35.getDataItem((org.jfree.data.time.RegularTimePeriod) month63);
        java.lang.String str70 = timeSeries35.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries72 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day73 = new org.jfree.data.time.Day();
        timeSeries72.add((org.jfree.data.time.RegularTimePeriod) day73, (double) (short) 0, false);
        timeSeries72.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = timeSeries72.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent81 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean82 = timeSeries72.equals((java.lang.Object) seriesChangeEvent81);
        org.jfree.data.time.Day day83 = new org.jfree.data.time.Day();
        int int85 = day83.compareTo((java.lang.Object) (short) 100);
        java.lang.String str86 = day83.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem87 = timeSeries72.getDataItem((org.jfree.data.time.RegularTimePeriod) day83);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = timeSeriesDataItem87.getPeriod();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries35.add(regularTimePeriod88, (java.lang.Number) 1711995717048L);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9223372036854775807L + "'", long29 == 9223372036854775807L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Value" + "'", str34, "Value");
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(year58);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1711954800000L + "'", long64 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 24292L + "'", long65 == 24292L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertNotNull(timeSeriesDataItem69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Value" + "'", str70, "Value");
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1-April-2024" + "'", str86, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem87);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = year1.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = year1.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = year1.previous();
        int int27 = year1.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = year1.next();
        long long29 = year1.getSerialIndex();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2024 + "'", int27 == 2024);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 2024L + "'", long29 == 2024L);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        long long25 = month6.getLastMillisecond();
        org.jfree.data.time.FixedMillisecond fixedMillisecond26 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = fixedMillisecond26.next();
        java.util.Date date28 = fixedMillisecond26.getTime();
        long long29 = fixedMillisecond26.getLastMillisecond();
        java.util.Date date30 = fixedMillisecond26.getTime();
        java.util.Calendar calendar31 = null;
        fixedMillisecond26.peg(calendar31);
        long long33 = fixedMillisecond26.getLastMillisecond();
        boolean boolean34 = month6.equals((java.lang.Object) fixedMillisecond26);
        org.jfree.data.time.Year year35 = month6.getYear();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1714546799999L + "'", long25 == 1714546799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Mon Apr 01 11:23:35 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711995815784L + "'", long29 == 1711995815784L);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Apr 01 11:23:35 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711995815784L + "'", long33 == 1711995815784L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(year35);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.util.Date date16 = day10.getEnd();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem18 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 0L);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 0L);
        timeSeries19.setMaximumItemCount(2024);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean24 = timeSeries23.isEmpty();
        timeSeries23.setMaximumItemCount(2024);
        java.util.Collection collection27 = timeSeries19.getTimePeriodsUniqueToOtherSeries(timeSeries23);
        java.lang.Class class28 = timeSeries23.getTimePeriodClass();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(collection27);
        org.junit.Assert.assertNull(class28);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond(1711995763602L);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries1.removeChangeListener(seriesChangeListener22);
        timeSeries1.removeAgedItems(1714546799999L, true);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add(regularTimePeriod27, (double) 1711995746375L, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'period' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        java.util.Date date20 = month4.getEnd();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Tue Apr 30 23:59:59 PDT 2024");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Year year19 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        java.util.Date date26 = day22.getStart();
        org.jfree.data.time.SerialDate serialDate27 = day22.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo29);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo31 = seriesChangeEvent30.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo32 = null;
        seriesChangeEvent30.setSummary(seriesChangeInfo32);
        int int34 = day22.compareTo((java.lang.Object) seriesChangeEvent30);
        int int35 = year19.compareTo((java.lang.Object) seriesChangeEvent30);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        boolean boolean57 = year19.equals((java.lang.Object) month40);
        timeSeries1.setKey((java.lang.Comparable) year19);
        int int59 = year19.getYear();
        int int60 = year19.getYear();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate27);
        org.junit.Assert.assertNull(seriesChangeInfo31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        java.util.Date date3 = day0.getEnd();
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month(date3);
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day(date3);
        long long6 = day5.getFirstMillisecond();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = day5.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711954800000L + "'", long6 == 1711954800000L);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getLastMillisecond();
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month();
        int int21 = month18.compareTo((java.lang.Object) month20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list24 = timeSeries23.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener25 = null;
        timeSeries23.addChangeListener(seriesChangeListener25);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        org.jfree.data.time.Month month31 = new org.jfree.data.time.Month();
        long long32 = month31.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.removeChangeListener(seriesChangeListener35);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries34.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day39, (java.lang.Number) 10L);
        long long45 = day39.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries46 = timeSeries28.createCopy((org.jfree.data.time.RegularTimePeriod) month31, (org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries28.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries28.removeChangeListener(seriesChangeListener49);
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries23.addAndOrUpdate(timeSeries28);
        int int52 = month18.compareTo((java.lang.Object) timeSeries28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = month18.next();
        org.jfree.data.time.FixedMillisecond fixedMillisecond55 = new org.jfree.data.time.FixedMillisecond((long) ' ');
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy(regularTimePeriod53, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond55);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem58 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod53, (java.lang.Number) 1711995719216L);
        long long59 = regularTimePeriod53.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1714546799999L + "'", long19 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711954800000L + "'", long32 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711997999999L + "'", long45 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries46);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 24293L + "'", long59 == 24293L);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        long long29 = timeSeries26.getMaximumItemAge();
        java.lang.String str30 = timeSeries26.getDescription();
        timeSeries26.fireSeriesChanged();
        timeSeries26.removeAgedItems(false);
        java.lang.String str34 = timeSeries26.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries1.addAndOrUpdate(timeSeries26);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = month40.next();
        org.jfree.data.time.Year year58 = month40.getYear();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) month40, (java.lang.Number) 10, true);
        boolean boolean63 = month40.equals((java.lang.Object) ' ');
        org.jfree.data.time.Year year64 = month40.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = year64.next();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9223372036854775807L + "'", long29 == 9223372036854775807L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Value" + "'", str34, "Value");
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(year58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(year64);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) Double.NaN, "", "Value");
        double double4 = timeSeries3.getMinY();
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        timeSeries6.add((org.jfree.data.time.RegularTimePeriod) day7, (double) (short) 0, false);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        timeSeries12.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = timeSeries12.getNextTimePeriod();
        timeSeries6.add(regularTimePeriod19, (java.lang.Number) 1.0f, true);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries3.getRawDataItem(regularTimePeriod19);
        long long24 = regularTimePeriod19.getSerialIndex();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 45384L + "'", long24 == 45384L);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeriesDataItem23.setSelected(false);
        boolean boolean27 = timeSeriesDataItem23.isSelected();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year((int) (byte) 1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem3 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) year1, (double) 6);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double11 = timeSeries10.getMaxY();
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        java.lang.Number number13 = null;
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day12, number13, false);
        double double16 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries10.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day19, (java.lang.Number) 2);
        int int26 = timeSeriesDataItem24.compareTo((java.lang.Object) (short) 100);
        timeSeries1.add(timeSeriesDataItem24);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        int int36 = timeSeriesDataItem24.compareTo((java.lang.Object) timeSeries29);
        java.lang.Number number37 = timeSeriesDataItem24.getValue();
        boolean boolean38 = timeSeriesDataItem24.isSelected();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNull(number37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getLastMillisecond();
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month();
        int int21 = month18.compareTo((java.lang.Object) month20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list24 = timeSeries23.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener25 = null;
        timeSeries23.addChangeListener(seriesChangeListener25);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        org.jfree.data.time.Month month31 = new org.jfree.data.time.Month();
        long long32 = month31.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.removeChangeListener(seriesChangeListener35);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries34.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day39, (java.lang.Number) 10L);
        long long45 = day39.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries46 = timeSeries28.createCopy((org.jfree.data.time.RegularTimePeriod) month31, (org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries28.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries28.removeChangeListener(seriesChangeListener49);
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries23.addAndOrUpdate(timeSeries28);
        int int52 = month18.compareTo((java.lang.Object) timeSeries28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = month18.next();
        org.jfree.data.time.FixedMillisecond fixedMillisecond55 = new org.jfree.data.time.FixedMillisecond((long) ' ');
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy(regularTimePeriod53, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond55);
        java.util.Calendar calendar57 = null;
        fixedMillisecond55.peg(calendar57);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1714546799999L + "'", long19 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711954800000L + "'", long32 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711997999999L + "'", long45 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries46);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(timeSeries56);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.util.List list5 = timeSeries1.getItems();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list8 = timeSeries7.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries7.addChangeListener(seriesChangeListener9);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.addChangeListener(seriesChangeListener13);
        org.jfree.data.time.Month month15 = new org.jfree.data.time.Month();
        long long16 = month15.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.removeChangeListener(seriesChangeListener19);
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries18.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day23, (java.lang.Number) 10L);
        long long29 = day23.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries30 = timeSeries12.createCopy((org.jfree.data.time.RegularTimePeriod) month15, (org.jfree.data.time.RegularTimePeriod) day23);
        timeSeries12.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries12.removeChangeListener(seriesChangeListener33);
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries7.addAndOrUpdate(timeSeries12);
        org.jfree.data.time.TimeSeries timeSeries36 = timeSeries1.addAndOrUpdate(timeSeries7);
        int int37 = timeSeries1.getMaximumItemCount();
        long long38 = timeSeries1.getMaximumItemAge();
        java.lang.Class class39 = timeSeries1.timePeriodClass;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.update(regularTimePeriod40, (java.lang.Number) 1711997999999L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'period' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711954800000L + "'", long16 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711997999999L + "'", long29 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries30);
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertNotNull(timeSeries36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 9223372036854775807L + "'", long38 == 9223372036854775807L);
        org.junit.Assert.assertNull(class39);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        timeSeries1.removeAgedItems(false);
        java.lang.String str9 = timeSeries1.getRangeDescription();
        int int10 = timeSeries1.getItemCount();
        org.jfree.data.time.FixedMillisecond fixedMillisecond11 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        timeSeries13.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        long long24 = timeSeries21.getMaximumItemAge();
        java.lang.String str25 = timeSeries21.getDescription();
        double double26 = timeSeries21.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        timeSeries28.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = timeSeries28.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent37 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean38 = timeSeries28.equals((java.lang.Object) seriesChangeEvent37);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        int int41 = day39.compareTo((java.lang.Object) (short) 100);
        java.lang.String str42 = day39.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries28.getDataItem((org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries21.add(timeSeriesDataItem43);
        org.jfree.data.time.TimeSeries timeSeries45 = timeSeries13.addAndOrUpdate(timeSeries21);
        timeSeries45.fireSeriesChanged();
        boolean boolean47 = fixedMillisecond11.equals((java.lang.Object) timeSeries45);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener50 = null;
        timeSeries49.addChangeListener(seriesChangeListener50);
        long long52 = timeSeries49.getMaximumItemAge();
        java.lang.String str53 = timeSeries49.getDescription();
        double double54 = timeSeries49.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries56 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day57 = new org.jfree.data.time.Day();
        timeSeries56.add((org.jfree.data.time.RegularTimePeriod) day57, (double) (short) 0, false);
        timeSeries56.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = timeSeries56.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent65 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean66 = timeSeries56.equals((java.lang.Object) seriesChangeEvent65);
        org.jfree.data.time.Day day67 = new org.jfree.data.time.Day();
        int int69 = day67.compareTo((java.lang.Object) (short) 100);
        java.lang.String str70 = day67.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem71 = timeSeries56.getDataItem((org.jfree.data.time.RegularTimePeriod) day67);
        timeSeries49.add(timeSeriesDataItem71);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem73 = timeSeries45.addOrUpdate(timeSeriesDataItem71);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem74 = timeSeries1.addOrUpdate(timeSeriesDataItem71);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value" + "'", str9, "Value");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1-April-2024" + "'", str42, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertNotNull(timeSeries45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 9223372036854775807L + "'", long52 == 9223372036854775807L);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1-April-2024" + "'", str70, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem71);
        org.junit.Assert.assertNotNull(timeSeriesDataItem73);
        org.junit.Assert.assertNull(timeSeriesDataItem74);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = day2.previous();
        java.util.Date date8 = day2.getEnd();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = day2.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Apr 01 23:59:59 PDT 2024");
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.setMaximumItemCount(2024);
        org.jfree.data.time.Month month5 = new org.jfree.data.time.Month();
        long long6 = month5.getLastMillisecond();
        org.jfree.data.time.Month month7 = new org.jfree.data.time.Month();
        int int8 = month5.compareTo((java.lang.Object) month7);
        int int9 = month5.getYearValue();
        long long10 = month5.getFirstMillisecond();
        org.jfree.data.time.Year year11 = month5.getYear();
        java.lang.Number number12 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) month5);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1714546799999L + "'", long6 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2024 + "'", int9 == 2024);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711954800000L + "'", long10 == 1711954800000L);
        org.junit.Assert.assertNotNull(year11);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.jfree.data.time.Month month1 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year2 = month1.getYear();
        long long3 = month1.getFirstMillisecond();
        java.util.Date date4 = month1.getStart();
        org.jfree.data.time.Year year5 = new org.jfree.data.time.Year(date4);
        org.jfree.data.time.FixedMillisecond fixedMillisecond6 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener17 = null;
        timeSeries16.addChangeListener(seriesChangeListener17);
        long long19 = timeSeries16.getMaximumItemAge();
        java.lang.String str20 = timeSeries16.getDescription();
        double double21 = timeSeries16.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        timeSeries23.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = timeSeries23.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent32 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean33 = timeSeries23.equals((java.lang.Object) seriesChangeEvent32);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        int int36 = day34.compareTo((java.lang.Object) (short) 100);
        java.lang.String str37 = day34.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem38 = timeSeries23.getDataItem((org.jfree.data.time.RegularTimePeriod) day34);
        timeSeries16.add(timeSeriesDataItem38);
        org.jfree.data.time.TimeSeries timeSeries40 = timeSeries8.addAndOrUpdate(timeSeries16);
        timeSeries40.fireSeriesChanged();
        boolean boolean42 = fixedMillisecond6.equals((java.lang.Object) timeSeries40);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = fixedMillisecond6.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = fixedMillisecond6.previous();
        long long45 = fixedMillisecond6.getFirstMillisecond();
        long long46 = fixedMillisecond6.getLastMillisecond();
        int int47 = year5.compareTo((java.lang.Object) fixedMillisecond6);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month48 = new org.jfree.data.time.Month(0, year5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Month outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711954800000L + "'", long3 == 1711954800000L);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9223372036854775807L + "'", long19 == 9223372036854775807L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1-April-2024" + "'", str37, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem38);
        org.junit.Assert.assertNotNull(timeSeries40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711995819143L + "'", long45 == 1711995819143L);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1711995819143L + "'", long46 == 1711995819143L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getLastMillisecond();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        int int3 = month0.compareTo((java.lang.Object) month2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list6 = timeSeries5.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries5.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        org.jfree.data.time.Month month13 = new org.jfree.data.time.Month();
        long long14 = month13.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener17 = null;
        timeSeries16.removeChangeListener(seriesChangeListener17);
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem26 = timeSeries16.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day21, (java.lang.Number) 10L);
        long long27 = day21.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries28 = timeSeries10.createCopy((org.jfree.data.time.RegularTimePeriod) month13, (org.jfree.data.time.RegularTimePeriod) day21);
        timeSeries10.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener31 = null;
        timeSeries10.removeChangeListener(seriesChangeListener31);
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries5.addAndOrUpdate(timeSeries10);
        int int34 = month0.compareTo((java.lang.Object) timeSeries10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = month0.next();
        long long36 = month0.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1714546799999L + "'", long1 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711954800000L + "'", long14 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1711997999999L + "'", long27 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries28);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 24292L + "'", long36 == 24292L);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries5.addChangeListener(seriesChangeListener6);
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.removeChangeListener(seriesChangeListener12);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries11.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day16, (java.lang.Number) 10L);
        long long22 = day16.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries23 = timeSeries5.createCopy((org.jfree.data.time.RegularTimePeriod) month8, (org.jfree.data.time.RegularTimePeriod) day16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = month8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = month8.next();
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) month8);
        java.lang.String str27 = month8.toString();
        int int28 = month8.getMonth();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954800000L + "'", long9 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711997999999L + "'", long22 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "April 2024" + "'", str27, "April 2024");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        long long3 = day0.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries5.addChangeListener(seriesChangeListener6);
        long long8 = timeSeries5.getMaximumItemAge();
        java.lang.String str9 = timeSeries5.getDescription();
        double double10 = timeSeries5.getMaxY();
        timeSeries5.setDescription("hi!");
        boolean boolean13 = day0.equals((java.lang.Object) timeSeries5);
        boolean boolean14 = timeSeries5.isEmpty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711997999999L + "'", long3 == 1711997999999L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 9223372036854775807L + "'", long8 == 9223372036854775807L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double11 = timeSeries10.getMaxY();
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        java.lang.Number number13 = null;
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day12, number13, false);
        double double16 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries10.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day19, (java.lang.Number) 2);
        int int26 = timeSeriesDataItem24.compareTo((java.lang.Object) (short) 100);
        timeSeries1.add(timeSeriesDataItem24);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener30 = null;
        timeSeries29.removeChangeListener(seriesChangeListener30);
        java.lang.String str32 = timeSeries29.getRangeDescription();
        java.util.List list33 = timeSeries29.getItems();
        int int34 = timeSeriesDataItem24.compareTo((java.lang.Object) timeSeries29);
        timeSeries29.clear();
        timeSeries29.setNotify(true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Value" + "'", str32, "Value");
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException1 = new org.jfree.data.time.TimePeriodFormatException("Overwritten values from: 100");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException3 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException5 = new org.jfree.data.time.TimePeriodFormatException("");
        java.lang.Throwable[] throwableArray6 = timePeriodFormatException5.getSuppressed();
        timePeriodFormatException3.addSuppressed((java.lang.Throwable) timePeriodFormatException5);
        timePeriodFormatException1.addSuppressed((java.lang.Throwable) timePeriodFormatException3);
        org.jfree.data.general.SeriesException seriesException10 = new org.jfree.data.general.SeriesException("2");
        java.lang.Throwable[] throwableArray11 = seriesException10.getSuppressed();
        timePeriodFormatException3.addSuppressed((java.lang.Throwable) seriesException10);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener3 = null;
        timeSeries1.addChangeListener(seriesChangeListener3);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.removeChangeListener(seriesChangeListener13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 10L);
        long long23 = day17.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries24 = timeSeries6.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day17);
        timeSeries6.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries6.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries1.addAndOrUpdate(timeSeries6);
        java.beans.PropertyChangeListener propertyChangeListener30 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.addChangeListener(seriesChangeListener34);
        org.jfree.data.time.Month month36 = new org.jfree.data.time.Month();
        long long37 = month36.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries39.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem49 = timeSeries39.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day44, (java.lang.Number) 10L);
        long long50 = day44.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries33.createCopy((org.jfree.data.time.RegularTimePeriod) month36, (org.jfree.data.time.RegularTimePeriod) day44);
        timeSeries33.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener54 = null;
        timeSeries33.removeChangeListener(seriesChangeListener54);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        long long57 = day56.getSerialIndex();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day56, (java.lang.Number) 1.0f, true);
        boolean boolean61 = timeSeries1.equals((java.lang.Object) true);
        org.jfree.data.time.FixedMillisecond fixedMillisecond63 = new org.jfree.data.time.FixedMillisecond(1711997999999L);
        java.util.Calendar calendar64 = null;
        fixedMillisecond63.peg(calendar64);
        java.util.Calendar calendar66 = null;
        long long67 = fixedMillisecond63.getLastMillisecond(calendar66);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) fixedMillisecond63, (double) 10.0f, false);
        long long71 = fixedMillisecond63.getFirstMillisecond();
        long long72 = fixedMillisecond63.getLastMillisecond();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711954800000L + "'", long10 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711997999999L + "'", long23 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries24);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711954800000L + "'", long37 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711997999999L + "'", long50 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 45383L + "'", long57 == 45383L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1711997999999L + "'", long67 == 1711997999999L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1711997999999L + "'", long71 == 1711997999999L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1711997999999L + "'", long72 == 1711997999999L);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        java.lang.String str25 = timeSeries1.getDomainDescription();
        java.util.List list26 = timeSeries1.data;
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double29 = timeSeries28.getMaxY();
        java.util.Collection collection30 = timeSeries28.getTimePeriods();
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries32.addChangeListener(seriesChangeListener33);
        org.jfree.data.time.Month month35 = new org.jfree.data.time.Month();
        long long36 = month35.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener39 = null;
        timeSeries38.removeChangeListener(seriesChangeListener39);
        org.jfree.data.time.TimeSeries timeSeries42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        timeSeries42.add((org.jfree.data.time.RegularTimePeriod) day43, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem48 = timeSeries38.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day43, (java.lang.Number) 10L);
        long long49 = day43.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries50 = timeSeries32.createCopy((org.jfree.data.time.RegularTimePeriod) month35, (org.jfree.data.time.RegularTimePeriod) day43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = month35.next();
        java.lang.String str52 = month35.toString();
        java.lang.Number number53 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem54 = timeSeries28.addOrUpdate((org.jfree.data.time.RegularTimePeriod) month35, number53);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = month35.previous();
        java.lang.Number number56 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) month35);
        int int57 = month35.getMonth();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Time" + "'", str25, "Time");
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(collection30);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711954800000L + "'", long36 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1711997999999L + "'", long49 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries50);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "April 2024" + "'", str52, "April 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem54);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertEquals("'" + number56 + "' != '" + 0.0d + "'", number56, 0.0d);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        timeSeries1.removeAgedItems(true);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        timeSeries30.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = timeSeries30.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent39 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean40 = timeSeries30.equals((java.lang.Object) seriesChangeEvent39);
        org.jfree.data.time.Day day41 = new org.jfree.data.time.Day();
        int int43 = day41.compareTo((java.lang.Object) (short) 100);
        java.lang.String str44 = day41.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem45 = timeSeries30.getDataItem((org.jfree.data.time.RegularTimePeriod) day41);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem46 = timeSeries1.addOrUpdate(timeSeriesDataItem45);
        java.lang.Number number47 = null;
        timeSeriesDataItem45.setValue(number47);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1-April-2024" + "'", str44, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem45);
        org.junit.Assert.assertNotNull(timeSeriesDataItem46);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo1 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent2 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo1);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo3 = seriesChangeEvent2.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo4 = null;
        seriesChangeEvent2.setSummary(seriesChangeInfo4);
        java.lang.Object obj6 = seriesChangeEvent2.getSource();
        java.lang.Object obj7 = seriesChangeEvent2.getSource();
        java.lang.String str8 = seriesChangeEvent2.toString();
        org.junit.Assert.assertNull(seriesChangeInfo3);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + true + "'", obj6, true);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + true + "'", obj7, true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.jfree.data.event.SeriesChangeEvent[source=true]" + "'", str8, "org.jfree.data.event.SeriesChangeEvent[source=true]");
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        int int8 = day3.compareTo((java.lang.Object) 2);
        int int9 = day3.getDayOfMonth();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        org.jfree.data.time.Month month5 = new org.jfree.data.time.Month();
        long long6 = month5.getLastMillisecond();
        org.jfree.data.time.Month month7 = new org.jfree.data.time.Month();
        int int8 = month5.compareTo((java.lang.Object) month7);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list11 = timeSeries10.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries10.addChangeListener(seriesChangeListener12);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries15.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.removeChangeListener(seriesChangeListener22);
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = timeSeries21.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day26, (java.lang.Number) 10L);
        long long32 = day26.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries15.createCopy((org.jfree.data.time.RegularTimePeriod) month18, (org.jfree.data.time.RegularTimePeriod) day26);
        timeSeries15.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener36 = null;
        timeSeries15.removeChangeListener(seriesChangeListener36);
        org.jfree.data.time.TimeSeries timeSeries38 = timeSeries10.addAndOrUpdate(timeSeries15);
        int int39 = month5.compareTo((java.lang.Object) timeSeries15);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = month5.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = timeSeries1.addOrUpdate(regularTimePeriod40, (double) 100.0f);
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        timeSeries44.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        timeSeries52.add((org.jfree.data.time.RegularTimePeriod) day53, (double) (short) 0, false);
        java.util.Date date57 = day53.getStart();
        int int58 = timeSeries44.getIndex((org.jfree.data.time.RegularTimePeriod) day53);
        java.util.Date date59 = day53.getEnd();
        org.jfree.data.time.Day day60 = new org.jfree.data.time.Day(date59);
        long long61 = day60.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day60, (java.lang.Number) 1711995731781L, true);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1714546799999L + "'", long6 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1711954800000L + "'", long19 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711997999999L + "'", long32 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertNotNull(timeSeries38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNull(timeSeriesDataItem42);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(date59);
        org.junit.Assert.assertEquals(date59.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1711954800000L + "'", long61 == 1711954800000L);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        long long25 = month6.getLastMillisecond();
        org.jfree.data.time.FixedMillisecond fixedMillisecond26 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = fixedMillisecond26.next();
        java.util.Date date28 = fixedMillisecond26.getTime();
        long long29 = fixedMillisecond26.getLastMillisecond();
        java.util.Date date30 = fixedMillisecond26.getTime();
        java.util.Calendar calendar31 = null;
        fixedMillisecond26.peg(calendar31);
        long long33 = fixedMillisecond26.getLastMillisecond();
        boolean boolean34 = month6.equals((java.lang.Object) fixedMillisecond26);
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day();
        timeSeries36.add((org.jfree.data.time.RegularTimePeriod) day37, (double) (short) 0, false);
        java.util.Date date41 = day37.getStart();
        org.jfree.data.time.SerialDate serialDate42 = day37.getSerialDate();
        java.lang.String str43 = day37.toString();
        int int44 = fixedMillisecond26.compareTo((java.lang.Object) str43);
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1714546799999L + "'", long25 == 1714546799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Mon Apr 01 11:23:39 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711995819907L + "'", long29 == 1711995819907L);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Apr 01 11:23:39 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711995819907L + "'", long33 == 1711995819907L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1-April-2024" + "'", str43, "1-April-2024");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        java.lang.String str8 = day2.toString();
        long long9 = day2.getLastMillisecond();
        long long10 = day2.getSerialIndex();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            day2.peg(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1-April-2024" + "'", str8, "1-April-2024");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1712041199999L + "'", long9 == 1712041199999L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 45383L + "'", long10 == 45383L);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        java.lang.String str8 = day2.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem10 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day2, (double) (byte) 100);
        timeSeriesDataItem10.setSelected(true);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1-April-2024" + "'", str8, "1-April-2024");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.next();
        java.lang.Object obj2 = null;
        boolean boolean3 = fixedMillisecond0.equals(obj2);
        java.util.Date date4 = fixedMillisecond0.getTime();
        org.jfree.data.time.FixedMillisecond fixedMillisecond5 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = fixedMillisecond5.next();
        java.util.Date date7 = fixedMillisecond5.getTime();
        long long8 = fixedMillisecond5.getLastMillisecond();
        java.util.Date date9 = fixedMillisecond5.getTime();
        java.util.Calendar calendar10 = null;
        fixedMillisecond5.peg(calendar10);
        long long12 = fixedMillisecond5.getLastMillisecond();
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        java.beans.PropertyChangeListener propertyChangeListener43 = null;
        timeSeries14.addPropertyChangeListener(propertyChangeListener43);
        org.jfree.data.time.TimeSeries timeSeries46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener47 = null;
        timeSeries46.addChangeListener(seriesChangeListener47);
        org.jfree.data.time.Month month49 = new org.jfree.data.time.Month();
        long long50 = month49.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener53 = null;
        timeSeries52.removeChangeListener(seriesChangeListener53);
        org.jfree.data.time.TimeSeries timeSeries56 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day57 = new org.jfree.data.time.Day();
        timeSeries56.add((org.jfree.data.time.RegularTimePeriod) day57, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem62 = timeSeries52.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day57, (java.lang.Number) 10L);
        long long63 = day57.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries64 = timeSeries46.createCopy((org.jfree.data.time.RegularTimePeriod) month49, (org.jfree.data.time.RegularTimePeriod) day57);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = month49.previous();
        timeSeries14.add(regularTimePeriod65, (double) ' ');
        int int68 = fixedMillisecond5.compareTo((java.lang.Object) regularTimePeriod65);
        boolean boolean69 = fixedMillisecond0.equals((java.lang.Object) fixedMillisecond5);
        long long70 = fixedMillisecond5.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Apr 01 11:23:40 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Apr 01 11:23:40 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711995820274L + "'", long8 == 1711995820274L);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Apr 01 11:23:40 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711995820274L + "'", long12 == 1711995820274L);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711954800000L + "'", long50 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1711997999999L + "'", long63 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries64);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1711995820274L + "'", long70 == 1711995820274L);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getLastMillisecond();
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        int int12 = month9.compareTo((java.lang.Object) month11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        int int43 = month9.compareTo((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day50);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day59 = new org.jfree.data.time.Day();
        timeSeries58.add((org.jfree.data.time.RegularTimePeriod) day59, (double) (short) 0, false);
        java.util.Date date63 = day59.getStart();
        org.jfree.data.time.SerialDate serialDate64 = day59.getSerialDate();
        org.jfree.data.time.SerialDate serialDate65 = day59.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem66 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day59);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(9999);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) year68);
        java.lang.String str70 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries72 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener73 = null;
        timeSeries72.removeChangeListener(seriesChangeListener73);
        java.lang.String str75 = timeSeries72.getRangeDescription();
        timeSeries72.setDomainDescription("hi!");
        java.util.List list78 = timeSeries72.data;
        timeSeries1.data = list78;
        timeSeries1.fireSeriesChanged();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate64);
        org.junit.Assert.assertNotNull(serialDate65);
        org.junit.Assert.assertNotNull(timeSeriesDataItem66);
        org.junit.Assert.assertNotNull(timeSeriesDataItem69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Value" + "'", str75, "Value");
        org.junit.Assert.assertNotNull(list78);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        int int6 = day2.getDayOfMonth();
        long long7 = day2.getLastMillisecond();
        int int8 = day2.getMonth();
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, false);
        timeSeries10.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        java.util.Date date23 = day19.getStart();
        int int24 = timeSeries10.getIndex((org.jfree.data.time.RegularTimePeriod) day19);
        int int25 = timeSeries10.getMaximumItemCount();
        int int26 = day2.compareTo((java.lang.Object) timeSeries10);
        org.jfree.data.time.SerialDate serialDate27 = day2.getSerialDate();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1712041199999L + "'", long7 == 1712041199999L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(serialDate27);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.Month month5 = new org.jfree.data.time.Month();
        long long6 = month5.getLastMillisecond();
        org.jfree.data.time.Month month7 = new org.jfree.data.time.Month();
        int int8 = month5.compareTo((java.lang.Object) month7);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) month5, (java.lang.Number) 1735718399999L, false);
        long long12 = month5.getFirstMillisecond();
        java.util.Calendar calendar13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = month5.getLastMillisecond(calendar13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1714546799999L + "'", long6 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711954800000L + "'", long12 == 1711954800000L);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        timeSeries1.setDomainDescription("hi!");
        java.util.List list7 = timeSeries1.data;
        timeSeries1.setDescription("org.jfree.data.time.TimePeriodFormatException: Overwritten values from: 100");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list7);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        timeSeries23.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        timeSeries31.add((org.jfree.data.time.RegularTimePeriod) day32, (double) (short) 0, false);
        java.util.Date date36 = day32.getStart();
        org.jfree.data.time.SerialDate serialDate37 = day32.getSerialDate();
        java.lang.Number number38 = null;
        timeSeries23.update((org.jfree.data.time.RegularTimePeriod) day32, number38);
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener42 = null;
        timeSeries41.removeChangeListener(seriesChangeListener42);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day46 = new org.jfree.data.time.Day();
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day46, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem51 = timeSeries41.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day46, (java.lang.Number) 10L);
        long long52 = day46.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem54 = timeSeries23.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day46, (java.lang.Number) (byte) 10);
        double double55 = timeSeries23.getMaxY();
        java.lang.Object obj56 = timeSeries23.clone();
        boolean boolean57 = timeSeries1.equals((java.lang.Object) timeSeries23);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener58 = null;
        timeSeries23.addChangeListener(seriesChangeListener58);
        timeSeries23.setMaximumItemAge((long) 4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate37);
        org.junit.Assert.assertNull(timeSeriesDataItem51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711997999999L + "'", long52 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.jfree.data.general.SeriesException seriesException1 = new org.jfree.data.general.SeriesException("2");
        java.lang.Throwable[] throwableArray2 = seriesException1.getSuppressed();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException4 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException6 = new org.jfree.data.time.TimePeriodFormatException("");
        java.lang.Throwable[] throwableArray7 = timePeriodFormatException6.getSuppressed();
        timePeriodFormatException4.addSuppressed((java.lang.Throwable) timePeriodFormatException6);
        java.lang.Throwable[] throwableArray9 = timePeriodFormatException4.getSuppressed();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException11 = new org.jfree.data.time.TimePeriodFormatException("Overwritten values from: 100");
        timePeriodFormatException4.addSuppressed((java.lang.Throwable) timePeriodFormatException11);
        seriesException1.addSuppressed((java.lang.Throwable) timePeriodFormatException11);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getLastMillisecond();
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month();
        int int21 = month18.compareTo((java.lang.Object) month20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list24 = timeSeries23.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener25 = null;
        timeSeries23.addChangeListener(seriesChangeListener25);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        org.jfree.data.time.Month month31 = new org.jfree.data.time.Month();
        long long32 = month31.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.removeChangeListener(seriesChangeListener35);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries34.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day39, (java.lang.Number) 10L);
        long long45 = day39.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries46 = timeSeries28.createCopy((org.jfree.data.time.RegularTimePeriod) month31, (org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries28.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries28.removeChangeListener(seriesChangeListener49);
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries23.addAndOrUpdate(timeSeries28);
        int int52 = month18.compareTo((java.lang.Object) timeSeries28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = month18.next();
        org.jfree.data.time.FixedMillisecond fixedMillisecond55 = new org.jfree.data.time.FixedMillisecond((long) ' ');
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy(regularTimePeriod53, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond55);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = fixedMillisecond55.next();
        java.util.Calendar calendar58 = null;
        long long59 = fixedMillisecond55.getMiddleMillisecond(calendar58);
        long long60 = fixedMillisecond55.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1714546799999L + "'", long19 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711954800000L + "'", long32 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711997999999L + "'", long45 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries46);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 32L + "'", long59 == 32L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 32L + "'", long60 == 32L);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        long long2 = month0.getFirstMillisecond();
        java.util.Date date3 = month0.getStart();
        long long4 = month0.getSerialIndex();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = month0.getFirstMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954800000L + "'", long2 == 1711954800000L);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24292L + "'", long4 == 24292L);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 2);
        java.lang.Comparable comparable16 = timeSeries1.getKey();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        java.util.Date date23 = day19.getStart();
        org.jfree.data.time.SerialDate serialDate24 = day19.getSerialDate();
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day(serialDate24);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem27 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day25, (java.lang.Number) (short) 100);
        java.beans.PropertyChangeListener propertyChangeListener28 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener28);
        timeSeries1.removeAgedItems((long) (byte) 0, false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertEquals("'" + comparable16 + "' != '" + 100L + "'", comparable16, 100L);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate24);
        org.junit.Assert.assertNotNull(timeSeriesDataItem27);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        timeSeries1.removeAgedItems(true);
        java.util.List list29 = timeSeries1.data;
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(list29);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries1.removeChangeListener(seriesChangeListener6);
        java.lang.Class class8 = timeSeries1.getTimePeriodClass();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.removeChangeListener(seriesChangeListener9);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        java.util.Date date17 = day13.getStart();
        org.jfree.data.time.SerialDate serialDate18 = day13.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo20);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo22 = seriesChangeEvent21.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo23 = null;
        seriesChangeEvent21.setSummary(seriesChangeInfo23);
        int int25 = day13.compareTo((java.lang.Object) seriesChangeEvent21);
        boolean boolean26 = timeSeries1.equals((java.lang.Object) seriesChangeEvent21);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        timeSeries28.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = timeSeries28.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent37 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean38 = timeSeries28.equals((java.lang.Object) seriesChangeEvent37);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        int int41 = day39.compareTo((java.lang.Object) (short) 100);
        java.lang.String str42 = day39.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries28.getDataItem((org.jfree.data.time.RegularTimePeriod) day39);
        java.lang.Number number44 = timeSeriesDataItem43.getValue();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem45 = timeSeries1.addOrUpdate(timeSeriesDataItem43);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener48 = null;
        timeSeries47.addChangeListener(seriesChangeListener48);
        long long50 = timeSeries47.getMaximumItemAge();
        java.lang.String str51 = timeSeries47.getDescription();
        double double52 = timeSeries47.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries54 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        timeSeries54.add((org.jfree.data.time.RegularTimePeriod) day55, (double) (short) 0, false);
        timeSeries54.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = timeSeries54.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent63 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean64 = timeSeries54.equals((java.lang.Object) seriesChangeEvent63);
        org.jfree.data.time.Day day65 = new org.jfree.data.time.Day();
        int int67 = day65.compareTo((java.lang.Object) (short) 100);
        java.lang.String str68 = day65.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = timeSeries54.getDataItem((org.jfree.data.time.RegularTimePeriod) day65);
        timeSeries47.add(timeSeriesDataItem69);
        timeSeriesDataItem69.setSelected(false);
        org.jfree.data.time.TimeSeries timeSeries74 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean75 = timeSeries74.isEmpty();
        timeSeries74.clear();
        timeSeries74.setNotify(false);
        org.jfree.data.time.Day day79 = new org.jfree.data.time.Day();
        int int80 = timeSeries74.getIndex((org.jfree.data.time.RegularTimePeriod) day79);
        org.jfree.data.time.TimeSeries timeSeries82 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double83 = timeSeries82.getMaxY();
        java.util.Collection collection84 = timeSeries82.getTimePeriods();
        boolean boolean85 = timeSeries74.equals((java.lang.Object) collection84);
        boolean boolean86 = timeSeriesDataItem69.equals((java.lang.Object) timeSeries74);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add(timeSeriesDataItem69, true);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are attempting to add an observation for the time period 1-April-2024 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate18);
        org.junit.Assert.assertNull(seriesChangeInfo22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1-April-2024" + "'", str42, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertEquals("'" + number44 + "' != '" + 0.0d + "'", number44, 0.0d);
        org.junit.Assert.assertNotNull(timeSeriesDataItem45);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 9223372036854775807L + "'", long50 == 9223372036854775807L);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1-April-2024" + "'", str68, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(collection84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.Month month5 = new org.jfree.data.time.Month();
        long long6 = month5.getLastMillisecond();
        org.jfree.data.time.Month month7 = new org.jfree.data.time.Month();
        int int8 = month5.compareTo((java.lang.Object) month7);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) month5, (java.lang.Number) 1735718399999L, false);
        boolean boolean12 = timeSeries1.isEmpty();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries1.addChangeListener(seriesChangeListener13);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1714546799999L + "'", long6 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.Year year19 = new org.jfree.data.time.Year(2);
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) year19);
        long long21 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        int int24 = day22.compareTo((java.lang.Object) (short) 100);
        java.lang.String str25 = day22.toString();
        int int26 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day22);
        int int27 = day22.getMonth();
        java.util.Calendar calendar28 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long29 = day22.getFirstMillisecond(calendar28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1-April-2024" + "'", str25, "1-April-2024");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = month4.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = month4.next();
        long long22 = month4.getFirstMillisecond();
        long long23 = month4.getSerialIndex();
        long long24 = month4.getMiddleMillisecond();
        java.util.Calendar calendar25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = month4.getFirstMillisecond(calendar25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711954800000L + "'", long22 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 24292L + "'", long23 == 24292L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1713250799999L + "'", long24 == 1713250799999L);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        long long24 = timeSeries21.getMaximumItemAge();
        java.lang.String str25 = timeSeries21.getDescription();
        double double26 = timeSeries21.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        timeSeries28.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = timeSeries28.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent37 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean38 = timeSeries28.equals((java.lang.Object) seriesChangeEvent37);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        int int41 = day39.compareTo((java.lang.Object) (short) 100);
        java.lang.String str42 = day39.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries28.getDataItem((org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries21.add(timeSeriesDataItem43);
        java.lang.Number number45 = timeSeriesDataItem43.getValue();
        java.lang.Number number46 = timeSeriesDataItem43.getValue();
        timeSeries19.add(timeSeriesDataItem43, false);
        timeSeriesDataItem43.setSelected(false);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeriesDataItem43.getPeriod();
        long long52 = regularTimePeriod51.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1-April-2024" + "'", str42, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertEquals("'" + number45 + "' != '" + 0.0d + "'", number45, 0.0d);
        org.junit.Assert.assertEquals("'" + number46 + "' != '" + 0.0d + "'", number46, 0.0d);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 45383L + "'", long52 == 45383L);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        java.lang.String str25 = timeSeries1.getDomainDescription();
        java.util.List list26 = timeSeries1.data;
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double29 = timeSeries28.getMaxY();
        java.util.Collection collection30 = timeSeries28.getTimePeriods();
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries32.addChangeListener(seriesChangeListener33);
        org.jfree.data.time.Month month35 = new org.jfree.data.time.Month();
        long long36 = month35.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener39 = null;
        timeSeries38.removeChangeListener(seriesChangeListener39);
        org.jfree.data.time.TimeSeries timeSeries42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        timeSeries42.add((org.jfree.data.time.RegularTimePeriod) day43, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem48 = timeSeries38.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day43, (java.lang.Number) 10L);
        long long49 = day43.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries50 = timeSeries32.createCopy((org.jfree.data.time.RegularTimePeriod) month35, (org.jfree.data.time.RegularTimePeriod) day43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = month35.next();
        java.lang.String str52 = month35.toString();
        java.lang.Number number53 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem54 = timeSeries28.addOrUpdate((org.jfree.data.time.RegularTimePeriod) month35, number53);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = month35.previous();
        java.lang.Number number56 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) month35);
        java.lang.Object obj57 = timeSeries1.clone();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Time" + "'", str25, "Time");
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(collection30);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711954800000L + "'", long36 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1711997999999L + "'", long49 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries50);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "April 2024" + "'", str52, "April 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem54);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertEquals("'" + number56 + "' != '" + 0.0d + "'", number56, 0.0d);
        org.junit.Assert.assertNotNull(obj57);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.clear();
        java.lang.Object obj4 = timeSeries1.clone();
        boolean boolean5 = timeSeries1.getNotify();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        long long29 = timeSeries26.getMaximumItemAge();
        java.lang.String str30 = timeSeries26.getDescription();
        timeSeries26.fireSeriesChanged();
        timeSeries26.removeAgedItems(false);
        java.lang.String str34 = timeSeries26.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries1.addAndOrUpdate(timeSeries26);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = month40.next();
        org.jfree.data.time.Year year58 = month40.getYear();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) month40, (java.lang.Number) 10, true);
        timeSeries35.setRangeDescription("hi!");
        java.lang.Object obj64 = null;
        boolean boolean65 = timeSeries35.equals(obj64);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9223372036854775807L + "'", long29 == 9223372036854775807L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Value" + "'", str34, "Value");
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(year58);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        java.lang.Object obj17 = null;
        int int18 = timeSeriesDataItem16.compareTo(obj17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = timeSeriesDataItem16.getPeriod();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener3 = null;
        timeSeries1.addChangeListener(seriesChangeListener3);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.removeChangeListener(seriesChangeListener13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 10L);
        long long23 = day17.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries24 = timeSeries6.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day17);
        timeSeries6.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries6.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries1.addAndOrUpdate(timeSeries6);
        java.beans.PropertyChangeListener propertyChangeListener30 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.addChangeListener(seriesChangeListener34);
        org.jfree.data.time.Month month36 = new org.jfree.data.time.Month();
        long long37 = month36.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries39.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem49 = timeSeries39.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day44, (java.lang.Number) 10L);
        long long50 = day44.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries33.createCopy((org.jfree.data.time.RegularTimePeriod) month36, (org.jfree.data.time.RegularTimePeriod) day44);
        timeSeries33.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener54 = null;
        timeSeries33.removeChangeListener(seriesChangeListener54);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        long long57 = day56.getSerialIndex();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day56, (java.lang.Number) 1.0f, true);
        boolean boolean61 = timeSeries1.equals((java.lang.Object) true);
        org.jfree.data.time.FixedMillisecond fixedMillisecond63 = new org.jfree.data.time.FixedMillisecond(1711997999999L);
        java.util.Calendar calendar64 = null;
        fixedMillisecond63.peg(calendar64);
        java.util.Calendar calendar66 = null;
        long long67 = fixedMillisecond63.getLastMillisecond(calendar66);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) fixedMillisecond63, (double) 10.0f, false);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = fixedMillisecond63.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = fixedMillisecond63.previous();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711954800000L + "'", long10 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711997999999L + "'", long23 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries24);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711954800000L + "'", long37 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711997999999L + "'", long50 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 45383L + "'", long57 == 45383L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1711997999999L + "'", long67 == 1711997999999L);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = year1.previous();
        int int25 = year1.getYear();
        int int26 = year1.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = year1.previous();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) year1, (java.lang.Number) 1717225199999L);
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2024 + "'", int25 == 2024);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2024 + "'", int26 == 2024);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        long long6 = day2.getFirstMillisecond();
        java.util.Date date7 = day2.getEnd();
        java.util.TimeZone timeZone8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month9 = new org.jfree.data.time.Month(date7, timeZone8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711954800000L + "'", long6 == 1711954800000L);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Mon Apr 01 23:59:59 PDT 2024");
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        long long25 = month6.getLastMillisecond();
        org.jfree.data.time.FixedMillisecond fixedMillisecond26 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = fixedMillisecond26.next();
        java.util.Date date28 = fixedMillisecond26.getTime();
        long long29 = fixedMillisecond26.getLastMillisecond();
        java.util.Date date30 = fixedMillisecond26.getTime();
        java.util.Calendar calendar31 = null;
        fixedMillisecond26.peg(calendar31);
        long long33 = fixedMillisecond26.getLastMillisecond();
        boolean boolean34 = month6.equals((java.lang.Object) fixedMillisecond26);
        java.util.Calendar calendar35 = null;
        fixedMillisecond26.peg(calendar35);
        java.util.Calendar calendar37 = null;
        long long38 = fixedMillisecond26.getFirstMillisecond(calendar37);
        java.util.Calendar calendar39 = null;
        long long40 = fixedMillisecond26.getLastMillisecond(calendar39);
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1714546799999L + "'", long25 == 1714546799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Mon Apr 01 11:23:45 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711995825775L + "'", long29 == 1711995825775L);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Apr 01 11:23:45 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711995825775L + "'", long33 == 1711995825775L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1711995825775L + "'", long38 == 1711995825775L);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1711995825775L + "'", long40 == 1711995825775L);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = year1.previous();
        long long25 = year1.getLastMillisecond();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1735718399999L + "'", long25 == 1735718399999L);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.clear();
        java.lang.Object obj4 = timeSeries1.clone();
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list7 = timeSeries6.data;
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        int int18 = day16.compareTo((java.lang.Object) (short) 100);
        java.util.Date date19 = day16.getEnd();
        long long20 = day16.getLastMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries6.createCopy((org.jfree.data.time.RegularTimePeriod) day10, (org.jfree.data.time.RegularTimePeriod) day16);
        boolean boolean22 = timeSeries1.equals((java.lang.Object) day10);
        timeSeries1.setMaximumItemAge(1711995721514L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(list7);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1712041199999L + "'", long20 == 1712041199999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        java.lang.String str8 = day2.toString();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day2);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1-April-2024" + "'", str8, "1-April-2024");
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        int int3 = timeSeries1.getItemCount();
        timeSeries1.setRangeDescription("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        org.jfree.data.time.Month month29 = new org.jfree.data.time.Month();
        long long30 = month29.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries32.removeChangeListener(seriesChangeListener33);
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day();
        timeSeries36.add((org.jfree.data.time.RegularTimePeriod) day37, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = timeSeries32.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day37, (java.lang.Number) 10L);
        long long43 = day37.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries44 = timeSeries26.createCopy((org.jfree.data.time.RegularTimePeriod) month29, (org.jfree.data.time.RegularTimePeriod) day37);
        timeSeries26.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener47 = null;
        timeSeries26.removeChangeListener(seriesChangeListener47);
        java.util.Collection collection49 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries26);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711954800000L + "'", long30 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1711997999999L + "'", long43 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries44);
        org.junit.Assert.assertNotNull(collection49);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        timeSeries4.add((org.jfree.data.time.RegularTimePeriod) day5, (double) (short) 0, false);
        java.util.Date date9 = day5.getStart();
        org.jfree.data.time.SerialDate serialDate10 = day5.getSerialDate();
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        int int13 = day11.compareTo((java.lang.Object) (short) 100);
        java.util.Date date14 = day11.getEnd();
        long long15 = day11.getLastMillisecond();
        org.jfree.data.time.TimeSeries timeSeries16 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) day5, (org.jfree.data.time.RegularTimePeriod) day11);
        java.lang.Class class17 = timeSeries16.timePeriodClass;
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1712041199999L + "'", long15 == 1712041199999L);
        org.junit.Assert.assertNotNull(timeSeries16);
        org.junit.Assert.assertNull(class17);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.util.List list5 = timeSeries1.getItems();
        java.util.List list6 = timeSeries1.getItems();
        java.util.Collection collection7 = timeSeries1.getTimePeriods();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list10 = timeSeries9.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries9.addChangeListener(seriesChangeListener11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double15 = timeSeries14.getMaxY();
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        java.lang.Number number17 = null;
        timeSeries14.add((org.jfree.data.time.RegularTimePeriod) day16, number17, false);
        int int21 = day16.compareTo((java.lang.Object) 2);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day16, (java.lang.Number) 6);
        java.util.Date date24 = day16.getStart();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day16, (double) 1711995821743L, true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.addChangeListener(seriesChangeListener10);
        long long12 = timeSeries9.getMaximumItemAge();
        java.lang.String str13 = timeSeries9.getDescription();
        double double14 = timeSeries9.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        timeSeries16.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = timeSeries16.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent25 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean26 = timeSeries16.equals((java.lang.Object) seriesChangeEvent25);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        int int29 = day27.compareTo((java.lang.Object) (short) 100);
        java.lang.String str30 = day27.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = timeSeries16.getDataItem((org.jfree.data.time.RegularTimePeriod) day27);
        timeSeries9.add(timeSeriesDataItem31);
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries1.addAndOrUpdate(timeSeries9);
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        timeSeries35.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = timeSeries35.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent44 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean45 = timeSeries35.equals((java.lang.Object) seriesChangeEvent44);
        org.jfree.data.time.Day day46 = new org.jfree.data.time.Day();
        int int48 = day46.compareTo((java.lang.Object) (short) 100);
        java.lang.String str49 = day46.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries35.getDataItem((org.jfree.data.time.RegularTimePeriod) day46);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeries35.getNextTimePeriod();
        org.jfree.data.time.Month month52 = new org.jfree.data.time.Month();
        long long53 = month52.getLastMillisecond();
        org.jfree.data.time.Month month54 = new org.jfree.data.time.Month();
        int int55 = month52.compareTo((java.lang.Object) month54);
        org.jfree.data.time.TimeSeries timeSeries57 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list58 = timeSeries57.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener59 = null;
        timeSeries57.addChangeListener(seriesChangeListener59);
        org.jfree.data.time.TimeSeries timeSeries62 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener63 = null;
        timeSeries62.addChangeListener(seriesChangeListener63);
        org.jfree.data.time.Month month65 = new org.jfree.data.time.Month();
        long long66 = month65.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries68 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener69 = null;
        timeSeries68.removeChangeListener(seriesChangeListener69);
        org.jfree.data.time.TimeSeries timeSeries72 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day73 = new org.jfree.data.time.Day();
        timeSeries72.add((org.jfree.data.time.RegularTimePeriod) day73, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem78 = timeSeries68.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day73, (java.lang.Number) 10L);
        long long79 = day73.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries80 = timeSeries62.createCopy((org.jfree.data.time.RegularTimePeriod) month65, (org.jfree.data.time.RegularTimePeriod) day73);
        timeSeries62.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener83 = null;
        timeSeries62.removeChangeListener(seriesChangeListener83);
        org.jfree.data.time.TimeSeries timeSeries85 = timeSeries57.addAndOrUpdate(timeSeries62);
        int int86 = month52.compareTo((java.lang.Object) timeSeries62);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = month52.next();
        org.jfree.data.time.FixedMillisecond fixedMillisecond89 = new org.jfree.data.time.FixedMillisecond((long) ' ');
        org.jfree.data.time.TimeSeries timeSeries90 = timeSeries35.createCopy(regularTimePeriod87, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond89);
        java.util.Calendar calendar91 = null;
        long long92 = fixedMillisecond89.getMiddleMillisecond(calendar91);
        long long93 = fixedMillisecond89.getMiddleMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries33.add((org.jfree.data.time.RegularTimePeriod) fixedMillisecond89, (java.lang.Number) 4);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9223372036854775807L + "'", long12 == 9223372036854775807L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1-April-2024" + "'", str30, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem31);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1-April-2024" + "'", str49, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1714546799999L + "'", long53 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1711954800000L + "'", long66 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1711997999999L + "'", long79 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries80);
        org.junit.Assert.assertNotNull(timeSeries85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertNotNull(timeSeries90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 32L + "'", long92 == 32L);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 32L + "'", long93 == 32L);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener3 = null;
        timeSeries1.addChangeListener(seriesChangeListener3);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.removeChangeListener(seriesChangeListener13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 10L);
        long long23 = day17.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries24 = timeSeries6.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day17);
        timeSeries6.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries6.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries1.addAndOrUpdate(timeSeries6);
        java.beans.PropertyChangeListener propertyChangeListener30 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.addChangeListener(seriesChangeListener34);
        org.jfree.data.time.Month month36 = new org.jfree.data.time.Month();
        long long37 = month36.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries39.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem49 = timeSeries39.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day44, (java.lang.Number) 10L);
        long long50 = day44.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries33.createCopy((org.jfree.data.time.RegularTimePeriod) month36, (org.jfree.data.time.RegularTimePeriod) day44);
        timeSeries33.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener54 = null;
        timeSeries33.removeChangeListener(seriesChangeListener54);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        long long57 = day56.getSerialIndex();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day56, (java.lang.Number) 1.0f, true);
        boolean boolean61 = timeSeries1.equals((java.lang.Object) true);
        org.jfree.data.time.FixedMillisecond fixedMillisecond63 = new org.jfree.data.time.FixedMillisecond(1711997999999L);
        java.util.Calendar calendar64 = null;
        fixedMillisecond63.peg(calendar64);
        java.util.Calendar calendar66 = null;
        long long67 = fixedMillisecond63.getLastMillisecond(calendar66);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) fixedMillisecond63, (double) 10.0f, false);
        timeSeries1.setDescription("");
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711954800000L + "'", long10 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711997999999L + "'", long23 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries24);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711954800000L + "'", long37 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711997999999L + "'", long50 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 45383L + "'", long57 == 45383L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1711997999999L + "'", long67 == 1711997999999L);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.util.Date date0 = null;
        java.util.TimeZone timeZone1 = null;
        java.util.Locale locale2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year3 = new org.jfree.data.time.Year(date0, timeZone1, locale2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        timeSeries13.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries13.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent22 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean23 = timeSeries13.equals((java.lang.Object) seriesChangeEvent22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        int int26 = day24.compareTo((java.lang.Object) (short) 100);
        java.lang.String str27 = day24.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries13.getDataItem((org.jfree.data.time.RegularTimePeriod) day24);
        timeSeries6.add(timeSeriesDataItem28);
        timeSeries1.add(timeSeriesDataItem28);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        timeSeries32.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries32.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent41 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean42 = timeSeries32.equals((java.lang.Object) seriesChangeEvent41);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        int int45 = day43.compareTo((java.lang.Object) (short) 100);
        java.lang.String str46 = day43.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries32.getDataItem((org.jfree.data.time.RegularTimePeriod) day43);
        timeSeriesDataItem47.setSelected(false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries1.addOrUpdate(timeSeriesDataItem47);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo51 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent52 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeriesDataItem50, seriesChangeInfo51);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1-April-2024" + "'", str27, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1-April-2024" + "'", str46, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem47);
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond(1711997999999L);
        java.util.Calendar calendar2 = null;
        long long3 = fixedMillisecond1.getMiddleMillisecond(calendar2);
        long long4 = fixedMillisecond1.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711997999999L + "'", long3 == 1711997999999L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1711997999999L + "'", long4 == 1711997999999L);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        long long29 = timeSeries26.getMaximumItemAge();
        java.lang.String str30 = timeSeries26.getDescription();
        timeSeries26.fireSeriesChanged();
        timeSeries26.removeAgedItems(false);
        java.lang.String str34 = timeSeries26.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries1.addAndOrUpdate(timeSeries26);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = month40.next();
        org.jfree.data.time.Year year58 = month40.getYear();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) month40, (java.lang.Number) 10, true);
        org.jfree.data.time.Day day62 = new org.jfree.data.time.Day();
        long long63 = day62.getSerialIndex();
        int int64 = month40.compareTo((java.lang.Object) long63);
        java.util.Calendar calendar65 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long66 = month40.getLastMillisecond(calendar65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9223372036854775807L + "'", long29 == 9223372036854775807L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Value" + "'", str34, "Value");
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(year58);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 45383L + "'", long63 == 45383L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        long long30 = day24.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) (byte) 10);
        int int33 = timeSeries1.getMaximumItemCount();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711997999999L + "'", long30 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond(1711997999999L);
        java.util.Calendar calendar2 = null;
        fixedMillisecond1.peg(calendar2);
        long long4 = fixedMillisecond1.getFirstMillisecond();
        java.util.Calendar calendar5 = null;
        long long6 = fixedMillisecond1.getMiddleMillisecond(calendar5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1711997999999L + "'", long4 == 1711997999999L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711997999999L + "'", long6 == 1711997999999L);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        java.lang.String str7 = timeSeries1.getDomainDescription();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries1.removeChangeListener(seriesChangeListener8);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Time" + "'", str7, "Time");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent1 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo2 = seriesChangeEvent1.getSummary();
        java.lang.String str3 = seriesChangeEvent1.toString();
        org.junit.Assert.assertNull(seriesChangeInfo2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.jfree.data.event.SeriesChangeEvent[source=10.0]" + "'", str3, "org.jfree.data.event.SeriesChangeEvent[source=10.0]");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double11 = timeSeries10.getMaxY();
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        java.lang.Number number13 = null;
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day12, number13, false);
        double double16 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries10.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day19, (java.lang.Number) 2);
        int int26 = timeSeriesDataItem24.compareTo((java.lang.Object) (short) 100);
        timeSeries1.add(timeSeriesDataItem24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = timeSeriesDataItem24.getPeriod();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = regularTimePeriod28.previous();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getEnd();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            day2.peg(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 23:59:59 PDT 2024");
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getLastMillisecond();
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        int int12 = month9.compareTo((java.lang.Object) month11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        int int43 = month9.compareTo((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day50);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day59 = new org.jfree.data.time.Day();
        timeSeries58.add((org.jfree.data.time.RegularTimePeriod) day59, (double) (short) 0, false);
        java.util.Date date63 = day59.getStart();
        org.jfree.data.time.SerialDate serialDate64 = day59.getSerialDate();
        org.jfree.data.time.Day day65 = new org.jfree.data.time.Day(serialDate64);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = day65.next();
        java.lang.Number number67 = timeSeries1.getValue(regularTimePeriod66);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeries timeSeries70 = timeSeries1.createCopy(11, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate64);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertNull(number67);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        timeSeries1.setRangeDescription("Value");
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean13 = timeSeries12.isEmpty();
        timeSeries12.setMaximumItemCount(2024);
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        java.util.Date date22 = day18.getStart();
        boolean boolean23 = timeSeries12.equals((java.lang.Object) date22);
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.addChangeListener(seriesChangeListener26);
        org.jfree.data.time.Month month28 = new org.jfree.data.time.Month();
        long long29 = month28.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener32 = null;
        timeSeries31.removeChangeListener(seriesChangeListener32);
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem41 = timeSeries31.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day36, (java.lang.Number) 10L);
        long long42 = day36.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = timeSeries25.createCopy((org.jfree.data.time.RegularTimePeriod) month28, (org.jfree.data.time.RegularTimePeriod) day36);
        java.lang.Number number44 = timeSeries12.getValue((org.jfree.data.time.RegularTimePeriod) month28);
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) month28);
        timeSeries1.setRangeDescription("April 2024");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711954800000L + "'", long29 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1711997999999L + "'", long42 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries43);
        org.junit.Assert.assertNull(number44);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.util.List list5 = timeSeries1.getItems();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list8 = timeSeries7.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries7.addChangeListener(seriesChangeListener9);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.addChangeListener(seriesChangeListener13);
        org.jfree.data.time.Month month15 = new org.jfree.data.time.Month();
        long long16 = month15.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.removeChangeListener(seriesChangeListener19);
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries18.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day23, (java.lang.Number) 10L);
        long long29 = day23.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries30 = timeSeries12.createCopy((org.jfree.data.time.RegularTimePeriod) month15, (org.jfree.data.time.RegularTimePeriod) day23);
        timeSeries12.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries12.removeChangeListener(seriesChangeListener33);
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries7.addAndOrUpdate(timeSeries12);
        org.jfree.data.time.TimeSeries timeSeries36 = timeSeries1.addAndOrUpdate(timeSeries7);
        java.lang.Object obj37 = timeSeries1.clone();
        boolean boolean39 = timeSeries1.equals((java.lang.Object) (-1.0f));
        timeSeries1.setMaximumItemAge((long) '4');
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.addChangeListener(seriesChangeListener44);
        long long46 = timeSeries43.getMaximumItemAge();
        java.lang.String str47 = timeSeries43.getDescription();
        timeSeries43.fireSeriesChanged();
        org.jfree.data.time.TimeSeries timeSeries50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day51 = new org.jfree.data.time.Day();
        timeSeries50.add((org.jfree.data.time.RegularTimePeriod) day51, (double) (short) 0, false);
        java.util.Date date55 = day51.getStart();
        org.jfree.data.time.SerialDate serialDate56 = day51.getSerialDate();
        org.jfree.data.time.Day day57 = new org.jfree.data.time.Day(serialDate56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = day57.next();
        boolean boolean59 = timeSeries43.equals((java.lang.Object) regularTimePeriod58);
        java.lang.Number number60 = timeSeries1.getValue(regularTimePeriod58);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711954800000L + "'", long16 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711997999999L + "'", long29 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries30);
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertNotNull(timeSeries36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 9223372036854775807L + "'", long46 == 9223372036854775807L);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate56);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(number60);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        timeSeries2.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        org.jfree.data.time.TimeSeries timeSeries34 = timeSeries2.addAndOrUpdate(timeSeries10);
        timeSeries34.fireSeriesChanged();
        boolean boolean36 = fixedMillisecond0.equals((java.lang.Object) timeSeries34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = fixedMillisecond0.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = fixedMillisecond0.previous();
        long long39 = fixedMillisecond0.getFirstMillisecond();
        long long40 = fixedMillisecond0.getMiddleMillisecond();
        long long41 = fixedMillisecond0.getLastMillisecond();
        java.util.Calendar calendar42 = null;
        long long43 = fixedMillisecond0.getMiddleMillisecond(calendar42);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(timeSeries34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1711995829547L + "'", long39 == 1711995829547L);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1711995829547L + "'", long40 == 1711995829547L);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711995829547L + "'", long41 == 1711995829547L);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1711995829547L + "'", long43 == 1711995829547L);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        java.lang.String str7 = timeSeries1.getDomainDescription();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent9 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo10 = null;
        seriesChangeEvent9.setSummary(seriesChangeInfo10);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo12 = seriesChangeEvent9.getSummary();
        java.lang.Object obj13 = seriesChangeEvent9.getSource();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo14 = seriesChangeEvent9.getSummary();
        boolean boolean15 = timeSeries1.equals((java.lang.Object) seriesChangeInfo14);
        org.jfree.data.time.Year year17 = new org.jfree.data.time.Year(1);
        boolean boolean18 = timeSeries1.equals((java.lang.Object) 1);
        timeSeries1.removeAgedItems(1711995787183L, false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Time" + "'", str7, "Time");
        org.junit.Assert.assertNull(seriesChangeInfo12);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 10.0d + "'", obj13, 10.0d);
        org.junit.Assert.assertNull(seriesChangeInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = day10.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = regularTimePeriod16.next();
        java.util.Date date18 = regularTimePeriod17.getStart();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        long long40 = timeSeries37.getMaximumItemAge();
        java.lang.String str41 = timeSeries37.getDescription();
        double double42 = timeSeries37.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        timeSeries44.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeries44.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent53 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean54 = timeSeries44.equals((java.lang.Object) seriesChangeEvent53);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        int int57 = day55.compareTo((java.lang.Object) (short) 100);
        java.lang.String str58 = day55.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries44.getDataItem((org.jfree.data.time.RegularTimePeriod) day55);
        timeSeries37.add(timeSeriesDataItem59);
        org.jfree.data.time.TimeSeries timeSeries61 = timeSeries29.addAndOrUpdate(timeSeries37);
        timeSeries61.fireSeriesChanged();
        boolean boolean63 = fixedMillisecond27.equals((java.lang.Object) timeSeries61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = fixedMillisecond27.previous();
        java.util.Calendar calendar65 = null;
        fixedMillisecond27.peg(calendar65);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = year68.previous();
        org.jfree.data.time.TimeSeries timeSeries70 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond27, (org.jfree.data.time.RegularTimePeriod) year68);
        long long71 = year68.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem73 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) year68, (java.lang.Number) 1711995769608L);
        java.util.Date date74 = year68.getEnd();
        org.jfree.data.time.Month month75 = new org.jfree.data.time.Month(date74);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223372036854775807L + "'", long40 == 9223372036854775807L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1-April-2024" + "'", str58, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(timeSeries61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeSeries70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 2L + "'", long71 == 2L);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Sun Dec 31 23:59:59 PST 2");
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        double double20 = timeSeries19.getMinY();
        timeSeries19.clear();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.jfree.data.time.Month month1 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year2 = month1.getYear();
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener5 = null;
        timeSeries4.addChangeListener(seriesChangeListener5);
        org.jfree.data.time.Month month7 = new org.jfree.data.time.Month();
        long long8 = month7.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.removeChangeListener(seriesChangeListener11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day15 = new org.jfree.data.time.Day();
        timeSeries14.add((org.jfree.data.time.RegularTimePeriod) day15, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem20 = timeSeries10.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day15, (java.lang.Number) 10L);
        long long21 = day15.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries22 = timeSeries4.createCopy((org.jfree.data.time.RegularTimePeriod) month7, (org.jfree.data.time.RegularTimePeriod) day15);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = month7.next();
        int int24 = year2.compareTo((java.lang.Object) month7);
        org.jfree.data.time.Year year25 = month7.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = year25.next();
        long long27 = year25.getSerialIndex();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month28 = new org.jfree.data.time.Month(9999, year25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Month outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711954800000L + "'", long8 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1711997999999L + "'", long21 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries22);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(year25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2024L + "'", long27 == 2024L);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.jfree.data.general.SeriesException seriesException1 = new org.jfree.data.general.SeriesException("Value");
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.util.List list5 = timeSeries1.getItems();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list8 = timeSeries7.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries7.addChangeListener(seriesChangeListener9);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.addChangeListener(seriesChangeListener13);
        org.jfree.data.time.Month month15 = new org.jfree.data.time.Month();
        long long16 = month15.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.removeChangeListener(seriesChangeListener19);
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries18.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day23, (java.lang.Number) 10L);
        long long29 = day23.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries30 = timeSeries12.createCopy((org.jfree.data.time.RegularTimePeriod) month15, (org.jfree.data.time.RegularTimePeriod) day23);
        timeSeries12.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries12.removeChangeListener(seriesChangeListener33);
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries7.addAndOrUpdate(timeSeries12);
        org.jfree.data.time.TimeSeries timeSeries36 = timeSeries1.addAndOrUpdate(timeSeries7);
        java.util.Collection collection37 = timeSeries7.getTimePeriods();
        java.util.Collection collection38 = timeSeries7.getTimePeriods();
        java.lang.Object obj39 = timeSeries7.clone();
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year41 = month40.getYear();
        long long42 = month40.getFirstMillisecond();
        long long43 = month40.getSerialIndex();
        long long44 = month40.getSerialIndex();
        long long45 = month40.getFirstMillisecond();
        java.util.Date date46 = month40.getEnd();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo47 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent48 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) month40, seriesChangeInfo47);
        int int49 = month40.getYearValue();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) month40, (double) 1711995804279L, true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711954800000L + "'", long16 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711997999999L + "'", long29 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries30);
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertNotNull(timeSeries36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(year41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1711954800000L + "'", long42 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 24292L + "'", long43 == 24292L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 24292L + "'", long44 == 24292L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711954800000L + "'", long45 == 1711954800000L);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Tue Apr 30 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2024 + "'", int49 == 2024);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        timeSeries1.removeAgedItems(true);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        timeSeries30.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = timeSeries30.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent39 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean40 = timeSeries30.equals((java.lang.Object) seriesChangeEvent39);
        org.jfree.data.time.Day day41 = new org.jfree.data.time.Day();
        int int43 = day41.compareTo((java.lang.Object) (short) 100);
        java.lang.String str44 = day41.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem45 = timeSeries30.getDataItem((org.jfree.data.time.RegularTimePeriod) day41);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem46 = timeSeries1.addOrUpdate(timeSeriesDataItem45);
        timeSeriesDataItem46.setSelected(false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1-April-2024" + "'", str44, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem45);
        org.junit.Assert.assertNotNull(timeSeriesDataItem46);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        long long2 = month0.getFirstMillisecond();
        long long3 = month0.getSerialIndex();
        int int4 = month0.getYearValue();
        org.jfree.data.time.Year year5 = month0.getYear();
        long long6 = month0.getFirstMillisecond();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954800000L + "'", long2 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 24292L + "'", long3 == 24292L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711954800000L + "'", long6 == 1711954800000L);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getLastMillisecond();
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        int int12 = month9.compareTo((java.lang.Object) month11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        int int43 = month9.compareTo((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day50);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day59 = new org.jfree.data.time.Day();
        timeSeries58.add((org.jfree.data.time.RegularTimePeriod) day59, (double) (short) 0, false);
        timeSeries58.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries66 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day67 = new org.jfree.data.time.Day();
        timeSeries66.add((org.jfree.data.time.RegularTimePeriod) day67, (double) (short) 0, false);
        java.util.Date date71 = day67.getStart();
        org.jfree.data.time.SerialDate serialDate72 = day67.getSerialDate();
        java.lang.Number number73 = null;
        timeSeries58.update((org.jfree.data.time.RegularTimePeriod) day67, number73);
        org.jfree.data.time.TimeSeries timeSeries76 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener77 = null;
        timeSeries76.removeChangeListener(seriesChangeListener77);
        org.jfree.data.time.TimeSeries timeSeries80 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day81 = new org.jfree.data.time.Day();
        timeSeries80.add((org.jfree.data.time.RegularTimePeriod) day81, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem86 = timeSeries76.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day81, (java.lang.Number) 10L);
        long long87 = day81.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem89 = timeSeries58.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day81, (java.lang.Number) (byte) 10);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem90 = timeSeries1.addOrUpdate(timeSeriesDataItem89);
        timeSeriesDataItem90.setValue((java.lang.Number) 1711995716832L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate72);
        org.junit.Assert.assertNull(timeSeriesDataItem86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1711997999999L + "'", long87 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem89);
        org.junit.Assert.assertNotNull(timeSeriesDataItem90);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.Year year7 = new org.jfree.data.time.Year(date6);
        org.jfree.data.time.Year year8 = new org.jfree.data.time.Year(date6);
        java.util.TimeZone timeZone9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year10 = new org.jfree.data.time.Year(date6, timeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        java.beans.PropertyChangeListener propertyChangeListener7 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener7);
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year10 = month9.getYear();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) month9, "", "hi!");
        long long14 = month9.getLastMillisecond();
        int int15 = month9.getYearValue();
        java.lang.Number number16 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) month9, number16);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1714546799999L + "'", long14 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2024 + "'", int15 == 2024);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        java.lang.Class class5 = timeSeries1.timePeriodClass;
        org.jfree.data.time.Year year7 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = seriesChangeEvent18.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo20);
        int int22 = day10.compareTo((java.lang.Object) seriesChangeEvent18);
        int int23 = year7.compareTo((java.lang.Object) seriesChangeEvent18);
        java.lang.Number number24 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) year7);
        long long25 = year7.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNull(class5);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNull(seriesChangeInfo19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-62072668800001L) + "'", long25 == (-62072668800001L));
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(4, (int) '4');
        java.lang.String str3 = month2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "April 52" + "'", str3, "April 52");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.lang.Comparable comparable3 = timeSeries1.getKey();
        java.lang.Class class4 = timeSeries1.getTimePeriodClass();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = timeSeries1.getTimePeriod((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + comparable3 + "' != '" + 100L + "'", comparable3, 100L);
        org.junit.Assert.assertNull(class4);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        timeSeriesDataItem16.setSelected(true);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getLastMillisecond();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        int int3 = month0.compareTo((java.lang.Object) month2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list6 = timeSeries5.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries5.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        org.jfree.data.time.Month month13 = new org.jfree.data.time.Month();
        long long14 = month13.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener17 = null;
        timeSeries16.removeChangeListener(seriesChangeListener17);
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem26 = timeSeries16.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day21, (java.lang.Number) 10L);
        long long27 = day21.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries28 = timeSeries10.createCopy((org.jfree.data.time.RegularTimePeriod) month13, (org.jfree.data.time.RegularTimePeriod) day21);
        timeSeries10.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener31 = null;
        timeSeries10.removeChangeListener(seriesChangeListener31);
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries5.addAndOrUpdate(timeSeries10);
        int int34 = month0.compareTo((java.lang.Object) timeSeries10);
        java.lang.Class class35 = timeSeries10.getTimePeriodClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1714546799999L + "'", long1 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711954800000L + "'", long14 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1711997999999L + "'", long27 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries28);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(class35);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Year year19 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        java.util.Date date26 = day22.getStart();
        org.jfree.data.time.SerialDate serialDate27 = day22.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo29);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo31 = seriesChangeEvent30.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo32 = null;
        seriesChangeEvent30.setSummary(seriesChangeInfo32);
        int int34 = day22.compareTo((java.lang.Object) seriesChangeEvent30);
        int int35 = year19.compareTo((java.lang.Object) seriesChangeEvent30);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        boolean boolean57 = year19.equals((java.lang.Object) month40);
        timeSeries1.setKey((java.lang.Comparable) year19);
        java.util.Collection collection59 = timeSeries1.getTimePeriods();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate27);
        org.junit.Assert.assertNull(seriesChangeInfo31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(collection59);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.util.List list5 = timeSeries1.getItems();
        java.util.List list6 = timeSeries1.getItems();
        java.util.Collection collection7 = timeSeries1.getTimePeriods();
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        long long10 = month8.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month8);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener14 = null;
        timeSeries13.addChangeListener(seriesChangeListener14);
        org.jfree.data.time.Month month16 = new org.jfree.data.time.Month();
        long long17 = month16.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        long long30 = day24.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries31 = timeSeries13.createCopy((org.jfree.data.time.RegularTimePeriod) month16, (org.jfree.data.time.RegularTimePeriod) day24);
        timeSeries13.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries13.removeChangeListener(seriesChangeListener34);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        long long37 = day36.getSerialIndex();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day36, (java.lang.Number) 1.0f, true);
        long long41 = day36.getLastMillisecond();
        java.util.Date date42 = day36.getStart();
        boolean boolean43 = month8.equals((java.lang.Object) date42);
        java.util.TimeZone timeZone44 = null;
        java.util.Locale locale45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year46 = new org.jfree.data.time.Year(date42, timeZone44, locale45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954800000L + "'", long9 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1711954800000L + "'", long17 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711997999999L + "'", long30 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries31);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 45383L + "'", long37 == 45383L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1712041199999L + "'", long41 == 1712041199999L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        java.lang.Object obj7 = null;
        boolean boolean8 = timeSeries1.equals(obj7);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, false);
        timeSeries10.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        java.util.Date date23 = day19.getStart();
        org.jfree.data.time.SerialDate serialDate24 = day19.getSerialDate();
        java.lang.Number number25 = null;
        timeSeries10.update((org.jfree.data.time.RegularTimePeriod) day19, number25);
        org.jfree.data.time.Year year28 = new org.jfree.data.time.Year(2);
        timeSeries10.delete((org.jfree.data.time.RegularTimePeriod) year28);
        long long30 = timeSeries10.getMaximumItemAge();
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        int int33 = day31.compareTo((java.lang.Object) (short) 100);
        java.lang.String str34 = day31.toString();
        int int35 = timeSeries10.getIndex((org.jfree.data.time.RegularTimePeriod) day31);
        java.lang.Number number36 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) day31);
        timeSeries1.clear();
        org.jfree.data.time.Month month38 = new org.jfree.data.time.Month();
        long long39 = month38.getLastMillisecond();
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        int int41 = month38.compareTo((java.lang.Object) month40);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list44 = timeSeries43.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener45 = null;
        timeSeries43.addChangeListener(seriesChangeListener45);
        org.jfree.data.time.TimeSeries timeSeries48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries48.addChangeListener(seriesChangeListener49);
        org.jfree.data.time.Month month51 = new org.jfree.data.time.Month();
        long long52 = month51.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries54 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener55 = null;
        timeSeries54.removeChangeListener(seriesChangeListener55);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day59 = new org.jfree.data.time.Day();
        timeSeries58.add((org.jfree.data.time.RegularTimePeriod) day59, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem64 = timeSeries54.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day59, (java.lang.Number) 10L);
        long long65 = day59.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries66 = timeSeries48.createCopy((org.jfree.data.time.RegularTimePeriod) month51, (org.jfree.data.time.RegularTimePeriod) day59);
        timeSeries48.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener69 = null;
        timeSeries48.removeChangeListener(seriesChangeListener69);
        org.jfree.data.time.TimeSeries timeSeries71 = timeSeries43.addAndOrUpdate(timeSeries48);
        int int72 = month38.compareTo((java.lang.Object) timeSeries48);
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent74 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo75 = null;
        seriesChangeEvent74.setSummary(seriesChangeInfo75);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo77 = seriesChangeEvent74.getSummary();
        java.lang.Object obj78 = seriesChangeEvent74.getSource();
        boolean boolean79 = month38.equals(obj78);
        java.lang.Number number80 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) month38, number80);
        java.lang.Class class82 = timeSeries1.timePeriodClass;
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate24);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1-April-2024" + "'", str34, "1-April-2024");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1714546799999L + "'", long39 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711954800000L + "'", long52 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1711997999999L + "'", long65 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries66);
        org.junit.Assert.assertNotNull(timeSeries71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNull(seriesChangeInfo77);
        org.junit.Assert.assertEquals("'" + obj78 + "' != '" + 10.0d + "'", obj78, 10.0d);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(class82);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond(1711997999999L);
        java.util.Calendar calendar2 = null;
        long long3 = fixedMillisecond1.getMiddleMillisecond(calendar2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = fixedMillisecond1.next();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711997999999L + "'", long3 == 1711997999999L);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.text.DateFormat dateFormat0 = org.jfree.data.time.Day.DATE_FORMAT;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent1 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) dateFormat0);
        java.lang.Object obj2 = seriesChangeEvent1.getSource();
        org.junit.Assert.assertNotNull(dateFormat0);
        org.junit.Assert.assertNotNull(obj2);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        java.lang.String str8 = day2.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem10 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day2, (double) (byte) 100);
        long long11 = day2.getLastMillisecond();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1-April-2024" + "'", str8, "1-April-2024");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1712041199999L + "'", long11 == 1712041199999L);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        long long30 = day24.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) (byte) 10);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries1.removeChangeListener(seriesChangeListener33);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711997999999L + "'", long30 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.jfree.data.time.Year year2 = new org.jfree.data.time.Year((int) (short) -1);
        org.jfree.data.time.Month month3 = new org.jfree.data.time.Month(11, year2);
        org.jfree.data.time.Year year5 = new org.jfree.data.time.Year(1);
        int int6 = month3.compareTo((java.lang.Object) 1);
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        java.util.Date date21 = day17.getStart();
        org.jfree.data.time.SerialDate serialDate22 = day17.getSerialDate();
        java.lang.Number number23 = null;
        timeSeries8.update((org.jfree.data.time.RegularTimePeriod) day17, number23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = timeSeries26.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day31, (java.lang.Number) 10L);
        long long37 = day31.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries8.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day31, (java.lang.Number) (byte) 10);
        double double40 = timeSeries8.getMaxY();
        org.jfree.data.time.Day day41 = new org.jfree.data.time.Day();
        long long42 = day41.getSerialIndex();
        timeSeries8.delete((org.jfree.data.time.RegularTimePeriod) day41);
        timeSeries8.setMaximumItemCount(100);
        int int46 = month3.compareTo((java.lang.Object) timeSeries8);
        int int47 = month3.getMonth();
        java.lang.String str48 = month3.toString();
        java.lang.Class<?> wildcardClass49 = month3.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate22);
        org.junit.Assert.assertNull(timeSeriesDataItem36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711997999999L + "'", long37 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 45383L + "'", long42 == 45383L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 11 + "'", int47 == 11);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "November -1" + "'", str48, "November -1");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        java.util.Calendar calendar25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = year24.getLastMillisecond(calendar25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = year24.next();
        long long26 = year24.getSerialIndex();
        int int28 = year24.compareTo((java.lang.Object) "31-March-2024");
        java.util.Calendar calendar29 = null;
        // The following exception was thrown during execution in test generation
        try {
            year24.peg(calendar29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2024L + "'", long26 == 2024L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        timeSeries1.removeAgedItems(false);
        java.lang.String str9 = timeSeries1.getRangeDescription();
        java.lang.Object obj10 = timeSeries1.clone();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        timeSeries12.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        java.util.Date date25 = day21.getStart();
        int int26 = timeSeries12.getIndex((org.jfree.data.time.RegularTimePeriod) day21);
        java.util.Date date27 = day21.getEnd();
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day(date27);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day28, (double) (short) 10);
        java.util.Calendar calendar31 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long32 = day28.getLastMillisecond(calendar31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value" + "'", str9, "Value");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon Apr 01 23:59:59 PDT 2024");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod2 = year1.next();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertNotNull(regularTimePeriod2);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener3 = null;
        timeSeries1.addChangeListener(seriesChangeListener3);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.removeChangeListener(seriesChangeListener13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 10L);
        long long23 = day17.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries24 = timeSeries6.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day17);
        timeSeries6.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries6.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries1.addAndOrUpdate(timeSeries6);
        java.beans.PropertyChangeListener propertyChangeListener30 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.addChangeListener(seriesChangeListener34);
        org.jfree.data.time.Month month36 = new org.jfree.data.time.Month();
        long long37 = month36.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries39.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem49 = timeSeries39.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day44, (java.lang.Number) 10L);
        long long50 = day44.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries33.createCopy((org.jfree.data.time.RegularTimePeriod) month36, (org.jfree.data.time.RegularTimePeriod) day44);
        timeSeries33.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener54 = null;
        timeSeries33.removeChangeListener(seriesChangeListener54);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        long long57 = day56.getSerialIndex();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day56, (java.lang.Number) 1.0f, true);
        boolean boolean61 = timeSeries1.equals((java.lang.Object) true);
        org.jfree.data.time.FixedMillisecond fixedMillisecond63 = new org.jfree.data.time.FixedMillisecond(1711997999999L);
        java.util.Calendar calendar64 = null;
        fixedMillisecond63.peg(calendar64);
        java.util.Calendar calendar66 = null;
        long long67 = fixedMillisecond63.getLastMillisecond(calendar66);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) fixedMillisecond63, (double) 10.0f, false);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = fixedMillisecond63.next();
        java.util.Date date72 = regularTimePeriod71.getEnd();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711954800000L + "'", long10 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711997999999L + "'", long23 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries24);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711954800000L + "'", long37 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711997999999L + "'", long50 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 45383L + "'", long57 == 45383L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1711997999999L + "'", long67 == 1711997999999L);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Mon Apr 01 12:00:00 PDT 2024");
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year9 = month8.getYear();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.addChangeListener(seriesChangeListener12);
        org.jfree.data.time.Month month14 = new org.jfree.data.time.Month();
        long long15 = month14.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener18 = null;
        timeSeries17.removeChangeListener(seriesChangeListener18);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem27 = timeSeries17.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day22, (java.lang.Number) 10L);
        long long28 = day22.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries11.createCopy((org.jfree.data.time.RegularTimePeriod) month14, (org.jfree.data.time.RegularTimePeriod) day22);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = month14.next();
        int int31 = year9.compareTo((java.lang.Object) month14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = year9.next();
        int int33 = year9.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) year9, (double) 6);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(year9);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1711954800000L + "'", long15 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1711997999999L + "'", long28 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2024 + "'", int33 == 2024);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        int int18 = timeSeries1.getItemCount();
        java.lang.Class class19 = timeSeries1.timePeriodClass;
        long long20 = timeSeries1.getMaximumItemAge();
        java.util.List list21 = timeSeries1.data;
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(list21);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException1 = new org.jfree.data.time.TimePeriodFormatException("org.jfree.data.event.SeriesChangeEvent[source=0.0]");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException3 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException5 = new org.jfree.data.time.TimePeriodFormatException("");
        java.lang.Throwable[] throwableArray6 = timePeriodFormatException5.getSuppressed();
        timePeriodFormatException3.addSuppressed((java.lang.Throwable) timePeriodFormatException5);
        java.lang.Throwable[] throwableArray8 = timePeriodFormatException3.getSuppressed();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException10 = new org.jfree.data.time.TimePeriodFormatException("Overwritten values from: 100");
        timePeriodFormatException3.addSuppressed((java.lang.Throwable) timePeriodFormatException10);
        timePeriodFormatException1.addSuppressed((java.lang.Throwable) timePeriodFormatException10);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        long long40 = timeSeries37.getMaximumItemAge();
        java.lang.String str41 = timeSeries37.getDescription();
        double double42 = timeSeries37.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        timeSeries44.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeries44.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent53 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean54 = timeSeries44.equals((java.lang.Object) seriesChangeEvent53);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        int int57 = day55.compareTo((java.lang.Object) (short) 100);
        java.lang.String str58 = day55.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries44.getDataItem((org.jfree.data.time.RegularTimePeriod) day55);
        timeSeries37.add(timeSeriesDataItem59);
        org.jfree.data.time.TimeSeries timeSeries61 = timeSeries29.addAndOrUpdate(timeSeries37);
        timeSeries61.fireSeriesChanged();
        boolean boolean63 = fixedMillisecond27.equals((java.lang.Object) timeSeries61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = fixedMillisecond27.previous();
        java.util.Calendar calendar65 = null;
        fixedMillisecond27.peg(calendar65);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = year68.previous();
        org.jfree.data.time.TimeSeries timeSeries70 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond27, (org.jfree.data.time.RegularTimePeriod) year68);
        java.lang.Object obj71 = timeSeries70.clone();
        java.util.Collection collection72 = timeSeries70.getTimePeriods();
        org.jfree.data.time.Day day73 = new org.jfree.data.time.Day();
        int int75 = day73.compareTo((java.lang.Object) (short) 100);
        java.util.Date date76 = day73.getEnd();
        org.jfree.data.time.Month month77 = new org.jfree.data.time.Month(date76);
        org.jfree.data.time.FixedMillisecond fixedMillisecond78 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = fixedMillisecond78.next();
        java.util.Date date80 = fixedMillisecond78.getTime();
        long long81 = fixedMillisecond78.getLastMillisecond();
        int int82 = month77.compareTo((java.lang.Object) fixedMillisecond78);
        boolean boolean83 = timeSeries70.equals((java.lang.Object) fixedMillisecond78);
        org.jfree.data.time.Month month84 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year85 = month84.getYear();
        long long86 = month84.getFirstMillisecond();
        java.util.Date date87 = month84.getStart();
        org.jfree.data.time.Year year88 = new org.jfree.data.time.Year(date87);
        boolean boolean89 = fixedMillisecond78.equals((java.lang.Object) year88);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223372036854775807L + "'", long40 == 9223372036854775807L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1-April-2024" + "'", str58, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(timeSeries61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeSeries70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertNotNull(date80);
// flaky:         org.junit.Assert.assertEquals(date80.toString(), "Mon Apr 01 11:23:55 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1711995835558L + "'", long81 == 1711995835558L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(year85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1711954800000L + "'", long86 == 1711954800000L);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getLastMillisecond();
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        int int12 = month9.compareTo((java.lang.Object) month11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        int int43 = month9.compareTo((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day50);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day59 = new org.jfree.data.time.Day();
        timeSeries58.add((org.jfree.data.time.RegularTimePeriod) day59, (double) (short) 0, false);
        java.util.Date date63 = day59.getStart();
        org.jfree.data.time.SerialDate serialDate64 = day59.getSerialDate();
        org.jfree.data.time.SerialDate serialDate65 = day59.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem66 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day59);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(9999);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) year68);
        java.util.Collection collection70 = timeSeries1.getTimePeriods();
        timeSeries1.setMaximumItemCount(0);
        timeSeries1.setRangeDescription("org.jfree.data.event.SeriesChangeEvent[source=0.0]");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate64);
        org.junit.Assert.assertNotNull(serialDate65);
        org.junit.Assert.assertNotNull(timeSeriesDataItem66);
        org.junit.Assert.assertNotNull(timeSeriesDataItem69);
        org.junit.Assert.assertNotNull(collection70);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries1.removeChangeListener(seriesChangeListener20);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener3 = null;
        timeSeries1.addChangeListener(seriesChangeListener3);
        java.lang.String str5 = timeSeries1.getRangeDescription();
        org.jfree.data.time.Year year7 = new org.jfree.data.time.Year((-1));
        org.jfree.data.time.FixedMillisecond fixedMillisecond8 = new org.jfree.data.time.FixedMillisecond();
        java.util.Date date9 = fixedMillisecond8.getEnd();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) date9);
        boolean boolean11 = year7.equals((java.lang.Object) date9);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem13 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) year7, (double) 11);
        timeSeries1.fireSeriesChanged();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value" + "'", str5, "Value");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Apr 01 11:23:57 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem13);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        long long40 = timeSeries37.getMaximumItemAge();
        java.lang.String str41 = timeSeries37.getDescription();
        double double42 = timeSeries37.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        timeSeries44.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeries44.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent53 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean54 = timeSeries44.equals((java.lang.Object) seriesChangeEvent53);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        int int57 = day55.compareTo((java.lang.Object) (short) 100);
        java.lang.String str58 = day55.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries44.getDataItem((org.jfree.data.time.RegularTimePeriod) day55);
        timeSeries37.add(timeSeriesDataItem59);
        org.jfree.data.time.TimeSeries timeSeries61 = timeSeries29.addAndOrUpdate(timeSeries37);
        timeSeries61.fireSeriesChanged();
        boolean boolean63 = fixedMillisecond27.equals((java.lang.Object) timeSeries61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = fixedMillisecond27.previous();
        java.util.Calendar calendar65 = null;
        fixedMillisecond27.peg(calendar65);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = year68.previous();
        org.jfree.data.time.TimeSeries timeSeries70 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond27, (org.jfree.data.time.RegularTimePeriod) year68);
        java.lang.Object obj71 = timeSeries70.clone();
        java.util.Collection collection72 = timeSeries70.getTimePeriods();
        java.lang.Class class73 = timeSeries70.timePeriodClass;
        org.jfree.data.time.FixedMillisecond fixedMillisecond74 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = fixedMillisecond74.next();
        java.util.Date date76 = fixedMillisecond74.getTime();
        long long77 = fixedMillisecond74.getLastMillisecond();
        java.util.Date date78 = fixedMillisecond74.getTime();
        java.util.Date date79 = fixedMillisecond74.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond80 = new org.jfree.data.time.FixedMillisecond(date79);
        java.util.Calendar calendar81 = null;
        fixedMillisecond80.peg(calendar81);
        timeSeries70.delete((org.jfree.data.time.RegularTimePeriod) fixedMillisecond80);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener84 = null;
        timeSeries70.addChangeListener(seriesChangeListener84);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223372036854775807L + "'", long40 == 9223372036854775807L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1-April-2024" + "'", str58, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(timeSeries61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeSeries70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertNotNull(regularTimePeriod75);
        org.junit.Assert.assertNotNull(date76);
// flaky:         org.junit.Assert.assertEquals(date76.toString(), "Mon Apr 01 11:23:57 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1711995837459L + "'", long77 == 1711995837459L);
        org.junit.Assert.assertNotNull(date78);
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Mon Apr 01 11:23:57 PDT 2024");
        org.junit.Assert.assertNotNull(date79);
// flaky:         org.junit.Assert.assertEquals(date79.toString(), "Mon Apr 01 11:23:57 PDT 2024");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod2 = year1.previous();
        long long3 = year1.getSerialIndex();
        java.text.DateFormat dateFormat4 = org.jfree.data.time.Day.DATE_FORMAT_MEDIUM;
        int int5 = year1.compareTo((java.lang.Object) dateFormat4);
        int int6 = year1.getYear();
        org.junit.Assert.assertNotNull(regularTimePeriod2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2L + "'", long3 == 2L);
        org.junit.Assert.assertNotNull(dateFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 2);
        int int16 = day10.getYear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2024 + "'", int16 == 2024);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries1.removeChangeListener(seriesChangeListener6);
        java.lang.Class class8 = timeSeries1.getTimePeriodClass();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.removeChangeListener(seriesChangeListener9);
        boolean boolean11 = timeSeries1.getNotify();
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.jfree.data.time.Month month1 = org.jfree.data.time.Month.parseMonth("April 2024");
        long long2 = month1.getSerialIndex();
        org.junit.Assert.assertNotNull(month1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24292L + "'", long2 == 24292L);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.Year year19 = new org.jfree.data.time.Year(2);
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) year19);
        java.lang.Class class21 = timeSeries1.getTimePeriodClass();
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        timeSeries23.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = timeSeries23.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent32 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean33 = timeSeries23.equals((java.lang.Object) seriesChangeEvent32);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        int int36 = day34.compareTo((java.lang.Object) (short) 100);
        java.lang.String str37 = day34.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem38 = timeSeries23.getDataItem((org.jfree.data.time.RegularTimePeriod) day34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries23.getNextTimePeriod();
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getLastMillisecond();
        org.jfree.data.time.Month month42 = new org.jfree.data.time.Month();
        int int43 = month40.compareTo((java.lang.Object) month42);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list46 = timeSeries45.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener47 = null;
        timeSeries45.addChangeListener(seriesChangeListener47);
        org.jfree.data.time.TimeSeries timeSeries50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener51 = null;
        timeSeries50.addChangeListener(seriesChangeListener51);
        org.jfree.data.time.Month month53 = new org.jfree.data.time.Month();
        long long54 = month53.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries56 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener57 = null;
        timeSeries56.removeChangeListener(seriesChangeListener57);
        org.jfree.data.time.TimeSeries timeSeries60 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day61 = new org.jfree.data.time.Day();
        timeSeries60.add((org.jfree.data.time.RegularTimePeriod) day61, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem66 = timeSeries56.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day61, (java.lang.Number) 10L);
        long long67 = day61.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries68 = timeSeries50.createCopy((org.jfree.data.time.RegularTimePeriod) month53, (org.jfree.data.time.RegularTimePeriod) day61);
        timeSeries50.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener71 = null;
        timeSeries50.removeChangeListener(seriesChangeListener71);
        org.jfree.data.time.TimeSeries timeSeries73 = timeSeries45.addAndOrUpdate(timeSeries50);
        int int74 = month40.compareTo((java.lang.Object) timeSeries50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = month40.next();
        org.jfree.data.time.FixedMillisecond fixedMillisecond77 = new org.jfree.data.time.FixedMillisecond((long) ' ');
        org.jfree.data.time.TimeSeries timeSeries78 = timeSeries23.createCopy(regularTimePeriod75, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond77);
        java.util.Calendar calendar79 = null;
        long long80 = fixedMillisecond77.getMiddleMillisecond(calendar79);
        int int82 = fixedMillisecond77.compareTo((java.lang.Object) 10.0f);
        java.util.Calendar calendar83 = null;
        fixedMillisecond77.peg(calendar83);
        long long85 = fixedMillisecond77.getLastMillisecond();
        int int86 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) fixedMillisecond77);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNull(class21);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1-April-2024" + "'", str37, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1714546799999L + "'", long41 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711954800000L + "'", long54 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1711997999999L + "'", long67 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries68);
        org.junit.Assert.assertNotNull(timeSeries73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod75);
        org.junit.Assert.assertNotNull(timeSeries78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 32L + "'", long80 == 32L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 32L + "'", long85 == 32L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.Comparable comparable5 = timeSeries1.getKey();
        java.lang.Object obj6 = timeSeries1.clone();
        int int7 = timeSeries1.getMaximumItemCount();
        java.lang.String str8 = timeSeries1.getDomainDescription();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year10 = month9.getYear();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.addChangeListener(seriesChangeListener13);
        org.jfree.data.time.Month month15 = new org.jfree.data.time.Month();
        long long16 = month15.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.removeChangeListener(seriesChangeListener19);
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries18.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day23, (java.lang.Number) 10L);
        long long29 = day23.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries30 = timeSeries12.createCopy((org.jfree.data.time.RegularTimePeriod) month15, (org.jfree.data.time.RegularTimePeriod) day23);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = month15.next();
        int int32 = year10.compareTo((java.lang.Object) month15);
        int int33 = month15.getMonth();
        java.lang.Number number34 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) month15);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertEquals("'" + comparable5 + "' != '" + (short) 100 + "'", comparable5, (short) 100);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Time" + "'", str8, "Time");
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711954800000L + "'", long16 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711997999999L + "'", long29 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries30);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNull(number34);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        java.lang.Object obj7 = null;
        boolean boolean8 = timeSeries1.equals(obj7);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, false);
        timeSeries10.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        java.util.Date date23 = day19.getStart();
        org.jfree.data.time.SerialDate serialDate24 = day19.getSerialDate();
        java.lang.Number number25 = null;
        timeSeries10.update((org.jfree.data.time.RegularTimePeriod) day19, number25);
        org.jfree.data.time.Year year28 = new org.jfree.data.time.Year(2);
        timeSeries10.delete((org.jfree.data.time.RegularTimePeriod) year28);
        long long30 = timeSeries10.getMaximumItemAge();
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        int int33 = day31.compareTo((java.lang.Object) (short) 100);
        java.lang.String str34 = day31.toString();
        int int35 = timeSeries10.getIndex((org.jfree.data.time.RegularTimePeriod) day31);
        java.lang.Number number36 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) day31);
        long long37 = day31.getSerialIndex();
        long long38 = day31.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate24);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1-April-2024" + "'", str34, "1-April-2024");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 45383L + "'", long37 == 45383L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1711954800000L + "'", long38 == 1711954800000L);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener3 = null;
        timeSeries1.addChangeListener(seriesChangeListener3);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.removeChangeListener(seriesChangeListener13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 10L);
        long long23 = day17.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries24 = timeSeries6.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day17);
        timeSeries6.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries6.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries1.addAndOrUpdate(timeSeries6);
        java.beans.PropertyChangeListener propertyChangeListener30 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener30);
        java.lang.Class class32 = timeSeries1.getTimePeriodClass();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.delete((int) '#', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711954800000L + "'", long10 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711997999999L + "'", long23 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries24);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertNull(class32);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.lang.Comparable comparable3 = timeSeries1.getKey();
        boolean boolean4 = timeSeries1.isEmpty();
        org.jfree.data.time.FixedMillisecond fixedMillisecond5 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = fixedMillisecond5.next();
        java.util.Date date7 = fixedMillisecond5.getTime();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem9 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond5, (double) (short) -1);
        timeSeries1.add(timeSeriesDataItem9, false);
        org.jfree.data.time.Month month12 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year13 = month12.getYear();
        long long14 = month12.getFirstMillisecond();
        long long15 = month12.getSerialIndex();
        int int16 = month12.getYearValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem18 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) month12, 0.0d);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + comparable3 + "' != '" + 100L + "'", comparable3, 100L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Apr 01 11:24:00 PDT 2024");
        org.junit.Assert.assertNotNull(year13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711954800000L + "'", long14 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 24292L + "'", long15 == 24292L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2024 + "'", int16 == 2024);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        boolean boolean13 = day2.equals((java.lang.Object) day8);
        long long14 = day2.getFirstMillisecond();
        java.util.Date date15 = day2.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = day2.next();
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711954800000L + "'", long14 == 1711954800000L);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getLastMillisecond();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        int int3 = month0.compareTo((java.lang.Object) month2);
        int int4 = month0.getYearValue();
        long long5 = month0.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = month0.previous();
        int int7 = month0.getMonth();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem9 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month0, (double) 1711995683606L);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        timeSeries11.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = timeSeries11.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent20 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean21 = timeSeries11.equals((java.lang.Object) seriesChangeEvent20);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        int int24 = day22.compareTo((java.lang.Object) (short) 100);
        java.lang.String str25 = day22.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem26 = timeSeries11.getDataItem((org.jfree.data.time.RegularTimePeriod) day22);
        boolean boolean27 = timeSeriesDataItem9.equals((java.lang.Object) timeSeriesDataItem26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = timeSeriesDataItem9.getPeriod();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1714546799999L + "'", long1 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1-April-2024" + "'", str25, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.addChangeListener(seriesChangeListener10);
        long long12 = timeSeries9.getMaximumItemAge();
        java.lang.String str13 = timeSeries9.getDescription();
        double double14 = timeSeries9.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        timeSeries16.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = timeSeries16.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent25 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean26 = timeSeries16.equals((java.lang.Object) seriesChangeEvent25);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        int int29 = day27.compareTo((java.lang.Object) (short) 100);
        java.lang.String str30 = day27.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = timeSeries16.getDataItem((org.jfree.data.time.RegularTimePeriod) day27);
        timeSeries9.add(timeSeriesDataItem31);
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries1.addAndOrUpdate(timeSeries9);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo34 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent35 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries9, seriesChangeInfo34);
        java.beans.PropertyChangeListener propertyChangeListener36 = null;
        timeSeries9.addPropertyChangeListener(propertyChangeListener36);
        timeSeries9.removeAgedItems((long) 9, false);
        org.jfree.data.time.TimeSeries timeSeries42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        timeSeries42.add((org.jfree.data.time.RegularTimePeriod) day43, (double) (short) 0, false);
        java.util.Date date47 = day43.getEnd();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem48 = timeSeries9.getDataItem((org.jfree.data.time.RegularTimePeriod) day43);
        org.jfree.data.time.TimeSeries timeSeries50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond51 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = fixedMillisecond51.next();
        timeSeries50.setKey((java.lang.Comparable) fixedMillisecond51);
        org.jfree.data.time.Month month54 = new org.jfree.data.time.Month();
        long long55 = month54.getLastMillisecond();
        org.jfree.data.time.Month month56 = new org.jfree.data.time.Month();
        int int57 = month54.compareTo((java.lang.Object) month56);
        timeSeries50.add((org.jfree.data.time.RegularTimePeriod) month54, (java.lang.Number) 1735718399999L, false);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener61 = null;
        timeSeries50.addChangeListener(seriesChangeListener61);
        boolean boolean63 = timeSeriesDataItem48.equals((java.lang.Object) timeSeries50);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9223372036854775807L + "'", long12 == 9223372036854775807L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1-April-2024" + "'", str30, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem31);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem48);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1714546799999L + "'", long55 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.setMaximumItemCount(2024);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        timeSeries6.add((org.jfree.data.time.RegularTimePeriod) day7, (double) (short) 0, false);
        java.util.Date date11 = day7.getStart();
        boolean boolean12 = timeSeries1.equals((java.lang.Object) date11);
        org.jfree.data.time.FixedMillisecond fixedMillisecond13 = new org.jfree.data.time.FixedMillisecond(date11);
        org.jfree.data.time.Year year14 = new org.jfree.data.time.Year(date11);
        long long15 = year14.getSerialIndex();
        java.lang.String str16 = year14.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2024L + "'", long15 == 2024L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2024" + "'", str16, "2024");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        long long40 = timeSeries37.getMaximumItemAge();
        java.lang.String str41 = timeSeries37.getDescription();
        double double42 = timeSeries37.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        timeSeries44.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeries44.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent53 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean54 = timeSeries44.equals((java.lang.Object) seriesChangeEvent53);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        int int57 = day55.compareTo((java.lang.Object) (short) 100);
        java.lang.String str58 = day55.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries44.getDataItem((org.jfree.data.time.RegularTimePeriod) day55);
        timeSeries37.add(timeSeriesDataItem59);
        org.jfree.data.time.TimeSeries timeSeries61 = timeSeries29.addAndOrUpdate(timeSeries37);
        timeSeries61.fireSeriesChanged();
        boolean boolean63 = fixedMillisecond27.equals((java.lang.Object) timeSeries61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = fixedMillisecond27.previous();
        java.util.Calendar calendar65 = null;
        fixedMillisecond27.peg(calendar65);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = year68.previous();
        org.jfree.data.time.TimeSeries timeSeries70 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond27, (org.jfree.data.time.RegularTimePeriod) year68);
        java.lang.Object obj71 = timeSeries70.clone();
        java.util.Collection collection72 = timeSeries70.getTimePeriods();
        org.jfree.data.time.Day day73 = new org.jfree.data.time.Day();
        int int75 = day73.compareTo((java.lang.Object) (short) 100);
        java.util.Date date76 = day73.getEnd();
        org.jfree.data.time.Month month77 = new org.jfree.data.time.Month(date76);
        org.jfree.data.time.FixedMillisecond fixedMillisecond78 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod79 = fixedMillisecond78.next();
        java.util.Date date80 = fixedMillisecond78.getTime();
        long long81 = fixedMillisecond78.getLastMillisecond();
        int int82 = month77.compareTo((java.lang.Object) fixedMillisecond78);
        boolean boolean83 = timeSeries70.equals((java.lang.Object) fixedMillisecond78);
        java.util.Calendar calendar84 = null;
        long long85 = fixedMillisecond78.getMiddleMillisecond(calendar84);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223372036854775807L + "'", long40 == 9223372036854775807L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1-April-2024" + "'", str58, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(timeSeries61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeSeries70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(date76);
        org.junit.Assert.assertEquals(date76.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod79);
        org.junit.Assert.assertNotNull(date80);
// flaky:         org.junit.Assert.assertEquals(date80.toString(), "Mon Apr 01 11:24:00 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1711995840976L + "'", long81 == 1711995840976L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1711995840976L + "'", long85 == 1711995840976L);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getLastMillisecond();
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        int int12 = month9.compareTo((java.lang.Object) month11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        int int43 = month9.compareTo((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day50);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day59 = new org.jfree.data.time.Day();
        timeSeries58.add((org.jfree.data.time.RegularTimePeriod) day59, (double) (short) 0, false);
        java.util.Date date63 = day59.getStart();
        org.jfree.data.time.SerialDate serialDate64 = day59.getSerialDate();
        org.jfree.data.time.SerialDate serialDate65 = day59.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem66 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day59);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(9999);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) year68);
        java.beans.PropertyChangeListener propertyChangeListener70 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener70);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem73 = timeSeries1.getRawDataItem(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate64);
        org.junit.Assert.assertNotNull(serialDate65);
        org.junit.Assert.assertNotNull(timeSeriesDataItem66);
        org.junit.Assert.assertNotNull(timeSeriesDataItem69);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener3 = null;
        timeSeries1.addChangeListener(seriesChangeListener3);
        java.lang.String str5 = timeSeries1.getRangeDescription();
        org.jfree.data.time.Year year7 = new org.jfree.data.time.Year((-1));
        org.jfree.data.time.FixedMillisecond fixedMillisecond8 = new org.jfree.data.time.FixedMillisecond();
        java.util.Date date9 = fixedMillisecond8.getEnd();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) date9);
        boolean boolean11 = year7.equals((java.lang.Object) date9);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem13 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) year7, (double) 11);
        long long14 = year7.getFirstMillisecond();
        int int15 = year7.getYear();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Value" + "'", str5, "Value");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Apr 01 11:24:01 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-62198899200000L) + "'", long14 == (-62198899200000L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        timeSeries2.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        org.jfree.data.time.TimeSeries timeSeries34 = timeSeries2.addAndOrUpdate(timeSeries10);
        timeSeries34.fireSeriesChanged();
        boolean boolean36 = fixedMillisecond0.equals((java.lang.Object) timeSeries34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = fixedMillisecond0.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = fixedMillisecond0.previous();
        java.util.Date date39 = fixedMillisecond0.getEnd();
        java.util.TimeZone timeZone40 = null;
        java.util.Locale locale41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year42 = new org.jfree.data.time.Year(date39, timeZone40, locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(timeSeries34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Mon Apr 01 11:24:01 PDT 2024");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        timeSeries1.setDomainDescription("hi!");
        java.lang.Class class5 = timeSeries1.timePeriodClass;
        java.lang.Class class6 = timeSeries1.getTimePeriodClass();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNull(class5);
        org.junit.Assert.assertNull(class6);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        java.util.Date date3 = day0.getEnd();
        java.util.TimeZone timeZone4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year5 = new org.jfree.data.time.Year(date3, timeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Apr 01 23:59:59 PDT 2024");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = month4.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = month4.next();
        long long22 = month4.getFirstMillisecond();
        int int23 = month4.getMonth();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = month4.previous();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711954800000L + "'", long22 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        long long30 = day24.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) (byte) 10);
        double double33 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        int int36 = day34.compareTo((java.lang.Object) (short) 100);
        long long37 = day34.getMiddleMillisecond();
        int int38 = day34.getYear();
        long long39 = day34.getLastMillisecond();
        timeSeries1.setKey((java.lang.Comparable) long39);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711997999999L + "'", long30 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711997999999L + "'", long37 == 1711997999999L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2024 + "'", int38 == 2024);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1712041199999L + "'", long39 == 1712041199999L);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double11 = timeSeries10.getMaxY();
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        java.lang.Number number13 = null;
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day12, number13, false);
        double double16 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries10.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day19, (java.lang.Number) 2);
        int int26 = timeSeriesDataItem24.compareTo((java.lang.Object) (short) 100);
        timeSeries1.add(timeSeriesDataItem24);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        int int36 = timeSeriesDataItem24.compareTo((java.lang.Object) timeSeries29);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener39 = null;
        timeSeries38.addChangeListener(seriesChangeListener39);
        long long41 = timeSeries38.getMaximumItemAge();
        java.lang.String str42 = timeSeries38.getDescription();
        double double43 = timeSeries38.getMaxY();
        timeSeries38.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double48 = timeSeries47.getMaxY();
        org.jfree.data.time.Day day49 = new org.jfree.data.time.Day();
        java.lang.Number number50 = null;
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day49, number50, false);
        double double53 = timeSeries47.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        timeSeries55.add((org.jfree.data.time.RegularTimePeriod) day56, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem61 = timeSeries47.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day56, (java.lang.Number) 2);
        int int63 = timeSeriesDataItem61.compareTo((java.lang.Object) (short) 100);
        timeSeries38.add(timeSeriesDataItem61);
        org.jfree.data.time.TimeSeries timeSeries66 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day67 = new org.jfree.data.time.Day();
        timeSeries66.add((org.jfree.data.time.RegularTimePeriod) day67, (double) (short) 0, false);
        timeSeries66.setMaximumItemAge((long) 1);
        int int73 = timeSeriesDataItem61.compareTo((java.lang.Object) timeSeries66);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = timeSeriesDataItem61.getPeriod();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries29.add(timeSeriesDataItem61);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are attempting to add an observation for the time period 1-April-2024 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 9223372036854775807L + "'", long41 == 9223372036854775807L);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(timeSeriesDataItem61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = year1.previous();
        int int25 = year1.getYear();
        int int26 = year1.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = year1.previous();
        long long28 = year1.getLastMillisecond();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2024 + "'", int25 == 2024);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2024 + "'", int26 == 2024);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1735718399999L + "'", long28 == 1735718399999L);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 12);
        java.lang.String str2 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        timeSeries13.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries13.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent22 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean23 = timeSeries13.equals((java.lang.Object) seriesChangeEvent22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        int int26 = day24.compareTo((java.lang.Object) (short) 100);
        java.lang.String str27 = day24.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries13.getDataItem((org.jfree.data.time.RegularTimePeriod) day24);
        timeSeries6.add(timeSeriesDataItem28);
        timeSeries1.add(timeSeriesDataItem28);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        timeSeries32.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries32.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent41 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean42 = timeSeries32.equals((java.lang.Object) seriesChangeEvent41);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        int int45 = day43.compareTo((java.lang.Object) (short) 100);
        java.lang.String str46 = day43.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries32.getDataItem((org.jfree.data.time.RegularTimePeriod) day43);
        timeSeriesDataItem47.setSelected(false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries1.addOrUpdate(timeSeriesDataItem47);
        org.jfree.data.time.TimeSeries timeSeries52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        timeSeries52.add((org.jfree.data.time.RegularTimePeriod) day53, (double) (short) 0, false);
        java.util.Date date57 = day53.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = day53.previous();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem60 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day53, (java.lang.Number) 5);
        org.jfree.data.time.TimeSeries timeSeries62 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list63 = timeSeries62.data;
        org.jfree.data.time.TimeSeries timeSeries64 = timeSeries1.addAndOrUpdate(timeSeries62);
        java.lang.Class class65 = timeSeries64.getTimePeriodClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1-April-2024" + "'", str27, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1-April-2024" + "'", str46, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem47);
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(timeSeriesDataItem60);
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertNotNull(timeSeries64);
        org.junit.Assert.assertNull(class65);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.setMaximumItemCount(2024);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        timeSeries6.add((org.jfree.data.time.RegularTimePeriod) day7, (double) (short) 0, false);
        java.util.Date date11 = day7.getStart();
        boolean boolean12 = timeSeries1.equals((java.lang.Object) date11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener15 = null;
        timeSeries14.addChangeListener(seriesChangeListener15);
        org.jfree.data.time.Month month17 = new org.jfree.data.time.Month();
        long long18 = month17.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener21 = null;
        timeSeries20.removeChangeListener(seriesChangeListener21);
        org.jfree.data.time.TimeSeries timeSeries24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day();
        timeSeries24.add((org.jfree.data.time.RegularTimePeriod) day25, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries20.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day25, (java.lang.Number) 10L);
        long long31 = day25.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries32 = timeSeries14.createCopy((org.jfree.data.time.RegularTimePeriod) month17, (org.jfree.data.time.RegularTimePeriod) day25);
        java.lang.Number number33 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) month17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = month17.next();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent35 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711954800000L + "'", long18 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1711997999999L + "'", long31 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries32);
        org.junit.Assert.assertNull(number33);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        timeSeries2.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        org.jfree.data.time.TimeSeries timeSeries34 = timeSeries2.addAndOrUpdate(timeSeries10);
        timeSeries34.fireSeriesChanged();
        boolean boolean36 = fixedMillisecond0.equals((java.lang.Object) timeSeries34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = fixedMillisecond0.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = fixedMillisecond0.previous();
        java.util.Date date39 = fixedMillisecond0.getEnd();
        java.util.TimeZone timeZone40 = null;
        java.util.Locale locale41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month42 = new org.jfree.data.time.Month(date39, timeZone40, locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(timeSeries34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Mon Apr 01 11:24:03 PDT 2024");
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.addChangeListener(seriesChangeListener10);
        long long12 = timeSeries9.getMaximumItemAge();
        java.lang.String str13 = timeSeries9.getDescription();
        double double14 = timeSeries9.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        timeSeries16.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = timeSeries16.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent25 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean26 = timeSeries16.equals((java.lang.Object) seriesChangeEvent25);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        int int29 = day27.compareTo((java.lang.Object) (short) 100);
        java.lang.String str30 = day27.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = timeSeries16.getDataItem((org.jfree.data.time.RegularTimePeriod) day27);
        timeSeries9.add(timeSeriesDataItem31);
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries1.addAndOrUpdate(timeSeries9);
        org.jfree.data.time.Month month34 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year35 = month34.getYear();
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = month40.next();
        int int57 = year35.compareTo((java.lang.Object) month40);
        org.jfree.data.time.Year year58 = month40.getYear();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add((org.jfree.data.time.RegularTimePeriod) year58, (double) 1711995800237L);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9223372036854775807L + "'", long12 == 9223372036854775807L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1-April-2024" + "'", str30, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem31);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertNotNull(year35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(year58);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        long long40 = timeSeries37.getMaximumItemAge();
        java.lang.String str41 = timeSeries37.getDescription();
        double double42 = timeSeries37.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        timeSeries44.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeries44.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent53 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean54 = timeSeries44.equals((java.lang.Object) seriesChangeEvent53);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        int int57 = day55.compareTo((java.lang.Object) (short) 100);
        java.lang.String str58 = day55.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries44.getDataItem((org.jfree.data.time.RegularTimePeriod) day55);
        timeSeries37.add(timeSeriesDataItem59);
        org.jfree.data.time.TimeSeries timeSeries61 = timeSeries29.addAndOrUpdate(timeSeries37);
        timeSeries61.fireSeriesChanged();
        boolean boolean63 = fixedMillisecond27.equals((java.lang.Object) timeSeries61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = fixedMillisecond27.previous();
        java.util.Calendar calendar65 = null;
        fixedMillisecond27.peg(calendar65);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = year68.previous();
        org.jfree.data.time.TimeSeries timeSeries70 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond27, (org.jfree.data.time.RegularTimePeriod) year68);
        java.lang.Object obj71 = timeSeries70.clone();
        java.util.Collection collection72 = timeSeries70.getTimePeriods();
        java.lang.Class class73 = timeSeries70.timePeriodClass;
        org.jfree.data.time.TimeSeries timeSeries75 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean76 = timeSeries75.isEmpty();
        timeSeries75.setMaximumItemCount(2024);
        org.jfree.data.time.TimeSeries timeSeries80 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day81 = new org.jfree.data.time.Day();
        timeSeries80.add((org.jfree.data.time.RegularTimePeriod) day81, (double) (short) 0, false);
        java.util.Date date85 = day81.getStart();
        boolean boolean86 = timeSeries75.equals((java.lang.Object) date85);
        org.jfree.data.time.Month month87 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year88 = month87.getYear();
        long long89 = year88.getLastMillisecond();
        timeSeries75.add((org.jfree.data.time.RegularTimePeriod) year88, (java.lang.Number) 6);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem92 = timeSeries70.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year88);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod93 = year88.previous();
        org.jfree.data.time.TimeSeries timeSeries95 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list96 = timeSeries95.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener97 = null;
        timeSeries95.addChangeListener(seriesChangeListener97);
        int int99 = year88.compareTo((java.lang.Object) timeSeries95);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223372036854775807L + "'", long40 == 9223372036854775807L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1-April-2024" + "'", str58, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(timeSeries61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeSeries70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(year88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1735718399999L + "'", long89 == 1735718399999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem92);
        org.junit.Assert.assertNotNull(regularTimePeriod93);
        org.junit.Assert.assertNotNull(list96);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getLastMillisecond();
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        int int12 = month9.compareTo((java.lang.Object) month11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        int int43 = month9.compareTo((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day50);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day59 = new org.jfree.data.time.Day();
        timeSeries58.add((org.jfree.data.time.RegularTimePeriod) day59, (double) (short) 0, false);
        java.util.Date date63 = day59.getStart();
        org.jfree.data.time.SerialDate serialDate64 = day59.getSerialDate();
        org.jfree.data.time.SerialDate serialDate65 = day59.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem66 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day59);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo67 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent68 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries1, seriesChangeInfo67);
        timeSeries1.removeAgedItems(false);
        int int71 = timeSeries1.getMaximumItemCount();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate64);
        org.junit.Assert.assertNotNull(serialDate65);
        org.junit.Assert.assertNotNull(timeSeriesDataItem66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2147483647 + "'", int71 == 2147483647);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = timeSeriesDataItem23.getPeriod();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.clear();
        timeSeries1.setNotify(false);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        int int7 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day6);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double10 = timeSeries9.getMaxY();
        java.util.Collection collection11 = timeSeries9.getTimePeriods();
        boolean boolean12 = timeSeries1.equals((java.lang.Object) collection11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        java.util.Date date22 = day18.getStart();
        org.jfree.data.time.SerialDate serialDate23 = day18.getSerialDate();
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        int int26 = day24.compareTo((java.lang.Object) (short) 100);
        java.util.Date date27 = day24.getEnd();
        long long28 = day24.getLastMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries14.createCopy((org.jfree.data.time.RegularTimePeriod) day18, (org.jfree.data.time.RegularTimePeriod) day24);
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        timeSeries31.add((org.jfree.data.time.RegularTimePeriod) day32, (double) (short) 0, false);
        java.util.Date date36 = day32.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = day32.previous();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries29.addOrUpdate(regularTimePeriod37, (double) 1711995724628L);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries1.getDataItem(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(collection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1712041199999L + "'", long28 == 1712041199999L);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNull(timeSeriesDataItem39);
        org.junit.Assert.assertNull(timeSeriesDataItem40);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.lang.Comparable comparable3 = timeSeries1.getKey();
        boolean boolean4 = timeSeries1.isEmpty();
        org.jfree.data.time.TimeSeries timeSeries5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeries timeSeries6 = timeSeries1.addAndOrUpdate(timeSeries5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + comparable3 + "' != '" + 100L + "'", comparable3, 100L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        int int6 = day2.getDayOfMonth();
        long long7 = day2.getLastMillisecond();
        int int9 = day2.compareTo((java.lang.Object) 10);
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = day2.getFirstMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1712041199999L + "'", long7 == 1712041199999L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double11 = timeSeries10.getMaxY();
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        java.lang.Number number13 = null;
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day12, number13, false);
        double double16 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries10.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day19, (java.lang.Number) 2);
        int int26 = timeSeriesDataItem24.compareTo((java.lang.Object) (short) 100);
        timeSeries1.add(timeSeriesDataItem24);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener30 = null;
        timeSeries29.removeChangeListener(seriesChangeListener30);
        java.lang.String str32 = timeSeries29.getRangeDescription();
        java.util.List list33 = timeSeries29.getItems();
        int int34 = timeSeriesDataItem24.compareTo((java.lang.Object) timeSeries29);
        org.jfree.data.time.TimeSeries timeSeries35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeries timeSeries36 = timeSeries29.addAndOrUpdate(timeSeries35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Value" + "'", str32, "Value");
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        timeSeries4.add((org.jfree.data.time.RegularTimePeriod) day5, (double) (short) 0, false);
        timeSeries4.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = timeSeries4.getNextTimePeriod();
        org.jfree.data.time.Month month12 = new org.jfree.data.time.Month();
        long long13 = month12.getLastMillisecond();
        org.jfree.data.time.Month month14 = new org.jfree.data.time.Month();
        int int15 = month12.compareTo((java.lang.Object) month14);
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list18 = timeSeries17.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries17.addChangeListener(seriesChangeListener19);
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener23 = null;
        timeSeries22.addChangeListener(seriesChangeListener23);
        org.jfree.data.time.Month month25 = new org.jfree.data.time.Month();
        long long26 = month25.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.removeChangeListener(seriesChangeListener29);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem38 = timeSeries28.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day33, (java.lang.Number) 10L);
        long long39 = day33.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries40 = timeSeries22.createCopy((org.jfree.data.time.RegularTimePeriod) month25, (org.jfree.data.time.RegularTimePeriod) day33);
        timeSeries22.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener43 = null;
        timeSeries22.removeChangeListener(seriesChangeListener43);
        org.jfree.data.time.TimeSeries timeSeries45 = timeSeries17.addAndOrUpdate(timeSeries22);
        int int46 = month12.compareTo((java.lang.Object) timeSeries22);
        org.jfree.data.time.TimeSeries timeSeries48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries48.removeChangeListener(seriesChangeListener49);
        org.jfree.data.time.TimeSeries timeSeries52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        timeSeries52.add((org.jfree.data.time.RegularTimePeriod) day53, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem58 = timeSeries48.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day53, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries59 = timeSeries4.createCopy((org.jfree.data.time.RegularTimePeriod) month12, (org.jfree.data.time.RegularTimePeriod) day53);
        org.jfree.data.time.TimeSeries timeSeries61 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day62 = new org.jfree.data.time.Day();
        timeSeries61.add((org.jfree.data.time.RegularTimePeriod) day62, (double) (short) 0, false);
        java.util.Date date66 = day62.getStart();
        org.jfree.data.time.SerialDate serialDate67 = day62.getSerialDate();
        org.jfree.data.time.SerialDate serialDate68 = day62.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = timeSeries4.getDataItem((org.jfree.data.time.RegularTimePeriod) day62);
        timeSeries1.add(timeSeriesDataItem69);
        timeSeries1.removeAgedItems(false);
        org.jfree.data.time.TimeSeries timeSeries74 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day75 = new org.jfree.data.time.Day();
        timeSeries74.add((org.jfree.data.time.RegularTimePeriod) day75, (double) (short) 0, false);
        int int79 = day75.getDayOfMonth();
        long long80 = day75.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = day75.previous();
        java.util.Date date82 = regularTimePeriod81.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond83 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = fixedMillisecond83.next();
        java.util.Date date85 = fixedMillisecond83.getTime();
        long long86 = fixedMillisecond83.getSerialIndex();
        java.util.Calendar calendar87 = null;
        long long88 = fixedMillisecond83.getMiddleMillisecond(calendar87);
        org.jfree.data.time.TimeSeries timeSeries89 = timeSeries1.createCopy(regularTimePeriod81, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond83);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1714546799999L + "'", long13 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711954800000L + "'", long26 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1711997999999L + "'", long39 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries40);
        org.junit.Assert.assertNotNull(timeSeries45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem58);
        org.junit.Assert.assertNotNull(timeSeries59);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate67);
        org.junit.Assert.assertNotNull(serialDate68);
        org.junit.Assert.assertNotNull(timeSeriesDataItem69);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1712041199999L + "'", long80 == 1712041199999L);
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertNotNull(date85);
// flaky:         org.junit.Assert.assertEquals(date85.toString(), "Mon Apr 01 11:24:06 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1711995846354L + "'", long86 == 1711995846354L);
// flaky:         org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1711995846354L + "'", long88 == 1711995846354L);
        org.junit.Assert.assertNotNull(timeSeries89);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        java.lang.Number number34 = timeSeriesDataItem32.getValue();
        timeSeriesDataItem32.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries1.addOrUpdate(timeSeriesDataItem32);
        int int38 = timeSeries1.getItemCount();
        boolean boolean39 = timeSeries1.getNotify();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number41 = timeSeries1.getValue(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 0.0d + "'", number34, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        timeSeries2.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        org.jfree.data.time.TimeSeries timeSeries34 = timeSeries2.addAndOrUpdate(timeSeries10);
        timeSeries34.fireSeriesChanged();
        boolean boolean36 = fixedMillisecond0.equals((java.lang.Object) timeSeries34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = fixedMillisecond0.previous();
        java.util.Calendar calendar38 = null;
        fixedMillisecond0.peg(calendar38);
        long long40 = fixedMillisecond0.getSerialIndex();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) long40, "org.jfree.data.time.TimePeriodFormatException: ", "April 2024");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeries timeSeries46 = timeSeries43.createCopy((int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(timeSeries34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1711995848100L + "'", long40 == 1711995848100L);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        java.lang.Number number34 = timeSeriesDataItem32.getValue();
        timeSeriesDataItem32.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries1.addOrUpdate(timeSeriesDataItem32);
        int int38 = timeSeries1.getItemCount();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = timeSeries1.getTimePeriod((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 0.0d + "'", number34, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries1.removeChangeListener(seriesChangeListener6);
        java.lang.Class class8 = timeSeries1.getTimePeriodClass();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.removeChangeListener(seriesChangeListener9);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        java.util.Date date17 = day13.getStart();
        org.jfree.data.time.SerialDate serialDate18 = day13.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo20);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo22 = seriesChangeEvent21.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo23 = null;
        seriesChangeEvent21.setSummary(seriesChangeInfo23);
        int int25 = day13.compareTo((java.lang.Object) seriesChangeEvent21);
        boolean boolean26 = timeSeries1.equals((java.lang.Object) seriesChangeEvent21);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        long long31 = timeSeries28.getMaximumItemAge();
        java.lang.String str32 = timeSeries28.getDescription();
        timeSeries28.fireSeriesChanged();
        java.util.Collection collection34 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries28);
        int int35 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list38 = timeSeries37.data;
        org.jfree.data.time.TimeSeries timeSeries40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day41 = new org.jfree.data.time.Day();
        timeSeries40.add((org.jfree.data.time.RegularTimePeriod) day41, (double) (short) 0, false);
        java.util.Date date45 = day41.getStart();
        org.jfree.data.time.SerialDate serialDate46 = day41.getSerialDate();
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        int int49 = day47.compareTo((java.lang.Object) (short) 100);
        java.util.Date date50 = day47.getEnd();
        long long51 = day47.getLastMillisecond();
        org.jfree.data.time.TimeSeries timeSeries52 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) day41, (org.jfree.data.time.RegularTimePeriod) day47);
        org.jfree.data.time.Month month53 = new org.jfree.data.time.Month();
        long long54 = month53.getLastMillisecond();
        org.jfree.data.time.Month month55 = new org.jfree.data.time.Month();
        int int56 = month53.compareTo((java.lang.Object) month55);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list59 = timeSeries58.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener60 = null;
        timeSeries58.addChangeListener(seriesChangeListener60);
        org.jfree.data.time.TimeSeries timeSeries63 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener64 = null;
        timeSeries63.addChangeListener(seriesChangeListener64);
        org.jfree.data.time.Month month66 = new org.jfree.data.time.Month();
        long long67 = month66.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries69 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener70 = null;
        timeSeries69.removeChangeListener(seriesChangeListener70);
        org.jfree.data.time.TimeSeries timeSeries73 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day74 = new org.jfree.data.time.Day();
        timeSeries73.add((org.jfree.data.time.RegularTimePeriod) day74, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem79 = timeSeries69.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day74, (java.lang.Number) 10L);
        long long80 = day74.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries81 = timeSeries63.createCopy((org.jfree.data.time.RegularTimePeriod) month66, (org.jfree.data.time.RegularTimePeriod) day74);
        timeSeries63.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener84 = null;
        timeSeries63.removeChangeListener(seriesChangeListener84);
        org.jfree.data.time.TimeSeries timeSeries86 = timeSeries58.addAndOrUpdate(timeSeries63);
        int int87 = month53.compareTo((java.lang.Object) timeSeries63);
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent89 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo90 = null;
        seriesChangeEvent89.setSummary(seriesChangeInfo90);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo92 = seriesChangeEvent89.getSummary();
        java.lang.Object obj93 = seriesChangeEvent89.getSource();
        boolean boolean94 = month53.equals(obj93);
        int int95 = day41.compareTo((java.lang.Object) month53);
        java.util.Date date96 = day41.getStart();
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day41, (java.lang.Number) 1711995736212L);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate18);
        org.junit.Assert.assertNull(seriesChangeInfo22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 9223372036854775807L + "'", long31 == 9223372036854775807L);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(collection34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1712041199999L + "'", long51 == 1712041199999L);
        org.junit.Assert.assertNotNull(timeSeries52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1714546799999L + "'", long54 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1711954800000L + "'", long67 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1711997999999L + "'", long80 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries81);
        org.junit.Assert.assertNotNull(timeSeries86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNull(seriesChangeInfo92);
        org.junit.Assert.assertEquals("'" + obj93 + "' != '" + 10.0d + "'", obj93, 10.0d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(date96);
        org.junit.Assert.assertEquals(date96.toString(), "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.jfree.data.time.Day day1 = org.jfree.data.time.Day.parseDay("April 52");
        org.junit.Assert.assertNull(day1);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.util.List list5 = timeSeries1.getItems();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list8 = timeSeries7.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries7.addChangeListener(seriesChangeListener9);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.addChangeListener(seriesChangeListener13);
        org.jfree.data.time.Month month15 = new org.jfree.data.time.Month();
        long long16 = month15.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.removeChangeListener(seriesChangeListener19);
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries18.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day23, (java.lang.Number) 10L);
        long long29 = day23.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries30 = timeSeries12.createCopy((org.jfree.data.time.RegularTimePeriod) month15, (org.jfree.data.time.RegularTimePeriod) day23);
        timeSeries12.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries12.removeChangeListener(seriesChangeListener33);
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries7.addAndOrUpdate(timeSeries12);
        org.jfree.data.time.TimeSeries timeSeries36 = timeSeries1.addAndOrUpdate(timeSeries7);
        java.util.Collection collection37 = timeSeries7.getTimePeriods();
        int int38 = timeSeries7.getItemCount();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711954800000L + "'", long16 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711997999999L + "'", long29 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries30);
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertNotNull(timeSeries36);
        org.junit.Assert.assertNotNull(collection37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        long long25 = month6.getLastMillisecond();
        org.jfree.data.time.FixedMillisecond fixedMillisecond26 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = fixedMillisecond26.next();
        java.util.Date date28 = fixedMillisecond26.getTime();
        long long29 = fixedMillisecond26.getLastMillisecond();
        java.util.Date date30 = fixedMillisecond26.getTime();
        java.util.Calendar calendar31 = null;
        fixedMillisecond26.peg(calendar31);
        long long33 = fixedMillisecond26.getLastMillisecond();
        boolean boolean34 = month6.equals((java.lang.Object) fixedMillisecond26);
        java.util.Date date35 = fixedMillisecond26.getTime();
        java.util.TimeZone timeZone36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month37 = new org.jfree.data.time.Month(date35, timeZone36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1714546799999L + "'", long25 == 1714546799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Mon Apr 01 11:24:10 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711995850231L + "'", long29 == 1711995850231L);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Apr 01 11:24:10 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711995850231L + "'", long33 == 1711995850231L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Mon Apr 01 11:24:10 PDT 2024");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        timeSeries1.removeAgedItems(true);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        timeSeries30.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = timeSeries30.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent39 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean40 = timeSeries30.equals((java.lang.Object) seriesChangeEvent39);
        org.jfree.data.time.Day day41 = new org.jfree.data.time.Day();
        int int43 = day41.compareTo((java.lang.Object) (short) 100);
        java.lang.String str44 = day41.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem45 = timeSeries30.getDataItem((org.jfree.data.time.RegularTimePeriod) day41);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem46 = timeSeries1.addOrUpdate(timeSeriesDataItem45);
        org.jfree.data.time.TimeSeries timeSeries48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries48.removeChangeListener(seriesChangeListener49);
        java.lang.String str51 = timeSeries48.getRangeDescription();
        java.util.List list52 = timeSeries48.getItems();
        timeSeries1.data = list52;
        timeSeries1.fireSeriesChanged();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1-April-2024" + "'", str44, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem45);
        org.junit.Assert.assertNotNull(timeSeriesDataItem46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Value" + "'", str51, "Value");
        org.junit.Assert.assertNotNull(list52);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        timeSeries1.removeAgedItems(false);
        java.lang.String str9 = timeSeries1.getRangeDescription();
        java.lang.Object obj10 = timeSeries1.clone();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent11 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value" + "'", str9, "Value");
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        java.lang.String str7 = timeSeries1.getDomainDescription();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        timeSeries9.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = timeSeries9.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean19 = timeSeries9.equals((java.lang.Object) seriesChangeEvent18);
        org.jfree.data.time.Day day20 = new org.jfree.data.time.Day();
        int int22 = day20.compareTo((java.lang.Object) (short) 100);
        java.lang.String str23 = day20.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries9.getDataItem((org.jfree.data.time.RegularTimePeriod) day20);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = timeSeries9.getNextTimePeriod();
        org.jfree.data.time.Year year27 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        java.util.Date date34 = day30.getStart();
        org.jfree.data.time.SerialDate serialDate35 = day30.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo37 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent38 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo37);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo39 = seriesChangeEvent38.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo40 = null;
        seriesChangeEvent38.setSummary(seriesChangeInfo40);
        int int42 = day30.compareTo((java.lang.Object) seriesChangeEvent38);
        int int43 = year27.compareTo((java.lang.Object) seriesChangeEvent38);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.addChangeListener(seriesChangeListener46);
        org.jfree.data.time.Month month48 = new org.jfree.data.time.Month();
        long long49 = month48.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries51 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener52 = null;
        timeSeries51.removeChangeListener(seriesChangeListener52);
        org.jfree.data.time.TimeSeries timeSeries55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        timeSeries55.add((org.jfree.data.time.RegularTimePeriod) day56, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem61 = timeSeries51.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day56, (java.lang.Number) 10L);
        long long62 = day56.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries63 = timeSeries45.createCopy((org.jfree.data.time.RegularTimePeriod) month48, (org.jfree.data.time.RegularTimePeriod) day56);
        long long64 = month48.getSerialIndex();
        boolean boolean65 = year27.equals((java.lang.Object) month48);
        timeSeries9.setKey((java.lang.Comparable) year27);
        java.util.List list67 = timeSeries9.data;
        timeSeries1.data = list67;
        java.lang.String str69 = timeSeries1.getDescription();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Time" + "'", str7, "Time");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1-April-2024" + "'", str23, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate35);
        org.junit.Assert.assertNull(seriesChangeInfo39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1711954800000L + "'", long49 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1711997999999L + "'", long62 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 24292L + "'", long64 == 24292L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        long long25 = year24.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem27 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) year24, (java.lang.Number) 1719907199999L);
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1719907199999L + "'", long25 == 1719907199999L);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double11 = timeSeries10.getMaxY();
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        java.lang.Number number13 = null;
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day12, number13, false);
        double double16 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries10.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day19, (java.lang.Number) 2);
        int int26 = timeSeriesDataItem24.compareTo((java.lang.Object) (short) 100);
        timeSeries1.add(timeSeriesDataItem24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = timeSeriesDataItem24.getPeriod();
        timeSeriesDataItem24.setValue((java.lang.Number) (short) 100);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries1.removeChangeListener(seriesChangeListener22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        long long25 = day24.getSerialIndex();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 1.0f, true);
        long long29 = day24.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 1714546799999L);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day34, (double) (short) 0, false);
        timeSeries33.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = timeSeries33.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent42 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean43 = timeSeries33.equals((java.lang.Object) seriesChangeEvent42);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        int int46 = day44.compareTo((java.lang.Object) (short) 100);
        java.lang.String str47 = day44.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem48 = timeSeries33.getDataItem((org.jfree.data.time.RegularTimePeriod) day44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = day44.previous();
        org.jfree.data.time.TimeSeries timeSeries51 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener52 = null;
        timeSeries51.addChangeListener(seriesChangeListener52);
        long long54 = timeSeries51.getMaximumItemAge();
        java.lang.String str55 = timeSeries51.getDescription();
        timeSeries51.fireSeriesChanged();
        boolean boolean57 = day44.equals((java.lang.Object) timeSeries51);
        org.jfree.data.time.FixedMillisecond fixedMillisecond58 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = fixedMillisecond58.next();
        java.util.Calendar calendar60 = null;
        long long61 = fixedMillisecond58.getMiddleMillisecond(calendar60);
        timeSeries51.delete((org.jfree.data.time.RegularTimePeriod) fixedMillisecond58);
        org.jfree.data.time.FixedMillisecond fixedMillisecond64 = new org.jfree.data.time.FixedMillisecond(1711997999999L);
        long long65 = fixedMillisecond64.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem67 = timeSeries51.addOrUpdate((org.jfree.data.time.RegularTimePeriod) fixedMillisecond64, 0.0d);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = fixedMillisecond64.next();
        int int69 = timeSeriesDataItem31.compareTo((java.lang.Object) regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 45383L + "'", long25 == 45383L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1712041199999L + "'", long29 == 1712041199999L);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1-April-2024" + "'", str47, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem48);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 9223372036854775807L + "'", long54 == 9223372036854775807L);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1711995851026L + "'", long61 == 1711995851026L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1711997999999L + "'", long65 == 1711997999999L);
        org.junit.Assert.assertNull(timeSeriesDataItem67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = day12.previous();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        java.lang.String str23 = timeSeries19.getDescription();
        timeSeries19.fireSeriesChanged();
        boolean boolean25 = day12.equals((java.lang.Object) timeSeries19);
        org.jfree.data.time.FixedMillisecond fixedMillisecond26 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = fixedMillisecond26.next();
        java.util.Calendar calendar28 = null;
        long long29 = fixedMillisecond26.getMiddleMillisecond(calendar28);
        timeSeries19.delete((org.jfree.data.time.RegularTimePeriod) fixedMillisecond26);
        long long31 = fixedMillisecond26.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = fixedMillisecond26.next();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711995851394L + "'", long29 == 1711995851394L);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1711995851394L + "'", long31 == 1711995851394L);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        long long25 = month6.getLastMillisecond();
        org.jfree.data.time.FixedMillisecond fixedMillisecond26 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = fixedMillisecond26.next();
        java.util.Date date28 = fixedMillisecond26.getTime();
        long long29 = fixedMillisecond26.getLastMillisecond();
        java.util.Date date30 = fixedMillisecond26.getTime();
        java.util.Calendar calendar31 = null;
        fixedMillisecond26.peg(calendar31);
        long long33 = fixedMillisecond26.getLastMillisecond();
        boolean boolean34 = month6.equals((java.lang.Object) fixedMillisecond26);
        java.util.Calendar calendar35 = null;
        long long36 = fixedMillisecond26.getLastMillisecond(calendar35);
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1714546799999L + "'", long25 == 1714546799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Mon Apr 01 11:24:11 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711995851498L + "'", long29 == 1711995851498L);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Apr 01 11:24:11 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711995851498L + "'", long33 == 1711995851498L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711995851498L + "'", long36 == 1711995851498L);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        long long2 = month0.getFirstMillisecond();
        long long3 = month0.getSerialIndex();
        long long4 = month0.getSerialIndex();
        long long5 = month0.getFirstMillisecond();
        java.util.Date date6 = month0.getEnd();
        java.util.TimeZone timeZone7 = null;
        java.util.Locale locale8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year9 = new org.jfree.data.time.Year(date6, timeZone7, locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954800000L + "'", long2 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 24292L + "'", long3 == 24292L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24292L + "'", long4 == 24292L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Apr 30 23:59:59 PDT 2024");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        java.lang.String str7 = timeSeries1.getDescription();
        java.lang.Comparable comparable8 = timeSeries1.getKey();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + comparable8 + "' != '" + (short) 100 + "'", comparable8, (short) 100);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.next();
        java.lang.Object obj2 = null;
        boolean boolean3 = fixedMillisecond0.equals(obj2);
        java.util.Date date4 = fixedMillisecond0.getTime();
        java.util.Date date5 = fixedMillisecond0.getStart();
        long long6 = fixedMillisecond0.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem8 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond0, (java.lang.Number) (-1.0d));
        java.lang.Object obj9 = null;
        boolean boolean10 = timeSeriesDataItem8.equals(obj9);
        org.junit.Assert.assertNotNull(regularTimePeriod1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Apr 01 11:24:11 PDT 2024");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Apr 01 11:24:11 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711995851658L + "'", long6 == 1711995851658L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.Comparable comparable5 = timeSeries1.getKey();
        java.lang.Object obj6 = timeSeries1.clone();
        int int7 = timeSeries1.getMaximumItemCount();
        java.lang.Object obj8 = timeSeries1.clone();
        java.lang.Class class9 = timeSeries1.timePeriodClass;
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertEquals("'" + comparable5 + "' != '" + (short) 100 + "'", comparable5, (short) 100);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(class9);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        timeSeries1.setKey((java.lang.Comparable) "hi!");
        boolean boolean18 = timeSeries1.isEmpty();
        java.beans.PropertyChangeListener propertyChangeListener19 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener19);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.util.Date date16 = day10.getEnd();
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day(date16);
        long long18 = day17.getFirstMillisecond();
        java.lang.Object obj19 = null;
        int int20 = day17.compareTo(obj19);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711954800000L + "'", long18 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        long long3 = month0.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = month0.previous();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = month0.getFirstMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1711954800000L + "'", long1 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24292L + "'", long2 == 24292L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1714546799999L + "'", long3 == 1714546799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Year year19 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        java.util.Date date26 = day22.getStart();
        org.jfree.data.time.SerialDate serialDate27 = day22.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo29);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo31 = seriesChangeEvent30.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo32 = null;
        seriesChangeEvent30.setSummary(seriesChangeInfo32);
        int int34 = day22.compareTo((java.lang.Object) seriesChangeEvent30);
        int int35 = year19.compareTo((java.lang.Object) seriesChangeEvent30);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        boolean boolean57 = year19.equals((java.lang.Object) month40);
        timeSeries1.setKey((java.lang.Comparable) year19);
        int int59 = year19.getYear();
        java.util.Calendar calendar60 = null;
        // The following exception was thrown during execution in test generation
        try {
            year19.peg(calendar60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate27);
        org.junit.Assert.assertNull(seriesChangeInfo31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        int int6 = day2.getDayOfMonth();
        long long7 = day2.getLastMillisecond();
        int int8 = day2.getMonth();
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, false);
        timeSeries10.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        java.util.Date date23 = day19.getStart();
        int int24 = timeSeries10.getIndex((org.jfree.data.time.RegularTimePeriod) day19);
        int int25 = timeSeries10.getMaximumItemCount();
        int int26 = day2.compareTo((java.lang.Object) timeSeries10);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day2, (java.lang.Number) 1711995754369L);
        long long29 = day2.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1712041199999L + "'", long7 == 1712041199999L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1712041199999L + "'", long29 == 1712041199999L);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        timeSeries1.removeAgedItems(true);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        timeSeries30.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = timeSeries30.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent39 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean40 = timeSeries30.equals((java.lang.Object) seriesChangeEvent39);
        org.jfree.data.time.Day day41 = new org.jfree.data.time.Day();
        int int43 = day41.compareTo((java.lang.Object) (short) 100);
        java.lang.String str44 = day41.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem45 = timeSeries30.getDataItem((org.jfree.data.time.RegularTimePeriod) day41);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem46 = timeSeries1.addOrUpdate(timeSeriesDataItem45);
        boolean boolean47 = timeSeries1.isEmpty();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1-April-2024" + "'", str44, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem45);
        org.junit.Assert.assertNotNull(timeSeriesDataItem46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        timeSeries1.setDomainDescription("hi!");
        java.lang.Object obj7 = timeSeries1.clone();
        timeSeries1.setDescription("Value");
        timeSeries1.setRangeDescription("");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.Year year19 = new org.jfree.data.time.Year(2);
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) year19);
        int int21 = year19.getYear();
        long long22 = year19.getFirstMillisecond();
        java.util.Calendar calendar23 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long24 = year19.getLastMillisecond(calendar23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-62104204800000L) + "'", long22 == (-62104204800000L));
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.text.DateFormat dateFormat0 = org.jfree.data.time.Day.DATE_FORMAT;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent1 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) dateFormat0);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo2 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent3 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) seriesChangeEvent1, seriesChangeInfo2);
        java.lang.String str4 = seriesChangeEvent1.toString();
        org.junit.Assert.assertNotNull(dateFormat0);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getLastMillisecond();
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        int int12 = month9.compareTo((java.lang.Object) month11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        int int43 = month9.compareTo((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day50);
        java.beans.PropertyChangeListener propertyChangeListener57 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener57);
        org.jfree.data.time.TimeSeries timeSeries60 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day61 = new org.jfree.data.time.Day();
        timeSeries60.add((org.jfree.data.time.RegularTimePeriod) day61, (double) (short) 0, false);
        timeSeries60.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries68 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day69 = new org.jfree.data.time.Day();
        timeSeries68.add((org.jfree.data.time.RegularTimePeriod) day69, (double) (short) 0, false);
        java.util.Date date73 = day69.getStart();
        org.jfree.data.time.SerialDate serialDate74 = day69.getSerialDate();
        java.lang.Number number75 = null;
        timeSeries60.update((org.jfree.data.time.RegularTimePeriod) day69, number75);
        org.jfree.data.time.TimeSeries timeSeries78 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener79 = null;
        timeSeries78.removeChangeListener(seriesChangeListener79);
        org.jfree.data.time.TimeSeries timeSeries82 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day83 = new org.jfree.data.time.Day();
        timeSeries82.add((org.jfree.data.time.RegularTimePeriod) day83, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem88 = timeSeries78.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day83, (java.lang.Number) 10L);
        long long89 = day83.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem91 = timeSeries60.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day83, (java.lang.Number) (byte) 10);
        double double92 = timeSeries60.getMaxY();
        java.lang.Object obj93 = timeSeries60.clone();
        java.lang.String str94 = timeSeries60.getDomainDescription();
        boolean boolean95 = timeSeries1.equals((java.lang.Object) timeSeries60);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener96 = null;
        timeSeries1.addChangeListener(seriesChangeListener96);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener98 = null;
        timeSeries1.removeChangeListener(seriesChangeListener98);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate74);
        org.junit.Assert.assertNull(timeSeriesDataItem88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1711997999999L + "'", long89 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 10.0d + "'", double92 == 10.0d);
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Time" + "'", str94, "Time");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.addChangeListener(seriesChangeListener10);
        long long12 = timeSeries9.getMaximumItemAge();
        java.lang.String str13 = timeSeries9.getDescription();
        double double14 = timeSeries9.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        timeSeries16.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = timeSeries16.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent25 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean26 = timeSeries16.equals((java.lang.Object) seriesChangeEvent25);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        int int29 = day27.compareTo((java.lang.Object) (short) 100);
        java.lang.String str30 = day27.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = timeSeries16.getDataItem((org.jfree.data.time.RegularTimePeriod) day27);
        timeSeries9.add(timeSeriesDataItem31);
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries1.addAndOrUpdate(timeSeries9);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo34 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent35 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries9, seriesChangeInfo34);
        java.beans.PropertyChangeListener propertyChangeListener36 = null;
        timeSeries9.addPropertyChangeListener(propertyChangeListener36);
        timeSeries9.removeAgedItems((long) 9, false);
        org.jfree.data.time.TimeSeries timeSeries42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        timeSeries42.add((org.jfree.data.time.RegularTimePeriod) day43, (double) (short) 0, false);
        java.util.Date date47 = day43.getEnd();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem48 = timeSeries9.getDataItem((org.jfree.data.time.RegularTimePeriod) day43);
        boolean boolean49 = timeSeries9.getNotify();
        timeSeries9.setDomainDescription("March 52");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9223372036854775807L + "'", long12 == 9223372036854775807L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1-April-2024" + "'", str30, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem31);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException1 = new org.jfree.data.time.TimePeriodFormatException("org.jfree.data.time.TimePeriodFormatException: 31-March-2024");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException3 = new org.jfree.data.time.TimePeriodFormatException("");
        java.lang.Throwable[] throwableArray4 = timePeriodFormatException3.getSuppressed();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException6 = new org.jfree.data.time.TimePeriodFormatException("31-March-2024");
        timePeriodFormatException3.addSuppressed((java.lang.Throwable) timePeriodFormatException6);
        timePeriodFormatException1.addSuppressed((java.lang.Throwable) timePeriodFormatException6);
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException10 = new org.jfree.data.time.TimePeriodFormatException("Overwritten values from: 100");
        timePeriodFormatException1.addSuppressed((java.lang.Throwable) timePeriodFormatException10);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        long long30 = day24.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) (byte) 10);
        double double33 = timeSeries1.getMaxY();
        java.lang.Object obj34 = timeSeries1.clone();
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day();
        timeSeries36.add((org.jfree.data.time.RegularTimePeriod) day37, (double) (short) 0, false);
        timeSeries36.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        java.util.Date date49 = day45.getStart();
        int int50 = timeSeries36.getIndex((org.jfree.data.time.RegularTimePeriod) day45);
        java.util.Date date51 = day45.getEnd();
        int int52 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day45);
        timeSeries1.removeAgedItems(true);
        int int55 = timeSeries1.getItemCount();
        timeSeries1.removeAgedItems(false);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711997999999L + "'", long30 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = year1.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = year1.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = year1.previous();
        java.lang.Class<?> wildcardClass27 = regularTimePeriod26.getClass();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo1 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent2 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo1);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo3 = seriesChangeEvent2.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo4 = null;
        seriesChangeEvent2.setSummary(seriesChangeInfo4);
        java.lang.Object obj6 = seriesChangeEvent2.getSource();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo7 = seriesChangeEvent2.getSummary();
        org.junit.Assert.assertNull(seriesChangeInfo3);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + true + "'", obj6, true);
        org.junit.Assert.assertNull(seriesChangeInfo7);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        timeSeries2.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        org.jfree.data.time.TimeSeries timeSeries34 = timeSeries2.addAndOrUpdate(timeSeries10);
        timeSeries34.fireSeriesChanged();
        boolean boolean36 = fixedMillisecond0.equals((java.lang.Object) timeSeries34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = fixedMillisecond0.previous();
        long long38 = fixedMillisecond0.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(timeSeries34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1711995854696L + "'", long38 == 1711995854696L);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double11 = timeSeries10.getMaxY();
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        java.lang.Number number13 = null;
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day12, number13, false);
        double double16 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries10.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day19, (java.lang.Number) 2);
        int int26 = timeSeriesDataItem24.compareTo((java.lang.Object) (short) 100);
        timeSeries1.add(timeSeriesDataItem24);
        java.lang.Object obj28 = timeSeriesDataItem24.clone();
        org.jfree.data.time.FixedMillisecond fixedMillisecond29 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        timeSeries31.add((org.jfree.data.time.RegularTimePeriod) day32, (double) (short) 0, false);
        timeSeries31.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries39.addChangeListener(seriesChangeListener40);
        long long42 = timeSeries39.getMaximumItemAge();
        java.lang.String str43 = timeSeries39.getDescription();
        double double44 = timeSeries39.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        timeSeries46.add((org.jfree.data.time.RegularTimePeriod) day47, (double) (short) 0, false);
        timeSeries46.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = timeSeries46.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent55 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean56 = timeSeries46.equals((java.lang.Object) seriesChangeEvent55);
        org.jfree.data.time.Day day57 = new org.jfree.data.time.Day();
        int int59 = day57.compareTo((java.lang.Object) (short) 100);
        java.lang.String str60 = day57.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem61 = timeSeries46.getDataItem((org.jfree.data.time.RegularTimePeriod) day57);
        timeSeries39.add(timeSeriesDataItem61);
        org.jfree.data.time.TimeSeries timeSeries63 = timeSeries31.addAndOrUpdate(timeSeries39);
        timeSeries63.fireSeriesChanged();
        boolean boolean65 = fixedMillisecond29.equals((java.lang.Object) timeSeries63);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = fixedMillisecond29.previous();
        long long67 = fixedMillisecond29.getLastMillisecond();
        java.util.Date date68 = fixedMillisecond29.getTime();
        int int69 = timeSeriesDataItem24.compareTo((java.lang.Object) fixedMillisecond29);
        java.lang.Object obj70 = timeSeriesDataItem24.clone();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 9223372036854775807L + "'", long42 == 9223372036854775807L);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1-April-2024" + "'", str60, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem61);
        org.junit.Assert.assertNotNull(timeSeries63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1711995854801L + "'", long67 == 1711995854801L);
        org.junit.Assert.assertNotNull(date68);
// flaky:         org.junit.Assert.assertEquals(date68.toString(), "Mon Apr 01 11:24:14 PDT 2024");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(obj70);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        java.util.Calendar calendar1 = null;
        fixedMillisecond0.peg(calendar1);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        long long30 = day24.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) (byte) 10);
        double double33 = timeSeries1.getMaxY();
        java.lang.Object obj34 = timeSeries1.clone();
        java.lang.String str35 = timeSeries1.getDomainDescription();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.delete((int) (short) 100, 2, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711997999999L + "'", long30 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Time" + "'", str35, "Time");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        java.lang.Number number34 = timeSeriesDataItem32.getValue();
        timeSeriesDataItem32.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries1.addOrUpdate(timeSeriesDataItem32);
        int int38 = timeSeries1.getItemCount();
        java.util.List list39 = timeSeries1.getItems();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 0.0d + "'", number34, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(list39);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        long long7 = day2.getFirstMillisecond();
        java.util.Date date8 = day2.getStart();
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day(date8);
        org.jfree.data.time.Month month10 = new org.jfree.data.time.Month(date8);
        org.jfree.data.time.FixedMillisecond fixedMillisecond11 = new org.jfree.data.time.FixedMillisecond(date8);
        long long12 = fixedMillisecond11.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711954800000L + "'", long12 == 1711954800000L);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        timeSeries13.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries13.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent22 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean23 = timeSeries13.equals((java.lang.Object) seriesChangeEvent22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        int int26 = day24.compareTo((java.lang.Object) (short) 100);
        java.lang.String str27 = day24.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries13.getDataItem((org.jfree.data.time.RegularTimePeriod) day24);
        timeSeries6.add(timeSeriesDataItem28);
        timeSeries1.add(timeSeriesDataItem28);
        timeSeries1.setMaximumItemCount(6);
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent33 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 6);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo34 = seriesChangeEvent33.getSummary();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1-April-2024" + "'", str27, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertNull(seriesChangeInfo34);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        timeSeries1.setDomainDescription("hi!");
        java.lang.Object obj7 = timeSeries1.clone();
        timeSeries1.setDescription("Value");
        int int10 = timeSeries1.getItemCount();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        int int6 = day2.getDayOfMonth();
        int int7 = day2.getMonth();
        java.util.Date date8 = day2.getStart();
        long long9 = day2.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1712041199999L + "'", long9 == 1712041199999L);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond(1711995706012L);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getLastMillisecond();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year3 = month2.getYear();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries5.addChangeListener(seriesChangeListener6);
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.removeChangeListener(seriesChangeListener12);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries11.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day16, (java.lang.Number) 10L);
        long long22 = day16.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries23 = timeSeries5.createCopy((org.jfree.data.time.RegularTimePeriod) month8, (org.jfree.data.time.RegularTimePeriod) day16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = month8.next();
        int int25 = year3.compareTo((java.lang.Object) month8);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = year3.next();
        boolean boolean27 = month0.equals((java.lang.Object) year3);
        int int28 = month0.getMonth();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1714546799999L + "'", long1 == 1714546799999L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954800000L + "'", long9 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711997999999L + "'", long22 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod2 = year1.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year1.next();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent4 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        long long40 = timeSeries37.getMaximumItemAge();
        java.lang.String str41 = timeSeries37.getDescription();
        double double42 = timeSeries37.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        timeSeries44.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeries44.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent53 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean54 = timeSeries44.equals((java.lang.Object) seriesChangeEvent53);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        int int57 = day55.compareTo((java.lang.Object) (short) 100);
        java.lang.String str58 = day55.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries44.getDataItem((org.jfree.data.time.RegularTimePeriod) day55);
        timeSeries37.add(timeSeriesDataItem59);
        org.jfree.data.time.TimeSeries timeSeries61 = timeSeries29.addAndOrUpdate(timeSeries37);
        timeSeries61.fireSeriesChanged();
        boolean boolean63 = fixedMillisecond27.equals((java.lang.Object) timeSeries61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = fixedMillisecond27.previous();
        java.util.Calendar calendar65 = null;
        fixedMillisecond27.peg(calendar65);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = year68.previous();
        org.jfree.data.time.TimeSeries timeSeries70 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond27, (org.jfree.data.time.RegularTimePeriod) year68);
        timeSeries70.clear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223372036854775807L + "'", long40 == 9223372036854775807L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1-April-2024" + "'", str58, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(timeSeries61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeSeries70);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        long long24 = timeSeries21.getMaximumItemAge();
        java.lang.String str25 = timeSeries21.getDescription();
        double double26 = timeSeries21.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        timeSeries28.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = timeSeries28.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent37 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean38 = timeSeries28.equals((java.lang.Object) seriesChangeEvent37);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        int int41 = day39.compareTo((java.lang.Object) (short) 100);
        java.lang.String str42 = day39.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries28.getDataItem((org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries21.add(timeSeriesDataItem43);
        java.lang.Number number45 = timeSeriesDataItem43.getValue();
        java.lang.Number number46 = timeSeriesDataItem43.getValue();
        timeSeries19.add(timeSeriesDataItem43, false);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries19.addChangeListener(seriesChangeListener49);
        org.jfree.data.time.FixedMillisecond fixedMillisecond51 = new org.jfree.data.time.FixedMillisecond();
        long long52 = fixedMillisecond51.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries19.getRawDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = timeSeriesDataItem53.getPeriod();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1-April-2024" + "'", str42, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertEquals("'" + number45 + "' != '" + 0.0d + "'", number45, 0.0d);
        org.junit.Assert.assertEquals("'" + number46 + "' != '" + 0.0d + "'", number46, 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711995856085L + "'", long52 == 1711995856085L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = day10.previous();
        long long17 = day10.getLastMillisecond();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1712041199999L + "'", long17 == 1712041199999L);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        long long20 = month4.getSerialIndex();
        long long21 = month4.getLastMillisecond();
        java.util.Calendar calendar22 = null;
        // The following exception was thrown during execution in test generation
        try {
            month4.peg(calendar22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 24292L + "'", long20 == 24292L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1714546799999L + "'", long21 == 1714546799999L);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        int int18 = timeSeries1.getItemCount();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.setMaximumItemCount((-9999));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative 'maximum' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        java.lang.String str8 = day2.toString();
        long long9 = day2.getLastMillisecond();
        long long10 = day2.getSerialIndex();
        java.lang.String str11 = day2.toString();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1-April-2024" + "'", str8, "1-April-2024");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1712041199999L + "'", long9 == 1712041199999L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 45383L + "'", long10 == 45383L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1-April-2024" + "'", str11, "1-April-2024");
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        java.lang.Number number34 = timeSeriesDataItem32.getValue();
        timeSeriesDataItem32.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries1.addOrUpdate(timeSeriesDataItem32);
        java.util.List list38 = timeSeries1.data;
        java.lang.Object obj39 = null;
        boolean boolean40 = timeSeries1.equals(obj39);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 0.0d + "'", number34, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.jfree.data.time.Year year2 = new org.jfree.data.time.Year((int) (short) -1);
        org.jfree.data.time.Month month3 = new org.jfree.data.time.Month(11, year2);
        org.jfree.data.time.Year year5 = new org.jfree.data.time.Year(1);
        int int6 = month3.compareTo((java.lang.Object) 1);
        java.util.Date date7 = month3.getEnd();
        org.jfree.data.time.FixedMillisecond fixedMillisecond8 = new org.jfree.data.time.FixedMillisecond(date7);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Nov 30 23:59:59 PST 2");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.setMaximumItemCount(2024);
        org.jfree.data.time.Month month7 = new org.jfree.data.time.Month(3, (int) '4');
        java.lang.Number number8 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) month7);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean11 = timeSeries10.isEmpty();
        timeSeries10.setMaximumItemCount(2024);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        java.util.Date date20 = day16.getStart();
        boolean boolean21 = timeSeries10.equals((java.lang.Object) date20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener24 = null;
        timeSeries23.addChangeListener(seriesChangeListener24);
        org.jfree.data.time.Month month26 = new org.jfree.data.time.Month();
        long long27 = month26.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener30 = null;
        timeSeries29.removeChangeListener(seriesChangeListener30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day34, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries29.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day34, (java.lang.Number) 10L);
        long long40 = day34.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries41 = timeSeries23.createCopy((org.jfree.data.time.RegularTimePeriod) month26, (org.jfree.data.time.RegularTimePeriod) day34);
        java.lang.Number number42 = timeSeries10.getValue((org.jfree.data.time.RegularTimePeriod) month26);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) month26, (java.lang.Number) 1735718399999L);
        java.util.Calendar calendar45 = null;
        // The following exception was thrown during execution in test generation
        try {
            month26.peg(calendar45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(number8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1711954800000L + "'", long27 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1711997999999L + "'", long40 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries41);
        org.junit.Assert.assertNull(number42);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        timeSeries23.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        timeSeries31.add((org.jfree.data.time.RegularTimePeriod) day32, (double) (short) 0, false);
        java.util.Date date36 = day32.getStart();
        org.jfree.data.time.SerialDate serialDate37 = day32.getSerialDate();
        java.lang.Number number38 = null;
        timeSeries23.update((org.jfree.data.time.RegularTimePeriod) day32, number38);
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener42 = null;
        timeSeries41.removeChangeListener(seriesChangeListener42);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day46 = new org.jfree.data.time.Day();
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day46, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem51 = timeSeries41.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day46, (java.lang.Number) 10L);
        long long52 = day46.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem54 = timeSeries23.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day46, (java.lang.Number) (byte) 10);
        double double55 = timeSeries23.getMaxY();
        java.lang.Object obj56 = timeSeries23.clone();
        boolean boolean57 = timeSeries1.equals((java.lang.Object) timeSeries23);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.delete((int) (short) 10, 2024, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate37);
        org.junit.Assert.assertNull(timeSeriesDataItem51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711997999999L + "'", long52 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getLastMillisecond();
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        int int12 = month9.compareTo((java.lang.Object) month11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        int int43 = month9.compareTo((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day50);
        java.beans.PropertyChangeListener propertyChangeListener57 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener57);
        java.util.Collection collection59 = timeSeries1.getTimePeriods();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.delete((int) '#', 0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(collection59);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 2);
        java.lang.Comparable comparable16 = timeSeries1.getKey();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        java.util.Date date23 = day19.getStart();
        org.jfree.data.time.SerialDate serialDate24 = day19.getSerialDate();
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day(serialDate24);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem27 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day25, (java.lang.Number) (short) 100);
        java.beans.PropertyChangeListener propertyChangeListener28 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener28);
        timeSeries1.setMaximumItemCount(0);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertEquals("'" + comparable16 + "' != '" + 100L + "'", comparable16, 100L);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate24);
        org.junit.Assert.assertNotNull(timeSeriesDataItem27);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        long long27 = timeSeries1.getMaximumItemAge();
        java.lang.Object obj28 = timeSeries1.clone();
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list31 = timeSeries30.data;
        timeSeries1.data = list31;
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 9223372036854775807L + "'", long27 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(list31);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.util.Date date16 = day10.getEnd();
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day(date16);
        long long18 = day17.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711954800000L + "'", long18 == 1711954800000L);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(7);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 12);
        java.lang.String str2 = timeSeries1.getDescription();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = timeSeries1.getNextTimePeriod();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        java.lang.Number number34 = timeSeriesDataItem32.getValue();
        timeSeriesDataItem32.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries1.addOrUpdate(timeSeriesDataItem32);
        int int38 = timeSeries1.getItemCount();
        boolean boolean39 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        timeSeries41.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener50 = null;
        timeSeries49.addChangeListener(seriesChangeListener50);
        long long52 = timeSeries49.getMaximumItemAge();
        java.lang.String str53 = timeSeries49.getDescription();
        double double54 = timeSeries49.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries56 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day57 = new org.jfree.data.time.Day();
        timeSeries56.add((org.jfree.data.time.RegularTimePeriod) day57, (double) (short) 0, false);
        timeSeries56.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = timeSeries56.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent65 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean66 = timeSeries56.equals((java.lang.Object) seriesChangeEvent65);
        org.jfree.data.time.Day day67 = new org.jfree.data.time.Day();
        int int69 = day67.compareTo((java.lang.Object) (short) 100);
        java.lang.String str70 = day67.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem71 = timeSeries56.getDataItem((org.jfree.data.time.RegularTimePeriod) day67);
        timeSeries49.add(timeSeriesDataItem71);
        org.jfree.data.time.TimeSeries timeSeries73 = timeSeries41.addAndOrUpdate(timeSeries49);
        java.lang.Comparable comparable74 = timeSeries73.getKey();
        org.jfree.data.time.TimeSeries timeSeries75 = timeSeries1.addAndOrUpdate(timeSeries73);
        double double76 = timeSeries75.getMinY();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 0.0d + "'", number34, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 9223372036854775807L + "'", long52 == 9223372036854775807L);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1-April-2024" + "'", str70, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem71);
        org.junit.Assert.assertNotNull(timeSeries73);
        org.junit.Assert.assertEquals("'" + comparable74 + "' != '" + "Overwritten values from: 100" + "'", comparable74, "Overwritten values from: 100");
        org.junit.Assert.assertNotNull(timeSeries75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        long long20 = month4.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = month4.next();
        org.jfree.data.time.Year year22 = month4.getYear();
        long long23 = year22.getFirstMillisecond();
        java.util.Calendar calendar24 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long25 = year22.getFirstMillisecond(calendar24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 24292L + "'", long20 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(year22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1704096000000L + "'", long23 == 1704096000000L);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener3 = null;
        timeSeries1.addChangeListener(seriesChangeListener3);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.removeChangeListener(seriesChangeListener13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 10L);
        long long23 = day17.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries24 = timeSeries6.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day17);
        timeSeries6.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries6.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries1.addAndOrUpdate(timeSeries6);
        java.beans.PropertyChangeListener propertyChangeListener30 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener30);
        java.lang.Class class32 = timeSeries1.getTimePeriodClass();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        timeSeries34.add((org.jfree.data.time.RegularTimePeriod) day35, (double) (short) 0, false);
        timeSeries34.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        timeSeries42.add((org.jfree.data.time.RegularTimePeriod) day43, (double) (short) 0, false);
        java.util.Date date47 = day43.getStart();
        int int48 = timeSeries34.getIndex((org.jfree.data.time.RegularTimePeriod) day43);
        java.util.Date date49 = day43.getEnd();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem51 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day43, (java.lang.Number) 0L);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day43, (java.lang.Number) 1711995694965L);
        long long54 = day43.getLastMillisecond();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711954800000L + "'", long10 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711997999999L + "'", long23 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries24);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertNull(class32);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1712041199999L + "'", long54 == 1712041199999L);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        long long2 = month0.getFirstMillisecond();
        long long3 = month0.getSerialIndex();
        int int4 = month0.getYearValue();
        org.jfree.data.time.Year year5 = month0.getYear();
        long long6 = year5.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = year5.next();
        long long8 = year5.getSerialIndex();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954800000L + "'", long2 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 24292L + "'", long3 == 24292L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2024L + "'", long6 == 2024L);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2024L + "'", long8 == 2024L);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = timeSeries1.getNextTimePeriod();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        timeSeries13.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries13.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent22 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean23 = timeSeries13.equals((java.lang.Object) seriesChangeEvent22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        int int26 = day24.compareTo((java.lang.Object) (short) 100);
        java.lang.String str27 = day24.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries13.getDataItem((org.jfree.data.time.RegularTimePeriod) day24);
        timeSeries6.add(timeSeriesDataItem28);
        timeSeries1.add(timeSeriesDataItem28);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        timeSeries32.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries32.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent41 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean42 = timeSeries32.equals((java.lang.Object) seriesChangeEvent41);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        int int45 = day43.compareTo((java.lang.Object) (short) 100);
        java.lang.String str46 = day43.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries32.getDataItem((org.jfree.data.time.RegularTimePeriod) day43);
        timeSeriesDataItem47.setSelected(false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries1.addOrUpdate(timeSeriesDataItem47);
        timeSeriesDataItem47.setValue((java.lang.Number) 1711995678580L);
        java.lang.Object obj53 = timeSeriesDataItem47.clone();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1-April-2024" + "'", str27, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1-April-2024" + "'", str46, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem47);
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertNotNull(obj53);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        long long2 = month0.getFirstMillisecond();
        long long3 = month0.getSerialIndex();
        long long4 = month0.getSerialIndex();
        long long5 = month0.getFirstMillisecond();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            month0.peg(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954800000L + "'", long2 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 24292L + "'", long3 == 24292L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24292L + "'", long4 == 24292L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException1 = new org.jfree.data.time.TimePeriodFormatException("hi!");
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) month0, "", "hi!");
        long long5 = month0.getLastMillisecond();
        int int6 = month0.getYearValue();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = month0.getLastMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1714546799999L + "'", long5 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2024 + "'", int6 == 2024);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        timeSeries5.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = timeSeries5.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent14 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean15 = timeSeries5.equals((java.lang.Object) seriesChangeEvent14);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        int int18 = day16.compareTo((java.lang.Object) (short) 100);
        java.lang.String str19 = day16.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem20 = timeSeries5.getDataItem((org.jfree.data.time.RegularTimePeriod) day16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = day16.previous();
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day16);
        org.jfree.data.time.SerialDate serialDate23 = day16.getSerialDate();
        long long24 = day16.getSerialIndex();
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day27, (double) (short) 0, false);
        java.util.Date date31 = day27.getStart();
        org.jfree.data.time.SerialDate serialDate32 = day27.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo34 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent35 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo34);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo36 = seriesChangeEvent35.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo37 = null;
        seriesChangeEvent35.setSummary(seriesChangeInfo37);
        int int39 = day27.compareTo((java.lang.Object) seriesChangeEvent35);
        org.jfree.data.time.TimeSeries timeSeries40 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) day16, (org.jfree.data.time.RegularTimePeriod) day27);
        org.jfree.data.time.SerialDate serialDate41 = day27.getSerialDate();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = day27.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1-April-2024" + "'", str19, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(serialDate23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 45383L + "'", long24 == 45383L);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate32);
        org.junit.Assert.assertNull(seriesChangeInfo36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(timeSeries40);
        org.junit.Assert.assertNotNull(serialDate41);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.next();
        java.util.Date date2 = fixedMillisecond0.getTime();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem4 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond0, (double) (short) -1);
        java.util.Calendar calendar5 = null;
        long long6 = fixedMillisecond0.getFirstMillisecond(calendar5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = fixedMillisecond0.previous();
        org.junit.Assert.assertNotNull(regularTimePeriod1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Apr 01 11:24:18 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711995858670L + "'", long6 == 1711995858670L);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener3 = null;
        timeSeries1.addChangeListener(seriesChangeListener3);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double7 = timeSeries6.getMaxY();
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        java.lang.Number number9 = null;
        timeSeries6.add((org.jfree.data.time.RegularTimePeriod) day8, number9, false);
        int int13 = day8.compareTo((java.lang.Object) 2);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 6);
        java.util.Date date16 = day8.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = day8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = day8.previous();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        timeSeries2.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        org.jfree.data.time.TimeSeries timeSeries34 = timeSeries2.addAndOrUpdate(timeSeries10);
        timeSeries34.fireSeriesChanged();
        boolean boolean36 = fixedMillisecond0.equals((java.lang.Object) timeSeries34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = fixedMillisecond0.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = fixedMillisecond0.previous();
        long long39 = fixedMillisecond0.getFirstMillisecond();
        long long40 = fixedMillisecond0.getMiddleMillisecond();
        java.lang.Object obj41 = null;
        int int42 = fixedMillisecond0.compareTo(obj41);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(timeSeries34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1711995858741L + "'", long39 == 1711995858741L);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1711995858741L + "'", long40 == 1711995858741L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day4 = new org.jfree.data.time.Day();
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day4, (double) (short) 0, false);
        java.util.Date date8 = day4.getStart();
        org.jfree.data.time.SerialDate serialDate9 = day4.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo11 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent12 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo11);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo13 = seriesChangeEvent12.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo14 = null;
        seriesChangeEvent12.setSummary(seriesChangeInfo14);
        int int16 = day4.compareTo((java.lang.Object) seriesChangeEvent12);
        int int17 = year1.compareTo((java.lang.Object) seriesChangeEvent12);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        long long38 = month22.getSerialIndex();
        boolean boolean39 = year1.equals((java.lang.Object) month22);
        java.lang.Object obj40 = null;
        int int41 = year1.compareTo(obj40);
        long long42 = year1.getFirstMillisecond();
        java.util.Calendar calendar43 = null;
        // The following exception was thrown during execution in test generation
        try {
            year1.peg(calendar43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate9);
        org.junit.Assert.assertNull(seriesChangeInfo13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 24292L + "'", long38 == 24292L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-62104204800000L) + "'", long42 == (-62104204800000L));
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        long long29 = timeSeries26.getMaximumItemAge();
        java.lang.String str30 = timeSeries26.getDescription();
        timeSeries26.fireSeriesChanged();
        timeSeries26.removeAgedItems(false);
        java.lang.String str34 = timeSeries26.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries1.addAndOrUpdate(timeSeries26);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = month40.next();
        org.jfree.data.time.Year year58 = month40.getYear();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) month40, (java.lang.Number) 10, true);
        org.jfree.data.time.Day day62 = new org.jfree.data.time.Day();
        long long63 = day62.getSerialIndex();
        int int64 = month40.compareTo((java.lang.Object) long63);
        int int65 = month40.getMonth();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9223372036854775807L + "'", long29 == 9223372036854775807L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Value" + "'", str34, "Value");
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(year58);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 45383L + "'", long63 == 45383L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond((long) (-1));
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list4 = timeSeries3.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener5 = null;
        timeSeries3.addChangeListener(seriesChangeListener5);
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries8.addChangeListener(seriesChangeListener9);
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        long long12 = month11.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener15 = null;
        timeSeries14.removeChangeListener(seriesChangeListener15);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries14.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day19, (java.lang.Number) 10L);
        long long25 = day19.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries26 = timeSeries8.createCopy((org.jfree.data.time.RegularTimePeriod) month11, (org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries8.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries8.removeChangeListener(seriesChangeListener29);
        org.jfree.data.time.TimeSeries timeSeries31 = timeSeries3.addAndOrUpdate(timeSeries8);
        java.beans.PropertyChangeListener propertyChangeListener32 = null;
        timeSeries3.addPropertyChangeListener(propertyChangeListener32);
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener36 = null;
        timeSeries35.addChangeListener(seriesChangeListener36);
        org.jfree.data.time.Month month38 = new org.jfree.data.time.Month();
        long long39 = month38.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener42 = null;
        timeSeries41.removeChangeListener(seriesChangeListener42);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day46 = new org.jfree.data.time.Day();
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day46, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem51 = timeSeries41.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day46, (java.lang.Number) 10L);
        long long52 = day46.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries53 = timeSeries35.createCopy((org.jfree.data.time.RegularTimePeriod) month38, (org.jfree.data.time.RegularTimePeriod) day46);
        timeSeries35.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener56 = null;
        timeSeries35.removeChangeListener(seriesChangeListener56);
        org.jfree.data.time.Day day58 = new org.jfree.data.time.Day();
        long long59 = day58.getSerialIndex();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day58, (java.lang.Number) 1.0f, true);
        boolean boolean63 = timeSeries3.equals((java.lang.Object) true);
        org.jfree.data.time.FixedMillisecond fixedMillisecond65 = new org.jfree.data.time.FixedMillisecond(1711997999999L);
        java.util.Calendar calendar66 = null;
        fixedMillisecond65.peg(calendar66);
        java.util.Calendar calendar68 = null;
        long long69 = fixedMillisecond65.getLastMillisecond(calendar68);
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) fixedMillisecond65, (double) 10.0f, false);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = fixedMillisecond65.next();
        int int74 = fixedMillisecond1.compareTo((java.lang.Object) regularTimePeriod73);
        java.util.Date date75 = regularTimePeriod73.getStart();
        org.junit.Assert.assertNotNull(list4);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711954800000L + "'", long12 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711997999999L + "'", long25 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries26);
        org.junit.Assert.assertNotNull(timeSeries31);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1711954800000L + "'", long39 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711997999999L + "'", long52 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries53);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 45383L + "'", long59 == 45383L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1711997999999L + "'", long69 == 1711997999999L);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(date75);
        org.junit.Assert.assertEquals(date75.toString(), "Mon Apr 01 12:00:00 PDT 2024");
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = day12.previous();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day12);
        org.jfree.data.time.FixedMillisecond fixedMillisecond19 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = fixedMillisecond19.next();
        java.util.Date date21 = fixedMillisecond19.getTime();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond19, (double) (short) -1);
        java.util.Calendar calendar24 = null;
        long long25 = fixedMillisecond19.getFirstMillisecond(calendar24);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem26 = timeSeries18.getDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond19);
        java.util.Calendar calendar27 = null;
        long long28 = fixedMillisecond19.getFirstMillisecond(calendar27);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Apr 01 11:24:19 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711995859478L + "'", long25 == 1711995859478L);
        org.junit.Assert.assertNull(timeSeriesDataItem26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1711995859478L + "'", long28 == 1711995859478L);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        boolean boolean13 = day2.equals((java.lang.Object) day8);
        long long14 = day2.getFirstMillisecond();
        java.util.Date date15 = day2.getEnd();
        java.util.TimeZone timeZone16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month17 = new org.jfree.data.time.Month(date15, timeZone16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711954800000L + "'", long14 == 1711954800000L);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Mon Apr 01 23:59:59 PDT 2024");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        int int7 = day3.getMonth();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            day3.peg(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getLastMillisecond();
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month();
        int int21 = month18.compareTo((java.lang.Object) month20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list24 = timeSeries23.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener25 = null;
        timeSeries23.addChangeListener(seriesChangeListener25);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        org.jfree.data.time.Month month31 = new org.jfree.data.time.Month();
        long long32 = month31.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.removeChangeListener(seriesChangeListener35);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries34.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day39, (java.lang.Number) 10L);
        long long45 = day39.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries46 = timeSeries28.createCopy((org.jfree.data.time.RegularTimePeriod) month31, (org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries28.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries28.removeChangeListener(seriesChangeListener49);
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries23.addAndOrUpdate(timeSeries28);
        int int52 = month18.compareTo((java.lang.Object) timeSeries28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = month18.next();
        org.jfree.data.time.FixedMillisecond fixedMillisecond55 = new org.jfree.data.time.FixedMillisecond((long) ' ');
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy(regularTimePeriod53, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond55);
        long long57 = fixedMillisecond55.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1714546799999L + "'", long19 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711954800000L + "'", long32 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711997999999L + "'", long45 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries46);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 32L + "'", long57 == 32L);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        timeSeries1.setRangeDescription("Value");
        java.lang.Number number12 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.update(2147483647, number12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries5.addChangeListener(seriesChangeListener6);
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.removeChangeListener(seriesChangeListener12);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries11.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day16, (java.lang.Number) 10L);
        long long22 = day16.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries23 = timeSeries5.createCopy((org.jfree.data.time.RegularTimePeriod) month8, (org.jfree.data.time.RegularTimePeriod) day16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = month8.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = month8.next();
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) month8);
        java.lang.Object obj27 = timeSeries1.clone();
        timeSeries1.setDomainDescription("31-March-2024");
        java.lang.Object obj30 = timeSeries1.clone();
        java.lang.String str31 = timeSeries1.getDescription();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954800000L + "'", long9 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711997999999L + "'", long22 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double11 = timeSeries10.getMaxY();
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        java.lang.Number number13 = null;
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day12, number13, false);
        double double16 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries10.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day19, (java.lang.Number) 2);
        int int26 = timeSeriesDataItem24.compareTo((java.lang.Object) (short) 100);
        timeSeries1.add(timeSeriesDataItem24);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = timeSeriesDataItem24.getPeriod();
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) regularTimePeriod28, "April 52", "");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = day12.previous();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day12);
        org.jfree.data.time.FixedMillisecond fixedMillisecond19 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = fixedMillisecond19.next();
        java.util.Date date21 = fixedMillisecond19.getTime();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond19, (double) (short) -1);
        java.util.Calendar calendar24 = null;
        long long25 = fixedMillisecond19.getFirstMillisecond(calendar24);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem26 = timeSeries18.getDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond19);
        java.lang.String str27 = timeSeries18.getRangeDescription();
        org.jfree.data.time.Month month28 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year29 = month28.getYear();
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener32 = null;
        timeSeries31.addChangeListener(seriesChangeListener32);
        org.jfree.data.time.Month month34 = new org.jfree.data.time.Month();
        long long35 = month34.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.removeChangeListener(seriesChangeListener38);
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries37.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day42, (java.lang.Number) 10L);
        long long48 = day42.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries49 = timeSeries31.createCopy((org.jfree.data.time.RegularTimePeriod) month34, (org.jfree.data.time.RegularTimePeriod) day42);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = month34.next();
        int int51 = year29.compareTo((java.lang.Object) month34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = year29.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = year29.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = year29.next();
        int int55 = timeSeries18.getIndex((org.jfree.data.time.RegularTimePeriod) year29);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Apr 01 11:24:20 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711995860232L + "'", long25 == 1711995860232L);
        org.junit.Assert.assertNull(timeSeriesDataItem26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value" + "'", str27, "Value");
        org.junit.Assert.assertNotNull(year29);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1711954800000L + "'", long35 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1711997999999L + "'", long48 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries49);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries1.getRawDataItem(0);
        timeSeries1.setNotify(true);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeSeriesDataItem17);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        java.util.Date date1 = fixedMillisecond0.getEnd();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent2 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) date1);
        java.lang.Object obj3 = seriesChangeEvent2.getSource();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Mon Apr 01 11:24:20 PDT 2024");
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "Mon Apr 01 11:24:20 PDT 2024");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "Mon Apr 01 11:24:20 PDT 2024");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "Mon Apr 01 11:24:20 PDT 2024");
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = month4.next();
        java.util.Date date21 = month4.getStart();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day6, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener14 = null;
        timeSeries13.removeChangeListener(seriesChangeListener14);
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener18 = null;
        timeSeries17.addChangeListener(seriesChangeListener18);
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month();
        long long21 = month20.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener24 = null;
        timeSeries23.removeChangeListener(seriesChangeListener24);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        timeSeries27.add((org.jfree.data.time.RegularTimePeriod) day28, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem33 = timeSeries23.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day28, (java.lang.Number) 10L);
        long long34 = day28.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries17.createCopy((org.jfree.data.time.RegularTimePeriod) month20, (org.jfree.data.time.RegularTimePeriod) day28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = month20.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = month20.next();
        timeSeries13.delete((org.jfree.data.time.RegularTimePeriod) month20);
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) month20, (java.lang.Number) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener41 = null;
        timeSeries1.removeChangeListener(seriesChangeListener41);
        timeSeries1.setMaximumItemAge(1711995714558L);
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1711954800000L + "'", long21 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1711997999999L + "'", long34 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getLastMillisecond();
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        int int12 = month9.compareTo((java.lang.Object) month11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        int int43 = month9.compareTo((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day50);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day59 = new org.jfree.data.time.Day();
        timeSeries58.add((org.jfree.data.time.RegularTimePeriod) day59, (double) (short) 0, false);
        java.util.Date date63 = day59.getStart();
        org.jfree.data.time.SerialDate serialDate64 = day59.getSerialDate();
        org.jfree.data.time.SerialDate serialDate65 = day59.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem66 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day59);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(9999);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) year68);
        java.util.Calendar calendar70 = null;
        // The following exception was thrown during execution in test generation
        try {
            year68.peg(calendar70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate64);
        org.junit.Assert.assertNotNull(serialDate65);
        org.junit.Assert.assertNotNull(timeSeriesDataItem66);
        org.junit.Assert.assertNotNull(timeSeriesDataItem69);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        long long2 = month0.getFirstMillisecond();
        long long3 = month0.getSerialIndex();
        int int4 = month0.getYearValue();
        org.jfree.data.time.Year year5 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.addChangeListener(seriesChangeListener8);
        long long10 = timeSeries7.getMaximumItemAge();
        java.lang.String str11 = timeSeries7.getDescription();
        double double12 = timeSeries7.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day15 = new org.jfree.data.time.Day();
        timeSeries14.add((org.jfree.data.time.RegularTimePeriod) day15, (double) (short) 0, false);
        timeSeries14.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = timeSeries14.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent23 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean24 = timeSeries14.equals((java.lang.Object) seriesChangeEvent23);
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day();
        int int27 = day25.compareTo((java.lang.Object) (short) 100);
        java.lang.String str28 = day25.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries14.getDataItem((org.jfree.data.time.RegularTimePeriod) day25);
        timeSeries7.add(timeSeriesDataItem29);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries32.addChangeListener(seriesChangeListener33);
        long long35 = timeSeries32.getMaximumItemAge();
        java.lang.String str36 = timeSeries32.getDescription();
        timeSeries32.fireSeriesChanged();
        timeSeries32.removeAgedItems(false);
        java.lang.String str40 = timeSeries32.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries41 = timeSeries7.addAndOrUpdate(timeSeries32);
        boolean boolean42 = month0.equals((java.lang.Object) timeSeries7);
        int int43 = timeSeries7.getItemCount();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954800000L + "'", long2 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 24292L + "'", long3 == 24292L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 9223372036854775807L + "'", long10 == 9223372036854775807L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1-April-2024" + "'", str28, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 9223372036854775807L + "'", long35 == 9223372036854775807L);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Value" + "'", str40, "Value");
        org.junit.Assert.assertNotNull(timeSeries41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.Year year19 = new org.jfree.data.time.Year(2);
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) year19);
        long long21 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        int int24 = day22.compareTo((java.lang.Object) (short) 100);
        java.lang.String str25 = day22.toString();
        int int26 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day22);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        org.jfree.data.time.Month month31 = new org.jfree.data.time.Month();
        long long32 = month31.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.removeChangeListener(seriesChangeListener35);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries34.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day39, (java.lang.Number) 10L);
        long long45 = day39.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries46 = timeSeries28.createCopy((org.jfree.data.time.RegularTimePeriod) month31, (org.jfree.data.time.RegularTimePeriod) day39);
        long long47 = month31.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = month31.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem49 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) month31);
        int int50 = month31.getMonth();
        long long51 = month31.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1-April-2024" + "'", str25, "1-April-2024");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711954800000L + "'", long32 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711997999999L + "'", long45 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 24292L + "'", long47 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertNull(timeSeriesDataItem49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1711954800000L + "'", long51 == 1711954800000L);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        int int10 = day8.compareTo((java.lang.Object) (short) 100);
        boolean boolean11 = day2.equals((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = day2.next();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double11 = timeSeries10.getMaxY();
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        java.lang.Number number13 = null;
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day12, number13, false);
        double double16 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries10.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day19, (java.lang.Number) 2);
        int int26 = timeSeriesDataItem24.compareTo((java.lang.Object) (short) 100);
        timeSeries1.add(timeSeriesDataItem24);
        java.lang.Object obj28 = timeSeriesDataItem24.clone();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = timeSeriesDataItem24.getPeriod();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = regularTimePeriod29.next();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        long long40 = timeSeries37.getMaximumItemAge();
        java.lang.String str41 = timeSeries37.getDescription();
        double double42 = timeSeries37.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        timeSeries44.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeries44.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent53 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean54 = timeSeries44.equals((java.lang.Object) seriesChangeEvent53);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        int int57 = day55.compareTo((java.lang.Object) (short) 100);
        java.lang.String str58 = day55.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries44.getDataItem((org.jfree.data.time.RegularTimePeriod) day55);
        timeSeries37.add(timeSeriesDataItem59);
        org.jfree.data.time.TimeSeries timeSeries61 = timeSeries29.addAndOrUpdate(timeSeries37);
        timeSeries61.fireSeriesChanged();
        boolean boolean63 = fixedMillisecond27.equals((java.lang.Object) timeSeries61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = fixedMillisecond27.previous();
        java.util.Calendar calendar65 = null;
        fixedMillisecond27.peg(calendar65);
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = year68.previous();
        org.jfree.data.time.TimeSeries timeSeries70 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond27, (org.jfree.data.time.RegularTimePeriod) year68);
        java.lang.Object obj71 = timeSeries70.clone();
        java.util.Collection collection72 = timeSeries70.getTimePeriods();
        java.lang.Class class73 = timeSeries70.timePeriodClass;
        org.jfree.data.time.TimeSeries timeSeries75 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean76 = timeSeries75.isEmpty();
        timeSeries75.setMaximumItemCount(2024);
        org.jfree.data.time.TimeSeries timeSeries80 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day81 = new org.jfree.data.time.Day();
        timeSeries80.add((org.jfree.data.time.RegularTimePeriod) day81, (double) (short) 0, false);
        java.util.Date date85 = day81.getStart();
        boolean boolean86 = timeSeries75.equals((java.lang.Object) date85);
        org.jfree.data.time.Month month87 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year88 = month87.getYear();
        long long89 = year88.getLastMillisecond();
        timeSeries75.add((org.jfree.data.time.RegularTimePeriod) year88, (java.lang.Number) 6);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem92 = timeSeries70.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year88);
        timeSeries70.removeAgedItems(true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223372036854775807L + "'", long40 == 9223372036854775807L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1-April-2024" + "'", str58, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(timeSeries61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertNotNull(timeSeries70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(collection72);
        org.junit.Assert.assertNotNull(class73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(date85);
        org.junit.Assert.assertEquals(date85.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(year88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1735718399999L + "'", long89 == 1735718399999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem92);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        timeSeries2.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        org.jfree.data.time.TimeSeries timeSeries34 = timeSeries2.addAndOrUpdate(timeSeries10);
        timeSeries34.fireSeriesChanged();
        boolean boolean36 = fixedMillisecond0.equals((java.lang.Object) timeSeries34);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = fixedMillisecond0.previous();
        java.util.Calendar calendar38 = null;
        fixedMillisecond0.peg(calendar38);
        long long40 = fixedMillisecond0.getSerialIndex();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) long40, "org.jfree.data.time.TimePeriodFormatException: ", "April 2024");
        java.util.List list44 = timeSeries43.data;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int46 = timeSeries43.getIndex(regularTimePeriod45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'period' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(timeSeries34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1711995862288L + "'", long40 == 1711995862288L);
        org.junit.Assert.assertNotNull(list44);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        long long1 = day0.getSerialIndex();
        long long2 = day0.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = day0.previous();
        java.lang.String str4 = day0.toString();
        java.text.DateFormat dateFormat5 = org.jfree.data.time.Day.DATE_FORMAT_SHORT;
        int int6 = day0.compareTo((java.lang.Object) dateFormat5);
        long long7 = day0.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = day0.next();
        int int9 = day0.getMonth();
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 45383L + "'", long1 == 45383L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1712041199999L + "'", long2 == 1712041199999L);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1-April-2024" + "'", str4, "1-April-2024");
        org.junit.Assert.assertNotNull(dateFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1712041199999L + "'", long7 == 1712041199999L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener3 = null;
        timeSeries1.addChangeListener(seriesChangeListener3);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.removeChangeListener(seriesChangeListener13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 10L);
        long long23 = day17.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries24 = timeSeries6.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day17);
        timeSeries6.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries6.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries1.addAndOrUpdate(timeSeries6);
        java.beans.PropertyChangeListener propertyChangeListener30 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.addChangeListener(seriesChangeListener34);
        org.jfree.data.time.Month month36 = new org.jfree.data.time.Month();
        long long37 = month36.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries39.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem49 = timeSeries39.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day44, (java.lang.Number) 10L);
        long long50 = day44.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries33.createCopy((org.jfree.data.time.RegularTimePeriod) month36, (org.jfree.data.time.RegularTimePeriod) day44);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = month36.previous();
        timeSeries1.add(regularTimePeriod52, (double) ' ');
        timeSeries1.clear();
        org.jfree.data.time.Year year57 = new org.jfree.data.time.Year((int) (byte) 1);
        java.lang.String str58 = year57.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = year57.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = year57.next();
        int int61 = year57.getYear();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) year57, (java.lang.Number) 1711995800237L, false);
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711954800000L + "'", long10 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711997999999L + "'", long23 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries24);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711954800000L + "'", long37 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711997999999L + "'", long50 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        long long29 = timeSeries26.getMaximumItemAge();
        java.lang.String str30 = timeSeries26.getDescription();
        timeSeries26.fireSeriesChanged();
        timeSeries26.removeAgedItems(false);
        java.lang.String str34 = timeSeries26.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries1.addAndOrUpdate(timeSeries26);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = month40.next();
        org.jfree.data.time.Year year58 = month40.getYear();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) month40, (java.lang.Number) 10, true);
        timeSeries35.setRangeDescription("hi!");
        int int64 = timeSeries35.getMaximumItemCount();
        java.beans.PropertyChangeListener propertyChangeListener65 = null;
        timeSeries35.removePropertyChangeListener(propertyChangeListener65);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9223372036854775807L + "'", long29 == 9223372036854775807L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Value" + "'", str34, "Value");
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(year58);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        long long24 = timeSeries21.getMaximumItemAge();
        java.lang.String str25 = timeSeries21.getDescription();
        double double26 = timeSeries21.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        timeSeries28.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = timeSeries28.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent37 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean38 = timeSeries28.equals((java.lang.Object) seriesChangeEvent37);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        int int41 = day39.compareTo((java.lang.Object) (short) 100);
        java.lang.String str42 = day39.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries28.getDataItem((org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries21.add(timeSeriesDataItem43);
        java.lang.Number number45 = timeSeriesDataItem43.getValue();
        java.lang.Number number46 = timeSeriesDataItem43.getValue();
        timeSeries19.add(timeSeriesDataItem43, false);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries19.delete(2147483647, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1-April-2024" + "'", str42, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertEquals("'" + number45 + "' != '" + 0.0d + "'", number45, 0.0d);
        org.junit.Assert.assertEquals("'" + number46 + "' != '" + 0.0d + "'", number46, 0.0d);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        long long30 = day24.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) (byte) 10);
        double double33 = timeSeries1.getMaxY();
        java.lang.String str34 = timeSeries1.getDomainDescription();
        long long35 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        timeSeries37.add((org.jfree.data.time.RegularTimePeriod) day38, (double) (short) 0, false);
        java.util.Date date42 = day38.getStart();
        org.jfree.data.time.SerialDate serialDate43 = day38.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo45 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent46 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo45);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo47 = seriesChangeEvent46.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo48 = null;
        seriesChangeEvent46.setSummary(seriesChangeInfo48);
        int int50 = day38.compareTo((java.lang.Object) seriesChangeEvent46);
        java.lang.String str51 = day38.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem52 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) day38);
        org.jfree.data.time.TimeSeries timeSeries54 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        timeSeries54.add((org.jfree.data.time.RegularTimePeriod) day55, (double) (short) 0, false);
        timeSeries54.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries62 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day63 = new org.jfree.data.time.Day();
        timeSeries62.add((org.jfree.data.time.RegularTimePeriod) day63, (double) (short) 0, false);
        java.util.Date date67 = day63.getStart();
        int int68 = timeSeries54.getIndex((org.jfree.data.time.RegularTimePeriod) day63);
        java.util.Date date69 = day63.getEnd();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem71 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day63, (java.lang.Number) 0L);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add(timeSeriesDataItem71);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are attempting to add an observation for the time period 1-April-2024 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711997999999L + "'", long30 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Time" + "'", str34, "Time");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate43);
        org.junit.Assert.assertNull(seriesChangeInfo47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1-April-2024" + "'", str51, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem52);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Mon Apr 01 23:59:59 PDT 2024");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries1.removeChangeListener(seriesChangeListener6);
        java.lang.Class class8 = timeSeries1.getTimePeriodClass();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.removeChangeListener(seriesChangeListener9);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        java.util.Date date17 = day13.getStart();
        org.jfree.data.time.SerialDate serialDate18 = day13.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo20);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo22 = seriesChangeEvent21.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo23 = null;
        seriesChangeEvent21.setSummary(seriesChangeInfo23);
        int int25 = day13.compareTo((java.lang.Object) seriesChangeEvent21);
        boolean boolean26 = timeSeries1.equals((java.lang.Object) seriesChangeEvent21);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        timeSeries28.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = timeSeries28.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent37 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean38 = timeSeries28.equals((java.lang.Object) seriesChangeEvent37);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        int int41 = day39.compareTo((java.lang.Object) (short) 100);
        java.lang.String str42 = day39.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries28.getDataItem((org.jfree.data.time.RegularTimePeriod) day39);
        java.lang.Number number44 = timeSeriesDataItem43.getValue();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem45 = timeSeries1.addOrUpdate(timeSeriesDataItem43);
        timeSeriesDataItem43.setValue((java.lang.Number) 1711995820274L);
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate18);
        org.junit.Assert.assertNull(seriesChangeInfo22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1-April-2024" + "'", str42, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertEquals("'" + number44 + "' != '" + 0.0d + "'", number44, 0.0d);
        org.junit.Assert.assertNotNull(timeSeriesDataItem45);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.util.List list5 = timeSeries1.getItems();
        java.util.List list6 = timeSeries1.getItems();
        java.util.Collection collection7 = timeSeries1.getTimePeriods();
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        long long10 = month8.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month8);
        int int12 = timeSeries1.getItemCount();
        double double13 = timeSeries1.getMaxY();
        int int14 = timeSeries1.getMaximumItemCount();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954800000L + "'", long9 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getLastMillisecond();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        int int3 = month0.compareTo((java.lang.Object) month2);
        java.lang.String str4 = month0.toString();
        long long5 = month0.getLastMillisecond();
        java.lang.String str6 = month0.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1714546799999L + "'", long1 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "April 2024" + "'", str4, "April 2024");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1714546799999L + "'", long5 == 1714546799999L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "April 2024" + "'", str6, "April 2024");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        timeSeries13.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries13.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent22 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean23 = timeSeries13.equals((java.lang.Object) seriesChangeEvent22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        int int26 = day24.compareTo((java.lang.Object) (short) 100);
        java.lang.String str27 = day24.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries13.getDataItem((org.jfree.data.time.RegularTimePeriod) day24);
        timeSeries6.add(timeSeriesDataItem28);
        timeSeries1.add(timeSeriesDataItem28);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        timeSeries32.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries32.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent41 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean42 = timeSeries32.equals((java.lang.Object) seriesChangeEvent41);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        int int45 = day43.compareTo((java.lang.Object) (short) 100);
        java.lang.String str46 = day43.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries32.getDataItem((org.jfree.data.time.RegularTimePeriod) day43);
        timeSeriesDataItem47.setSelected(false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries1.addOrUpdate(timeSeriesDataItem47);
        java.lang.Object obj51 = null;
        boolean boolean52 = timeSeriesDataItem50.equals(obj51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = timeSeriesDataItem50.getPeriod();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1-April-2024" + "'", str27, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1-April-2024" + "'", str46, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem47);
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getLastMillisecond();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        int int3 = month0.compareTo((java.lang.Object) month2);
        java.lang.String str4 = month0.toString();
        long long5 = month0.getSerialIndex();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = month0.getLastMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1714546799999L + "'", long1 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "April 2024" + "'", str4, "April 2024");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 24292L + "'", long5 == 24292L);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries1.removeChangeListener(seriesChangeListener22);
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        timeSeries25.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = timeSeries25.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent34 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean35 = timeSeries25.equals((java.lang.Object) seriesChangeEvent34);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        int int38 = day36.compareTo((java.lang.Object) (short) 100);
        java.lang.String str39 = day36.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries25.getDataItem((org.jfree.data.time.RegularTimePeriod) day36);
        timeSeries1.add(timeSeriesDataItem40);
        timeSeries1.setRangeDescription("2");
        double double44 = timeSeries1.getMaxY();
        java.lang.Class class45 = timeSeries1.timePeriodClass;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1-April-2024" + "'", str39, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(class45);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        long long30 = day24.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) (byte) 10);
        double double33 = timeSeries1.getMaxY();
        java.lang.Object obj34 = timeSeries1.clone();
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day();
        timeSeries36.add((org.jfree.data.time.RegularTimePeriod) day37, (double) (short) 0, false);
        timeSeries36.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        java.util.Date date49 = day45.getStart();
        int int50 = timeSeries36.getIndex((org.jfree.data.time.RegularTimePeriod) day45);
        java.util.Date date51 = day45.getEnd();
        int int52 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day45);
        timeSeries1.removeAgedItems(true);
        timeSeries1.setMaximumItemAge(2L);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711997999999L + "'", long30 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day6, (java.lang.Number) 10L);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = day6.getFirstMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(timeSeriesDataItem11);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        java.lang.Class class5 = timeSeries1.timePeriodClass;
        org.jfree.data.time.Year year7 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = seriesChangeEvent18.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo20);
        int int22 = day10.compareTo((java.lang.Object) seriesChangeEvent18);
        int int23 = year7.compareTo((java.lang.Object) seriesChangeEvent18);
        java.lang.Number number24 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) year7);
        org.jfree.data.time.Month month25 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year26 = month25.getYear();
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        org.jfree.data.time.Month month31 = new org.jfree.data.time.Month();
        long long32 = month31.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.removeChangeListener(seriesChangeListener35);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries34.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day39, (java.lang.Number) 10L);
        long long45 = day39.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries46 = timeSeries28.createCopy((org.jfree.data.time.RegularTimePeriod) month31, (org.jfree.data.time.RegularTimePeriod) day39);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = month31.next();
        int int48 = year26.compareTo((java.lang.Object) month31);
        org.jfree.data.time.Year year49 = month31.getYear();
        int int50 = year49.getYear();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem52 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) year49, (java.lang.Number) 1711995703697L);
        org.jfree.data.time.Month month53 = new org.jfree.data.time.Month();
        long long54 = month53.getLastMillisecond();
        boolean boolean55 = year49.equals((java.lang.Object) long54);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNull(class5);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNull(seriesChangeInfo19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNotNull(year26);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711954800000L + "'", long32 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711997999999L + "'", long45 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries46);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(year49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2024 + "'", int50 == 2024);
        org.junit.Assert.assertNull(timeSeriesDataItem52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1714546799999L + "'", long54 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        long long2 = month0.getFirstMillisecond();
        long long3 = month0.getSerialIndex();
        int int4 = month0.getYearValue();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = month0.getMiddleMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954800000L + "'", long2 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 24292L + "'", long3 == 24292L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        boolean boolean9 = timeSeries1.getNotify();
        timeSeries1.removeAgedItems(1711995724628L, false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        java.beans.PropertyChangeListener propertyChangeListener7 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener7);
        org.jfree.data.time.Year year10 = org.jfree.data.time.Year.parseYear("1");
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = year10.previous();
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) year10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = year10.next();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        long long1 = day0.getSerialIndex();
        long long2 = day0.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = day0.previous();
        java.lang.String str4 = day0.toString();
        int int5 = day0.getMonth();
        int int6 = day0.getYear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 45383L + "'", long1 == 45383L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1712041199999L + "'", long2 == 1712041199999L);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1-April-2024" + "'", str4, "1-April-2024");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2024 + "'", int6 == 2024);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.clear();
        timeSeries1.setNotify(false);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        int int7 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day6);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond10 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = fixedMillisecond10.next();
        timeSeries9.setKey((java.lang.Comparable) fixedMillisecond10);
        org.jfree.data.time.Month month13 = new org.jfree.data.time.Month();
        long long14 = month13.getLastMillisecond();
        org.jfree.data.time.Month month15 = new org.jfree.data.time.Month();
        int int16 = month13.compareTo((java.lang.Object) month15);
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) month13, (java.lang.Number) 1735718399999L, false);
        long long20 = month13.getFirstMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1714546799999L + "'", long14 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711954800000L + "'", long20 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem21);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries1.removeChangeListener(seriesChangeListener6);
        java.lang.Class class8 = timeSeries1.getTimePeriodClass();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.removeChangeListener(seriesChangeListener9);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        java.util.Date date17 = day13.getStart();
        org.jfree.data.time.SerialDate serialDate18 = day13.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo20);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo22 = seriesChangeEvent21.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo23 = null;
        seriesChangeEvent21.setSummary(seriesChangeInfo23);
        int int25 = day13.compareTo((java.lang.Object) seriesChangeEvent21);
        boolean boolean26 = timeSeries1.equals((java.lang.Object) seriesChangeEvent21);
        timeSeries1.setDomainDescription("9999");
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate18);
        org.junit.Assert.assertNull(seriesChangeInfo22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener3 = null;
        timeSeries1.addChangeListener(seriesChangeListener3);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.removeChangeListener(seriesChangeListener13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 10L);
        long long23 = day17.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries24 = timeSeries6.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day17);
        timeSeries6.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries6.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries1.addAndOrUpdate(timeSeries6);
        java.beans.PropertyChangeListener propertyChangeListener30 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.addChangeListener(seriesChangeListener34);
        org.jfree.data.time.Month month36 = new org.jfree.data.time.Month();
        long long37 = month36.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries39.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem49 = timeSeries39.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day44, (java.lang.Number) 10L);
        long long50 = day44.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries33.createCopy((org.jfree.data.time.RegularTimePeriod) month36, (org.jfree.data.time.RegularTimePeriod) day44);
        timeSeries33.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener54 = null;
        timeSeries33.removeChangeListener(seriesChangeListener54);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        long long57 = day56.getSerialIndex();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day56, (java.lang.Number) 1.0f, true);
        boolean boolean61 = timeSeries1.equals((java.lang.Object) true);
        org.jfree.data.time.FixedMillisecond fixedMillisecond63 = new org.jfree.data.time.FixedMillisecond(1711997999999L);
        java.util.Calendar calendar64 = null;
        fixedMillisecond63.peg(calendar64);
        java.util.Calendar calendar66 = null;
        long long67 = fixedMillisecond63.getLastMillisecond(calendar66);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) fixedMillisecond63, (double) 10.0f, false);
        java.util.Calendar calendar71 = null;
        long long72 = fixedMillisecond63.getFirstMillisecond(calendar71);
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711954800000L + "'", long10 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711997999999L + "'", long23 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries24);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711954800000L + "'", long37 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711997999999L + "'", long50 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 45383L + "'", long57 == 45383L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1711997999999L + "'", long67 == 1711997999999L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1711997999999L + "'", long72 == 1711997999999L);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        timeSeries13.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries13.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent22 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean23 = timeSeries13.equals((java.lang.Object) seriesChangeEvent22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        int int26 = day24.compareTo((java.lang.Object) (short) 100);
        java.lang.String str27 = day24.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries13.getDataItem((org.jfree.data.time.RegularTimePeriod) day24);
        timeSeries6.add(timeSeriesDataItem28);
        timeSeries1.add(timeSeriesDataItem28);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        timeSeries32.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries32.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent41 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean42 = timeSeries32.equals((java.lang.Object) seriesChangeEvent41);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        int int45 = day43.compareTo((java.lang.Object) (short) 100);
        java.lang.String str46 = day43.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries32.getDataItem((org.jfree.data.time.RegularTimePeriod) day43);
        timeSeriesDataItem47.setSelected(false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries1.addOrUpdate(timeSeriesDataItem47);
        org.jfree.data.time.TimeSeries timeSeries52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        timeSeries52.add((org.jfree.data.time.RegularTimePeriod) day53, (double) (short) 0, false);
        java.util.Date date57 = day53.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = day53.previous();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem60 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day53, (java.lang.Number) 5);
        boolean boolean61 = timeSeriesDataItem60.isSelected();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1-April-2024" + "'", str27, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1-April-2024" + "'", str46, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem47);
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(timeSeriesDataItem60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond((long) (-1));
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) fixedMillisecond1);
        java.util.Calendar calendar3 = null;
        long long4 = fixedMillisecond1.getLastMillisecond(calendar3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getLastMillisecond();
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        int int12 = month9.compareTo((java.lang.Object) month11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        int int43 = month9.compareTo((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day50);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day59 = new org.jfree.data.time.Day();
        timeSeries58.add((org.jfree.data.time.RegularTimePeriod) day59, (double) (short) 0, false);
        java.util.Date date63 = day59.getStart();
        org.jfree.data.time.SerialDate serialDate64 = day59.getSerialDate();
        org.jfree.data.time.SerialDate serialDate65 = day59.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem66 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day59);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem68 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day59, (double) 1711995721514L);
        java.lang.Object obj69 = timeSeriesDataItem68.clone();
        boolean boolean70 = timeSeriesDataItem68.isSelected();
        java.lang.Object obj71 = timeSeriesDataItem68.clone();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate64);
        org.junit.Assert.assertNotNull(serialDate65);
        org.junit.Assert.assertNotNull(timeSeriesDataItem66);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(obj71);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries8.addChangeListener(seriesChangeListener9);
        long long11 = timeSeries8.getMaximumItemAge();
        java.lang.String str12 = timeSeries8.getDescription();
        double double13 = timeSeries8.getMaxY();
        timeSeries8.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener18 = null;
        timeSeries17.addChangeListener(seriesChangeListener18);
        long long20 = timeSeries17.getMaximumItemAge();
        java.lang.String str21 = timeSeries17.getDescription();
        double double22 = timeSeries17.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day();
        timeSeries24.add((org.jfree.data.time.RegularTimePeriod) day25, (double) (short) 0, false);
        timeSeries24.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = timeSeries24.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent33 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean34 = timeSeries24.equals((java.lang.Object) seriesChangeEvent33);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        int int37 = day35.compareTo((java.lang.Object) (short) 100);
        java.lang.String str38 = day35.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries24.getDataItem((org.jfree.data.time.RegularTimePeriod) day35);
        timeSeries17.add(timeSeriesDataItem39);
        java.lang.Number number41 = timeSeriesDataItem39.getValue();
        timeSeriesDataItem39.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries8.addOrUpdate(timeSeriesDataItem39);
        int int45 = timeSeries8.getItemCount();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = timeSeries8.getNextTimePeriod();
        org.jfree.data.time.TimeSeries timeSeries48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day49 = new org.jfree.data.time.Day();
        timeSeries48.add((org.jfree.data.time.RegularTimePeriod) day49, (double) (short) 0, false);
        timeSeries48.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = timeSeries48.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent57 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean58 = timeSeries48.equals((java.lang.Object) seriesChangeEvent57);
        org.jfree.data.time.Day day59 = new org.jfree.data.time.Day();
        int int61 = day59.compareTo((java.lang.Object) (short) 100);
        java.lang.String str62 = day59.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem63 = timeSeries48.getDataItem((org.jfree.data.time.RegularTimePeriod) day59);
        java.lang.Object obj64 = null;
        int int65 = timeSeriesDataItem63.compareTo(obj64);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem66 = timeSeries8.addOrUpdate(timeSeriesDataItem63);
        boolean boolean67 = timeSeries1.equals((java.lang.Object) timeSeries8);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 9223372036854775807L + "'", long11 == 9223372036854775807L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 9223372036854775807L + "'", long20 == 9223372036854775807L);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1-April-2024" + "'", str38, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem39);
        org.junit.Assert.assertEquals("'" + number41 + "' != '" + 0.0d + "'", number41, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1-April-2024" + "'", str62, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        long long29 = timeSeries26.getMaximumItemAge();
        java.lang.String str30 = timeSeries26.getDescription();
        timeSeries26.fireSeriesChanged();
        timeSeries26.removeAgedItems(false);
        java.lang.String str34 = timeSeries26.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries1.addAndOrUpdate(timeSeries26);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = month40.next();
        org.jfree.data.time.Year year58 = month40.getYear();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) month40, (java.lang.Number) 10, true);
        org.jfree.data.time.Day day62 = new org.jfree.data.time.Day();
        long long63 = day62.getSerialIndex();
        int int64 = month40.compareTo((java.lang.Object) long63);
        java.lang.String str65 = month40.toString();
        java.util.Calendar calendar66 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long67 = month40.getLastMillisecond(calendar66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9223372036854775807L + "'", long29 == 9223372036854775807L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Value" + "'", str34, "Value");
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(year58);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 45383L + "'", long63 == 45383L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "April 2024" + "'", str65, "April 2024");
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number21 = timeSeries1.getValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        timeSeries1.removeAgedItems(false);
        java.lang.Class<?> wildcardClass9 = timeSeries1.getClass();
        java.lang.Class class10 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass9);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(class10);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.next();
        java.util.Date date2 = fixedMillisecond0.getTime();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem4 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond0, (double) (short) -1);
        java.util.Calendar calendar5 = null;
        long long6 = fixedMillisecond0.getFirstMillisecond(calendar5);
        long long7 = fixedMillisecond0.getLastMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Apr 01 11:24:25 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711995865757L + "'", long6 == 1711995865757L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711995865757L + "'", long7 == 1711995865757L);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries1.removeChangeListener(seriesChangeListener6);
        java.lang.Class class8 = timeSeries1.getTimePeriodClass();
        java.beans.PropertyChangeListener propertyChangeListener9 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener9);
        double double11 = timeSeries1.getMaxY();
        long long12 = timeSeries1.getMaximumItemAge();
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9223372036854775807L + "'", long12 == 9223372036854775807L);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getLastMillisecond();
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month();
        int int21 = month18.compareTo((java.lang.Object) month20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list24 = timeSeries23.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener25 = null;
        timeSeries23.addChangeListener(seriesChangeListener25);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        org.jfree.data.time.Month month31 = new org.jfree.data.time.Month();
        long long32 = month31.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.removeChangeListener(seriesChangeListener35);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries34.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day39, (java.lang.Number) 10L);
        long long45 = day39.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries46 = timeSeries28.createCopy((org.jfree.data.time.RegularTimePeriod) month31, (org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries28.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries28.removeChangeListener(seriesChangeListener49);
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries23.addAndOrUpdate(timeSeries28);
        int int52 = month18.compareTo((java.lang.Object) timeSeries28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = month18.next();
        org.jfree.data.time.FixedMillisecond fixedMillisecond55 = new org.jfree.data.time.FixedMillisecond((long) ' ');
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy(regularTimePeriod53, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond55);
        java.util.Calendar calendar57 = null;
        long long58 = fixedMillisecond55.getMiddleMillisecond(calendar57);
        long long59 = fixedMillisecond55.getMiddleMillisecond();
        java.util.Calendar calendar60 = null;
        fixedMillisecond55.peg(calendar60);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1714546799999L + "'", long19 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711954800000L + "'", long32 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711997999999L + "'", long45 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries46);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 32L + "'", long58 == 32L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 32L + "'", long59 == 32L);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.Year year7 = new org.jfree.data.time.Year(date6);
        org.jfree.data.time.Year year8 = new org.jfree.data.time.Year(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = year8.previous();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = year8.getLastMillisecond(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        long long27 = timeSeries1.getMaximumItemAge();
        java.lang.Object obj28 = timeSeries1.clone();
        timeSeries1.setDomainDescription("");
        int int31 = timeSeries1.getMaximumItemCount();
        java.lang.Object obj32 = null;
        boolean boolean33 = timeSeries1.equals(obj32);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries1.getDataItem(0);
        timeSeriesDataItem35.setSelected(true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 9223372036854775807L + "'", long27 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(timeSeriesDataItem35);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.delete((int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        timeSeries1.setDomainDescription("hi!");
        java.lang.Class class5 = timeSeries1.timePeriodClass;
        timeSeries1.removeAgedItems(false);
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNull(class5);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.jfree.data.general.SeriesException seriesException1 = new org.jfree.data.general.SeriesException("org.jfree.data.time.TimePeriodFormatException: 31-March-2024");
        java.lang.Throwable[] throwableArray2 = seriesException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        long long27 = timeSeries1.getMaximumItemAge();
        java.lang.Object obj28 = timeSeries1.clone();
        timeSeries1.setDomainDescription("");
        timeSeries1.clear();
        timeSeries1.clear();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem34 = timeSeries1.getRawDataItem(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 9223372036854775807L + "'", long27 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        timeSeries1.setNotify(false);
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getLastMillisecond();
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month();
        int int21 = month18.compareTo((java.lang.Object) month20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list24 = timeSeries23.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener25 = null;
        timeSeries23.addChangeListener(seriesChangeListener25);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        org.jfree.data.time.Month month31 = new org.jfree.data.time.Month();
        long long32 = month31.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.removeChangeListener(seriesChangeListener35);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries34.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day39, (java.lang.Number) 10L);
        long long45 = day39.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries46 = timeSeries28.createCopy((org.jfree.data.time.RegularTimePeriod) month31, (org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries28.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries28.removeChangeListener(seriesChangeListener49);
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries23.addAndOrUpdate(timeSeries28);
        int int52 = month18.compareTo((java.lang.Object) timeSeries28);
        java.lang.Number number53 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) month18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = month18.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = month18.next();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1714546799999L + "'", long19 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711954800000L + "'", long32 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711997999999L + "'", long45 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries46);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + number53 + "' != '" + 0.0d + "'", number53, 0.0d);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond(1711997999999L);
        long long2 = fixedMillisecond1.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711997999999L + "'", long2 == 1711997999999L);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries1.removeChangeListener(seriesChangeListener6);
        java.lang.Class class8 = timeSeries1.getTimePeriodClass();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.removeChangeListener(seriesChangeListener9);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        java.util.Date date17 = day13.getStart();
        org.jfree.data.time.SerialDate serialDate18 = day13.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo20);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo22 = seriesChangeEvent21.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo23 = null;
        seriesChangeEvent21.setSummary(seriesChangeInfo23);
        int int25 = day13.compareTo((java.lang.Object) seriesChangeEvent21);
        boolean boolean26 = timeSeries1.equals((java.lang.Object) seriesChangeEvent21);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        timeSeries28.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = timeSeries28.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent37 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean38 = timeSeries28.equals((java.lang.Object) seriesChangeEvent37);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        int int41 = day39.compareTo((java.lang.Object) (short) 100);
        java.lang.String str42 = day39.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries28.getDataItem((org.jfree.data.time.RegularTimePeriod) day39);
        java.lang.Number number44 = timeSeriesDataItem43.getValue();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem45 = timeSeries1.addOrUpdate(timeSeriesDataItem43);
        java.lang.String str46 = timeSeries1.getDomainDescription();
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate18);
        org.junit.Assert.assertNull(seriesChangeInfo22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1-April-2024" + "'", str42, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertEquals("'" + number44 + "' != '" + 0.0d + "'", number44, 0.0d);
        org.junit.Assert.assertNotNull(timeSeriesDataItem45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Time" + "'", str46, "Time");
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getLastMillisecond();
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        int int12 = month9.compareTo((java.lang.Object) month11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        int int43 = month9.compareTo((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day50);
        int int57 = month9.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = month9.next();
        long long59 = month9.getSerialIndex();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2024 + "'", int57 == 2024);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 24292L + "'", long59 == 24292L);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.Year year24 = month6.getYear();
        long long25 = month6.getLastMillisecond();
        org.jfree.data.time.FixedMillisecond fixedMillisecond26 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = fixedMillisecond26.next();
        java.util.Date date28 = fixedMillisecond26.getTime();
        long long29 = fixedMillisecond26.getLastMillisecond();
        java.util.Date date30 = fixedMillisecond26.getTime();
        java.util.Calendar calendar31 = null;
        fixedMillisecond26.peg(calendar31);
        long long33 = fixedMillisecond26.getLastMillisecond();
        boolean boolean34 = month6.equals((java.lang.Object) fixedMillisecond26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = month6.next();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(year24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1714546799999L + "'", long25 == 1714546799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Mon Apr 01 11:24:27 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711995867877L + "'", long29 == 1711995867877L);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Apr 01 11:24:27 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711995867877L + "'", long33 == 1711995867877L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        long long7 = day2.getFirstMillisecond();
        java.util.Date date8 = day2.getStart();
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day(date8);
        org.jfree.data.time.Month month10 = new org.jfree.data.time.Month(date8);
        java.util.TimeZone timeZone11 = null;
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month13 = new org.jfree.data.time.Month(date8, timeZone11, locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        timeSeries13.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries13.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent22 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean23 = timeSeries13.equals((java.lang.Object) seriesChangeEvent22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        int int26 = day24.compareTo((java.lang.Object) (short) 100);
        java.lang.String str27 = day24.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries13.getDataItem((org.jfree.data.time.RegularTimePeriod) day24);
        timeSeries6.add(timeSeriesDataItem28);
        timeSeries1.add(timeSeriesDataItem28);
        timeSeries1.setDescription("March 52");
        timeSeries1.setNotify(true);
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double37 = timeSeries36.getMaxY();
        java.util.Collection collection38 = timeSeries36.getTimePeriods();
        org.jfree.data.time.TimeSeries timeSeries40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener41 = null;
        timeSeries40.addChangeListener(seriesChangeListener41);
        org.jfree.data.time.Month month43 = new org.jfree.data.time.Month();
        long long44 = month43.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener47 = null;
        timeSeries46.removeChangeListener(seriesChangeListener47);
        org.jfree.data.time.TimeSeries timeSeries50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day51 = new org.jfree.data.time.Day();
        timeSeries50.add((org.jfree.data.time.RegularTimePeriod) day51, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem56 = timeSeries46.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day51, (java.lang.Number) 10L);
        long long57 = day51.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries58 = timeSeries40.createCopy((org.jfree.data.time.RegularTimePeriod) month43, (org.jfree.data.time.RegularTimePeriod) day51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = month43.next();
        java.lang.String str60 = month43.toString();
        java.lang.Number number61 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem62 = timeSeries36.addOrUpdate((org.jfree.data.time.RegularTimePeriod) month43, number61);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add((org.jfree.data.time.RegularTimePeriod) month43, (java.lang.Number) 1711995837459L);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1-April-2024" + "'", str27, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1711954800000L + "'", long44 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1711997999999L + "'", long57 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries58);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "April 2024" + "'", str60, "April 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem62);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getLastMillisecond();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        int int3 = month0.compareTo((java.lang.Object) month2);
        int int4 = month0.getYearValue();
        long long5 = month0.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = month0.previous();
        int int7 = month0.getMonth();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem9 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month0, (double) 1711995683606L);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        timeSeries11.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = timeSeries11.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent20 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean21 = timeSeries11.equals((java.lang.Object) seriesChangeEvent20);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        int int24 = day22.compareTo((java.lang.Object) (short) 100);
        java.lang.String str25 = day22.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem26 = timeSeries11.getDataItem((org.jfree.data.time.RegularTimePeriod) day22);
        boolean boolean27 = timeSeriesDataItem9.equals((java.lang.Object) timeSeriesDataItem26);
        boolean boolean28 = timeSeriesDataItem26.isSelected();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1714546799999L + "'", long1 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1-April-2024" + "'", str25, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        timeSeries4.add((org.jfree.data.time.RegularTimePeriod) day5, (double) (short) 0, false);
        timeSeries4.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = timeSeries4.getNextTimePeriod();
        org.jfree.data.time.Month month12 = new org.jfree.data.time.Month();
        long long13 = month12.getLastMillisecond();
        org.jfree.data.time.Month month14 = new org.jfree.data.time.Month();
        int int15 = month12.compareTo((java.lang.Object) month14);
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list18 = timeSeries17.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries17.addChangeListener(seriesChangeListener19);
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener23 = null;
        timeSeries22.addChangeListener(seriesChangeListener23);
        org.jfree.data.time.Month month25 = new org.jfree.data.time.Month();
        long long26 = month25.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.removeChangeListener(seriesChangeListener29);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem38 = timeSeries28.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day33, (java.lang.Number) 10L);
        long long39 = day33.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries40 = timeSeries22.createCopy((org.jfree.data.time.RegularTimePeriod) month25, (org.jfree.data.time.RegularTimePeriod) day33);
        timeSeries22.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener43 = null;
        timeSeries22.removeChangeListener(seriesChangeListener43);
        org.jfree.data.time.TimeSeries timeSeries45 = timeSeries17.addAndOrUpdate(timeSeries22);
        int int46 = month12.compareTo((java.lang.Object) timeSeries22);
        org.jfree.data.time.TimeSeries timeSeries48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries48.removeChangeListener(seriesChangeListener49);
        org.jfree.data.time.TimeSeries timeSeries52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        timeSeries52.add((org.jfree.data.time.RegularTimePeriod) day53, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem58 = timeSeries48.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day53, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries59 = timeSeries4.createCopy((org.jfree.data.time.RegularTimePeriod) month12, (org.jfree.data.time.RegularTimePeriod) day53);
        org.jfree.data.time.TimeSeries timeSeries61 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day62 = new org.jfree.data.time.Day();
        timeSeries61.add((org.jfree.data.time.RegularTimePeriod) day62, (double) (short) 0, false);
        java.util.Date date66 = day62.getStart();
        org.jfree.data.time.SerialDate serialDate67 = day62.getSerialDate();
        org.jfree.data.time.SerialDate serialDate68 = day62.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = timeSeries4.getDataItem((org.jfree.data.time.RegularTimePeriod) day62);
        timeSeries1.add(timeSeriesDataItem69);
        timeSeries1.setDomainDescription("org.jfree.data.event.SeriesChangeEvent[source=0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1714546799999L + "'", long13 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711954800000L + "'", long26 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1711997999999L + "'", long39 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries40);
        org.junit.Assert.assertNotNull(timeSeries45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem58);
        org.junit.Assert.assertNotNull(timeSeries59);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate67);
        org.junit.Assert.assertNotNull(serialDate68);
        org.junit.Assert.assertNotNull(timeSeriesDataItem69);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(9, 100);
        int int3 = month2.getMonth();
        java.lang.String str4 = month2.toString();
        int int5 = month2.getMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "September 100" + "'", str4, "September 100");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.addChangeListener(seriesChangeListener9);
        boolean boolean11 = timeSeries1.getNotify();
        java.lang.Class class12 = timeSeries1.timePeriodClass;
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(class12);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.Comparable comparable5 = timeSeries1.getKey();
        org.jfree.data.time.TimeSeries timeSeries8 = timeSeries1.createCopy(0, 0);
        java.lang.Class class9 = timeSeries1.timePeriodClass;
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond12 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = fixedMillisecond12.next();
        timeSeries11.setKey((java.lang.Comparable) fixedMillisecond12);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener17 = null;
        timeSeries16.addChangeListener(seriesChangeListener17);
        long long19 = timeSeries16.getMaximumItemAge();
        java.lang.String str20 = timeSeries16.getDescription();
        double double21 = timeSeries16.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        timeSeries23.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = timeSeries23.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent32 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean33 = timeSeries23.equals((java.lang.Object) seriesChangeEvent32);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        int int36 = day34.compareTo((java.lang.Object) (short) 100);
        java.lang.String str37 = day34.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem38 = timeSeries23.getDataItem((org.jfree.data.time.RegularTimePeriod) day34);
        timeSeries16.add(timeSeriesDataItem38);
        timeSeries11.add(timeSeriesDataItem38);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem41 = timeSeries1.addOrUpdate(timeSeriesDataItem38);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.delete((int) (byte) 10, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertEquals("'" + comparable5 + "' != '" + (short) 100 + "'", comparable5, (short) 100);
        org.junit.Assert.assertNotNull(timeSeries8);
        org.junit.Assert.assertNull(class9);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9223372036854775807L + "'", long19 == 9223372036854775807L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1-April-2024" + "'", str37, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem38);
        org.junit.Assert.assertNull(timeSeriesDataItem41);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getLastMillisecond();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        int int3 = month0.compareTo((java.lang.Object) month2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list6 = timeSeries5.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries5.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        org.jfree.data.time.Month month13 = new org.jfree.data.time.Month();
        long long14 = month13.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener17 = null;
        timeSeries16.removeChangeListener(seriesChangeListener17);
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem26 = timeSeries16.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day21, (java.lang.Number) 10L);
        long long27 = day21.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries28 = timeSeries10.createCopy((org.jfree.data.time.RegularTimePeriod) month13, (org.jfree.data.time.RegularTimePeriod) day21);
        timeSeries10.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener31 = null;
        timeSeries10.removeChangeListener(seriesChangeListener31);
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries5.addAndOrUpdate(timeSeries10);
        int int34 = month0.compareTo((java.lang.Object) timeSeries10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = month0.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = regularTimePeriod35.previous();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1714546799999L + "'", long1 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711954800000L + "'", long14 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1711997999999L + "'", long27 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries28);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Day day3 = new org.jfree.data.time.Day(100, 12, 2024);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid 'day' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        int int6 = day2.getDayOfMonth();
        long long7 = day2.getFirstMillisecond();
        org.jfree.data.time.FixedMillisecond fixedMillisecond8 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, false);
        timeSeries10.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.addChangeListener(seriesChangeListener19);
        long long21 = timeSeries18.getMaximumItemAge();
        java.lang.String str22 = timeSeries18.getDescription();
        double double23 = timeSeries18.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        timeSeries25.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = timeSeries25.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent34 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean35 = timeSeries25.equals((java.lang.Object) seriesChangeEvent34);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        int int38 = day36.compareTo((java.lang.Object) (short) 100);
        java.lang.String str39 = day36.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries25.getDataItem((org.jfree.data.time.RegularTimePeriod) day36);
        timeSeries18.add(timeSeriesDataItem40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries10.addAndOrUpdate(timeSeries18);
        timeSeries42.fireSeriesChanged();
        boolean boolean44 = fixedMillisecond8.equals((java.lang.Object) timeSeries42);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = fixedMillisecond8.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = fixedMillisecond8.previous();
        int int47 = day2.compareTo((java.lang.Object) regularTimePeriod46);
        int int48 = day2.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9223372036854775807L + "'", long21 == 9223372036854775807L);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1-April-2024" + "'", str39, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.addChangeListener(seriesChangeListener10);
        long long12 = timeSeries9.getMaximumItemAge();
        java.lang.String str13 = timeSeries9.getDescription();
        double double14 = timeSeries9.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        timeSeries16.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = timeSeries16.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent25 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean26 = timeSeries16.equals((java.lang.Object) seriesChangeEvent25);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        int int29 = day27.compareTo((java.lang.Object) (short) 100);
        java.lang.String str30 = day27.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = timeSeries16.getDataItem((org.jfree.data.time.RegularTimePeriod) day27);
        timeSeries9.add(timeSeriesDataItem31);
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries1.addAndOrUpdate(timeSeries9);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo34 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent35 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries9, seriesChangeInfo34);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        timeSeries37.add((org.jfree.data.time.RegularTimePeriod) day38, (double) (short) 0, false);
        int int42 = day38.getDayOfMonth();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries9.getRawDataItem((org.jfree.data.time.RegularTimePeriod) day38);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = day38.next();
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9223372036854775807L + "'", long12 == 9223372036854775807L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1-April-2024" + "'", str30, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem31);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.addChangeListener(seriesChangeListener10);
        long long12 = timeSeries9.getMaximumItemAge();
        java.lang.String str13 = timeSeries9.getDescription();
        double double14 = timeSeries9.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        timeSeries16.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = timeSeries16.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent25 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean26 = timeSeries16.equals((java.lang.Object) seriesChangeEvent25);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        int int29 = day27.compareTo((java.lang.Object) (short) 100);
        java.lang.String str30 = day27.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = timeSeries16.getDataItem((org.jfree.data.time.RegularTimePeriod) day27);
        timeSeries9.add(timeSeriesDataItem31);
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries1.addAndOrUpdate(timeSeries9);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo34 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent35 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries9, seriesChangeInfo34);
        java.beans.PropertyChangeListener propertyChangeListener36 = null;
        timeSeries9.addPropertyChangeListener(propertyChangeListener36);
        org.jfree.data.time.FixedMillisecond fixedMillisecond39 = new org.jfree.data.time.FixedMillisecond((long) (-1));
        org.jfree.data.time.TimeSeries timeSeries40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) fixedMillisecond39);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) fixedMillisecond39, (java.lang.Number) 11);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9223372036854775807L + "'", long12 == 9223372036854775807L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1-April-2024" + "'", str30, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem31);
        org.junit.Assert.assertNotNull(timeSeries33);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        timeSeries1.setKey((java.lang.Comparable) 1711995716010L);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        timeSeries10.setDescription("hi!");
        timeSeries10.setRangeDescription("Value");
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean22 = timeSeries21.isEmpty();
        timeSeries21.setMaximumItemCount(2024);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day27, (double) (short) 0, false);
        java.util.Date date31 = day27.getStart();
        boolean boolean32 = timeSeries21.equals((java.lang.Object) date31);
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.addChangeListener(seriesChangeListener35);
        org.jfree.data.time.Month month37 = new org.jfree.data.time.Month();
        long long38 = month37.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener41 = null;
        timeSeries40.removeChangeListener(seriesChangeListener41);
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries40.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day45, (java.lang.Number) 10L);
        long long51 = day45.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries52 = timeSeries34.createCopy((org.jfree.data.time.RegularTimePeriod) month37, (org.jfree.data.time.RegularTimePeriod) day45);
        java.lang.Number number53 = timeSeries21.getValue((org.jfree.data.time.RegularTimePeriod) month37);
        timeSeries10.delete((org.jfree.data.time.RegularTimePeriod) month37);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) month37);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1711954800000L + "'", long38 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1711997999999L + "'", long51 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries52);
        org.junit.Assert.assertNull(number53);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        timeSeries13.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries13.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent22 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean23 = timeSeries13.equals((java.lang.Object) seriesChangeEvent22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        int int26 = day24.compareTo((java.lang.Object) (short) 100);
        java.lang.String str27 = day24.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries13.getDataItem((org.jfree.data.time.RegularTimePeriod) day24);
        timeSeries6.add(timeSeriesDataItem28);
        timeSeries1.add(timeSeriesDataItem28);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        timeSeries32.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries32.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent41 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean42 = timeSeries32.equals((java.lang.Object) seriesChangeEvent41);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        int int45 = day43.compareTo((java.lang.Object) (short) 100);
        java.lang.String str46 = day43.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries32.getDataItem((org.jfree.data.time.RegularTimePeriod) day43);
        timeSeriesDataItem47.setSelected(false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries1.addOrUpdate(timeSeriesDataItem47);
        org.jfree.data.time.TimeSeries timeSeries52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        timeSeries52.add((org.jfree.data.time.RegularTimePeriod) day53, (double) (short) 0, false);
        timeSeries52.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries59 = timeSeries1.addAndOrUpdate(timeSeries52);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = null;
        java.lang.Number number61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem62 = timeSeries59.addOrUpdate(regularTimePeriod60, number61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'period' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1-April-2024" + "'", str27, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1-April-2024" + "'", str46, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem47);
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertNotNull(timeSeries59);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getLastMillisecond();
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month();
        int int21 = month18.compareTo((java.lang.Object) month20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list24 = timeSeries23.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener25 = null;
        timeSeries23.addChangeListener(seriesChangeListener25);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.addChangeListener(seriesChangeListener29);
        org.jfree.data.time.Month month31 = new org.jfree.data.time.Month();
        long long32 = month31.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.removeChangeListener(seriesChangeListener35);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries34.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day39, (java.lang.Number) 10L);
        long long45 = day39.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries46 = timeSeries28.createCopy((org.jfree.data.time.RegularTimePeriod) month31, (org.jfree.data.time.RegularTimePeriod) day39);
        timeSeries28.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries28.removeChangeListener(seriesChangeListener49);
        org.jfree.data.time.TimeSeries timeSeries51 = timeSeries23.addAndOrUpdate(timeSeries28);
        int int52 = month18.compareTo((java.lang.Object) timeSeries28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = month18.next();
        org.jfree.data.time.FixedMillisecond fixedMillisecond55 = new org.jfree.data.time.FixedMillisecond((long) ' ');
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy(regularTimePeriod53, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond55);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem58 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod53, (java.lang.Number) 1711995719216L);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem60 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod53, (java.lang.Number) 1711995737618L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1714546799999L + "'", long19 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711954800000L + "'", long32 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711997999999L + "'", long45 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries46);
        org.junit.Assert.assertNotNull(timeSeries51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(timeSeries56);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = year1.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = year1.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = year1.previous();
        java.lang.String str27 = year1.toString();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2024" + "'", str27, "2024");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (byte) 1);
        java.util.Collection collection2 = timeSeries1.getTimePeriods();
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        timeSeries4.add((org.jfree.data.time.RegularTimePeriod) day5, (double) (short) 0, false);
        timeSeries4.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        java.util.Date date17 = day13.getStart();
        org.jfree.data.time.SerialDate serialDate18 = day13.getSerialDate();
        java.lang.Number number19 = null;
        timeSeries4.update((org.jfree.data.time.RegularTimePeriod) day13, number19);
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener23 = null;
        timeSeries22.removeChangeListener(seriesChangeListener23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day27, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries22.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day27, (java.lang.Number) 10L);
        long long33 = day27.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries4.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day27, (java.lang.Number) (byte) 10);
        double double36 = timeSeries4.getMaxY();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem38 = timeSeries4.getDataItem(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries1.addOrUpdate(timeSeriesDataItem38);
        // The following exception was thrown during execution in test generation
        try {
            timeSeriesDataItem39.setValue((java.lang.Number) (-62072668800001L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(collection2);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate18);
        org.junit.Assert.assertNull(timeSeriesDataItem32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711997999999L + "'", long33 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(timeSeriesDataItem38);
        org.junit.Assert.assertNull(timeSeriesDataItem39);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        java.lang.Number number34 = timeSeriesDataItem32.getValue();
        timeSeriesDataItem32.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries1.addOrUpdate(timeSeriesDataItem32);
        int int38 = timeSeries1.getItemCount();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries1.getNextTimePeriod();
        long long40 = timeSeries1.getMaximumItemAge();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 0.0d + "'", number34, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223372036854775807L + "'", long40 == 9223372036854775807L);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        java.lang.Number number34 = timeSeriesDataItem32.getValue();
        timeSeriesDataItem32.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries1.addOrUpdate(timeSeriesDataItem32);
        java.lang.Class class38 = timeSeries1.timePeriodClass;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = timeSeries1.getTimePeriod(0);
        timeSeries1.fireSeriesChanged();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 0.0d + "'", number34, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertNotNull(class38);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        long long2 = month0.getFirstMillisecond();
        java.util.Date date3 = month0.getEnd();
        long long4 = month0.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = month0.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = regularTimePeriod5.previous();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem8 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod5, (java.lang.Number) 1711995859599L);
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954800000L + "'", long2 == 1711954800000L);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Apr 30 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24292L + "'", long4 == 24292L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 12);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeries timeSeries6 = timeSeries1.createCopy((int) 'a', 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo1 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent2 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo1);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo3 = seriesChangeEvent2.getSummary();
        java.lang.Object obj4 = seriesChangeEvent2.getSource();
        java.lang.String str5 = seriesChangeEvent2.toString();
        org.junit.Assert.assertNull(seriesChangeInfo3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + true + "'", obj4, true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.jfree.data.event.SeriesChangeEvent[source=true]" + "'", str5, "org.jfree.data.event.SeriesChangeEvent[source=true]");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        int int16 = timeSeries1.getMaximumItemCount();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.addChangeListener(seriesChangeListener19);
        long long21 = timeSeries18.getMaximumItemAge();
        java.lang.String str22 = timeSeries18.getDescription();
        double double23 = timeSeries18.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        timeSeries25.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = timeSeries25.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent34 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean35 = timeSeries25.equals((java.lang.Object) seriesChangeEvent34);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        int int38 = day36.compareTo((java.lang.Object) (short) 100);
        java.lang.String str39 = day36.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries25.getDataItem((org.jfree.data.time.RegularTimePeriod) day36);
        timeSeries18.add(timeSeriesDataItem40);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.addChangeListener(seriesChangeListener44);
        org.jfree.data.time.Month month46 = new org.jfree.data.time.Month();
        long long47 = month46.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener50 = null;
        timeSeries49.removeChangeListener(seriesChangeListener50);
        org.jfree.data.time.TimeSeries timeSeries53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day54 = new org.jfree.data.time.Day();
        timeSeries53.add((org.jfree.data.time.RegularTimePeriod) day54, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries49.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day54, (java.lang.Number) 10L);
        long long60 = day54.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries61 = timeSeries43.createCopy((org.jfree.data.time.RegularTimePeriod) month46, (org.jfree.data.time.RegularTimePeriod) day54);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = month46.previous();
        java.lang.Number number63 = timeSeries18.getValue((org.jfree.data.time.RegularTimePeriod) month46);
        long long64 = month46.getLastMillisecond();
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) month46);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9223372036854775807L + "'", long21 == 9223372036854775807L);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1-April-2024" + "'", str39, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1711954800000L + "'", long47 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1711997999999L + "'", long60 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries61);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertEquals("'" + number63 + "' != '" + 0.0d + "'", number63, 0.0d);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1714546799999L + "'", long64 == 1714546799999L);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        long long24 = year1.getSerialIndex();
        java.lang.String str25 = year1.toString();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2024L + "'", long24 == 2024L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2024" + "'", str25, "2024");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.next();
        java.util.Date date2 = fixedMillisecond0.getTime();
        long long3 = fixedMillisecond0.getLastMillisecond();
        java.util.Date date4 = fixedMillisecond0.getTime();
        java.util.Date date5 = fixedMillisecond0.getStart();
        java.util.Date date6 = fixedMillisecond0.getTime();
        java.util.Calendar calendar7 = null;
        fixedMillisecond0.peg(calendar7);
        org.junit.Assert.assertNotNull(regularTimePeriod1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Apr 01 11:24:31 PDT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711995871946L + "'", long3 == 1711995871946L);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Apr 01 11:24:31 PDT 2024");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Apr 01 11:24:31 PDT 2024");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 11:24:31 PDT 2024");
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeriesDataItem23.setSelected(false);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean29 = timeSeries28.isEmpty();
        timeSeries28.clear();
        timeSeries28.setNotify(false);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        int int34 = timeSeries28.getIndex((org.jfree.data.time.RegularTimePeriod) day33);
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double37 = timeSeries36.getMaxY();
        java.util.Collection collection38 = timeSeries36.getTimePeriods();
        boolean boolean39 = timeSeries28.equals((java.lang.Object) collection38);
        boolean boolean40 = timeSeriesDataItem23.equals((java.lang.Object) timeSeries28);
        org.jfree.data.time.TimeSeries timeSeries42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        timeSeries42.add((org.jfree.data.time.RegularTimePeriod) day43, (double) (short) 0, false);
        int int47 = day43.getDayOfMonth();
        long long48 = day43.getLastMillisecond();
        int int50 = day43.compareTo((java.lang.Object) 10);
        timeSeries28.delete((org.jfree.data.time.RegularTimePeriod) day43);
        org.jfree.data.time.Month month52 = new org.jfree.data.time.Month();
        long long53 = month52.getLastMillisecond();
        org.jfree.data.time.Month month54 = new org.jfree.data.time.Month();
        int int55 = month52.compareTo((java.lang.Object) month54);
        java.lang.String str56 = month52.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem58 = timeSeries28.addOrUpdate((org.jfree.data.time.RegularTimePeriod) month52, (java.lang.Number) 1711995764077L);
        org.jfree.data.time.TimeSeries timeSeries60 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day61 = new org.jfree.data.time.Day();
        timeSeries60.add((org.jfree.data.time.RegularTimePeriod) day61, (double) (short) 0, false);
        timeSeries60.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries68 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day69 = new org.jfree.data.time.Day();
        timeSeries68.add((org.jfree.data.time.RegularTimePeriod) day69, (double) (short) 0, false);
        java.util.Date date73 = day69.getStart();
        org.jfree.data.time.SerialDate serialDate74 = day69.getSerialDate();
        java.lang.Number number75 = null;
        timeSeries60.update((org.jfree.data.time.RegularTimePeriod) day69, number75);
        org.jfree.data.time.TimeSeries timeSeries78 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener79 = null;
        timeSeries78.removeChangeListener(seriesChangeListener79);
        org.jfree.data.time.TimeSeries timeSeries82 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day83 = new org.jfree.data.time.Day();
        timeSeries82.add((org.jfree.data.time.RegularTimePeriod) day83, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem88 = timeSeries78.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day83, (java.lang.Number) 10L);
        long long89 = day83.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem91 = timeSeries60.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day83, (java.lang.Number) (byte) 10);
        double double92 = timeSeries60.getMaxY();
        org.jfree.data.time.Day day93 = new org.jfree.data.time.Day();
        long long94 = day93.getSerialIndex();
        timeSeries60.delete((org.jfree.data.time.RegularTimePeriod) day93);
        boolean boolean96 = month52.equals((java.lang.Object) timeSeries60);
        java.util.Calendar calendar97 = null;
        // The following exception was thrown during execution in test generation
        try {
            month52.peg(calendar97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(collection38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1712041199999L + "'", long48 == 1712041199999L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1714546799999L + "'", long53 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "April 2024" + "'", str56, "April 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem58);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate74);
        org.junit.Assert.assertNull(timeSeriesDataItem88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1711997999999L + "'", long89 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 10.0d + "'", double92 == 10.0d);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 45383L + "'", long94 == 45383L);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.setMaximumItemCount(2024);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        timeSeries6.add((org.jfree.data.time.RegularTimePeriod) day7, (double) (short) 0, false);
        java.util.Date date11 = day7.getStart();
        boolean boolean12 = timeSeries1.equals((java.lang.Object) date11);
        org.jfree.data.time.FixedMillisecond fixedMillisecond13 = new org.jfree.data.time.FixedMillisecond(date11);
        java.util.Calendar calendar14 = null;
        long long15 = fixedMillisecond13.getFirstMillisecond(calendar14);
        java.lang.String str16 = fixedMillisecond13.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1711954800000L + "'", long15 == 1711954800000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Mon Apr 01 00:00:00 PDT 2024" + "'", str16, "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException1 = new org.jfree.data.time.TimePeriodFormatException("Value");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        timeSeries2.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        org.jfree.data.time.TimeSeries timeSeries34 = timeSeries2.addAndOrUpdate(timeSeries10);
        timeSeries34.fireSeriesChanged();
        boolean boolean36 = fixedMillisecond0.equals((java.lang.Object) timeSeries34);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener39 = null;
        timeSeries38.addChangeListener(seriesChangeListener39);
        long long41 = timeSeries38.getMaximumItemAge();
        java.lang.String str42 = timeSeries38.getDescription();
        double double43 = timeSeries38.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day46 = new org.jfree.data.time.Day();
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day46, (double) (short) 0, false);
        timeSeries45.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = timeSeries45.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent54 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean55 = timeSeries45.equals((java.lang.Object) seriesChangeEvent54);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        int int58 = day56.compareTo((java.lang.Object) (short) 100);
        java.lang.String str59 = day56.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem60 = timeSeries45.getDataItem((org.jfree.data.time.RegularTimePeriod) day56);
        timeSeries38.add(timeSeriesDataItem60);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem62 = timeSeries34.addOrUpdate(timeSeriesDataItem60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = timeSeriesDataItem60.getPeriod();
        timeSeriesDataItem60.setValue((java.lang.Number) 1711995746250L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(timeSeries34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 9223372036854775807L + "'", long41 == 9223372036854775807L);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1-April-2024" + "'", str59, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem60);
        org.junit.Assert.assertNotNull(timeSeriesDataItem62);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getLastMillisecond();
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        int int3 = month0.compareTo((java.lang.Object) month2);
        int int4 = month0.getYearValue();
        long long5 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year6 = month0.getYear();
        int int7 = month0.getYearValue();
        int int8 = month0.getMonth();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1714546799999L + "'", long1 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2024 + "'", int7 == 2024);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        timeSeries1.removeAgedItems(false);
        java.lang.String str9 = timeSeries1.getRangeDescription();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries1.removeChangeListener(seriesChangeListener10);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value" + "'", str9, "Value");
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        long long7 = day2.getFirstMillisecond();
        java.util.Date date8 = day2.getStart();
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day(date8);
        org.jfree.data.time.Month month10 = new org.jfree.data.time.Month(date8);
        org.jfree.data.time.FixedMillisecond fixedMillisecond11 = new org.jfree.data.time.FixedMillisecond(date8);
        org.jfree.data.time.Month month12 = new org.jfree.data.time.Month(date8);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day4 = new org.jfree.data.time.Day();
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day4, (double) (short) 0, false);
        java.util.Date date8 = day4.getStart();
        org.jfree.data.time.SerialDate serialDate9 = day4.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo11 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent12 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo11);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo13 = seriesChangeEvent12.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo14 = null;
        seriesChangeEvent12.setSummary(seriesChangeInfo14);
        int int16 = day4.compareTo((java.lang.Object) seriesChangeEvent12);
        int int17 = year1.compareTo((java.lang.Object) seriesChangeEvent12);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        long long38 = month22.getSerialIndex();
        boolean boolean39 = year1.equals((java.lang.Object) month22);
        java.lang.Object obj40 = null;
        int int41 = year1.compareTo(obj40);
        long long42 = year1.getFirstMillisecond();
        java.util.Calendar calendar43 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long44 = year1.getLastMillisecond(calendar43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate9);
        org.junit.Assert.assertNull(seriesChangeInfo13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 24292L + "'", long38 == 24292L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-62104204800000L) + "'", long42 == (-62104204800000L));
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        timeSeries13.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries13.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent22 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean23 = timeSeries13.equals((java.lang.Object) seriesChangeEvent22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        int int26 = day24.compareTo((java.lang.Object) (short) 100);
        java.lang.String str27 = day24.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries13.getDataItem((org.jfree.data.time.RegularTimePeriod) day24);
        timeSeries6.add(timeSeriesDataItem28);
        timeSeries1.add(timeSeriesDataItem28);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        timeSeries32.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries32.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent41 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean42 = timeSeries32.equals((java.lang.Object) seriesChangeEvent41);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        int int45 = day43.compareTo((java.lang.Object) (short) 100);
        java.lang.String str46 = day43.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries32.getDataItem((org.jfree.data.time.RegularTimePeriod) day43);
        timeSeriesDataItem47.setSelected(false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries1.addOrUpdate(timeSeriesDataItem47);
        org.jfree.data.time.TimeSeries timeSeries52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        timeSeries52.add((org.jfree.data.time.RegularTimePeriod) day53, (double) (short) 0, false);
        java.util.Date date57 = day53.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = day53.previous();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem60 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day53, (java.lang.Number) 5);
        org.jfree.data.time.TimeSeries timeSeries62 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list63 = timeSeries62.data;
        org.jfree.data.time.TimeSeries timeSeries64 = timeSeries1.addAndOrUpdate(timeSeries62);
        java.lang.Object obj65 = timeSeries64.clone();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1-April-2024" + "'", str27, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1-April-2024" + "'", str46, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem47);
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertNotNull(timeSeriesDataItem60);
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertNotNull(timeSeries64);
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.lang.Comparable comparable3 = timeSeries1.getKey();
        boolean boolean4 = timeSeries1.isEmpty();
        org.jfree.data.time.FixedMillisecond fixedMillisecond5 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = fixedMillisecond5.next();
        java.util.Date date7 = fixedMillisecond5.getTime();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem9 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond5, (double) (short) -1);
        timeSeries1.add(timeSeriesDataItem9, false);
        java.lang.String str12 = timeSeries1.getDescription();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + comparable3 + "' != '" + 100L + "'", comparable3, 100L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Apr 01 11:24:34 PDT 2024");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod2 = year1.previous();
        java.lang.String str3 = year1.toString();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = year1.getLastMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2" + "'", str3, "2");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        int int6 = day2.getDayOfMonth();
        long long7 = day2.getFirstMillisecond();
        org.jfree.data.time.SerialDate serialDate8 = day2.getSerialDate();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNotNull(serialDate8);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        java.lang.Number number34 = timeSeriesDataItem32.getValue();
        timeSeriesDataItem32.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries1.addOrUpdate(timeSeriesDataItem32);
        int int38 = timeSeries1.getItemCount();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        timeSeries41.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = timeSeries41.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent50 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean51 = timeSeries41.equals((java.lang.Object) seriesChangeEvent50);
        org.jfree.data.time.Day day52 = new org.jfree.data.time.Day();
        int int54 = day52.compareTo((java.lang.Object) (short) 100);
        java.lang.String str55 = day52.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem56 = timeSeries41.getDataItem((org.jfree.data.time.RegularTimePeriod) day52);
        java.lang.Object obj57 = null;
        int int58 = timeSeriesDataItem56.compareTo(obj57);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries1.addOrUpdate(timeSeriesDataItem56);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = timeSeriesDataItem56.getPeriod();
        java.lang.Object obj61 = null;
        int int62 = timeSeriesDataItem56.compareTo(obj61);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 0.0d + "'", number34, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1-April-2024" + "'", str55, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        int int16 = timeSeries1.getMaximumItemCount();
        timeSeries1.setNotify(false);
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = day21.next();
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        timeSeries27.add((org.jfree.data.time.RegularTimePeriod) day28, (double) (short) 0, false);
        timeSeries27.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = timeSeries27.getNextTimePeriod();
        org.jfree.data.time.Month month35 = new org.jfree.data.time.Month();
        long long36 = month35.getLastMillisecond();
        org.jfree.data.time.Month month37 = new org.jfree.data.time.Month();
        int int38 = month35.compareTo((java.lang.Object) month37);
        org.jfree.data.time.TimeSeries timeSeries40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list41 = timeSeries40.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener42 = null;
        timeSeries40.addChangeListener(seriesChangeListener42);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.addChangeListener(seriesChangeListener46);
        org.jfree.data.time.Month month48 = new org.jfree.data.time.Month();
        long long49 = month48.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries51 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener52 = null;
        timeSeries51.removeChangeListener(seriesChangeListener52);
        org.jfree.data.time.TimeSeries timeSeries55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        timeSeries55.add((org.jfree.data.time.RegularTimePeriod) day56, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem61 = timeSeries51.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day56, (java.lang.Number) 10L);
        long long62 = day56.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries63 = timeSeries45.createCopy((org.jfree.data.time.RegularTimePeriod) month48, (org.jfree.data.time.RegularTimePeriod) day56);
        timeSeries45.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener66 = null;
        timeSeries45.removeChangeListener(seriesChangeListener66);
        org.jfree.data.time.TimeSeries timeSeries68 = timeSeries40.addAndOrUpdate(timeSeries45);
        int int69 = month35.compareTo((java.lang.Object) timeSeries45);
        org.jfree.data.time.TimeSeries timeSeries71 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener72 = null;
        timeSeries71.removeChangeListener(seriesChangeListener72);
        org.jfree.data.time.TimeSeries timeSeries75 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day76 = new org.jfree.data.time.Day();
        timeSeries75.add((org.jfree.data.time.RegularTimePeriod) day76, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem81 = timeSeries71.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day76, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries82 = timeSeries27.createCopy((org.jfree.data.time.RegularTimePeriod) month35, (org.jfree.data.time.RegularTimePeriod) day76);
        org.jfree.data.time.TimeSeries timeSeries84 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day85 = new org.jfree.data.time.Day();
        timeSeries84.add((org.jfree.data.time.RegularTimePeriod) day85, (double) (short) 0, false);
        java.util.Date date89 = day85.getStart();
        org.jfree.data.time.SerialDate serialDate90 = day85.getSerialDate();
        org.jfree.data.time.SerialDate serialDate91 = day85.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem92 = timeSeries27.getDataItem((org.jfree.data.time.RegularTimePeriod) day85);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem94 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day85, (double) 1711995721514L);
        org.jfree.data.time.TimeSeries timeSeries95 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) day21, (org.jfree.data.time.RegularTimePeriod) day85);
        java.util.Calendar calendar96 = null;
        // The following exception was thrown during execution in test generation
        try {
            day21.peg(calendar96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1714546799999L + "'", long36 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(list41);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1711954800000L + "'", long49 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1711997999999L + "'", long62 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries63);
        org.junit.Assert.assertNotNull(timeSeries68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem81);
        org.junit.Assert.assertNotNull(timeSeries82);
        org.junit.Assert.assertNotNull(date89);
        org.junit.Assert.assertEquals(date89.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate90);
        org.junit.Assert.assertNotNull(serialDate91);
        org.junit.Assert.assertNotNull(timeSeriesDataItem92);
        org.junit.Assert.assertNotNull(timeSeries95);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        timeSeries1.removeAgedItems(false);
        java.lang.String str9 = timeSeries1.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.addChangeListener(seriesChangeListener12);
        long long14 = timeSeries11.getMaximumItemAge();
        java.lang.String str15 = timeSeries11.getDescription();
        double double16 = timeSeries11.getMaxY();
        timeSeries11.setDescription("hi!");
        java.util.List list19 = timeSeries11.data;
        java.util.Collection collection20 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond23 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = fixedMillisecond23.next();
        timeSeries22.setKey((java.lang.Comparable) fixedMillisecond23);
        java.lang.Class class26 = timeSeries22.timePeriodClass;
        org.jfree.data.time.Year year28 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        java.util.Date date35 = day31.getStart();
        org.jfree.data.time.SerialDate serialDate36 = day31.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo38 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent39 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo38);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo40 = seriesChangeEvent39.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo41 = null;
        seriesChangeEvent39.setSummary(seriesChangeInfo41);
        int int43 = day31.compareTo((java.lang.Object) seriesChangeEvent39);
        int int44 = year28.compareTo((java.lang.Object) seriesChangeEvent39);
        java.lang.Number number45 = timeSeries22.getValue((org.jfree.data.time.RegularTimePeriod) year28);
        org.jfree.data.time.Month month46 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year47 = month46.getYear();
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener50 = null;
        timeSeries49.addChangeListener(seriesChangeListener50);
        org.jfree.data.time.Month month52 = new org.jfree.data.time.Month();
        long long53 = month52.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener56 = null;
        timeSeries55.removeChangeListener(seriesChangeListener56);
        org.jfree.data.time.TimeSeries timeSeries59 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day60 = new org.jfree.data.time.Day();
        timeSeries59.add((org.jfree.data.time.RegularTimePeriod) day60, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem65 = timeSeries55.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day60, (java.lang.Number) 10L);
        long long66 = day60.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries67 = timeSeries49.createCopy((org.jfree.data.time.RegularTimePeriod) month52, (org.jfree.data.time.RegularTimePeriod) day60);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = month52.next();
        int int69 = year47.compareTo((java.lang.Object) month52);
        org.jfree.data.time.Year year70 = month52.getYear();
        int int71 = year70.getYear();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem73 = timeSeries22.addOrUpdate((org.jfree.data.time.RegularTimePeriod) year70, (java.lang.Number) 1711995703697L);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem75 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) year70, (double) 9223372036854775807L);
        long long76 = year70.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Value" + "'", str9, "Value");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 9223372036854775807L + "'", long14 == 9223372036854775807L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNull(class26);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate36);
        org.junit.Assert.assertNull(seriesChangeInfo40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(number45);
        org.junit.Assert.assertNotNull(year47);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1711954800000L + "'", long53 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1711997999999L + "'", long66 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries67);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(year70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2024 + "'", int71 == 2024);
        org.junit.Assert.assertNull(timeSeriesDataItem73);
        org.junit.Assert.assertNull(timeSeriesDataItem75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1704096000000L + "'", long76 == 1704096000000L);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.util.List list5 = timeSeries1.getItems();
        java.util.List list6 = timeSeries1.getItems();
        java.util.Collection collection7 = timeSeries1.getTimePeriods();
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        long long10 = month8.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month8);
        timeSeries1.removeAgedItems(true);
        timeSeries1.setNotify(true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954800000L + "'", long9 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertNull(timeSeriesDataItem11);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        double double15 = timeSeries10.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        java.lang.String str31 = day28.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day28);
        timeSeries10.add(timeSeriesDataItem32);
        java.lang.Number number34 = timeSeriesDataItem32.getValue();
        timeSeriesDataItem32.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries1.addOrUpdate(timeSeriesDataItem32);
        int int38 = timeSeries1.getItemCount();
        boolean boolean39 = timeSeries1.getNotify();
        timeSeries1.clear();
        timeSeries1.fireSeriesChanged();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1-April-2024" + "'", str31, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 0.0d + "'", number34, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 2);
        long long16 = day10.getLastMillisecond();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1712041199999L + "'", long16 == 1712041199999L);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        int int10 = day8.compareTo((java.lang.Object) (short) 100);
        boolean boolean11 = day2.equals((java.lang.Object) (short) 100);
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = day2.getFirstMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 2);
        boolean boolean16 = timeSeries1.isEmpty();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        timeSeries18.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = timeSeries18.getNextTimePeriod();
        org.jfree.data.time.Month month26 = new org.jfree.data.time.Month();
        long long27 = month26.getLastMillisecond();
        org.jfree.data.time.Month month28 = new org.jfree.data.time.Month();
        int int29 = month26.compareTo((java.lang.Object) month28);
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list32 = timeSeries31.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries31.addChangeListener(seriesChangeListener33);
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener37 = null;
        timeSeries36.addChangeListener(seriesChangeListener37);
        org.jfree.data.time.Month month39 = new org.jfree.data.time.Month();
        long long40 = month39.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener43 = null;
        timeSeries42.removeChangeListener(seriesChangeListener43);
        org.jfree.data.time.TimeSeries timeSeries46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        timeSeries46.add((org.jfree.data.time.RegularTimePeriod) day47, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem52 = timeSeries42.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day47, (java.lang.Number) 10L);
        long long53 = day47.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries54 = timeSeries36.createCopy((org.jfree.data.time.RegularTimePeriod) month39, (org.jfree.data.time.RegularTimePeriod) day47);
        timeSeries36.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener57 = null;
        timeSeries36.removeChangeListener(seriesChangeListener57);
        org.jfree.data.time.TimeSeries timeSeries59 = timeSeries31.addAndOrUpdate(timeSeries36);
        int int60 = month26.compareTo((java.lang.Object) timeSeries36);
        org.jfree.data.time.TimeSeries timeSeries62 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener63 = null;
        timeSeries62.removeChangeListener(seriesChangeListener63);
        org.jfree.data.time.TimeSeries timeSeries66 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day67 = new org.jfree.data.time.Day();
        timeSeries66.add((org.jfree.data.time.RegularTimePeriod) day67, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem72 = timeSeries62.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day67, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries73 = timeSeries18.createCopy((org.jfree.data.time.RegularTimePeriod) month26, (org.jfree.data.time.RegularTimePeriod) day67);
        org.jfree.data.time.TimeSeries timeSeries75 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day76 = new org.jfree.data.time.Day();
        timeSeries75.add((org.jfree.data.time.RegularTimePeriod) day76, (double) (short) 0, false);
        java.util.Date date80 = day76.getStart();
        org.jfree.data.time.SerialDate serialDate81 = day76.getSerialDate();
        org.jfree.data.time.SerialDate serialDate82 = day76.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem83 = timeSeries18.getDataItem((org.jfree.data.time.RegularTimePeriod) day76);
        boolean boolean84 = timeSeries18.getNotify();
        java.util.Collection collection85 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries18);
        timeSeries1.setDomainDescription("");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1714546799999L + "'", long27 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1711954800000L + "'", long40 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1711997999999L + "'", long53 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries54);
        org.junit.Assert.assertNotNull(timeSeries59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem72);
        org.junit.Assert.assertNotNull(timeSeries73);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate81);
        org.junit.Assert.assertNotNull(serialDate82);
        org.junit.Assert.assertNotNull(timeSeriesDataItem83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(collection85);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries1.removeChangeListener(seriesChangeListener6);
        java.lang.Class class8 = timeSeries1.getTimePeriodClass();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.removeChangeListener(seriesChangeListener9);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        long long12 = day11.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = day11.previous();
        long long14 = day11.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day11);
        int int16 = day11.getYear();
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 45383L + "'", long12 == 45383L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 45383L + "'", long14 == 45383L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2024 + "'", int16 == 2024);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.lang.Comparable comparable3 = timeSeries1.getKey();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        timeSeries5.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        java.util.Date date18 = day14.getStart();
        org.jfree.data.time.SerialDate serialDate19 = day14.getSerialDate();
        java.lang.Number number20 = null;
        timeSeries5.update((org.jfree.data.time.RegularTimePeriod) day14, number20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener24 = null;
        timeSeries23.removeChangeListener(seriesChangeListener24);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        timeSeries27.add((org.jfree.data.time.RegularTimePeriod) day28, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem33 = timeSeries23.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day28, (java.lang.Number) 10L);
        long long34 = day28.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = timeSeries5.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day28, (java.lang.Number) (byte) 10);
        double double37 = timeSeries5.getMaxY();
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        long long39 = day38.getSerialIndex();
        timeSeries5.delete((org.jfree.data.time.RegularTimePeriod) day38);
        java.lang.Comparable comparable41 = timeSeries5.getKey();
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries1.addAndOrUpdate(timeSeries5);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + comparable3 + "' != '" + 100L + "'", comparable3, 100L);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate19);
        org.junit.Assert.assertNull(timeSeriesDataItem33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1711997999999L + "'", long34 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 45383L + "'", long39 == 45383L);
        org.junit.Assert.assertEquals("'" + comparable41 + "' != '" + 100L + "'", comparable41, 100L);
        org.junit.Assert.assertNotNull(timeSeries42);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = month4.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = month4.next();
        long long22 = month4.getFirstMillisecond();
        long long23 = month4.getSerialIndex();
        int int24 = month4.getYearValue();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711954800000L + "'", long22 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 24292L + "'", long23 == 24292L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2024 + "'", int24 == 2024);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.clear();
        timeSeries1.setNotify(false);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        int int7 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day6);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            day6.peg(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        java.lang.String str25 = timeSeries1.getDomainDescription();
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        timeSeries27.add((org.jfree.data.time.RegularTimePeriod) day28, (double) (short) 0, false);
        java.util.Date date32 = day28.getStart();
        org.jfree.data.time.SerialDate serialDate33 = day28.getSerialDate();
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day(serialDate33);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = day34.next();
        java.lang.Number number36 = timeSeries1.getValue(regularTimePeriod35);
        java.lang.String str37 = timeSeries1.getDescription();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Time" + "'", str25, "Time");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate33);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        timeSeries4.add((org.jfree.data.time.RegularTimePeriod) day5, (double) (short) 0, false);
        timeSeries4.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = timeSeries4.getNextTimePeriod();
        org.jfree.data.time.Month month12 = new org.jfree.data.time.Month();
        long long13 = month12.getLastMillisecond();
        org.jfree.data.time.Month month14 = new org.jfree.data.time.Month();
        int int15 = month12.compareTo((java.lang.Object) month14);
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list18 = timeSeries17.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries17.addChangeListener(seriesChangeListener19);
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener23 = null;
        timeSeries22.addChangeListener(seriesChangeListener23);
        org.jfree.data.time.Month month25 = new org.jfree.data.time.Month();
        long long26 = month25.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.removeChangeListener(seriesChangeListener29);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem38 = timeSeries28.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day33, (java.lang.Number) 10L);
        long long39 = day33.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries40 = timeSeries22.createCopy((org.jfree.data.time.RegularTimePeriod) month25, (org.jfree.data.time.RegularTimePeriod) day33);
        timeSeries22.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener43 = null;
        timeSeries22.removeChangeListener(seriesChangeListener43);
        org.jfree.data.time.TimeSeries timeSeries45 = timeSeries17.addAndOrUpdate(timeSeries22);
        int int46 = month12.compareTo((java.lang.Object) timeSeries22);
        org.jfree.data.time.TimeSeries timeSeries48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener49 = null;
        timeSeries48.removeChangeListener(seriesChangeListener49);
        org.jfree.data.time.TimeSeries timeSeries52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        timeSeries52.add((org.jfree.data.time.RegularTimePeriod) day53, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem58 = timeSeries48.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day53, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries59 = timeSeries4.createCopy((org.jfree.data.time.RegularTimePeriod) month12, (org.jfree.data.time.RegularTimePeriod) day53);
        org.jfree.data.time.TimeSeries timeSeries61 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day62 = new org.jfree.data.time.Day();
        timeSeries61.add((org.jfree.data.time.RegularTimePeriod) day62, (double) (short) 0, false);
        java.util.Date date66 = day62.getStart();
        org.jfree.data.time.SerialDate serialDate67 = day62.getSerialDate();
        org.jfree.data.time.SerialDate serialDate68 = day62.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = timeSeries4.getDataItem((org.jfree.data.time.RegularTimePeriod) day62);
        timeSeries1.add(timeSeriesDataItem69);
        timeSeriesDataItem69.setSelected(true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1714546799999L + "'", long13 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(list18);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711954800000L + "'", long26 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1711997999999L + "'", long39 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries40);
        org.junit.Assert.assertNotNull(timeSeries45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem58);
        org.junit.Assert.assertNotNull(timeSeries59);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate67);
        org.junit.Assert.assertNotNull(serialDate68);
        org.junit.Assert.assertNotNull(timeSeriesDataItem69);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod2 = year1.previous();
        java.lang.String str3 = year1.toString();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries5.removeChangeListener(seriesChangeListener6);
        java.lang.String str8 = timeSeries5.getRangeDescription();
        int int9 = year1.compareTo((java.lang.Object) str8);
        long long10 = year1.getFirstMillisecond();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = year1.getMiddleMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2" + "'", str3, "2");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value" + "'", str8, "Value");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-62104204800000L) + "'", long10 == (-62104204800000L));
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        timeSeries4.add((org.jfree.data.time.RegularTimePeriod) day5, (double) (short) 0, false);
        java.util.Date date9 = day5.getStart();
        org.jfree.data.time.SerialDate serialDate10 = day5.getSerialDate();
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        int int13 = day11.compareTo((java.lang.Object) (short) 100);
        java.util.Date date14 = day11.getEnd();
        long long15 = day11.getLastMillisecond();
        org.jfree.data.time.TimeSeries timeSeries16 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) day5, (org.jfree.data.time.RegularTimePeriod) day11);
        org.jfree.data.time.Month month17 = new org.jfree.data.time.Month();
        long long18 = month17.getLastMillisecond();
        org.jfree.data.time.Month month19 = new org.jfree.data.time.Month();
        int int20 = month17.compareTo((java.lang.Object) month19);
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list23 = timeSeries22.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener24 = null;
        timeSeries22.addChangeListener(seriesChangeListener24);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener28 = null;
        timeSeries27.addChangeListener(seriesChangeListener28);
        org.jfree.data.time.Month month30 = new org.jfree.data.time.Month();
        long long31 = month30.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.removeChangeListener(seriesChangeListener34);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        timeSeries37.add((org.jfree.data.time.RegularTimePeriod) day38, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries33.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day38, (java.lang.Number) 10L);
        long long44 = day38.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries45 = timeSeries27.createCopy((org.jfree.data.time.RegularTimePeriod) month30, (org.jfree.data.time.RegularTimePeriod) day38);
        timeSeries27.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener48 = null;
        timeSeries27.removeChangeListener(seriesChangeListener48);
        org.jfree.data.time.TimeSeries timeSeries50 = timeSeries22.addAndOrUpdate(timeSeries27);
        int int51 = month17.compareTo((java.lang.Object) timeSeries27);
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent53 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo54 = null;
        seriesChangeEvent53.setSummary(seriesChangeInfo54);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo56 = seriesChangeEvent53.getSummary();
        java.lang.Object obj57 = seriesChangeEvent53.getSource();
        boolean boolean58 = month17.equals(obj57);
        int int59 = day5.compareTo((java.lang.Object) month17);
        java.util.Date date60 = day5.getStart();
        org.jfree.data.time.Month month61 = new org.jfree.data.time.Month();
        long long62 = month61.getLastMillisecond();
        org.jfree.data.time.Month month63 = new org.jfree.data.time.Month();
        int int64 = month61.compareTo((java.lang.Object) month63);
        int int65 = month61.getYearValue();
        long long66 = month61.getSerialIndex();
        int int67 = day5.compareTo((java.lang.Object) long66);
        long long68 = day5.getSerialIndex();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1712041199999L + "'", long15 == 1712041199999L);
        org.junit.Assert.assertNotNull(timeSeries16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1714546799999L + "'", long18 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1711954800000L + "'", long31 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1711997999999L + "'", long44 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries45);
        org.junit.Assert.assertNotNull(timeSeries50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNull(seriesChangeInfo56);
        org.junit.Assert.assertEquals("'" + obj57 + "' != '" + 10.0d + "'", obj57, 10.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1714546799999L + "'", long62 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2024 + "'", int65 == 2024);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 24292L + "'", long66 == 24292L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 45383L + "'", long68 == 45383L);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.clear();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem5 = timeSeries1.getDataItem((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.FixedMillisecond fixedMillisecond2 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond2.next();
        timeSeries1.setKey((java.lang.Comparable) fixedMillisecond2);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        timeSeries13.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries13.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent22 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean23 = timeSeries13.equals((java.lang.Object) seriesChangeEvent22);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        int int26 = day24.compareTo((java.lang.Object) (short) 100);
        java.lang.String str27 = day24.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries13.getDataItem((org.jfree.data.time.RegularTimePeriod) day24);
        timeSeries6.add(timeSeriesDataItem28);
        timeSeries1.add(timeSeriesDataItem28);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        timeSeries32.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries32.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent41 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean42 = timeSeries32.equals((java.lang.Object) seriesChangeEvent41);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        int int45 = day43.compareTo((java.lang.Object) (short) 100);
        java.lang.String str46 = day43.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries32.getDataItem((org.jfree.data.time.RegularTimePeriod) day43);
        timeSeriesDataItem47.setSelected(false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries1.addOrUpdate(timeSeriesDataItem47);
        org.jfree.data.time.TimeSeries timeSeries52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        timeSeries52.add((org.jfree.data.time.RegularTimePeriod) day53, (double) (short) 0, false);
        timeSeries52.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries59 = timeSeries1.addAndOrUpdate(timeSeries52);
        java.lang.Class class60 = timeSeries1.getTimePeriodClass();
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1-April-2024" + "'", str27, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1-April-2024" + "'", str46, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem47);
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertNotNull(timeSeries59);
        org.junit.Assert.assertNotNull(class60);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        long long2 = month0.getFirstMillisecond();
        long long3 = month0.getSerialIndex();
        long long4 = month0.getSerialIndex();
        long long5 = month0.getFirstMillisecond();
        java.util.Date date6 = month0.getEnd();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo7 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent8 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) month0, seriesChangeInfo7);
        java.lang.Object obj9 = seriesChangeEvent8.getSource();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954800000L + "'", long2 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 24292L + "'", long3 == 24292L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24292L + "'", long4 == 24292L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Apr 30 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "April 2024");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "April 2024");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "April 2024");
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Year year19 = new org.jfree.data.time.Year(2);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        java.util.Date date26 = day22.getStart();
        org.jfree.data.time.SerialDate serialDate27 = day22.getSerialDate();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) true, seriesChangeInfo29);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo31 = seriesChangeEvent30.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo32 = null;
        seriesChangeEvent30.setSummary(seriesChangeInfo32);
        int int34 = day22.compareTo((java.lang.Object) seriesChangeEvent30);
        int int35 = year19.compareTo((java.lang.Object) seriesChangeEvent30);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month();
        long long41 = month40.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries43.removeChangeListener(seriesChangeListener44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries43.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day48, (java.lang.Number) 10L);
        long long54 = day48.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries37.createCopy((org.jfree.data.time.RegularTimePeriod) month40, (org.jfree.data.time.RegularTimePeriod) day48);
        long long56 = month40.getSerialIndex();
        boolean boolean57 = year19.equals((java.lang.Object) month40);
        timeSeries1.setKey((java.lang.Comparable) year19);
        int int59 = year19.getYear();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem61 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) year19, (double) 1711995746375L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1-April-2024" + "'", str15, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate27);
        org.junit.Assert.assertNull(seriesChangeInfo31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711954800000L + "'", long41 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711997999999L + "'", long54 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 24292L + "'", long56 == 24292L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.Year year7 = new org.jfree.data.time.Year(date6);
        org.jfree.data.time.Year year8 = new org.jfree.data.time.Year(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = year8.previous();
        int int10 = year8.getYear();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2024 + "'", int10 == 2024);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        boolean boolean13 = day2.equals((java.lang.Object) day8);
        java.text.DateFormat dateFormat14 = org.jfree.data.time.Day.DATE_FORMAT;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent15 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) dateFormat14);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo16 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) seriesChangeEvent15, seriesChangeInfo16);
        java.lang.Object obj18 = seriesChangeEvent15.getSource();
        boolean boolean19 = day2.equals(obj18);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateFormat14);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.util.List list5 = timeSeries1.getItems();
        java.util.List list6 = timeSeries1.getItems();
        java.util.Collection collection7 = timeSeries1.getTimePeriods();
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        long long10 = month8.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month8);
        org.jfree.data.time.Month month12 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year13 = month12.getYear();
        org.jfree.data.time.Month month14 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year15 = month14.getYear();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener18 = null;
        timeSeries17.addChangeListener(seriesChangeListener18);
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month();
        long long21 = month20.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener24 = null;
        timeSeries23.removeChangeListener(seriesChangeListener24);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        timeSeries27.add((org.jfree.data.time.RegularTimePeriod) day28, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem33 = timeSeries23.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day28, (java.lang.Number) 10L);
        long long34 = day28.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries17.createCopy((org.jfree.data.time.RegularTimePeriod) month20, (org.jfree.data.time.RegularTimePeriod) day28);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = month20.next();
        int int37 = year15.compareTo((java.lang.Object) month20);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = year15.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = year15.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = year15.previous();
        boolean boolean41 = year13.equals((java.lang.Object) regularTimePeriod40);
        timeSeries1.delete(regularTimePeriod40);
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener45 = null;
        timeSeries44.addChangeListener(seriesChangeListener45);
        long long47 = timeSeries44.getMaximumItemAge();
        java.lang.String str48 = timeSeries44.getDescription();
        double double49 = timeSeries44.getMaxY();
        timeSeries44.setDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener54 = null;
        timeSeries53.addChangeListener(seriesChangeListener54);
        long long56 = timeSeries53.getMaximumItemAge();
        java.lang.String str57 = timeSeries53.getDescription();
        double double58 = timeSeries53.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries60 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day61 = new org.jfree.data.time.Day();
        timeSeries60.add((org.jfree.data.time.RegularTimePeriod) day61, (double) (short) 0, false);
        timeSeries60.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod67 = timeSeries60.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent69 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean70 = timeSeries60.equals((java.lang.Object) seriesChangeEvent69);
        org.jfree.data.time.Day day71 = new org.jfree.data.time.Day();
        int int73 = day71.compareTo((java.lang.Object) (short) 100);
        java.lang.String str74 = day71.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem75 = timeSeries60.getDataItem((org.jfree.data.time.RegularTimePeriod) day71);
        timeSeries53.add(timeSeriesDataItem75);
        java.lang.Number number77 = timeSeriesDataItem75.getValue();
        timeSeriesDataItem75.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem80 = timeSeries44.addOrUpdate(timeSeriesDataItem75);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod81 = timeSeries44.getNextTimePeriod();
        org.jfree.data.time.TimeSeries timeSeries82 = timeSeries1.addAndOrUpdate(timeSeries44);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(collection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954800000L + "'", long9 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertNotNull(year13);
        org.junit.Assert.assertNotNull(year15);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1711954800000L + "'", long21 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1711997999999L + "'", long34 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 9223372036854775807L + "'", long47 == 9223372036854775807L);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 9223372036854775807L + "'", long56 == 9223372036854775807L);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(regularTimePeriod67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1-April-2024" + "'", str74, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem75);
        org.junit.Assert.assertEquals("'" + number77 + "' != '" + 0.0d + "'", number77, 0.0d);
        org.junit.Assert.assertNull(timeSeriesDataItem80);
        org.junit.Assert.assertNotNull(regularTimePeriod81);
        org.junit.Assert.assertNotNull(timeSeries82);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.util.List list5 = timeSeries1.getItems();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list8 = timeSeries7.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries7.addChangeListener(seriesChangeListener9);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.addChangeListener(seriesChangeListener13);
        org.jfree.data.time.Month month15 = new org.jfree.data.time.Month();
        long long16 = month15.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.removeChangeListener(seriesChangeListener19);
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries18.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day23, (java.lang.Number) 10L);
        long long29 = day23.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries30 = timeSeries12.createCopy((org.jfree.data.time.RegularTimePeriod) month15, (org.jfree.data.time.RegularTimePeriod) day23);
        timeSeries12.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries12.removeChangeListener(seriesChangeListener33);
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries7.addAndOrUpdate(timeSeries12);
        org.jfree.data.time.TimeSeries timeSeries36 = timeSeries1.addAndOrUpdate(timeSeries7);
        java.lang.Comparable comparable37 = timeSeries36.getKey();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711954800000L + "'", long16 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711997999999L + "'", long29 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries30);
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertNotNull(timeSeries36);
        org.junit.Assert.assertEquals("'" + comparable37 + "' != '" + "Overwritten values from: 100" + "'", comparable37, "Overwritten values from: 100");
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getLastMillisecond();
        int int3 = month0.getYearValue();
        long long4 = month0.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1711954800000L + "'", long1 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1714546799999L + "'", long2 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2024 + "'", int3 == 2024);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24292L + "'", long4 == 24292L);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        timeSeries1.setDescription("");
        timeSeries1.removeAgedItems(true);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        timeSeries30.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = timeSeries30.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent39 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean40 = timeSeries30.equals((java.lang.Object) seriesChangeEvent39);
        org.jfree.data.time.Day day41 = new org.jfree.data.time.Day();
        int int43 = day41.compareTo((java.lang.Object) (short) 100);
        java.lang.String str44 = day41.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem45 = timeSeries30.getDataItem((org.jfree.data.time.RegularTimePeriod) day41);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem46 = timeSeries1.addOrUpdate(timeSeriesDataItem45);
        org.jfree.data.time.TimeSeries timeSeries48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day49 = new org.jfree.data.time.Day();
        timeSeries48.add((org.jfree.data.time.RegularTimePeriod) day49, (double) (short) 0, false);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = day49.next();
        boolean boolean54 = timeSeriesDataItem45.equals((java.lang.Object) regularTimePeriod53);
        timeSeriesDataItem45.setValue((java.lang.Number) 1711995732423L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1-April-2024" + "'", str22, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1-April-2024" + "'", str44, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem45);
        org.junit.Assert.assertNotNull(timeSeriesDataItem46);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year1 = org.jfree.data.time.Year.parseYear("31-March-2024");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Cannot parse string.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.Year year1 = month0.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.Month month6 = new org.jfree.data.time.Month();
        long long7 = month6.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries9.removeChangeListener(seriesChangeListener10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem19 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10L);
        long long20 = day14.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries3.createCopy((org.jfree.data.time.RegularTimePeriod) month6, (org.jfree.data.time.RegularTimePeriod) day14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = month6.next();
        int int23 = year1.compareTo((java.lang.Object) month6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = year1.previous();
        int int25 = year1.getYear();
        int int26 = year1.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = year1.previous();
        long long28 = regularTimePeriod27.getFirstMillisecond();
        org.junit.Assert.assertNotNull(year1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954800000L + "'", long7 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711997999999L + "'", long20 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2024 + "'", int25 == 2024);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2024 + "'", int26 == 2024);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1672560000000L + "'", long28 == 1672560000000L);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        java.lang.Object obj7 = null;
        boolean boolean8 = timeSeries1.equals(obj7);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, false);
        timeSeries10.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        java.util.Date date23 = day19.getStart();
        org.jfree.data.time.SerialDate serialDate24 = day19.getSerialDate();
        java.lang.Number number25 = null;
        timeSeries10.update((org.jfree.data.time.RegularTimePeriod) day19, number25);
        org.jfree.data.time.Year year28 = new org.jfree.data.time.Year(2);
        timeSeries10.delete((org.jfree.data.time.RegularTimePeriod) year28);
        long long30 = timeSeries10.getMaximumItemAge();
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        int int33 = day31.compareTo((java.lang.Object) (short) 100);
        java.lang.String str34 = day31.toString();
        int int35 = timeSeries10.getIndex((org.jfree.data.time.RegularTimePeriod) day31);
        java.lang.Number number36 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) day31);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        timeSeries38.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        timeSeries46.add((org.jfree.data.time.RegularTimePeriod) day47, (double) (short) 0, false);
        java.util.Date date51 = day47.getStart();
        org.jfree.data.time.SerialDate serialDate52 = day47.getSerialDate();
        java.lang.Number number53 = null;
        timeSeries38.update((org.jfree.data.time.RegularTimePeriod) day47, number53);
        org.jfree.data.time.TimeSeries timeSeries56 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener57 = null;
        timeSeries56.removeChangeListener(seriesChangeListener57);
        org.jfree.data.time.TimeSeries timeSeries60 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day61 = new org.jfree.data.time.Day();
        timeSeries60.add((org.jfree.data.time.RegularTimePeriod) day61, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem66 = timeSeries56.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day61, (java.lang.Number) 10L);
        long long67 = day61.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = timeSeries38.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day61, (java.lang.Number) (byte) 10);
        double double70 = timeSeries38.getMaxY();
        org.jfree.data.time.Day day71 = new org.jfree.data.time.Day();
        long long72 = day71.getSerialIndex();
        timeSeries38.delete((org.jfree.data.time.RegularTimePeriod) day71);
        java.util.Collection collection74 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries38);
        java.lang.Object obj75 = timeSeries38.clone();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate24);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1-April-2024" + "'", str34, "1-April-2024");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate52);
        org.junit.Assert.assertNull(timeSeriesDataItem66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1711997999999L + "'", long67 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 45383L + "'", long72 == 45383L);
        org.junit.Assert.assertNotNull(collection74);
        org.junit.Assert.assertNotNull(obj75);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711995821743L);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        long long1 = day0.getSerialIndex();
        long long2 = day0.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = day0.previous();
        java.lang.String str4 = day0.toString();
        java.text.DateFormat dateFormat5 = org.jfree.data.time.Day.DATE_FORMAT_SHORT;
        int int6 = day0.compareTo((java.lang.Object) dateFormat5);
        long long7 = day0.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = day0.next();
        java.util.Date date9 = day0.getStart();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 45383L + "'", long1 == 45383L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1712041199999L + "'", long2 == 1712041199999L);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1-April-2024" + "'", str4, "1-April-2024");
        org.junit.Assert.assertNotNull(dateFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1712041199999L + "'", long7 == 1712041199999L);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        long long8 = day2.getFirstMillisecond();
        int int9 = day2.getMonth();
        int int10 = day2.getDayOfMonth();
        long long11 = day2.getLastMillisecond();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711954800000L + "'", long8 == 1711954800000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1712041199999L + "'", long11 == 1712041199999L);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.jfree.data.time.Year year2 = new org.jfree.data.time.Year((int) (short) -1);
        org.jfree.data.time.Month month3 = new org.jfree.data.time.Month(11, year2);
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            year2.peg(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        java.beans.PropertyChangeListener propertyChangeListener20 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        java.util.Date date28 = day24.getStart();
        long long29 = day24.getFirstMillisecond();
        java.util.Date date30 = day24.getStart();
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day(date30);
        org.jfree.data.time.Month month32 = new org.jfree.data.time.Month(date30);
        org.jfree.data.time.FixedMillisecond fixedMillisecond33 = new org.jfree.data.time.FixedMillisecond(date30);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) fixedMillisecond33, (java.lang.Number) 11);
        java.util.Calendar calendar36 = null;
        long long37 = fixedMillisecond33.getMiddleMillisecond(calendar36);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1711954800000L + "'", long5 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711997999999L + "'", long18 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711954800000L + "'", long29 == 1711954800000L);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711954800000L + "'", long37 == 1711954800000L);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        long long30 = day24.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) (byte) 10);
        double double33 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        long long35 = day34.getSerialIndex();
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) day34);
        timeSeries1.setMaximumItemCount(100);
        org.jfree.data.time.TimeSeries timeSeries40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day41 = new org.jfree.data.time.Day();
        timeSeries40.add((org.jfree.data.time.RegularTimePeriod) day41, (double) (short) 0, false);
        timeSeries40.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = timeSeries40.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent49 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean50 = timeSeries40.equals((java.lang.Object) seriesChangeEvent49);
        org.jfree.data.time.Day day51 = new org.jfree.data.time.Day();
        int int53 = day51.compareTo((java.lang.Object) (short) 100);
        java.lang.String str54 = day51.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries40.getDataItem((org.jfree.data.time.RegularTimePeriod) day51);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = timeSeries40.getNextTimePeriod();
        org.jfree.data.time.Month month57 = new org.jfree.data.time.Month();
        long long58 = month57.getLastMillisecond();
        org.jfree.data.time.Month month59 = new org.jfree.data.time.Month();
        int int60 = month57.compareTo((java.lang.Object) month59);
        org.jfree.data.time.TimeSeries timeSeries62 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list63 = timeSeries62.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener64 = null;
        timeSeries62.addChangeListener(seriesChangeListener64);
        org.jfree.data.time.TimeSeries timeSeries67 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener68 = null;
        timeSeries67.addChangeListener(seriesChangeListener68);
        org.jfree.data.time.Month month70 = new org.jfree.data.time.Month();
        long long71 = month70.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries73 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener74 = null;
        timeSeries73.removeChangeListener(seriesChangeListener74);
        org.jfree.data.time.TimeSeries timeSeries77 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day78 = new org.jfree.data.time.Day();
        timeSeries77.add((org.jfree.data.time.RegularTimePeriod) day78, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem83 = timeSeries73.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day78, (java.lang.Number) 10L);
        long long84 = day78.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries85 = timeSeries67.createCopy((org.jfree.data.time.RegularTimePeriod) month70, (org.jfree.data.time.RegularTimePeriod) day78);
        timeSeries67.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener88 = null;
        timeSeries67.removeChangeListener(seriesChangeListener88);
        org.jfree.data.time.TimeSeries timeSeries90 = timeSeries62.addAndOrUpdate(timeSeries67);
        int int91 = month57.compareTo((java.lang.Object) timeSeries67);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod92 = month57.next();
        org.jfree.data.time.FixedMillisecond fixedMillisecond94 = new org.jfree.data.time.FixedMillisecond((long) ' ');
        org.jfree.data.time.TimeSeries timeSeries95 = timeSeries40.createCopy(regularTimePeriod92, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond94);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem97 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod92, 0.0d);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod98 = regularTimePeriod92.next();
        int int99 = timeSeries1.getIndex(regularTimePeriod92);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711997999999L + "'", long30 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 45383L + "'", long35 == 45383L);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1-April-2024" + "'", str54, "1-April-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1714546799999L + "'", long58 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(list63);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1711954800000L + "'", long71 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1711997999999L + "'", long84 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries85);
        org.junit.Assert.assertNotNull(timeSeries90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod92);
        org.junit.Assert.assertNotNull(timeSeries95);
        org.junit.Assert.assertNotNull(regularTimePeriod98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond((long) 'a');
        java.util.Calendar calendar2 = null;
        long long3 = fixedMillisecond1.getLastMillisecond(calendar2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 97L + "'", long3 == 97L);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries1.removeChangeListener(seriesChangeListener6);
        java.lang.Class class8 = timeSeries1.getTimePeriodClass();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.removeChangeListener(seriesChangeListener9);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        long long12 = day11.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = day11.previous();
        long long14 = day11.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day11);
        java.lang.Number number16 = timeSeriesDataItem15.getValue();
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 45383L + "'", long12 == 45383L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 45383L + "'", long14 == 45383L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertEquals("'" + number16 + "' != '" + 0.0d + "'", number16, 0.0d);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        timeSeries4.add((org.jfree.data.time.RegularTimePeriod) day5, (double) (short) 0, false);
        java.util.Date date9 = day5.getStart();
        org.jfree.data.time.SerialDate serialDate10 = day5.getSerialDate();
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        int int13 = day11.compareTo((java.lang.Object) (short) 100);
        java.util.Date date14 = day11.getEnd();
        long long15 = day11.getLastMillisecond();
        org.jfree.data.time.TimeSeries timeSeries16 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) day5, (org.jfree.data.time.RegularTimePeriod) day11);
        java.lang.String str17 = day5.toString();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Apr 01 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1712041199999L + "'", long15 == 1712041199999L);
        org.junit.Assert.assertNotNull(timeSeries16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1-April-2024" + "'", str17, "1-April-2024");
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getLastMillisecond();
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month();
        int int12 = month9.compareTo((java.lang.Object) month11);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list15 = timeSeries14.data;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries14.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 10L);
        long long36 = day30.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = timeSeries19.createCopy((org.jfree.data.time.RegularTimePeriod) month22, (org.jfree.data.time.RegularTimePeriod) day30);
        timeSeries19.setKey((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries19.removeChangeListener(seriesChangeListener40);
        org.jfree.data.time.TimeSeries timeSeries42 = timeSeries14.addAndOrUpdate(timeSeries19);
        int int43 = month9.compareTo((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day50);
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day59 = new org.jfree.data.time.Day();
        timeSeries58.add((org.jfree.data.time.RegularTimePeriod) day59, (double) (short) 0, false);
        java.util.Date date63 = day59.getStart();
        org.jfree.data.time.SerialDate serialDate64 = day59.getSerialDate();
        org.jfree.data.time.SerialDate serialDate65 = day59.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem66 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day59);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem68 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day59, (double) 1711995721514L);
        long long69 = day59.getFirstMillisecond();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1714546799999L + "'", long10 == 1714546799999L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(list15);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711954800000L + "'", long23 == 1711954800000L);
        org.junit.Assert.assertNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711997999999L + "'", long36 == 1711997999999L);
        org.junit.Assert.assertNotNull(timeSeries37);
        org.junit.Assert.assertNotNull(timeSeries42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertNotNull(timeSeries56);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate64);
        org.junit.Assert.assertNotNull(serialDate65);
        org.junit.Assert.assertNotNull(timeSeriesDataItem66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1711954800000L + "'", long69 == 1711954800000L);
    }
}
