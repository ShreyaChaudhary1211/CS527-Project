/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:46:04 GMT 2024
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteTimeSeries_ESTest extends EvosuiteTimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.setDomainDescription("");
      assertEquals("", TimeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, 3035.0);
      TimeSeries0.addAndOrUpdate(TimeSeries0);
      assertEquals(3035.0, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries TimeSeries1 = (TimeSeries)TimeSeries0.clone();
      boolean boolean0 = TimeSeries0.equals(TimeSeries1);
      assertEquals(9223372036854775807L, TimeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries1.getMaxY(), 0.01);
      assertEquals("Time", TimeSeries1.getDomainDescription());
      assertEquals(Double.NaN, TimeSeries1.getMinY(), 0.01);
      assertNotSame(TimeSeries1, TimeSeries0);
      assertEquals(Integer.MAX_VALUE, TimeSeries1.getMaximumItemCount());
      assertTrue(boolean0);
      assertEquals("Value", TimeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      TimeSeries TimeSeries0 = new TimeSeries(integer0);
      TimeSeries0.getItems();
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Time", TimeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1520), (-1520), 2, 2, 2, 2);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries TimeSeries0 = new TimeSeries(month0);
      TimeSeries0.getTimePeriodClass();
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
      // Undeclared exception!
      try { 
        TimeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period [20,14/2/2014] but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 0, false);
      TimeSeries0.getValue((RegularTimePeriod) hour0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      double double0 = TimeSeries0.getMaxY();
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      TimeSeries TimeSeries0 = new TimeSeries(instant0);
      double double0 = TimeSeries0.getMinY();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals("Time", TimeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.delete(23, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      TimeSeries0.getDataItem((RegularTimePeriod) hour0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) (-2002), (double) (-2002));
      TimeSeries TimeSeries0 = new TimeSeries(xYDataItem0);
      // Undeclared exception!
      try { 
        TimeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      
      TimeSeries0.setMaximumItemCount(0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      assertEquals(0, TimeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.setMaximumItemCount((-2525));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      TimeSeries0.setMaximumItemCount(0);
      assertEquals(0, TimeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.setMaximumItemAge(0);
      Year year0 = new Year((-1184));
      TimeSeries0.add((RegularTimePeriod) year0, Double.NaN, false);
      assertEquals(1, TimeSeries0.getItemCount());
      
      TimeSeries0.removeAgedItems((long) 9999, false);
      assertEquals(0, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.setMaximumItemAge((-1078L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.getDataItem((RegularTimePeriod) hour0);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.getRawDataItem(hour0);
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      TimeSeries0.getRawDataItem(hour0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      TimeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 1);
      TimeSeries0.getTimePeriods();
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 0, true);
      TimeSeries0.getTimePeriodsUniqueToOtherSeries(TimeSeries0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries TimeSeries1 = new TimeSeries(hour0, "", "");
      TimeSeries1.add((RegularTimePeriod) hour0, (Number) 0, true);
      TimeSeries0.getTimePeriodsUniqueToOtherSeries(TimeSeries1);
      assertEquals(1, TimeSeries1.getItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.getValue((RegularTimePeriod) hour0);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      Class<Week> class0 = Week.class;
      TimeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        TimeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-346.75));
      TimeSeries0.add(regularTimePeriod0, (Number) 23, true);
      Hour hour1 = new Hour();
      RegularTimePeriod regularTimePeriod1 = hour1.previous();
      TimeSeries0.add(regularTimePeriod1, (Number) 0, true);
      TimeSeries0.addOrUpdate(regularTimePeriod1, (double) 1693);
      assertEquals(3, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, 1.7976931348623157E308);
      TimeSeries0.update((RegularTimePeriod) hour0, (Number) 23);
      assertEquals(23.0, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        TimeSeries0.update((RegularTimePeriod) week0, (Number) 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) null, true);
      TimeSeries0.update((RegularTimePeriod) hour0, (Number) null);
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Value", TimeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, Double.NaN);
      TimeSeries0.update((RegularTimePeriod) hour0, (Number) 23);
      assertEquals(23.0, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add(regularTimePeriod0, (Number) 0, true);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      TimeSeries0.update(0, (Number) 23);
      assertEquals(23.0, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      RegularTimePeriod regularTimePeriod1 = hour0.previous();
      TimeSeries0.add(regularTimePeriod0, (Number) 0, true);
      TimeSeries0.add(regularTimePeriod1, (Number) 23, true);
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, 1.7976931348623157E308);
      TimeSeries0.update(0, (Number) 23);
      assertEquals(1.7976931348623157E308, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries TimeSeries1 = new TimeSeries(hour0);
      TimeSeries1.add((RegularTimePeriod) hour0, (Number) 0, false);
      TimeSeries0.addAndOrUpdate(TimeSeries1);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        TimeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      Second second0 = new Second();
      TimeSeries0.add((RegularTimePeriod) second0, (Number) 59, true);
      // Undeclared exception!
      try { 
        TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) null, false);
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
      assertEquals(0.0, TimeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add(regularTimePeriod0, (Number) 0, true);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 23);
      assertEquals(2, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries("There is no existing value for the specified 'period'.", "There is no existing value for the specified 'period'.", "");
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) null, false);
      TimeSeriesDataItem TimeSeriesDataItem0 = TimeSeries0.getRawDataItem(0);
      TimeSeries0.addOrUpdate(TimeSeriesDataItem0);
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals("There is no existing value for the specified 'period'.", TimeSeries0.getDomainDescription());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals("", TimeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.setMaximumItemCount(0);
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 23);
      assertEquals(0, TimeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add(regularTimePeriod0, (Number) 0, true);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      TimeSeries0.setMaximumItemAge(0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add(regularTimePeriod0, (Number) 0, true);
      TimeSeries0.setMaximumItemAge(0);
      TimeSeries0.add((RegularTimePeriod) hour0, (double) 0, true);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      TimeSeries0.removeAgedItems((long) 53, false);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals("Time", TimeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      TimeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
      TimeSeries0.removeAgedItems((long) 1, true);
      TimeSeries0.removeAgedItems((long) 53, true);
      assertEquals(1.0, TimeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.setMaximumItemAge(0);
      Year year0 = new Year((-1218));
      TimeSeries0.add((RegularTimePeriod) year0, Double.NaN, true);
      TimeSeries0.removeAgedItems((long) 9999, true);
      assertEquals(0, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      TimeSeries0.clear();
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals("Time", TimeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
      TimeSeries0.clear();
      assertEquals(0, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      TimeSeries0.delete((RegularTimePeriod) week0);
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Time", TimeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add(regularTimePeriod0, (Number) 0, true);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 2, true);
      TimeSeries0.delete(regularTimePeriod0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 0, false);
      TimeSeries0.delete((-1032), Integer.MAX_VALUE, true);
      assertEquals(0.0, TimeSeries0.getMinY(), 0.01);
      assertEquals(0.0, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.delete((-1032), Integer.MAX_VALUE, false);
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries TimeSeries1 = TimeSeries0.createCopy(23, 23);
      assertEquals(Integer.MAX_VALUE, TimeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, TimeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, TimeSeries1.getMaximumItemAge());
      assertEquals("Value", TimeSeries1.getRangeDescription());
      assertEquals("Time", TimeSeries1.getDomainDescription());
      assertNotSame(TimeSeries1, TimeSeries0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.createCopy((-2809), (-2809));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.createCopy(23, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      TimeSeries0.add((RegularTimePeriod) week0, (Number) 1, false);
      TimeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        TimeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        TimeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(regularTimePeriod0);
      // Undeclared exception!
      try { 
        TimeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) hour0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(regularTimePeriod0);
      TimeSeries0.add(regularTimePeriod0, (Number) 23, true);
      TimeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(23.0, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      Long long0 = new Long(0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) long0, false);
      Quarter quarter0 = new Quarter();
      TimeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) quarter0);
      assertEquals(0.0, TimeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      boolean boolean0 = TimeSeries0.equals(TimeSeries0);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertTrue(boolean0);
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      boolean boolean0 = TimeSeries0.equals(fixedMillisecond0);
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Week week0 = new Week();
      XYDataItem xYDataItem0 = new XYDataItem((double) 53, (double) 1);
      TimeSeries TimeSeries0 = new TimeSeries(xYDataItem0);
      TimeSeries TimeSeries1 = new TimeSeries(week0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod");
      boolean boolean0 = TimeSeries0.equals(TimeSeries1);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals("org.jfree.data.time.RegularTimePeriod", TimeSeries1.getDomainDescription());
      assertFalse(boolean0);
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals("org.jfree.data.time.RegularTimePeriod", TimeSeries1.getRangeDescription());
      assertEquals(Double.NaN, TimeSeries1.getMinY(), 0.01);
      assertEquals(9223372036854775807L, TimeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries TimeSeries1 = (TimeSeries)TimeSeries0.clone();
      assertTrue(TimeSeries1.equals((Object)TimeSeries0));
      
      TimeSeries1.setRangeDescription((String) null);
      boolean boolean0 = TimeSeries0.equals(TimeSeries1);
      assertFalse(TimeSeries1.equals((Object)TimeSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      TimeSeries TimeSeries1 = (TimeSeries)TimeSeries0.clone();
      TimeSeries1.add((RegularTimePeriod) week0, (Number) 53);
      boolean boolean0 = TimeSeries0.equals(TimeSeries1);
      assertEquals(53.0, TimeSeries1.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      TimeSeries TimeSeries1 = (TimeSeries)TimeSeries0.clone();
      TimeSeries1.setMaximumItemAge(1);
      boolean boolean0 = TimeSeries0.equals(TimeSeries1);
      assertEquals(1L, TimeSeries1.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries TimeSeries1 = (TimeSeries)TimeSeries0.clone();
      TimeSeries1.setMaximumItemCount(23);
      boolean boolean0 = TimeSeries0.equals(TimeSeries1);
      assertEquals(23, TimeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 0, true);
      TimeSeries TimeSeries1 = (TimeSeries)TimeSeries0.clone();
      ArrayList<Week> arrayList0 = new ArrayList<Week>();
      TimeSeries1.data = (List) arrayList0;
      boolean boolean0 = TimeSeries0.equals(TimeSeries1);
      assertEquals(1, TimeSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      TimeSeries TimeSeries1 = (TimeSeries)TimeSeries0.clone();
      TimeSeries1.addOrUpdate((RegularTimePeriod) hour0, Double.NaN);
      boolean boolean0 = TimeSeries0.equals(TimeSeries1);
      assertEquals(23.0, TimeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries TimeSeries0 = new TimeSeries(second0, (String) null, (String) null);
      TimeSeries0.hashCode();
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      TimeSeries0.hashCode();
      assertEquals(23.0, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add(regularTimePeriod0, (Number) 0, true);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      TimeSeries0.hashCode();
      assertEquals(0.0, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add(regularTimePeriod0, (Number) 0, true);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      TimeSeries0.add(regularTimePeriod1, (Number) 0, false);
      TimeSeries0.hashCode();
      assertEquals(3, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      TimeSeries0.add((RegularTimePeriod) week0, (Number) null, true);
      TimeSeries0.delete((RegularTimePeriod) week0);
      assertEquals(0, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, Double.NaN, false);
      TimeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(0, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 0, true);
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries0.add(regularTimePeriod0, (Number) 2, true);
      TimeSeries0.delete(regularTimePeriod0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add(regularTimePeriod0, (Number) 0, true);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23, true);
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      TimeSeries0.add(regularTimePeriod1, (Number) 2, true);
      TimeSeries0.delete(regularTimePeriod1);
      assertEquals(2, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(regularTimePeriod0);
      TimeSeries0.add(regularTimePeriod0, (Number) 23, false);
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, Double.NaN);
      assertEquals(2, TimeSeries0.getItemCount());
  }
}
