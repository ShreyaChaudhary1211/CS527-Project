package org.jfree.data.time;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1001");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        int int3 = month0.getYearValue();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException5 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException7 = new org.jfree.data.time.TimePeriodFormatException("");
        timePeriodFormatException5.addSuppressed((java.lang.Throwable) timePeriodFormatException7);
        int int9 = month0.compareTo((java.lang.Object) timePeriodFormatException5);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) int9, "org.jfree.data.event.SeriesChangeEvent[source=true]", "March 2024");
        java.util.Collection collection13 = timeSeries12.getTimePeriods();
        org.jfree.data.time.Month month14 = new org.jfree.data.time.Month();
        long long15 = month14.getFirstMillisecond();
        org.jfree.data.time.Year year16 = month14.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = year16.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = year16.previous();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = year16.previous();
        java.lang.Object obj21 = null;
        int int22 = year16.compareTo(obj21);
        java.util.Date date23 = year16.getEnd();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries12.getDataItem((org.jfree.data.time.RegularTimePeriod) year16);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day27, (double) (short) 0, false);
        java.util.Date date31 = day27.getStart();
        org.jfree.data.time.SerialDate serialDate32 = day27.getSerialDate();
        long long33 = day27.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = day27.previous();
        long long35 = regularTimePeriod34.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod34, (double) 3);
        int int38 = year16.compareTo((java.lang.Object) timeSeriesDataItem37);
        org.jfree.data.time.Year year39 = new org.jfree.data.time.Year();
        long long40 = year39.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = year39.next();
        boolean boolean42 = year16.equals((java.lang.Object) regularTimePeriod41);
        long long43 = year16.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2024 + "'", int3 == 2024);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(collection13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1709280000000L + "'", long15 == 1709280000000L);
        org.junit.Assert.assertNotNull(year16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 31 23:59:59 PST 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem24);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711911599999L + "'", long33 == 1711911599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1711868399999L + "'", long35 == 1711868399999L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1735718399999L + "'", long40 == 1735718399999L);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1704096000000L + "'", long43 == 1704096000000L);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1002");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        java.util.Calendar calendar11 = null;
        long long12 = fixedMillisecond7.getFirstMillisecond(calendar11);
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getFirstMillisecond(calendar13);
        java.util.Calendar calendar15 = null;
        long long16 = fixedMillisecond7.getMiddleMillisecond(calendar15);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem18 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond7, (java.lang.Number) Double.NaN);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem20 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond7, (double) 118L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = fixedMillisecond7.next();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1003");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3);
        long long8 = day3.getSerialIndex();
        long long9 = day3.getLastMillisecond();
        java.lang.String str10 = day3.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 45382L + "'", long8 == 45382L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711954799999L + "'", long9 == 1711954799999L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "31-March-2024" + "'", str10, "31-March-2024");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1004");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        double double2 = timeSeries1.getMinY();
        java.lang.Object obj3 = timeSeries1.clone();
        java.beans.PropertyChangeListener propertyChangeListener4 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener4);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1005");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        timeSeries21.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = timeSeries21.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean31 = timeSeries21.equals((java.lang.Object) seriesChangeEvent30);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        int int34 = day32.compareTo((java.lang.Object) (short) 100);
        java.lang.String str35 = day32.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = timeSeries21.getDataItem((org.jfree.data.time.RegularTimePeriod) day32);
        timeSeriesDataItem36.setSelected(false);
        timeSeriesDataItem36.setValue((java.lang.Number) (byte) 100);
        boolean boolean41 = timeSeriesDataItem36.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = timeSeries1.addOrUpdate(timeSeriesDataItem36);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener43 = null;
        timeSeries1.removeChangeListener(seriesChangeListener43);
        org.jfree.data.time.TimeSeries timeSeries46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        timeSeries46.add((org.jfree.data.time.RegularTimePeriod) day47, (double) (short) 0, false);
        timeSeries46.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = timeSeries46.getNextTimePeriod();
        timeSeries46.setMaximumItemCount((int) ' ');
        timeSeries46.fireSeriesChanged();
        timeSeries46.setMaximumItemAge((long) 2);
        org.jfree.data.time.TimeSeries timeSeries60 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double61 = timeSeries60.getMaxY();
        org.jfree.data.time.Day day62 = new org.jfree.data.time.Day();
        java.lang.Number number63 = null;
        timeSeries60.add((org.jfree.data.time.RegularTimePeriod) day62, number63, false);
        double double66 = timeSeries60.getMaxY();
        int int67 = timeSeries60.getItemCount();
        double double68 = timeSeries60.getMinY();
        double double69 = timeSeries60.getMaxY();
        int int70 = timeSeries60.getItemCount();
        java.util.Collection collection71 = timeSeries60.getTimePeriods();
        int int72 = timeSeries60.getItemCount();
        java.util.Collection collection73 = timeSeries46.getTimePeriodsUniqueToOtherSeries(timeSeries60);
        org.jfree.data.time.TimeSeries timeSeries75 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day76 = new org.jfree.data.time.Day();
        timeSeries75.add((org.jfree.data.time.RegularTimePeriod) day76, (double) (short) 0, false);
        java.util.Date date80 = day76.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond81 = new org.jfree.data.time.FixedMillisecond(date80);
        java.util.Date date82 = fixedMillisecond81.getTime();
        java.util.Calendar calendar83 = null;
        long long84 = fixedMillisecond81.getLastMillisecond(calendar83);
        long long85 = fixedMillisecond81.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem87 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond81, (double) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod88 = fixedMillisecond81.previous();
        java.util.Calendar calendar89 = null;
        long long90 = fixedMillisecond81.getLastMillisecond(calendar89);
        java.util.Calendar calendar91 = null;
        fixedMillisecond81.peg(calendar91);
        java.util.Calendar calendar93 = null;
        long long94 = fixedMillisecond81.getFirstMillisecond(calendar93);
        timeSeries46.update((org.jfree.data.time.RegularTimePeriod) fixedMillisecond81, (java.lang.Number) 1688327999999L);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add((org.jfree.data.time.RegularTimePeriod) fixedMillisecond81, (double) 9223372036854775807L, false);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "31-March-2024" + "'", str35, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem42);
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(collection71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(collection73);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1711868400000L + "'", long84 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1711868400000L + "'", long85 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1711868400000L + "'", long90 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1711868400000L + "'", long94 == 1711868400000L);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1006");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double14 = timeSeries13.getMaxY();
        java.lang.Comparable comparable15 = timeSeries13.getKey();
        org.jfree.data.time.TimeSeries timeSeries16 = timeSeries1.addAndOrUpdate(timeSeries13);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        timeSeries18.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = timeSeries18.getNextTimePeriod();
        timeSeries18.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year29 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries18.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year29);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = timeSeries1.addOrUpdate(timeSeriesDataItem30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day34, (double) (short) 0, false);
        timeSeries33.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = timeSeries33.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener41 = null;
        timeSeries33.addChangeListener(seriesChangeListener41);
        timeSeries33.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        timeSeries46.add((org.jfree.data.time.RegularTimePeriod) day47, (double) (short) 0, false);
        java.util.Date date51 = day47.getStart();
        java.lang.Number number52 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = timeSeries33.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day47, number52);
        boolean boolean54 = timeSeries33.isEmpty();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries1.addAndOrUpdate(timeSeries33);
        timeSeries33.fireSeriesChanged();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + comparable15 + "' != '" + 100L + "'", comparable15, 100L);
        org.junit.Assert.assertNotNull(timeSeries16);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
        org.junit.Assert.assertNotNull(timeSeriesDataItem31);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(timeSeries55);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1007");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        org.jfree.data.time.FixedMillisecond fixedMillisecond9 = new org.jfree.data.time.FixedMillisecond(date8);
        boolean boolean11 = fixedMillisecond9.equals((java.lang.Object) 100L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = fixedMillisecond9.previous();
        java.util.Calendar calendar13 = null;
        fixedMillisecond9.peg(calendar13);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1008");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        int int18 = timeSeries1.getItemCount();
        java.lang.Class class19 = timeSeries1.timePeriodClass;
        timeSeries1.setNotify(false);
        timeSeries1.clear();
        org.jfree.data.time.Month month25 = new org.jfree.data.time.Month(10, 9);
        org.jfree.data.time.Year year26 = month25.getYear();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem27 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month25);
        java.util.Calendar calendar28 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long29 = month25.getFirstMillisecond(calendar28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(year26);
        org.junit.Assert.assertNull(timeSeriesDataItem27);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1009");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setDomainDescription("");
        int int22 = timeSeries1.getItemCount();
        int int23 = timeSeries1.getItemCount();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent24 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries1);
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day();
        int int27 = day25.compareTo((java.lang.Object) (short) 100);
        long long28 = day25.getMiddleMillisecond();
        int int29 = day25.getYear();
        boolean boolean31 = day25.equals((java.lang.Object) 5);
        int int32 = day25.getDayOfMonth();
        long long33 = day25.getSerialIndex();
        java.util.Date date34 = day25.getEnd();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day25, 10.0d, true);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number41 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month40, number41);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = month40.next();
        java.util.Date date44 = month40.getStart();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent45 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) month40);
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) month40, (java.lang.Number) 0.0d);
        java.lang.Class class48 = timeSeries1.getTimePeriodClass();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1711911599999L + "'", long28 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2024 + "'", int29 == 2024);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 31 + "'", int32 == 31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 45382L + "'", long33 == 45382L);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(class48);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1010");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        long long8 = day2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = day2.previous();
        long long10 = regularTimePeriod9.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem12 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod9, (double) 3);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double15 = timeSeries14.getMaxY();
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        java.lang.Number number17 = null;
        timeSeries14.add((org.jfree.data.time.RegularTimePeriod) day16, number17, false);
        double double20 = timeSeries14.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries14.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day23, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) timeSeriesDataItem28);
        boolean boolean30 = timeSeriesDataItem12.equals((java.lang.Object) timeSeriesDataItem28);
        boolean boolean31 = timeSeriesDataItem28.isSelected();
        boolean boolean32 = timeSeriesDataItem28.isSelected();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = timeSeriesDataItem28.getPeriod();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711911599999L + "'", long8 == 1711911599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868399999L + "'", long10 == 1711868399999L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1011");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double14 = timeSeries13.getMaxY();
        java.lang.Comparable comparable15 = timeSeries13.getKey();
        org.jfree.data.time.TimeSeries timeSeries16 = timeSeries1.addAndOrUpdate(timeSeries13);
        double double17 = timeSeries1.getMinY();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener18 = null;
        timeSeries1.removeChangeListener(seriesChangeListener18);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + comparable15 + "' != '" + 100L + "'", comparable15, 100L);
        org.junit.Assert.assertNotNull(timeSeries16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1012");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        long long6 = timeSeries3.getMaximumItemAge();
        java.lang.String str7 = timeSeries3.getDescription();
        int int8 = timeSeries3.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, false);
        java.util.Date date15 = day11.getStart();
        org.jfree.data.time.SerialDate serialDate16 = day11.getSerialDate();
        java.lang.String str17 = day11.toString();
        java.lang.Number number18 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day11, number18);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, true);
        org.jfree.data.time.TimeSeries timeSeries24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener25 = null;
        timeSeries24.addChangeListener(seriesChangeListener25);
        long long27 = timeSeries24.getMaximumItemAge();
        java.lang.String str28 = timeSeries24.getDescription();
        int int29 = timeSeries24.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        timeSeries31.add((org.jfree.data.time.RegularTimePeriod) day32, (double) (short) 0, false);
        java.util.Date date36 = day32.getStart();
        org.jfree.data.time.SerialDate serialDate37 = day32.getSerialDate();
        java.lang.String str38 = day32.toString();
        java.lang.Number number39 = null;
        timeSeries24.add((org.jfree.data.time.RegularTimePeriod) day32, number39);
        boolean boolean41 = timeSeries24.isEmpty();
        boolean boolean42 = day11.equals((java.lang.Object) timeSeries24);
        double double43 = timeSeries24.getMinY();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9223372036854775807L + "'", long6 == 9223372036854775807L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "31-March-2024" + "'", str17, "31-March-2024");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 9223372036854775807L + "'", long27 == 9223372036854775807L);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "31-March-2024" + "'", str38, "31-March-2024");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1013");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        long long8 = day2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = day2.previous();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.addChangeListener(seriesChangeListener12);
        long long14 = timeSeries11.getMaximumItemAge();
        java.lang.String str15 = timeSeries11.getDescription();
        double double16 = timeSeries11.getMaxY();
        java.lang.Object obj17 = timeSeries11.clone();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day20 = new org.jfree.data.time.Day();
        timeSeries19.add((org.jfree.data.time.RegularTimePeriod) day20, (double) (short) 0, false);
        timeSeries19.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = timeSeries19.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries19.addChangeListener(seriesChangeListener27);
        timeSeries19.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        java.util.Date date37 = day33.getStart();
        java.lang.Number number38 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day33, number38);
        java.util.Date date40 = day33.getEnd();
        boolean boolean41 = timeSeries11.equals((java.lang.Object) day33);
        boolean boolean42 = day2.equals((java.lang.Object) timeSeries11);
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double45 = timeSeries44.getMaxY();
        java.util.List list46 = timeSeries44.data;
        boolean boolean47 = timeSeries44.isEmpty();
        java.util.Collection collection48 = timeSeries11.getTimePeriodsUniqueToOtherSeries(timeSeries44);
        org.jfree.data.time.Month month49 = new org.jfree.data.time.Month();
        long long50 = month49.getFirstMillisecond();
        org.jfree.data.time.Year year51 = month49.getYear();
        java.lang.String str52 = month49.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = month49.previous();
        long long54 = month49.getFirstMillisecond();
        java.lang.String str55 = month49.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = month49.previous();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem57 = timeSeries44.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month49);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711911599999L + "'", long8 == 1711911599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 9223372036854775807L + "'", long14 == 9223372036854775807L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(collection48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1709280000000L + "'", long50 == 1709280000000L);
        org.junit.Assert.assertNotNull(year51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "March 2024" + "'", str52, "March 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1709280000000L + "'", long54 == 1709280000000L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "March 2024" + "'", str55, "March 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod56);
        org.junit.Assert.assertNull(timeSeriesDataItem57);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1014");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 9999);
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        long long3 = month2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = month2.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = year4.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = year4.previous();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year4);
        boolean boolean8 = timeSeries1.equals((java.lang.Object) year4);
        java.util.List list9 = timeSeries1.getItems();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        java.util.Date date16 = day12.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond17 = new org.jfree.data.time.FixedMillisecond(date16);
        long long18 = fixedMillisecond17.getFirstMillisecond();
        java.util.Date date19 = fixedMillisecond17.getTime();
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month(date19);
        int int21 = month20.getMonth();
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        java.util.Date date28 = day24.getStart();
        org.jfree.data.time.SerialDate serialDate29 = day24.getSerialDate();
        long long30 = day24.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = day24.previous();
        long long32 = regularTimePeriod31.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem34 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod31, (double) 3);
        boolean boolean35 = month20.equals((java.lang.Object) timeSeriesDataItem34);
        timeSeries1.add(timeSeriesDataItem34, false);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1709280000000L + "'", long3 == 1709280000000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(list9);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711868400000L + "'", long18 == 1711868400000L);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711911599999L + "'", long30 == 1711911599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711868399999L + "'", long32 == 1711868399999L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1015");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.SerialDate serialDate14 = day9.getSerialDate();
        java.lang.String str15 = day9.toString();
        java.lang.Number number16 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day9, number16);
        org.jfree.data.time.SerialDate serialDate18 = day9.getSerialDate();
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day(serialDate18);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNotNull(serialDate18);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1016");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMinY();
        java.util.Collection collection12 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries6);
        timeSeries6.setRangeDescription("");
        int int15 = timeSeries6.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        java.util.Date date23 = day19.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond24 = new org.jfree.data.time.FixedMillisecond(date23);
        long long25 = fixedMillisecond24.getFirstMillisecond();
        java.util.Date date26 = fixedMillisecond24.getTime();
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond(date26);
        org.jfree.data.time.Year year28 = new org.jfree.data.time.Year(date26);
        org.jfree.data.time.Month month29 = new org.jfree.data.time.Month((int) (byte) 10, year28);
        long long30 = year28.getFirstMillisecond();
        timeSeries6.add((org.jfree.data.time.RegularTimePeriod) year28, (double) (-62167363200000L), false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(collection12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711868400000L + "'", long25 == 1711868400000L);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1704096000000L + "'", long30 == 1704096000000L);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1017");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        long long3 = day0.getMiddleMillisecond();
        int int4 = day0.getYear();
        boolean boolean6 = day0.equals((java.lang.Object) 5);
        int int7 = day0.getDayOfMonth();
        long long8 = day0.getSerialIndex();
        java.util.Date date9 = day0.getEnd();
        org.jfree.data.time.SerialDate serialDate10 = day0.getSerialDate();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = day0.next();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711911599999L + "'", long3 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 45382L + "'", long8 == 45382L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1018");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.util.List list3 = timeSeries1.data;
        timeSeries1.removeAgedItems((long) 12, false);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        int int9 = day7.compareTo((java.lang.Object) (short) 100);
        long long10 = day7.getMiddleMillisecond();
        int int11 = day7.getYear();
        boolean boolean13 = day7.equals((java.lang.Object) 5);
        int int14 = day7.getDayOfMonth();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day7, (double) 3);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener17 = null;
        timeSeries1.addChangeListener(seriesChangeListener17);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries1.removeChangeListener(seriesChangeListener19);
        org.jfree.data.time.Year year21 = new org.jfree.data.time.Year();
        java.lang.String str22 = year21.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) year21, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711911599999L + "'", long10 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2024 + "'", int11 == 2024);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
        org.junit.Assert.assertNull(timeSeriesDataItem16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2024" + "'", str22, "2024");
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1019");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        boolean boolean5 = timeSeries1.equals((java.lang.Object) 100);
        java.lang.Class class6 = timeSeries1.timePeriodClass;
        boolean boolean7 = timeSeries1.getNotify();
        timeSeries1.removeAgedItems(false);
        timeSeries1.removeAgedItems((long) 'a', false);
        java.lang.Class class13 = timeSeries1.timePeriodClass;
        long long14 = timeSeries1.getMaximumItemAge();
        timeSeries1.fireSeriesChanged();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(class6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(class13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 9223372036854775807L + "'", long14 == 9223372036854775807L);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1020");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setDomainDescription("");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeries timeSeries24 = timeSeries1.createCopy((int) (byte) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1021");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        int int8 = timeSeries1.getItemCount();
        double double9 = timeSeries1.getMinY();
        double double10 = timeSeries1.getMaxY();
        int int11 = timeSeries1.getMaximumItemCount();
        boolean boolean12 = timeSeries1.getNotify();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries1.addChangeListener(seriesChangeListener13);
        java.lang.Comparable comparable15 = timeSeries1.getKey();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + comparable15 + "' != '" + 100L + "'", comparable15, 100L);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1022");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        timeSeries9.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = timeSeries9.getNextTimePeriod();
        timeSeries9.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year20 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries9.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year20);
        java.util.Collection collection22 = timeSeries7.getTimePeriodsUniqueToOtherSeries(timeSeries9);
        java.lang.String str23 = timeSeries9.getRangeDescription();
        timeSeries9.removeAgedItems(false);
        timeSeries9.clear();
        java.lang.String str27 = timeSeries9.getDescription();
        java.lang.Class class28 = timeSeries9.getTimePeriodClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(timeSeriesDataItem21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value" + "'", str23, "Value");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(class28);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1023");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.SerialDate serialDate14 = day9.getSerialDate();
        java.lang.String str15 = day9.toString();
        java.lang.Number number16 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day9, number16);
        boolean boolean18 = timeSeries1.isEmpty();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries1.getTimePeriod(0);
        java.lang.Object obj21 = timeSeries1.clone();
        int int22 = timeSeries1.getMaximumItemCount();
        timeSeries1.removeAgedItems(false);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        timeSeries30.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        java.util.Date date43 = day39.getStart();
        org.jfree.data.time.SerialDate serialDate44 = day39.getSerialDate();
        java.lang.Number number45 = null;
        timeSeries30.update((org.jfree.data.time.RegularTimePeriod) day39, number45);
        int int47 = day39.getDayOfMonth();
        java.lang.Number number48 = timeSeries26.getValue((org.jfree.data.time.RegularTimePeriod) day39);
        java.lang.String str49 = day39.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem51 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day39, (java.lang.Number) (-61820208000001L));
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day39, 0.0d);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are attempting to add an observation for the time period 31-March-2024 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 31 + "'", int47 == 31);
        org.junit.Assert.assertNull(number48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "31-March-2024" + "'", str49, "31-March-2024");
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1024");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        long long3 = month2.getFirstMillisecond();
        long long4 = month2.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem6 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, 0.0d);
        timeSeries1.add(timeSeriesDataItem6, false);
        timeSeries1.clear();
        timeSeries1.fireSeriesChanged();
        org.jfree.data.time.Month month13 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number14 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month13, number14);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = month13.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = month13.next();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.update((org.jfree.data.time.RegularTimePeriod) month13, (java.lang.Number) 10.0f);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: There is no existing value for the specified 'period'.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1709280000000L + "'", long3 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24291L + "'", long4 == 24291L);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1025");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        timeSeries1.fireSeriesChanged();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent8 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1026");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = day0.next();
        java.util.Date date4 = regularTimePeriod3.getStart();
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day(date4);
        long long6 = day5.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = day5.next();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1712041199999L + "'", long6 == 1712041199999L);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1027");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        java.util.Calendar calendar11 = null;
        long long12 = fixedMillisecond7.getMiddleMillisecond(calendar11);
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getLastMillisecond(calendar13);
        java.util.Calendar calendar15 = null;
        long long16 = fixedMillisecond7.getLastMillisecond(calendar15);
        org.jfree.data.time.Month month17 = new org.jfree.data.time.Month();
        long long18 = month17.getFirstMillisecond();
        org.jfree.data.time.Year year19 = month17.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = year19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = year19.previous();
        int int22 = fixedMillisecond7.compareTo((java.lang.Object) year19);
        java.util.Calendar calendar23 = null;
        fixedMillisecond7.peg(calendar23);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1709280000000L + "'", long18 == 1709280000000L);
        org.junit.Assert.assertNotNull(year19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1028");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        java.util.Date date9 = fixedMillisecond7.getTime();
        long long10 = fixedMillisecond7.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = fixedMillisecond7.next();
        org.jfree.data.time.Month month12 = new org.jfree.data.time.Month();
        long long13 = month12.getFirstMillisecond();
        org.jfree.data.time.Year year14 = month12.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = year14.previous();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener18 = null;
        timeSeries17.addChangeListener(seriesChangeListener18);
        long long20 = timeSeries17.getMaximumItemAge();
        java.lang.String str21 = timeSeries17.getDescription();
        double double22 = timeSeries17.getMaxY();
        java.lang.Object obj23 = timeSeries17.clone();
        int int24 = year14.compareTo(obj23);
        boolean boolean25 = fixedMillisecond7.equals((java.lang.Object) int24);
        java.util.Calendar calendar26 = null;
        fixedMillisecond7.peg(calendar26);
        long long28 = fixedMillisecond7.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1709280000000L + "'", long13 == 1709280000000L);
        org.junit.Assert.assertNotNull(year14);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 9223372036854775807L + "'", long20 == 9223372036854775807L);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1711868400000L + "'", long28 == 1711868400000L);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1029");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        double double18 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double21 = timeSeries20.getMaxY();
        java.util.List list22 = timeSeries20.data;
        timeSeries20.removeAgedItems((long) 12, false);
        java.lang.Comparable comparable26 = timeSeries20.getKey();
        timeSeries20.removeAgedItems(true);
        java.lang.String str29 = timeSeries20.getDescription();
        java.beans.PropertyChangeListener propertyChangeListener30 = null;
        timeSeries20.removePropertyChangeListener(propertyChangeListener30);
        long long32 = timeSeries20.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        timeSeries34.add((org.jfree.data.time.RegularTimePeriod) day35, (double) (short) 0, false);
        java.util.Date date39 = day35.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond40 = new org.jfree.data.time.FixedMillisecond(date39);
        long long41 = fixedMillisecond40.getFirstMillisecond();
        java.util.Calendar calendar42 = null;
        fixedMillisecond40.peg(calendar42);
        long long44 = fixedMillisecond40.getMiddleMillisecond();
        long long45 = fixedMillisecond40.getMiddleMillisecond();
        java.util.Calendar calendar46 = null;
        fixedMillisecond40.peg(calendar46);
        org.jfree.data.time.Month month48 = new org.jfree.data.time.Month();
        long long49 = month48.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = month48.previous();
        boolean boolean52 = month48.equals((java.lang.Object) 10.0d);
        long long53 = month48.getSerialIndex();
        org.jfree.data.time.Year year54 = month48.getYear();
        org.jfree.data.time.TimeSeries timeSeries55 = timeSeries20.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond40, (org.jfree.data.time.RegularTimePeriod) month48);
        boolean boolean56 = timeSeries1.equals((java.lang.Object) timeSeries20);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeSeries20.add(regularTimePeriod57, (java.lang.Number) 1735718399999L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'period' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertEquals("'" + comparable26 + "' != '" + 100L + "'", comparable26, 100L);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 9223372036854775807L + "'", long32 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711868400000L + "'", long41 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1711868400000L + "'", long44 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711868400000L + "'", long45 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1709280000000L + "'", long49 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 24291L + "'", long53 == 24291L);
        org.junit.Assert.assertNotNull(year54);
        org.junit.Assert.assertNotNull(timeSeries55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1030");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) "31-March-2024");
        java.util.List list22 = timeSeries1.getItems();
        timeSeries1.setMaximumItemAge((long) (byte) 0);
        int int25 = timeSeries1.getItemCount();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries1.removeChangeListener(seriesChangeListener26);
        java.lang.Class class28 = timeSeries1.timePeriodClass;
        boolean boolean29 = timeSeries1.isEmpty();
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        timeSeries31.add((org.jfree.data.time.RegularTimePeriod) day32, (double) (short) 0, false);
        timeSeries31.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = timeSeries31.getNextTimePeriod();
        timeSeries31.setMaximumItemCount((int) ' ');
        timeSeries31.fireSeriesChanged();
        timeSeries31.setMaximumItemAge((long) 2);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double46 = timeSeries45.getMaxY();
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        java.lang.Number number48 = null;
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day47, number48, false);
        double double51 = timeSeries45.getMaxY();
        int int52 = timeSeries45.getItemCount();
        double double53 = timeSeries45.getMinY();
        double double54 = timeSeries45.getMaxY();
        int int55 = timeSeries45.getItemCount();
        java.util.Collection collection56 = timeSeries45.getTimePeriods();
        int int57 = timeSeries45.getItemCount();
        java.util.Collection collection58 = timeSeries31.getTimePeriodsUniqueToOtherSeries(timeSeries45);
        java.util.List list59 = timeSeries31.data;
        timeSeries1.data = list59;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(class28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(collection56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(collection58);
        org.junit.Assert.assertNotNull(list59);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1031");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day4 = new org.jfree.data.time.Day();
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day4, (double) (short) 0, false);
        timeSeries3.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        java.util.Date date16 = day12.getStart();
        org.jfree.data.time.SerialDate serialDate17 = day12.getSerialDate();
        java.lang.Number number18 = null;
        timeSeries3.update((org.jfree.data.time.RegularTimePeriod) day12, number18);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        java.util.Date date26 = day22.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond(date26);
        long long28 = fixedMillisecond27.getFirstMillisecond();
        java.util.Date date29 = fixedMillisecond27.getTime();
        int int30 = timeSeries3.getIndex((org.jfree.data.time.RegularTimePeriod) fixedMillisecond27);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        timeSeries32.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries32.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries32.addChangeListener(seriesChangeListener40);
        timeSeries32.setDomainDescription("hi!");
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        int int46 = day44.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = day44.next();
        timeSeries32.add(regularTimePeriod47, (java.lang.Number) 1);
        java.lang.Number number50 = null;
        timeSeries3.add(regularTimePeriod47, number50);
        org.jfree.data.time.Month month52 = new org.jfree.data.time.Month();
        long long53 = month52.getFirstMillisecond();
        long long54 = month52.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem56 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month52, 0.0d);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = month52.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem58 = timeSeries3.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month52);
        java.lang.String str59 = month52.toString();
        long long60 = month52.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = month52.previous();
        boolean boolean63 = month52.equals((java.lang.Object) 10);
        java.lang.Number number64 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) month52);
        org.jfree.data.time.TimeSeries timeSeries66 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day67 = new org.jfree.data.time.Day();
        timeSeries66.add((org.jfree.data.time.RegularTimePeriod) day67, (double) (short) 0, false);
        timeSeries66.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod73 = timeSeries66.getNextTimePeriod();
        org.jfree.data.time.Day day74 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem76 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day74, (java.lang.Number) (byte) 10);
        timeSeriesDataItem76.setValue((java.lang.Number) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem79 = timeSeries66.addOrUpdate(timeSeriesDataItem76);
        org.jfree.data.time.TimeSeries timeSeries81 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double82 = timeSeries81.getMaxY();
        org.jfree.data.time.Day day83 = new org.jfree.data.time.Day();
        java.lang.Number number84 = null;
        timeSeries81.add((org.jfree.data.time.RegularTimePeriod) day83, number84, false);
        double double87 = timeSeries81.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries89 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day90 = new org.jfree.data.time.Day();
        timeSeries89.add((org.jfree.data.time.RegularTimePeriod) day90, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem95 = timeSeries81.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day90, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod96 = day90.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem97 = timeSeries66.getRawDataItem((org.jfree.data.time.RegularTimePeriod) day90);
        boolean boolean98 = timeSeries66.getNotify();
        org.jfree.data.time.TimeSeries timeSeries99 = timeSeries1.addAndOrUpdate(timeSeries66);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate17);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1711868400000L + "'", long28 == 1711868400000L);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1709280000000L + "'", long53 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 24291L + "'", long54 == 24291L);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertNotNull(timeSeriesDataItem58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "March 2024" + "'", str59, "March 2024");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1711954799999L + "'", long60 == 1711954799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(number64);
        org.junit.Assert.assertNotNull(regularTimePeriod73);
        org.junit.Assert.assertNotNull(timeSeriesDataItem79);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(timeSeriesDataItem95);
        org.junit.Assert.assertNotNull(regularTimePeriod96);
        org.junit.Assert.assertNotNull(timeSeriesDataItem97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(timeSeries99);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1032");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        boolean boolean5 = timeSeries1.equals((java.lang.Object) 100);
        java.lang.Class class6 = timeSeries1.timePeriodClass;
        boolean boolean7 = timeSeries1.getNotify();
        timeSeries1.removeAgedItems(false);
        timeSeries1.removeAgedItems((long) 'a', false);
        org.jfree.data.time.Year year13 = new org.jfree.data.time.Year();
        long long14 = year13.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = year13.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = year13.next();
        java.lang.Number number17 = null;
        timeSeries1.add(regularTimePeriod16, number17);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(class6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1735718399999L + "'", long14 == 1735718399999L);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1033");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        timeSeries1.setDescription("hi!");
        java.lang.Class class9 = timeSeries1.timePeriodClass;
        java.lang.Object obj10 = timeSeries1.clone();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNull(class9);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1034");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        java.lang.Class class24 = null;
        timeSeries1.timePeriodClass = class24;
        java.lang.Object obj26 = timeSeries1.clone();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries1.getRawDataItem((int) (byte) 0);
        java.util.Collection collection29 = timeSeries1.getTimePeriods();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertNotNull(collection29);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1035");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        timeSeriesDataItem16.setSelected(false);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = timeSeriesDataItem16.getPeriod();
        java.lang.Number number20 = timeSeriesDataItem16.getValue();
        java.lang.Number number21 = timeSeriesDataItem16.getValue();
        timeSeriesDataItem16.setSelected(true);
        timeSeriesDataItem16.setSelected(true);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertEquals("'" + number20 + "' != '" + 0.0d + "'", number20, 0.0d);
        org.junit.Assert.assertEquals("'" + number21 + "' != '" + 0.0d + "'", number21, 0.0d);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1036");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 9999);
        timeSeries1.removeAgedItems(true);
        java.lang.Class class4 = timeSeries1.getTimePeriodClass();
        double double5 = timeSeries1.getMinY();
        timeSeries1.clear();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond14 = new org.jfree.data.time.FixedMillisecond(date13);
        long long15 = fixedMillisecond14.getFirstMillisecond();
        long long16 = fixedMillisecond14.getMiddleMillisecond();
        java.util.Date date17 = fixedMillisecond14.getTime();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = fixedMillisecond14.previous();
        long long19 = regularTimePeriod18.getLastMillisecond();
        timeSeries1.add(regularTimePeriod18, (java.lang.Number) 0, true);
        org.junit.Assert.assertNull(class4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1711868400000L + "'", long15 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1711868399999L + "'", long19 == 1711868399999L);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1037");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.addChangeListener(seriesChangeListener9);
        int int11 = timeSeries1.getMaximumItemCount();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries1.removeChangeListener(seriesChangeListener12);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1038");
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent1 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 1L);
        java.lang.String str2 = seriesChangeEvent1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.jfree.data.event.SeriesChangeEvent[source=1]" + "'", str2, "org.jfree.data.event.SeriesChangeEvent[source=1]");
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1039");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        java.util.Date date9 = fixedMillisecond7.getTime();
        long long10 = fixedMillisecond7.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = fixedMillisecond7.next();
        org.jfree.data.time.Month month12 = new org.jfree.data.time.Month();
        long long13 = month12.getFirstMillisecond();
        org.jfree.data.time.Year year14 = month12.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = year14.previous();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener18 = null;
        timeSeries17.addChangeListener(seriesChangeListener18);
        long long20 = timeSeries17.getMaximumItemAge();
        java.lang.String str21 = timeSeries17.getDescription();
        double double22 = timeSeries17.getMaxY();
        java.lang.Object obj23 = timeSeries17.clone();
        int int24 = year14.compareTo(obj23);
        boolean boolean25 = fixedMillisecond7.equals((java.lang.Object) int24);
        java.util.Calendar calendar26 = null;
        fixedMillisecond7.peg(calendar26);
        long long28 = fixedMillisecond7.getSerialIndex();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1709280000000L + "'", long13 == 1709280000000L);
        org.junit.Assert.assertNotNull(year14);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 9223372036854775807L + "'", long20 == 9223372036854775807L);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1711868400000L + "'", long28 == 1711868400000L);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1040");
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent1 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo2 = null;
        seriesChangeEvent1.setSummary(seriesChangeInfo2);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo4 = seriesChangeEvent1.getSummary();
        java.lang.Object obj5 = seriesChangeEvent1.getSource();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo6 = null;
        seriesChangeEvent1.setSummary(seriesChangeInfo6);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo8 = null;
        seriesChangeEvent1.setSummary(seriesChangeInfo8);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo10 = seriesChangeEvent1.getSummary();
        java.lang.String str11 = seriesChangeEvent1.toString();
        org.junit.Assert.assertNull(seriesChangeInfo4);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 10.0d + "'", obj5, 10.0d);
        org.junit.Assert.assertNull(seriesChangeInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.jfree.data.event.SeriesChangeEvent[source=10.0]" + "'", str11, "org.jfree.data.event.SeriesChangeEvent[source=10.0]");
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1041");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.lang.Comparable comparable3 = timeSeries1.getKey();
        java.beans.PropertyChangeListener propertyChangeListener4 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener4);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        timeSeries7.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = timeSeries7.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener15 = null;
        timeSeries7.addChangeListener(seriesChangeListener15);
        timeSeries7.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        java.util.Date date25 = day21.getStart();
        java.lang.Number number26 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem27 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day21, number26);
        timeSeries1.add(timeSeriesDataItem27);
        double double29 = timeSeries1.getMinY();
        double double30 = timeSeries1.getMinY();
        timeSeries1.removeAgedItems(false);
        org.jfree.data.time.Month month35 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number36 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month35, number36);
        java.util.Date date38 = month35.getEnd();
        int int39 = month35.getYearValue();
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        java.util.Date date46 = day42.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond47 = new org.jfree.data.time.FixedMillisecond(date46);
        java.util.Date date48 = fixedMillisecond47.getTime();
        java.util.Calendar calendar49 = null;
        long long50 = fixedMillisecond47.getLastMillisecond(calendar49);
        long long51 = fixedMillisecond47.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem53 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond47, (double) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = fixedMillisecond47.previous();
        java.util.Calendar calendar55 = null;
        long long56 = fixedMillisecond47.getLastMillisecond(calendar55);
        java.util.Calendar calendar57 = null;
        fixedMillisecond47.peg(calendar57);
        boolean boolean59 = month35.equals((java.lang.Object) calendar57);
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) month35, (java.lang.Number) 0);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add(regularTimePeriod62, (java.lang.Number) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'period' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + comparable3 + "' != '" + 100L + "'", comparable3, 100L);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Oct 31 23:59:59 PST 9");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711868400000L + "'", long50 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1711868400000L + "'", long51 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1711868400000L + "'", long56 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1042");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond13 = new org.jfree.data.time.FixedMillisecond(date12);
        java.util.Date date14 = fixedMillisecond13.getTime();
        java.util.Calendar calendar15 = null;
        long long16 = fixedMillisecond13.getLastMillisecond(calendar15);
        java.util.Calendar calendar17 = null;
        long long18 = fixedMillisecond13.getMiddleMillisecond(calendar17);
        java.util.Calendar calendar19 = null;
        long long20 = fixedMillisecond13.getLastMillisecond(calendar19);
        java.util.Calendar calendar21 = null;
        long long22 = fixedMillisecond13.getLastMillisecond(calendar21);
        org.jfree.data.time.Month month23 = new org.jfree.data.time.Month();
        long long24 = month23.getFirstMillisecond();
        org.jfree.data.time.Year year25 = month23.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = year25.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = year25.previous();
        int int28 = fixedMillisecond13.compareTo((java.lang.Object) year25);
        java.util.Date date29 = fixedMillisecond13.getTime();
        int int30 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) fixedMillisecond13);
        java.util.Calendar calendar31 = null;
        fixedMillisecond13.peg(calendar31);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711868400000L + "'", long18 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711868400000L + "'", long20 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711868400000L + "'", long22 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1709280000000L + "'", long24 == 1709280000000L);
        org.junit.Assert.assertNotNull(year25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1043");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        java.lang.String str18 = timeSeries1.getDomainDescription();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        timeSeries20.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = timeSeries20.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent29 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean30 = timeSeries20.equals((java.lang.Object) seriesChangeEvent29);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        int int33 = day31.compareTo((java.lang.Object) (short) 100);
        java.lang.String str34 = day31.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries20.getDataItem((org.jfree.data.time.RegularTimePeriod) day31);
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) day31);
        long long37 = day31.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = day31.next();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Time" + "'", str18, "Time");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "31-March-2024" + "'", str34, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 45382L + "'", long37 == 45382L);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1044");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int1 = day0.getMonth();
        org.jfree.data.time.SerialDate serialDate2 = day0.getSerialDate();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day(serialDate2);
        org.jfree.data.time.Day day4 = new org.jfree.data.time.Day(serialDate2);
        java.util.Date date5 = day4.getStart();
        java.util.TimeZone timeZone6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Day day7 = new org.jfree.data.time.Day(date5, timeZone6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'zone' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(serialDate2);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1045");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year((int) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod2 = year1.previous();
        java.lang.Class<?> wildcardClass3 = year1.getClass();
        java.lang.Class class4 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass3);
        org.junit.Assert.assertNotNull(regularTimePeriod2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(class4);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1046");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        java.lang.String str3 = day0.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = day0.previous();
        java.util.Date date5 = day0.getStart();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "31-March-2024" + "'", str3, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1047");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        java.lang.String str18 = timeSeries1.getDomainDescription();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        timeSeries20.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = timeSeries20.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent29 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean30 = timeSeries20.equals((java.lang.Object) seriesChangeEvent29);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        int int33 = day31.compareTo((java.lang.Object) (short) 100);
        java.lang.String str34 = day31.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries20.getDataItem((org.jfree.data.time.RegularTimePeriod) day31);
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) day31);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        java.util.Date date43 = day39.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond44 = new org.jfree.data.time.FixedMillisecond(date43);
        java.util.Date date45 = fixedMillisecond44.getTime();
        java.util.Calendar calendar46 = null;
        long long47 = fixedMillisecond44.getLastMillisecond(calendar46);
        java.util.Calendar calendar48 = null;
        long long49 = fixedMillisecond44.getFirstMillisecond(calendar48);
        java.util.Calendar calendar50 = null;
        long long51 = fixedMillisecond44.getFirstMillisecond(calendar50);
        java.util.Calendar calendar52 = null;
        long long53 = fixedMillisecond44.getMiddleMillisecond(calendar52);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond44, (java.lang.Number) Double.NaN);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem57 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) fixedMillisecond44, (java.lang.Number) 7);
        org.jfree.data.time.Month month60 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number61 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem62 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month60, number61);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = month60.next();
        boolean boolean64 = timeSeries1.equals((java.lang.Object) month60);
        org.jfree.data.time.TimeSeries timeSeries66 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day67 = new org.jfree.data.time.Day();
        timeSeries66.add((org.jfree.data.time.RegularTimePeriod) day67, (double) (short) 0, false);
        java.util.Date date71 = day67.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond72 = new org.jfree.data.time.FixedMillisecond(date71);
        java.util.Date date73 = fixedMillisecond72.getTime();
        java.util.Calendar calendar74 = null;
        long long75 = fixedMillisecond72.getLastMillisecond(calendar74);
        long long76 = fixedMillisecond72.getMiddleMillisecond();
        long long77 = fixedMillisecond72.getSerialIndex();
        java.util.Calendar calendar78 = null;
        long long79 = fixedMillisecond72.getFirstMillisecond(calendar78);
        timeSeries1.setKey((java.lang.Comparable) long79);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Time" + "'", str18, "Time");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "31-March-2024" + "'", str34, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem35);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1711868400000L + "'", long47 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1711868400000L + "'", long49 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1711868400000L + "'", long51 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1711868400000L + "'", long53 == 1711868400000L);
        org.junit.Assert.assertNull(timeSeriesDataItem57);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(date71);
        org.junit.Assert.assertEquals(date71.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1711868400000L + "'", long75 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1711868400000L + "'", long76 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1711868400000L + "'", long77 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1711868400000L + "'", long79 == 1711868400000L);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1048");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        java.util.Date date21 = day17.getStart();
        int int22 = timeSeries8.getIndex((org.jfree.data.time.RegularTimePeriod) day17);
        java.lang.Class class23 = timeSeries8.timePeriodClass;
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        java.util.Date date30 = day26.getStart();
        java.util.TimeZone timeZone31 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class23, date30, timeZone31);
        timeSeries1.timePeriodClass = class23;
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        timeSeries35.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        java.util.Date date48 = day44.getStart();
        int int49 = timeSeries35.getIndex((org.jfree.data.time.RegularTimePeriod) day44);
        long long50 = day44.getFirstMillisecond();
        org.jfree.data.time.SerialDate serialDate51 = day44.getSerialDate();
        long long52 = day44.getFirstMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem54 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day44, (java.lang.Number) 118L);
        long long55 = day44.getLastMillisecond();
        java.util.Calendar calendar56 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long57 = day44.getFirstMillisecond(calendar56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711868400000L + "'", long50 == 1711868400000L);
        org.junit.Assert.assertNotNull(serialDate51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711868400000L + "'", long52 == 1711868400000L);
        org.junit.Assert.assertNull(timeSeriesDataItem54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1711954799999L + "'", long55 == 1711954799999L);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1049");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        java.lang.String str18 = timeSeries1.getDomainDescription();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        timeSeries20.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = timeSeries20.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent29 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean30 = timeSeries20.equals((java.lang.Object) seriesChangeEvent29);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        int int33 = day31.compareTo((java.lang.Object) (short) 100);
        java.lang.String str34 = day31.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries20.getDataItem((org.jfree.data.time.RegularTimePeriod) day31);
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) day31);
        long long37 = day31.getSerialIndex();
        int int38 = day31.getYear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Time" + "'", str18, "Time");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "31-March-2024" + "'", str34, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 45382L + "'", long37 == 45382L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2024 + "'", int38 == 2024);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1050");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Day day3 = new org.jfree.data.time.Day((int) ' ', (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The 'year' argument must be in range 1900 to 9999.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1051");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        long long24 = timeSeries19.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day27, (double) (short) 0, false);
        timeSeries26.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = timeSeries26.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries26.addChangeListener(seriesChangeListener34);
        timeSeries26.setDomainDescription("hi!");
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        int int40 = day38.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = day38.next();
        timeSeries26.add(regularTimePeriod41, (java.lang.Number) 1);
        java.lang.String str44 = timeSeries26.getDescription();
        double double45 = timeSeries26.getMinY();
        org.jfree.data.time.Month month46 = new org.jfree.data.time.Month();
        long long47 = month46.getFirstMillisecond();
        long long48 = month46.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month46, 0.0d);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = timeSeriesDataItem50.getPeriod();
        timeSeries26.setKey((java.lang.Comparable) regularTimePeriod51);
        timeSeries19.delete(regularTimePeriod51);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1709280000000L + "'", long47 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 24291L + "'", long48 == 24291L);
        org.junit.Assert.assertNotNull(regularTimePeriod51);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1052");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        java.util.Calendar calendar9 = null;
        fixedMillisecond7.peg(calendar9);
        long long11 = fixedMillisecond7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = fixedMillisecond7.next();
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getMiddleMillisecond(calendar13);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1053");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        int int8 = timeSeries1.getItemCount();
        double double9 = timeSeries1.getMinY();
        double double10 = timeSeries1.getMaxY();
        int int11 = timeSeries1.getItemCount();
        java.util.Collection collection12 = timeSeries1.getTimePeriods();
        int int13 = timeSeries1.getItemCount();
        java.lang.Object obj14 = timeSeries1.clone();
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        timeSeries16.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day();
        timeSeries24.add((org.jfree.data.time.RegularTimePeriod) day25, (double) (short) 0, false);
        java.util.Date date29 = day25.getStart();
        int int30 = timeSeries16.getIndex((org.jfree.data.time.RegularTimePeriod) day25);
        java.lang.Class class31 = timeSeries16.timePeriodClass;
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        int int33 = day32.getMonth();
        java.util.Date date34 = day32.getEnd();
        java.util.TimeZone timeZone35 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = org.jfree.data.time.RegularTimePeriod.createInstance(class31, date34, timeZone35);
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day();
        int int39 = day37.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = day37.next();
        java.util.Date date41 = regularTimePeriod40.getStart();
        java.util.TimeZone timeZone42 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = org.jfree.data.time.RegularTimePeriod.createInstance(class31, date41, timeZone42);
        org.jfree.data.time.Year year44 = new org.jfree.data.time.Year(date41);
        java.lang.String str45 = year44.toString();
        timeSeries1.setKey((java.lang.Comparable) year44);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(collection12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(class31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2024" + "'", str45, "2024");
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1054");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond13 = new org.jfree.data.time.FixedMillisecond(date12);
        java.util.Date date14 = fixedMillisecond13.getTime();
        java.util.Calendar calendar15 = null;
        long long16 = fixedMillisecond13.getLastMillisecond(calendar15);
        java.util.Calendar calendar17 = null;
        long long18 = fixedMillisecond13.getMiddleMillisecond(calendar17);
        java.util.Calendar calendar19 = null;
        long long20 = fixedMillisecond13.getLastMillisecond(calendar19);
        java.util.Calendar calendar21 = null;
        long long22 = fixedMillisecond13.getLastMillisecond(calendar21);
        org.jfree.data.time.Month month23 = new org.jfree.data.time.Month();
        long long24 = month23.getFirstMillisecond();
        org.jfree.data.time.Year year25 = month23.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = year25.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = year25.previous();
        int int28 = fixedMillisecond13.compareTo((java.lang.Object) year25);
        java.util.Date date29 = fixedMillisecond13.getTime();
        int int30 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) fixedMillisecond13);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        int int33 = day31.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        int int36 = day34.compareTo((java.lang.Object) (short) 100);
        long long37 = day34.getMiddleMillisecond();
        int int38 = day34.getYear();
        boolean boolean40 = day34.equals((java.lang.Object) 5);
        int int41 = day34.getDayOfMonth();
        java.lang.String str42 = day34.toString();
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day34, "Value", "hi!");
        int int46 = day31.compareTo((java.lang.Object) day34);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day31, "hi!", "2024");
        java.beans.PropertyChangeListener propertyChangeListener50 = null;
        timeSeries49.removePropertyChangeListener(propertyChangeListener50);
        org.jfree.data.time.TimeSeries timeSeries54 = timeSeries49.createCopy(1, 10);
        java.util.Collection collection55 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries54);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711868400000L + "'", long18 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711868400000L + "'", long20 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711868400000L + "'", long22 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1709280000000L + "'", long24 == 1709280000000L);
        org.junit.Assert.assertNotNull(year25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711911599999L + "'", long37 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2024 + "'", int38 == 2024);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 31 + "'", int41 == 31);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "31-March-2024" + "'", str42, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(timeSeries54);
        org.junit.Assert.assertNotNull(collection55);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1055");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        int int3 = day2.getMonth();
        java.util.Date date4 = day2.getEnd();
        boolean boolean5 = year1.equals((java.lang.Object) day2);
        int int6 = day2.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = day2.next();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = day2.getFirstMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2024 + "'", int6 == 2024);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1056");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) "org.jfree.data.time.TimePeriodFormatException: 9");
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1057");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        long long9 = fixedMillisecond7.getFirstMillisecond();
        long long10 = fixedMillisecond7.getSerialIndex();
        long long11 = fixedMillisecond7.getFirstMillisecond();
        java.util.Date date12 = fixedMillisecond7.getTime();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) fixedMillisecond7, "8", "8");
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double18 = timeSeries17.getMaxY();
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        java.lang.Number number20 = null;
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day19, number20, false);
        timeSeries17.removeAgedItems(1L, false);
        boolean boolean26 = timeSeries17.getNotify();
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener29 = null;
        timeSeries28.removeChangeListener(seriesChangeListener29);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem38 = timeSeries28.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day33, (java.lang.Number) 10L);
        long long39 = day33.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries17.getDataItem((org.jfree.data.time.RegularTimePeriod) day33);
        int int41 = fixedMillisecond7.compareTo((java.lang.Object) timeSeriesDataItem40);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        int int44 = day42.compareTo((java.lang.Object) (short) 100);
        long long45 = day42.getMiddleMillisecond();
        int int46 = day42.getYear();
        boolean boolean48 = day42.equals((java.lang.Object) 5);
        int int49 = day42.getDayOfMonth();
        boolean boolean50 = timeSeriesDataItem40.equals((java.lang.Object) day42);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711868400000L + "'", long9 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(timeSeriesDataItem38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 45382L + "'", long39 == 45382L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711911599999L + "'", long45 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2024 + "'", int46 == 2024);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 31 + "'", int49 == 31);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1058");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int1 = day0.getMonth();
        org.jfree.data.time.SerialDate serialDate2 = day0.getSerialDate();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day(serialDate2);
        org.jfree.data.time.SerialDate serialDate4 = day3.getSerialDate();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(serialDate2);
        org.junit.Assert.assertNotNull(serialDate4);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1059");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        long long3 = day0.getMiddleMillisecond();
        int int4 = day0.getYear();
        boolean boolean6 = day0.equals((java.lang.Object) 5);
        int int7 = day0.getDayOfMonth();
        java.lang.String str8 = day0.toString();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day0, "Value", "hi!");
        timeSeries11.setMaximumItemAge(10L);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent24 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean25 = timeSeries15.equals((java.lang.Object) seriesChangeEvent24);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        int int28 = day26.compareTo((java.lang.Object) (short) 100);
        java.lang.String str29 = day26.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries15.getDataItem((org.jfree.data.time.RegularTimePeriod) day26);
        timeSeriesDataItem30.setSelected(false);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = timeSeriesDataItem30.getPeriod();
        boolean boolean34 = timeSeriesDataItem30.isSelected();
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day();
        timeSeries36.add((org.jfree.data.time.RegularTimePeriod) day37, (double) (short) 0, false);
        java.util.Date date41 = day37.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond42 = new org.jfree.data.time.FixedMillisecond(date41);
        long long43 = fixedMillisecond42.getFirstMillisecond();
        java.util.Date date44 = fixedMillisecond42.getTime();
        org.jfree.data.time.FixedMillisecond fixedMillisecond45 = new org.jfree.data.time.FixedMillisecond(date44);
        int int46 = timeSeriesDataItem30.compareTo((java.lang.Object) fixedMillisecond45);
        org.jfree.data.time.Month month49 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date50 = month49.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = month49.next();
        org.jfree.data.time.TimeSeries timeSeries52 = timeSeries11.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond45, regularTimePeriod51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number54 = timeSeries11.getValue(9999);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9999, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711911599999L + "'", long3 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "31-March-2024" + "'", str8, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31-March-2024" + "'", str29, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1711868400000L + "'", long43 == 1711868400000L);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(timeSeries52);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1060");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        long long6 = timeSeries3.getMaximumItemAge();
        java.lang.String str7 = timeSeries3.getDescription();
        int int8 = timeSeries3.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, false);
        java.util.Date date15 = day11.getStart();
        org.jfree.data.time.SerialDate serialDate16 = day11.getSerialDate();
        java.lang.String str17 = day11.toString();
        java.lang.Number number18 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day11, number18);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, true);
        java.util.Date date23 = day11.getStart();
        java.util.TimeZone timeZone24 = null;
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year26 = new org.jfree.data.time.Year(date23, timeZone24, locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9223372036854775807L + "'", long6 == 9223372036854775807L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "31-March-2024" + "'", str17, "31-March-2024");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1061");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.addChangeListener(seriesChangeListener9);
        timeSeries1.setDomainDescription("hi!");
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        int int15 = day13.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = day13.next();
        timeSeries1.add(regularTimePeriod16, (java.lang.Number) 1);
        org.jfree.data.time.Month month21 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number22 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month21, number22);
        long long24 = month21.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem25 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) month21);
        java.lang.Number number26 = timeSeriesDataItem25.getValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = timeSeriesDataItem25.getPeriod();
        java.util.Calendar calendar28 = null;
        // The following exception was thrown during execution in test generation
        try {
            regularTimePeriod27.peg(calendar28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 118L + "'", long24 == 118L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + 0.0d + "'", number26, 0.0d);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1062");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.lang.Comparable comparable6 = timeSeries1.getKey();
        timeSeries1.setDomainDescription("");
        org.junit.Assert.assertEquals("'" + comparable6 + "' != '" + 100L + "'", comparable6, 100L);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1063");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(11);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1064");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        java.util.List list8 = timeSeries1.data;
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date12 = month11.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = month11.next();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener23 = null;
        timeSeries15.addChangeListener(seriesChangeListener23);
        timeSeries15.setDomainDescription("hi!");
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        int int29 = day27.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = day27.next();
        timeSeries15.add(regularTimePeriod30, (java.lang.Number) 1);
        org.jfree.data.time.Month month35 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number36 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month35, number36);
        long long38 = month35.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries15.getDataItem((org.jfree.data.time.RegularTimePeriod) month35);
        org.jfree.data.time.Year year40 = month35.getYear();
        int int41 = month11.compareTo((java.lang.Object) year40);
        long long42 = month11.getLastMillisecond();
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) month11, (java.lang.Number) 0.0d);
        timeSeries1.setNotify(false);
        java.beans.PropertyChangeListener propertyChangeListener47 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener47);
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 118L + "'", long38 == 118L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem39);
        org.junit.Assert.assertNotNull(year40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-61857014400001L) + "'", long42 == (-61857014400001L));
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1065");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener6 = null;
        timeSeries5.removeChangeListener(seriesChangeListener6);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries5.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 10L);
        int int16 = timeSeries5.getItemCount();
        timeSeries5.clear();
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getFirstMillisecond();
        org.jfree.data.time.Year year20 = month18.getYear();
        long long21 = year20.getFirstMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries5.addOrUpdate((org.jfree.data.time.RegularTimePeriod) year20, (double) 8);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = year20.previous();
        long long25 = regularTimePeriod24.getSerialIndex();
        timeSeries1.setKey((java.lang.Comparable) long25);
        org.junit.Assert.assertNull(timeSeriesDataItem15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1709280000000L + "'", long19 == 1709280000000L);
        org.junit.Assert.assertNotNull(year20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1704096000000L + "'", long21 == 1704096000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2023L + "'", long25 == 2023L);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1066");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double27 = timeSeries26.getMaxY();
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        java.lang.Number number29 = null;
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day28, number29, false);
        double double32 = timeSeries26.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        timeSeries34.add((org.jfree.data.time.RegularTimePeriod) day35, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries26.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day35, (java.lang.Number) 1711911599999L);
        int int42 = timeSeriesDataItem40.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries1.addOrUpdate(timeSeriesDataItem40);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double46 = timeSeries45.getMaxY();
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        java.lang.Number number48 = null;
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day47, number48, false);
        double double51 = timeSeries45.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day54 = new org.jfree.data.time.Day();
        timeSeries53.add((org.jfree.data.time.RegularTimePeriod) day54, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day54, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries62 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        org.jfree.data.time.TimeSeries timeSeries64 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day65 = new org.jfree.data.time.Day();
        timeSeries64.add((org.jfree.data.time.RegularTimePeriod) day65, (double) (short) 0, false);
        timeSeries64.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries72 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day73 = new org.jfree.data.time.Day();
        timeSeries72.add((org.jfree.data.time.RegularTimePeriod) day73, (double) (short) 0, false);
        java.util.Date date77 = day73.getStart();
        int int78 = timeSeries64.getIndex((org.jfree.data.time.RegularTimePeriod) day73);
        java.lang.Class class79 = timeSeries64.timePeriodClass;
        org.jfree.data.time.Day day80 = new org.jfree.data.time.Day();
        int int81 = day80.getMonth();
        java.util.Date date82 = day80.getEnd();
        java.util.TimeZone timeZone83 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date82, timeZone83);
        boolean boolean85 = timeSeries62.equals((java.lang.Object) timeZone83);
        org.jfree.data.time.TimeSeries timeSeries86 = timeSeries1.addAndOrUpdate(timeSeries62);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo87 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent88 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries1, seriesChangeInfo87);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo89 = null;
        seriesChangeEvent88.setSummary(seriesChangeInfo89);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "31-March-2024" + "'", str22, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(class79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(timeSeries86);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1067");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double7 = timeSeries6.getMaxY();
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        java.lang.Number number9 = null;
        timeSeries6.add((org.jfree.data.time.RegularTimePeriod) day8, number9, false);
        double double12 = timeSeries6.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day15 = new org.jfree.data.time.Day();
        timeSeries14.add((org.jfree.data.time.RegularTimePeriod) day15, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem20 = timeSeries6.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day15, (java.lang.Number) 1711911599999L);
        int int22 = timeSeriesDataItem20.compareTo((java.lang.Object) (byte) -1);
        timeSeries1.add(timeSeriesDataItem20);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries1.getNextTimePeriod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(timeSeriesDataItem20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1068");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = fixedMillisecond7.next();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) fixedMillisecond7, "", "");
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.addChangeListener(seriesChangeListener12);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener14 = null;
        timeSeries11.addChangeListener(seriesChangeListener14);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1069");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day6, (java.lang.Number) 10L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = day6.next();
        java.lang.String str13 = day6.toString();
        java.util.Calendar calendar14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = day6.getLastMillisecond(calendar14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "31-March-2024" + "'", str13, "31-March-2024");
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1070");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date3 = month2.getStart();
        long long4 = month2.getFirstMillisecond();
        long long5 = month2.getFirstMillisecond();
        java.util.Date date6 = month2.getStart();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61859692800000L) + "'", long4 == (-61859692800000L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-61859692800000L) + "'", long5 == (-61859692800000L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 01 00:00:00 PST 9");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1071");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        int int18 = timeSeries1.getItemCount();
        java.lang.Class class19 = timeSeries1.timePeriodClass;
        java.lang.String str20 = timeSeries1.getRangeDescription();
        int int21 = timeSeries1.getMaximumItemCount();
        timeSeries1.removeAgedItems(true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value" + "'", str20, "Value");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1072");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        java.lang.String str18 = timeSeries1.getDomainDescription();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent20 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries1, seriesChangeInfo19);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo21 = null;
        seriesChangeEvent20.setSummary(seriesChangeInfo21);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Time" + "'", str18, "Time");
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1073");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        long long9 = fixedMillisecond7.getFirstMillisecond();
        long long10 = fixedMillisecond7.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double13 = timeSeries12.getMaxY();
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        java.lang.Number number15 = null;
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day14, number15, false);
        double double18 = timeSeries12.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem26 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day21, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        java.lang.Comparable comparable30 = timeSeries29.getKey();
        timeSeries29.removeAgedItems(false);
        org.jfree.data.time.Month month33 = new org.jfree.data.time.Month();
        long long34 = month33.getFirstMillisecond();
        long long35 = month33.getSerialIndex();
        int int36 = month33.getYearValue();
        timeSeries29.setKey((java.lang.Comparable) month33);
        int int38 = fixedMillisecond7.compareTo((java.lang.Object) timeSeries29);
        org.jfree.data.time.TimeSeries timeSeries40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double41 = timeSeries40.getMaxY();
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        java.lang.Number number43 = null;
        timeSeries40.add((org.jfree.data.time.RegularTimePeriod) day42, number43, false);
        double double46 = timeSeries40.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day49 = new org.jfree.data.time.Day();
        timeSeries48.add((org.jfree.data.time.RegularTimePeriod) day49, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem54 = timeSeries40.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day49, (java.lang.Number) 1711911599999L);
        java.lang.Object obj55 = timeSeriesDataItem54.clone();
        int int56 = fixedMillisecond7.compareTo(obj55);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711868400000L + "'", long9 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(timeSeriesDataItem26);
        org.junit.Assert.assertEquals("'" + comparable30 + "' != '" + 1711911599999L + "'", comparable30, 1711911599999L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1709280000000L + "'", long34 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 24291L + "'", long35 == 24291L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2024 + "'", int36 == 2024);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(timeSeriesDataItem54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1074");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setDomainDescription("");
        int int22 = timeSeries1.getItemCount();
        int int23 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        timeSeries25.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day34, (double) (short) 0, false);
        timeSeries33.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        java.util.Date date46 = day42.getStart();
        org.jfree.data.time.SerialDate serialDate47 = day42.getSerialDate();
        java.lang.Number number48 = null;
        timeSeries33.update((org.jfree.data.time.RegularTimePeriod) day42, number48);
        java.lang.Number number50 = timeSeries25.getValue((org.jfree.data.time.RegularTimePeriod) day42);
        timeSeries25.removeAgedItems(true);
        org.jfree.data.time.TimeSeries timeSeries53 = timeSeries1.addAndOrUpdate(timeSeries25);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeries timeSeries56 = timeSeries1.createCopy((int) ' ', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate47);
        org.junit.Assert.assertEquals("'" + number50 + "' != '" + 0.0d + "'", number50, 0.0d);
        org.junit.Assert.assertNotNull(timeSeries53);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1075");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        timeSeries20.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        java.util.Date date33 = day29.getStart();
        int int34 = timeSeries20.getIndex((org.jfree.data.time.RegularTimePeriod) day29);
        java.lang.Class class35 = timeSeries20.timePeriodClass;
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        int int37 = day36.getMonth();
        java.util.Date date38 = day36.getEnd();
        java.util.TimeZone timeZone39 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = org.jfree.data.time.RegularTimePeriod.createInstance(class35, date38, timeZone39);
        boolean boolean41 = timeSeries18.equals((java.lang.Object) timeZone39);
        org.jfree.data.time.Month month42 = new org.jfree.data.time.Month();
        long long43 = month42.getFirstMillisecond();
        org.jfree.data.time.Year year44 = month42.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = year44.next();
        long long46 = year44.getFirstMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem48 = timeSeries18.addOrUpdate((org.jfree.data.time.RegularTimePeriod) year44, 0.0d);
        java.lang.Comparable comparable49 = timeSeries18.getKey();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(class35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1709280000000L + "'", long43 == 1709280000000L);
        org.junit.Assert.assertNotNull(year44);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1704096000000L + "'", long46 == 1704096000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem48);
        org.junit.Assert.assertEquals("'" + comparable49 + "' != '" + 1711911599999L + "'", comparable49, 1711911599999L);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1076");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        double double2 = timeSeries1.getMinY();
        timeSeries1.setDescription("March 2024");
        timeSeries1.removeAgedItems(0L, true);
        java.util.List list8 = timeSeries1.getItems();
        java.lang.Comparable comparable9 = timeSeries1.getKey();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener10 = null;
        timeSeries1.addChangeListener(seriesChangeListener10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertEquals("'" + comparable9 + "' != '" + (short) 100 + "'", comparable9, (short) 100);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1077");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        java.lang.Class class24 = null;
        timeSeries1.timePeriodClass = class24;
        timeSeries1.clear();
        org.jfree.data.time.Month month27 = new org.jfree.data.time.Month();
        long long28 = month27.getFirstMillisecond();
        org.jfree.data.time.Year year29 = month27.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = year29.previous();
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries32.addChangeListener(seriesChangeListener33);
        long long35 = timeSeries32.getMaximumItemAge();
        java.lang.String str36 = timeSeries32.getDescription();
        double double37 = timeSeries32.getMaxY();
        java.lang.Object obj38 = timeSeries32.clone();
        int int39 = year29.compareTo(obj38);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) year29, 1.0d, false);
        java.util.Date date43 = year29.getEnd();
        org.jfree.data.time.Month month44 = new org.jfree.data.time.Month(date43);
        java.util.TimeZone timeZone45 = null;
        java.util.Locale locale46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month47 = new org.jfree.data.time.Month(date43, timeZone45, locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1709280000000L + "'", long28 == 1709280000000L);
        org.junit.Assert.assertNotNull(year29);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 9223372036854775807L + "'", long35 == 9223372036854775807L);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Tue Dec 31 23:59:59 PST 2024");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1078");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        int int18 = timeSeries1.getItemCount();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem20 = timeSeries1.getDataItem((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1079");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double27 = timeSeries26.getMaxY();
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        java.lang.Number number29 = null;
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day28, number29, false);
        double double32 = timeSeries26.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        timeSeries34.add((org.jfree.data.time.RegularTimePeriod) day35, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries26.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day35, (java.lang.Number) 1711911599999L);
        int int42 = timeSeriesDataItem40.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries1.addOrUpdate(timeSeriesDataItem40);
        timeSeriesDataItem43.setValue((java.lang.Number) 1);
        org.jfree.data.time.Year year47 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        int int49 = day48.getMonth();
        java.util.Date date50 = day48.getEnd();
        boolean boolean51 = year47.equals((java.lang.Object) day48);
        boolean boolean52 = timeSeriesDataItem43.equals((java.lang.Object) day48);
        int int53 = day48.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = day48.next();
        org.jfree.data.time.Month month56 = new org.jfree.data.time.Month();
        long long57 = month56.getFirstMillisecond();
        org.jfree.data.time.Year year58 = month56.getYear();
        org.jfree.data.time.Month month59 = new org.jfree.data.time.Month(11, year58);
        boolean boolean60 = day48.equals((java.lang.Object) year58);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "31-March-2024" + "'", str22, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2024 + "'", int53 == 2024);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1709280000000L + "'", long57 == 1709280000000L);
        org.junit.Assert.assertNotNull(year58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1080");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(10);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1081");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = year2.previous();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year2);
        java.lang.String str6 = timeSeries5.getRangeDescription();
        java.lang.String str7 = timeSeries5.getRangeDescription();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Value" + "'", str6, "Value");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Value" + "'", str7, "Value");
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1082");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = fixedMillisecond7.next();
        long long13 = fixedMillisecond7.getFirstMillisecond();
        long long14 = fixedMillisecond7.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1083");
        org.jfree.data.time.RegularTimePeriod regularTimePeriod0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem2 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod0, (java.lang.Number) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'period' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1084");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 2147483647);
        timeSeries1.setDescription("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number5 = timeSeries1.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1085");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        int int3 = month0.getYearValue();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException5 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException7 = new org.jfree.data.time.TimePeriodFormatException("");
        timePeriodFormatException5.addSuppressed((java.lang.Throwable) timePeriodFormatException7);
        int int9 = month0.compareTo((java.lang.Object) timePeriodFormatException5);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) int9, "org.jfree.data.event.SeriesChangeEvent[source=true]", "March 2024");
        java.util.Collection collection13 = timeSeries12.getTimePeriods();
        org.jfree.data.time.Month month14 = new org.jfree.data.time.Month();
        long long15 = month14.getFirstMillisecond();
        org.jfree.data.time.Year year16 = month14.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = year16.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = year16.previous();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = year16.previous();
        java.lang.Object obj21 = null;
        int int22 = year16.compareTo(obj21);
        java.util.Date date23 = year16.getEnd();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries12.getDataItem((org.jfree.data.time.RegularTimePeriod) year16);
        timeSeries12.removeAgedItems(true);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem27 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeSeries12.add(timeSeriesDataItem27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'item' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2024 + "'", int3 == 2024);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(collection13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1709280000000L + "'", long15 == 1709280000000L);
        org.junit.Assert.assertNotNull(year16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 31 23:59:59 PST 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem24);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1086");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond((long) 0);
        java.util.Date date2 = fixedMillisecond1.getStart();
        java.util.TimeZone timeZone3 = null;
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month5 = new org.jfree.data.time.Month(date2, timeZone3, locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Wed Dec 31 16:00:00 PST 1969");
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1087");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = month4.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = year6.next();
        long long8 = year6.getLastMillisecond();
        java.lang.Number number9 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) year6, number9);
        java.util.Date date11 = year6.getStart();
        long long12 = year6.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = year6.next();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1735718399999L + "'", long8 == 1735718399999L);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Jan 01 00:00:00 PST 2024");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1735718399999L + "'", long12 == 1735718399999L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1088");
        java.lang.Class class0 = null;
        java.lang.Class class1 = null;
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day4 = new org.jfree.data.time.Day();
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day4, (double) (short) 0, false);
        java.util.Date date8 = day4.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond9 = new org.jfree.data.time.FixedMillisecond(date8);
        java.util.TimeZone timeZone10 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = org.jfree.data.time.RegularTimePeriod.createInstance(class1, date8, timeZone10);
        java.util.TimeZone timeZone12 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date8, timeZone12);
        org.jfree.data.time.FixedMillisecond fixedMillisecond14 = new org.jfree.data.time.FixedMillisecond(date8);
        java.util.Calendar calendar15 = null;
        long long16 = fixedMillisecond14.getMiddleMillisecond(calendar15);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod11);
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1089");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date3 = month2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = month2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = month2.previous();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            regularTimePeriod5.peg(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1090");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = fixedMillisecond7.next();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) fixedMillisecond7, "", "");
        timeSeries11.setNotify(false);
        java.lang.Object obj14 = timeSeries11.clone();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1091");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        timeSeries1.removeAgedItems(1L, false);
        timeSeries1.setMaximumItemAge(1704096000000L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1092");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        java.util.Date date21 = day17.getStart();
        int int22 = timeSeries8.getIndex((org.jfree.data.time.RegularTimePeriod) day17);
        java.lang.Class class23 = timeSeries8.timePeriodClass;
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        java.util.Date date30 = day26.getStart();
        java.util.TimeZone timeZone31 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class23, date30, timeZone31);
        timeSeries1.timePeriodClass = class23;
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        timeSeries35.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        java.util.Date date48 = day44.getStart();
        int int49 = timeSeries35.getIndex((org.jfree.data.time.RegularTimePeriod) day44);
        long long50 = day44.getFirstMillisecond();
        org.jfree.data.time.SerialDate serialDate51 = day44.getSerialDate();
        long long52 = day44.getFirstMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem54 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day44, (java.lang.Number) 118L);
        double double55 = timeSeries1.getMinY();
        org.jfree.data.time.TimeSeries timeSeries57 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day58 = new org.jfree.data.time.Day();
        timeSeries57.add((org.jfree.data.time.RegularTimePeriod) day58, (double) (short) 0, false);
        java.util.Date date62 = day58.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond63 = new org.jfree.data.time.FixedMillisecond(date62);
        java.util.Date date64 = fixedMillisecond63.getTime();
        java.util.Calendar calendar65 = null;
        long long66 = fixedMillisecond63.getLastMillisecond(calendar65);
        long long67 = fixedMillisecond63.getMiddleMillisecond();
        java.util.Date date68 = fixedMillisecond63.getTime();
        org.jfree.data.time.Day day69 = new org.jfree.data.time.Day(date68);
        long long70 = day69.getLastMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day69, (java.lang.Number) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are attempting to add an observation for the time period 31-March-2024 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711868400000L + "'", long50 == 1711868400000L);
        org.junit.Assert.assertNotNull(serialDate51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711868400000L + "'", long52 == 1711868400000L);
        org.junit.Assert.assertNull(timeSeriesDataItem54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 118.0d + "'", double55 == 118.0d);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1711868400000L + "'", long66 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1711868400000L + "'", long67 == 1711868400000L);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1711954799999L + "'", long70 == 1711954799999L);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1093");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        java.util.Date date9 = fixedMillisecond7.getTime();
        org.jfree.data.time.FixedMillisecond fixedMillisecond10 = new org.jfree.data.time.FixedMillisecond(date9);
        org.jfree.data.time.FixedMillisecond fixedMillisecond11 = new org.jfree.data.time.FixedMillisecond(date9);
        java.util.Calendar calendar12 = null;
        long long13 = fixedMillisecond11.getMiddleMillisecond(calendar12);
        java.util.Calendar calendar14 = null;
        long long15 = fixedMillisecond11.getMiddleMillisecond(calendar14);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1711868400000L + "'", long15 == 1711868400000L);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1094");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        int int3 = month0.getYearValue();
        long long4 = month0.getLastMillisecond();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = month0.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2024 + "'", int3 == 2024);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1711954799999L + "'", long4 == 1711954799999L);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1095");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        timeSeries4.add((org.jfree.data.time.RegularTimePeriod) day5, (double) (short) 0, false);
        java.util.Date date9 = day5.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond10 = new org.jfree.data.time.FixedMillisecond(date9);
        long long11 = fixedMillisecond10.getFirstMillisecond();
        java.util.Date date12 = fixedMillisecond10.getTime();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem13 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond10);
        long long14 = fixedMillisecond10.getFirstMillisecond();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1096");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        java.util.Calendar calendar1 = null;
        long long2 = fixedMillisecond0.getLastMillisecond(calendar1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = fixedMillisecond0.next();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711939154825L + "'", long2 == 1711939154825L);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1097");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setDomainDescription("");
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener24 = null;
        timeSeries23.addChangeListener(seriesChangeListener24);
        long long26 = timeSeries23.getMaximumItemAge();
        java.lang.String str27 = timeSeries23.getDescription();
        java.util.List list28 = timeSeries23.getItems();
        org.jfree.data.time.Month month31 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number32 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem33 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month31, number32);
        long long34 = month31.getSerialIndex();
        java.util.Date date35 = month31.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = month31.previous();
        timeSeries23.delete((org.jfree.data.time.RegularTimePeriod) month31);
        java.lang.Class class38 = timeSeries23.getTimePeriodClass();
        org.jfree.data.time.TimeSeries timeSeries39 = timeSeries1.addAndOrUpdate(timeSeries23);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 9223372036854775807L + "'", long26 == 9223372036854775807L);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 118L + "'", long34 == 118L);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNull(class38);
        org.junit.Assert.assertNotNull(timeSeries39);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1098");
        java.lang.Class class0 = null;
        java.lang.Class class1 = null;
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day4 = new org.jfree.data.time.Day();
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day4, (double) (short) 0, false);
        java.util.Date date8 = day4.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond9 = new org.jfree.data.time.FixedMillisecond(date8);
        java.util.TimeZone timeZone10 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = org.jfree.data.time.RegularTimePeriod.createInstance(class1, date8, timeZone10);
        java.util.TimeZone timeZone12 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date8, timeZone12);
        org.jfree.data.time.FixedMillisecond fixedMillisecond14 = new org.jfree.data.time.FixedMillisecond(date8);
        org.jfree.data.time.FixedMillisecond fixedMillisecond15 = new org.jfree.data.time.FixedMillisecond(date8);
        java.util.Calendar calendar16 = null;
        long long17 = fixedMillisecond15.getMiddleMillisecond(calendar16);
        long long18 = fixedMillisecond15.getSerialIndex();
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod11);
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1711868400000L + "'", long17 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711868400000L + "'", long18 == 1711868400000L);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1099");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        timeSeries5.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        java.util.Date date18 = day14.getStart();
        org.jfree.data.time.SerialDate serialDate19 = day14.getSerialDate();
        java.lang.Number number20 = null;
        timeSeries5.update((org.jfree.data.time.RegularTimePeriod) day14, number20);
        int int22 = day14.getDayOfMonth();
        java.lang.Number number23 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) day14);
        java.lang.String str24 = day14.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem26 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) (-61820208000001L));
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = timeSeriesDataItem26.getPeriod();
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertNull(number23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "31-March-2024" + "'", str24, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod27);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1100");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        java.util.Calendar calendar11 = null;
        long long12 = fixedMillisecond7.getMiddleMillisecond(calendar11);
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getLastMillisecond(calendar13);
        java.util.Date date15 = fixedMillisecond7.getTime();
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day(date15);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = day16.next();
        int int18 = day16.getDayOfMonth();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1101");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        long long8 = day2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = day2.previous();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.addChangeListener(seriesChangeListener12);
        long long14 = timeSeries11.getMaximumItemAge();
        java.lang.String str15 = timeSeries11.getDescription();
        double double16 = timeSeries11.getMaxY();
        java.lang.Object obj17 = timeSeries11.clone();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day20 = new org.jfree.data.time.Day();
        timeSeries19.add((org.jfree.data.time.RegularTimePeriod) day20, (double) (short) 0, false);
        timeSeries19.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = timeSeries19.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries19.addChangeListener(seriesChangeListener27);
        timeSeries19.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        java.util.Date date37 = day33.getStart();
        java.lang.Number number38 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day33, number38);
        java.util.Date date40 = day33.getEnd();
        boolean boolean41 = timeSeries11.equals((java.lang.Object) day33);
        boolean boolean42 = day2.equals((java.lang.Object) timeSeries11);
        timeSeries11.setDomainDescription("Value");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711911599999L + "'", long8 == 1711911599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 9223372036854775807L + "'", long14 == 9223372036854775807L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1102");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        int int3 = month0.getYearValue();
        long long4 = month0.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = month0.next();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2024 + "'", int3 == 2024);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1711954799999L + "'", long4 == 1711954799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1103");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double27 = timeSeries26.getMaxY();
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        java.lang.Number number29 = null;
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day28, number29, false);
        double double32 = timeSeries26.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        timeSeries34.add((org.jfree.data.time.RegularTimePeriod) day35, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries26.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day35, (java.lang.Number) 1711911599999L);
        int int42 = timeSeriesDataItem40.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries1.addOrUpdate(timeSeriesDataItem40);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double46 = timeSeries45.getMaxY();
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        java.lang.Number number48 = null;
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day47, number48, false);
        double double51 = timeSeries45.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day54 = new org.jfree.data.time.Day();
        timeSeries53.add((org.jfree.data.time.RegularTimePeriod) day54, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day54, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries62 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        org.jfree.data.time.TimeSeries timeSeries64 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day65 = new org.jfree.data.time.Day();
        timeSeries64.add((org.jfree.data.time.RegularTimePeriod) day65, (double) (short) 0, false);
        timeSeries64.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries72 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day73 = new org.jfree.data.time.Day();
        timeSeries72.add((org.jfree.data.time.RegularTimePeriod) day73, (double) (short) 0, false);
        java.util.Date date77 = day73.getStart();
        int int78 = timeSeries64.getIndex((org.jfree.data.time.RegularTimePeriod) day73);
        java.lang.Class class79 = timeSeries64.timePeriodClass;
        org.jfree.data.time.Day day80 = new org.jfree.data.time.Day();
        int int81 = day80.getMonth();
        java.util.Date date82 = day80.getEnd();
        java.util.TimeZone timeZone83 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date82, timeZone83);
        boolean boolean85 = timeSeries62.equals((java.lang.Object) timeZone83);
        org.jfree.data.time.TimeSeries timeSeries86 = timeSeries1.addAndOrUpdate(timeSeries62);
        org.jfree.data.time.Month month87 = new org.jfree.data.time.Month();
        long long88 = month87.getFirstMillisecond();
        long long89 = month87.getSerialIndex();
        java.lang.String str90 = month87.toString();
        int int91 = month87.getYearValue();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add((org.jfree.data.time.RegularTimePeriod) month87, (java.lang.Number) 100L, true);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "31-March-2024" + "'", str22, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(class79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(timeSeries86);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1709280000000L + "'", long88 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 24291L + "'", long89 == 24291L);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "March 2024" + "'", str90, "March 2024");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2024 + "'", int91 == 2024);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1104");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        java.lang.String str3 = day0.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = day0.previous();
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        timeSeries6.add((org.jfree.data.time.RegularTimePeriod) day7, (double) (short) 0, false);
        java.util.Date date11 = day7.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond12 = new org.jfree.data.time.FixedMillisecond(date11);
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond12.getMiddleMillisecond(calendar13);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond12, (double) (byte) 0);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = timeSeriesDataItem16.getPeriod();
        int int18 = day0.compareTo((java.lang.Object) timeSeriesDataItem16);
        java.util.Calendar calendar19 = null;
        // The following exception was thrown during execution in test generation
        try {
            day0.peg(calendar19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "31-March-2024" + "'", str3, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1105");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.removeAgedItems((long) 10, true);
        java.beans.PropertyChangeListener propertyChangeListener23 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener23);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.delete(9999, (int) '#', true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1106");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        java.lang.Comparable comparable19 = timeSeries18.getKey();
        timeSeries18.removeAgedItems(false);
        org.jfree.data.time.Month month22 = new org.jfree.data.time.Month();
        long long23 = month22.getFirstMillisecond();
        long long24 = month22.getSerialIndex();
        int int25 = month22.getYearValue();
        timeSeries18.setKey((java.lang.Comparable) month22);
        boolean boolean27 = timeSeries18.getNotify();
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int29 = day28.getMonth();
        org.jfree.data.time.SerialDate serialDate30 = day28.getSerialDate();
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day(serialDate30);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day(serialDate30);
        java.util.Date date33 = day32.getStart();
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Month month36 = new org.jfree.data.time.Month();
        long long37 = month36.getFirstMillisecond();
        long long38 = month36.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month36, 0.0d);
        timeSeries35.add(timeSeriesDataItem40, false);
        boolean boolean43 = timeSeries35.getNotify();
        boolean boolean44 = day32.equals((java.lang.Object) boolean43);
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day32, (java.lang.Number) (byte) -1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeSeries18.add(regularTimePeriod47, (java.lang.Number) (-61851744000001L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'period' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertEquals("'" + comparable19 + "' != '" + 1711911599999L + "'", comparable19, 1711911599999L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1709280000000L + "'", long23 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 24291L + "'", long24 == 24291L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2024 + "'", int25 == 2024);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(serialDate30);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1709280000000L + "'", long37 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 24291L + "'", long38 == 24291L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1107");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        int int8 = timeSeries1.getItemCount();
        double double9 = timeSeries1.getMinY();
        double double10 = timeSeries1.getMaxY();
        int int11 = timeSeries1.getItemCount();
        java.util.Collection collection12 = timeSeries1.getTimePeriods();
        int int13 = timeSeries1.getItemCount();
        boolean boolean14 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        java.util.Date date21 = day17.getStart();
        org.jfree.data.time.SerialDate serialDate22 = day17.getSerialDate();
        int int23 = day17.getYear();
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 0.0f);
        long long26 = day17.getFirstMillisecond();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(collection12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2024 + "'", int23 == 2024);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1108");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        timeSeries1.setMaximumItemCount((int) (byte) 10);
        java.beans.PropertyChangeListener propertyChangeListener18 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener18);
        java.lang.Object obj20 = timeSeries1.clone();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(obj20);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1109");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        long long8 = day2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = day2.previous();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.addChangeListener(seriesChangeListener12);
        long long14 = timeSeries11.getMaximumItemAge();
        java.lang.String str15 = timeSeries11.getDescription();
        double double16 = timeSeries11.getMaxY();
        java.lang.Object obj17 = timeSeries11.clone();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day20 = new org.jfree.data.time.Day();
        timeSeries19.add((org.jfree.data.time.RegularTimePeriod) day20, (double) (short) 0, false);
        timeSeries19.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = timeSeries19.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries19.addChangeListener(seriesChangeListener27);
        timeSeries19.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        java.util.Date date37 = day33.getStart();
        java.lang.Number number38 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day33, number38);
        java.util.Date date40 = day33.getEnd();
        boolean boolean41 = timeSeries11.equals((java.lang.Object) day33);
        boolean boolean42 = day2.equals((java.lang.Object) timeSeries11);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day2, (double) 4);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711911599999L + "'", long8 == 1711911599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 9223372036854775807L + "'", long14 == 9223372036854775807L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem39);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1110");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries8.addChangeListener(seriesChangeListener9);
        long long11 = timeSeries8.getMaximumItemAge();
        java.lang.String str12 = timeSeries8.getDescription();
        double double13 = timeSeries8.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent24 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean25 = timeSeries15.equals((java.lang.Object) seriesChangeEvent24);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        int int28 = day26.compareTo((java.lang.Object) (short) 100);
        java.lang.String str29 = day26.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries15.getDataItem((org.jfree.data.time.RegularTimePeriod) day26);
        timeSeries8.add(timeSeriesDataItem30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double34 = timeSeries33.getMaxY();
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        java.lang.Number number36 = null;
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day35, number36, false);
        double double39 = timeSeries33.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries33.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day42, (java.lang.Number) 1711911599999L);
        int int49 = timeSeriesDataItem47.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries8.addOrUpdate(timeSeriesDataItem47);
        java.util.Collection collection51 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries8);
        java.util.List list52 = timeSeries1.data;
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 9223372036854775807L + "'", long11 == 9223372036854775807L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31-March-2024" + "'", str29, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(timeSeriesDataItem47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertNotNull(collection51);
        org.junit.Assert.assertNotNull(list52);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1111");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        java.lang.String str3 = day0.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = day0.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = day0.previous();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "31-March-2024" + "'", str3, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1112");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.addChangeListener(seriesChangeListener9);
        timeSeries1.setDomainDescription("hi!");
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        int int15 = day13.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = day13.next();
        timeSeries1.add(regularTimePeriod16, (java.lang.Number) 1);
        double double19 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        long long24 = timeSeries21.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        long long29 = timeSeries26.getMaximumItemAge();
        java.lang.String str30 = timeSeries26.getDescription();
        double double31 = timeSeries26.getMinY();
        java.util.Collection collection32 = timeSeries21.getTimePeriodsUniqueToOtherSeries(timeSeries26);
        timeSeries26.setRangeDescription("");
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day();
        timeSeries36.add((org.jfree.data.time.RegularTimePeriod) day37, (double) (short) 0, false);
        java.util.Date date41 = day37.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond42 = new org.jfree.data.time.FixedMillisecond(date41);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = fixedMillisecond42.next();
        int int44 = timeSeries26.getIndex(regularTimePeriod43);
        boolean boolean45 = timeSeries1.equals((java.lang.Object) int44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        timeSeries47.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = timeSeries47.getNextTimePeriod();
        java.util.Collection collection55 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries47);
        org.jfree.data.time.TimeSeries timeSeries57 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener58 = null;
        timeSeries57.addChangeListener(seriesChangeListener58);
        long long60 = timeSeries57.getMaximumItemAge();
        java.lang.String str61 = timeSeries57.getDescription();
        java.util.List list62 = timeSeries57.getItems();
        org.jfree.data.time.Month month65 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number66 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem67 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month65, number66);
        long long68 = month65.getSerialIndex();
        java.util.Date date69 = month65.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = month65.previous();
        timeSeries57.delete((org.jfree.data.time.RegularTimePeriod) month65);
        java.lang.Number number72 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add((org.jfree.data.time.RegularTimePeriod) month65, number72, true);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9223372036854775807L + "'", long29 == 9223372036854775807L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 9223372036854775807L + "'", long60 == 9223372036854775807L);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(list62);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 118L + "'", long68 == 118L);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1113");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.util.List list3 = timeSeries1.data;
        timeSeries1.removeAgedItems((long) 12, false);
        java.lang.Comparable comparable7 = timeSeries1.getKey();
        timeSeries1.removeAgedItems(true);
        java.lang.String str10 = timeSeries1.getDescription();
        java.beans.PropertyChangeListener propertyChangeListener11 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener11);
        timeSeries1.setMaximumItemCount(0);
        org.jfree.data.time.Day day15 = new org.jfree.data.time.Day();
        int int17 = day15.compareTo((java.lang.Object) (short) 100);
        long long18 = day15.getMiddleMillisecond();
        int int19 = day15.getYear();
        boolean boolean21 = day15.equals((java.lang.Object) 5);
        int int22 = day15.getDayOfMonth();
        long long23 = day15.getSerialIndex();
        long long24 = day15.getFirstMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem25 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day15);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = day15.next();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertEquals("'" + comparable7 + "' != '" + 100L + "'", comparable7, 100L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2024 + "'", int19 == 2024);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 45382L + "'", long23 == 45382L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1711868400000L + "'", long24 == 1711868400000L);
        org.junit.Assert.assertNull(timeSeriesDataItem25);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1114");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        org.jfree.data.time.FixedMillisecond fixedMillisecond9 = new org.jfree.data.time.FixedMillisecond(date8);
        boolean boolean11 = fixedMillisecond9.equals((java.lang.Object) 100L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = fixedMillisecond9.previous();
        long long13 = fixedMillisecond9.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1115");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getMiddleMillisecond();
        long long12 = fixedMillisecond7.getSerialIndex();
        java.util.Date date13 = fixedMillisecond7.getTime();
        java.util.Calendar calendar14 = null;
        long long15 = fixedMillisecond7.getFirstMillisecond(calendar14);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1711868400000L + "'", long15 == 1711868400000L);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1116");
        org.jfree.data.time.Month month1 = new org.jfree.data.time.Month();
        long long2 = month1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = month1.getYear();
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month(11, year3);
        long long5 = year3.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1709280000000L + "'", long2 == 1709280000000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1704096000000L + "'", long5 == 1704096000000L);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1117");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        java.lang.Object obj17 = timeSeries1.clone();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day20 = new org.jfree.data.time.Day();
        timeSeries19.add((org.jfree.data.time.RegularTimePeriod) day20, (double) (short) 0, false);
        java.util.Date date24 = day20.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = day20.next();
        timeSeries1.setKey((java.lang.Comparable) regularTimePeriod25);
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        timeSeries28.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = timeSeries28.getNextTimePeriod();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod35, (double) 24291L);
        timeSeriesDataItem37.setValue((java.lang.Number) 24290L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = timeSeriesDataItem37.getPeriod();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem41 = timeSeries1.getRawDataItem(regularTimePeriod40);
        int int42 = timeSeries1.getItemCount();
        long long43 = timeSeries1.getMaximumItemAge();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
        org.junit.Assert.assertNull(timeSeriesDataItem41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1118");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.util.List list3 = timeSeries1.data;
        timeSeries1.removeAgedItems((long) 12, false);
        java.lang.Comparable comparable7 = timeSeries1.getKey();
        timeSeries1.removeAgedItems(true);
        java.lang.String str10 = timeSeries1.getDescription();
        java.beans.PropertyChangeListener propertyChangeListener11 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener11);
        long long13 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        java.util.Date date20 = day16.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond21 = new org.jfree.data.time.FixedMillisecond(date20);
        long long22 = fixedMillisecond21.getFirstMillisecond();
        java.util.Calendar calendar23 = null;
        fixedMillisecond21.peg(calendar23);
        long long25 = fixedMillisecond21.getMiddleMillisecond();
        long long26 = fixedMillisecond21.getMiddleMillisecond();
        java.util.Calendar calendar27 = null;
        fixedMillisecond21.peg(calendar27);
        org.jfree.data.time.Month month29 = new org.jfree.data.time.Month();
        long long30 = month29.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = month29.previous();
        boolean boolean33 = month29.equals((java.lang.Object) 10.0d);
        long long34 = month29.getSerialIndex();
        org.jfree.data.time.Year year35 = month29.getYear();
        org.jfree.data.time.TimeSeries timeSeries36 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond21, (org.jfree.data.time.RegularTimePeriod) month29);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = month29.previous();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertEquals("'" + comparable7 + "' != '" + 100L + "'", comparable7, 100L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711868400000L + "'", long22 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711868400000L + "'", long25 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1709280000000L + "'", long30 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 24291L + "'", long34 == 24291L);
        org.junit.Assert.assertNotNull(year35);
        org.junit.Assert.assertNotNull(timeSeries36);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1119");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        java.util.Date date9 = fixedMillisecond7.getTime();
        org.jfree.data.time.FixedMillisecond fixedMillisecond10 = new org.jfree.data.time.FixedMillisecond(date9);
        org.jfree.data.time.FixedMillisecond fixedMillisecond11 = new org.jfree.data.time.FixedMillisecond(date9);
        java.util.Calendar calendar12 = null;
        long long13 = fixedMillisecond11.getLastMillisecond(calendar12);
        long long14 = fixedMillisecond11.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond11, (double) (-1L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1120");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        java.util.Date date9 = fixedMillisecond7.getTime();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = fixedMillisecond7.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = fixedMillisecond7.previous();
        java.util.Date date12 = fixedMillisecond7.getTime();
        java.util.Calendar calendar13 = null;
        fixedMillisecond7.peg(calendar13);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1121");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date3 = month2.getStart();
        java.util.TimeZone timeZone4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month5 = new org.jfree.data.time.Month(date3, timeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 01 00:00:00 PST 9");
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1122");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day6, (java.lang.Number) 10L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = day6.next();
        java.lang.String str13 = day6.toString();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double16 = timeSeries15.getMaxY();
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        java.lang.Number number18 = null;
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day17, number18, false);
        timeSeries15.removeAgedItems(1L, false);
        boolean boolean24 = timeSeries15.isEmpty();
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        long long29 = timeSeries26.getMaximumItemAge();
        java.lang.String str30 = timeSeries26.getDescription();
        double double31 = timeSeries26.getMaxY();
        java.lang.Object obj32 = timeSeries26.clone();
        java.util.List list33 = timeSeries26.data;
        timeSeries15.data = list33;
        int int35 = day6.compareTo((java.lang.Object) timeSeries15);
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "31-March-2024" + "'", str13, "31-March-2024");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9223372036854775807L + "'", long29 == 9223372036854775807L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1123");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        int int5 = day3.compareTo((java.lang.Object) (short) 100);
        long long6 = day3.getMiddleMillisecond();
        int int7 = day3.getYear();
        boolean boolean9 = day3.equals((java.lang.Object) 5);
        int int10 = day3.getDayOfMonth();
        java.lang.String str11 = day3.toString();
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3, "Value", "hi!");
        int int15 = day0.compareTo((java.lang.Object) day3);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day0, "hi!", "2024");
        java.beans.PropertyChangeListener propertyChangeListener19 = null;
        timeSeries18.removePropertyChangeListener(propertyChangeListener19);
        java.lang.String str21 = timeSeries18.getRangeDescription();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711911599999L + "'", long6 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2024 + "'", int7 == 2024);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "31-March-2024" + "'", str11, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2024" + "'", str21, "2024");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1124");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date3 = month2.getStart();
        long long4 = month2.getFirstMillisecond();
        long long5 = month2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = month2.next();
        int int7 = month2.getMonth();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61859692800000L) + "'", long4 == (-61859692800000L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-61859692800000L) + "'", long5 == (-61859692800000L));
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1125");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        timeSeriesDataItem15.setValue((java.lang.Number) (-6.1867512000001E13d));
        timeSeriesDataItem15.setValue((java.lang.Number) 1710617399999L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1126");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day9, (java.lang.Number) (byte) 10);
        timeSeriesDataItem11.setValue((java.lang.Number) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem14 = timeSeries1.addOrUpdate(timeSeriesDataItem11);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        java.util.Date date21 = day17.getStart();
        org.jfree.data.time.SerialDate serialDate22 = day17.getSerialDate();
        long long23 = day17.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = day17.previous();
        long long25 = regularTimePeriod24.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem27 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod24, (double) 3);
        boolean boolean28 = timeSeries1.equals((java.lang.Object) timeSeriesDataItem27);
        java.util.List list29 = timeSeries1.data;
        boolean boolean30 = timeSeries1.isEmpty();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(timeSeriesDataItem14);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711911599999L + "'", long23 == 1711911599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711868399999L + "'", long25 == 1711868399999L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1127");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(31);
        java.lang.String str2 = year1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "31" + "'", str2, "31");
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1128");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMinY();
        java.util.Collection collection12 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries6);
        timeSeries6.setRangeDescription("");
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        java.util.Date date21 = day17.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond22 = new org.jfree.data.time.FixedMillisecond(date21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = fixedMillisecond22.next();
        int int24 = timeSeries6.getIndex(regularTimePeriod23);
        java.lang.Number number25 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem26 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod23, number25);
        java.lang.Number number27 = timeSeriesDataItem26.getValue();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(collection12);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(number27);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1129");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double5 = timeSeries4.getMaxY();
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        java.lang.Number number7 = null;
        timeSeries4.add((org.jfree.data.time.RegularTimePeriod) day6, number7, false);
        double double10 = timeSeries4.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem18 = timeSeries4.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day13, (java.lang.Number) 1711911599999L);
        java.lang.Object obj19 = timeSeriesDataItem18.clone();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem20 = timeSeries1.addOrUpdate(timeSeriesDataItem18);
        // The following exception was thrown during execution in test generation
        try {
            timeSeriesDataItem20.setValue((java.lang.Number) (-61867512000001L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(timeSeriesDataItem18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(timeSeriesDataItem20);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1130");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        java.lang.String str24 = timeSeries1.getDescription();
        double double25 = timeSeries1.getMaxY();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.update((int) '#', (java.lang.Number) 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1131");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        timeSeries1.setMaximumItemCount((int) ' ');
        timeSeries1.fireSeriesChanged();
        timeSeries1.setMaximumItemAge((long) 2);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries15.addChangeListener(seriesChangeListener16);
        long long18 = timeSeries15.getMaximumItemAge();
        java.lang.String str19 = timeSeries15.getDescription();
        int int20 = timeSeries15.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        java.util.Date date27 = day23.getStart();
        org.jfree.data.time.SerialDate serialDate28 = day23.getSerialDate();
        java.lang.String str29 = day23.toString();
        java.lang.Number number30 = null;
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day23, number30);
        java.lang.String str32 = timeSeries15.getDomainDescription();
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries1.addAndOrUpdate(timeSeries15);
        boolean boolean34 = timeSeries1.isEmpty();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 9223372036854775807L + "'", long18 == 9223372036854775807L);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31-March-2024" + "'", str29, "31-March-2024");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Time" + "'", str32, "Time");
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1132");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        java.util.Calendar calendar11 = null;
        long long12 = fixedMillisecond7.getMiddleMillisecond(calendar11);
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getLastMillisecond(calendar13);
        java.util.Calendar calendar15 = null;
        long long16 = fixedMillisecond7.getLastMillisecond(calendar15);
        org.jfree.data.time.Month month17 = new org.jfree.data.time.Month();
        long long18 = month17.getFirstMillisecond();
        org.jfree.data.time.Year year19 = month17.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = year19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = year19.previous();
        int int22 = fixedMillisecond7.compareTo((java.lang.Object) year19);
        java.util.Date date23 = fixedMillisecond7.getTime();
        java.util.TimeZone timeZone24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year25 = new org.jfree.data.time.Year(date23, timeZone24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1709280000000L + "'", long18 == 1709280000000L);
        org.junit.Assert.assertNotNull(year19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1133");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.addChangeListener(seriesChangeListener9);
        timeSeries1.setDomainDescription("hi!");
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        int int15 = day13.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = day13.next();
        timeSeries1.add(regularTimePeriod16, (java.lang.Number) 1);
        double double19 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        long long24 = timeSeries21.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        long long29 = timeSeries26.getMaximumItemAge();
        java.lang.String str30 = timeSeries26.getDescription();
        double double31 = timeSeries26.getMinY();
        java.util.Collection collection32 = timeSeries21.getTimePeriodsUniqueToOtherSeries(timeSeries26);
        timeSeries26.setRangeDescription("");
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day();
        timeSeries36.add((org.jfree.data.time.RegularTimePeriod) day37, (double) (short) 0, false);
        java.util.Date date41 = day37.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond42 = new org.jfree.data.time.FixedMillisecond(date41);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = fixedMillisecond42.next();
        int int44 = timeSeries26.getIndex(regularTimePeriod43);
        boolean boolean45 = timeSeries1.equals((java.lang.Object) int44);
        org.jfree.data.time.TimeSeries timeSeries47 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        timeSeries47.add((org.jfree.data.time.RegularTimePeriod) day48, (double) (short) 0, false);
        timeSeries47.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod54 = timeSeries47.getNextTimePeriod();
        java.util.Collection collection55 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries47);
        org.jfree.data.time.Month month58 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number59 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem60 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month58, number59);
        long long61 = month58.getSerialIndex();
        java.util.Date date62 = month58.getStart();
        org.jfree.data.time.Year year63 = new org.jfree.data.time.Year(date62);
        boolean boolean64 = timeSeries1.equals((java.lang.Object) date62);
        java.util.TimeZone timeZone65 = null;
        java.util.Locale locale66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month67 = new org.jfree.data.time.Month(date62, timeZone65, locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9223372036854775807L + "'", long29 == 9223372036854775807L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod54);
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 118L + "'", long61 == 118L);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1134");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double4 = timeSeries3.getMaxY();
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        java.lang.Number number6 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day5, number6, false);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day5);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        timeSeries11.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = timeSeries11.getNextTimePeriod();
        timeSeries11.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year22 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries11.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year22);
        java.util.Collection collection24 = timeSeries9.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        java.lang.String str25 = timeSeries11.getRangeDescription();
        timeSeries11.removeAgedItems(false);
        timeSeries11.clear();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries11, seriesChangeInfo29);
        java.util.Collection collection31 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.addChangeListener(seriesChangeListener34);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        timeSeries37.add((org.jfree.data.time.RegularTimePeriod) day38, (double) (short) 0, false);
        timeSeries37.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = timeSeries37.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent46 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean47 = timeSeries37.equals((java.lang.Object) seriesChangeEvent46);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        int int50 = day48.compareTo((java.lang.Object) (short) 100);
        java.lang.String str51 = day48.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem52 = timeSeries37.getDataItem((org.jfree.data.time.RegularTimePeriod) day48);
        timeSeriesDataItem52.setSelected(false);
        timeSeriesDataItem52.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem57 = timeSeries33.addOrUpdate(timeSeriesDataItem52);
        boolean boolean58 = timeSeries11.equals((java.lang.Object) timeSeries33);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener59 = null;
        timeSeries33.addChangeListener(seriesChangeListener59);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value" + "'", str25, "Value");
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "31-March-2024" + "'", str51, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem52);
        org.junit.Assert.assertNull(timeSeriesDataItem57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1135");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Day day3 = new org.jfree.data.time.Day(7, 2, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The 'year' argument must be in range 1900 to 9999.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1136");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        int int8 = timeSeries1.getItemCount();
        double double9 = timeSeries1.getMinY();
        double double10 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        timeSeries12.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = timeSeries12.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries12.addChangeListener(seriesChangeListener20);
        timeSeries12.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        java.util.Date date30 = day26.getStart();
        java.lang.Number number31 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day26, number31);
        long long33 = day26.getFirstMillisecond();
        long long34 = day26.getFirstMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) day26);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = day26.next();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711868400000L + "'", long33 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1711868400000L + "'", long34 == 1711868400000L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem35);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1137");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getFirstMillisecond(calendar9);
        long long11 = fixedMillisecond7.getLastMillisecond();
        long long12 = fixedMillisecond7.getLastMillisecond();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1138");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        java.util.Calendar calendar9 = null;
        fixedMillisecond7.peg(calendar9);
        long long11 = fixedMillisecond7.getMiddleMillisecond();
        long long12 = fixedMillisecond7.getMiddleMillisecond();
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getFirstMillisecond(calendar13);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1139");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        boolean boolean5 = timeSeries1.equals((java.lang.Object) 100);
        java.lang.Class class6 = timeSeries1.timePeriodClass;
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        int int9 = day7.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = day7.next();
        java.util.Date date11 = day7.getStart();
        timeSeries1.setKey((java.lang.Comparable) date11);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(class6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1140");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double27 = timeSeries26.getMaxY();
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        java.lang.Number number29 = null;
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day28, number29, false);
        double double32 = timeSeries26.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        timeSeries34.add((org.jfree.data.time.RegularTimePeriod) day35, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries26.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day35, (java.lang.Number) 1711911599999L);
        int int42 = timeSeriesDataItem40.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries1.addOrUpdate(timeSeriesDataItem40);
        timeSeriesDataItem43.setValue((java.lang.Number) 1);
        org.jfree.data.time.Year year47 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        int int49 = day48.getMonth();
        java.util.Date date50 = day48.getEnd();
        boolean boolean51 = year47.equals((java.lang.Object) day48);
        boolean boolean52 = timeSeriesDataItem43.equals((java.lang.Object) day48);
        org.jfree.data.time.TimeSeries timeSeries55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day48, "97", "org.jfree.data.event.SeriesChangeEvent[source=10.0]");
        double double56 = timeSeries55.getMaxY();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "31-March-2024" + "'", str22, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1141");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        int int3 = month0.getYearValue();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException5 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException7 = new org.jfree.data.time.TimePeriodFormatException("");
        timePeriodFormatException5.addSuppressed((java.lang.Throwable) timePeriodFormatException7);
        int int9 = month0.compareTo((java.lang.Object) timePeriodFormatException5);
        int int10 = month0.getMonth();
        long long11 = month0.getLastMillisecond();
        long long12 = month0.getSerialIndex();
        long long13 = month0.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2024 + "'", int3 == 2024);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711954799999L + "'", long11 == 1711954799999L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 24291L + "'", long12 == 24291L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711954799999L + "'", long13 == 1711954799999L);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1142");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        long long3 = day0.getMiddleMillisecond();
        int int4 = day0.getYear();
        boolean boolean6 = day0.equals((java.lang.Object) 5);
        int int7 = day0.getDayOfMonth();
        java.lang.String str8 = day0.toString();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day0, "Value", "hi!");
        timeSeries11.setDescription("8");
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries15.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.removeChangeListener(seriesChangeListener22);
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = timeSeries21.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day26, (java.lang.Number) 10L);
        long long32 = day26.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries15.createCopy((org.jfree.data.time.RegularTimePeriod) month18, (org.jfree.data.time.RegularTimePeriod) day26);
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener36 = null;
        timeSeries35.addChangeListener(seriesChangeListener36);
        org.jfree.data.time.Month month38 = new org.jfree.data.time.Month();
        long long39 = month38.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener42 = null;
        timeSeries41.removeChangeListener(seriesChangeListener42);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day46 = new org.jfree.data.time.Day();
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day46, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem51 = timeSeries41.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day46, (java.lang.Number) 10L);
        long long52 = day46.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries53 = timeSeries35.createCopy((org.jfree.data.time.RegularTimePeriod) month38, (org.jfree.data.time.RegularTimePeriod) day46);
        org.jfree.data.time.TimeSeries timeSeries55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        timeSeries55.add((org.jfree.data.time.RegularTimePeriod) day56, (double) (short) 0, false);
        timeSeries55.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = timeSeries55.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent64 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean65 = timeSeries55.equals((java.lang.Object) seriesChangeEvent64);
        org.jfree.data.time.Day day66 = new org.jfree.data.time.Day();
        int int68 = day66.compareTo((java.lang.Object) (short) 100);
        java.lang.String str69 = day66.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem70 = timeSeries55.getDataItem((org.jfree.data.time.RegularTimePeriod) day66);
        timeSeriesDataItem70.setSelected(false);
        timeSeriesDataItem70.setValue((java.lang.Number) (byte) 100);
        boolean boolean75 = timeSeriesDataItem70.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem76 = timeSeries35.addOrUpdate(timeSeriesDataItem70);
        org.jfree.data.time.Day day77 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem79 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day77, (java.lang.Number) (byte) 10);
        int int80 = timeSeriesDataItem70.compareTo((java.lang.Object) (byte) 10);
        boolean boolean81 = month18.equals((java.lang.Object) timeSeriesDataItem70);
        long long82 = month18.getFirstMillisecond();
        java.util.Date date83 = month18.getStart();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem84 = timeSeries11.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month18);
        int int85 = month18.getMonth();
        org.jfree.data.time.Year year86 = month18.getYear();
        java.util.Calendar calendar87 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long88 = month18.getFirstMillisecond(calendar87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711911599999L + "'", long3 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "31-March-2024" + "'", str8, "31-March-2024");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1709280000000L + "'", long19 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711911599999L + "'", long32 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1709280000000L + "'", long39 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711911599999L + "'", long52 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries53);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "31-March-2024" + "'", str69, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1709280000000L + "'", long82 == 1709280000000L);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Fri Mar 01 00:00:00 PST 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertNotNull(year86);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1143");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date3 = month2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = month2.next();
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        timeSeries6.add((org.jfree.data.time.RegularTimePeriod) day7, (double) (short) 0, false);
        timeSeries6.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = timeSeries6.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent15 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean16 = timeSeries6.equals((java.lang.Object) seriesChangeEvent15);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double19 = timeSeries18.getMaxY();
        java.lang.Comparable comparable20 = timeSeries18.getKey();
        org.jfree.data.time.TimeSeries timeSeries21 = timeSeries6.addAndOrUpdate(timeSeries18);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries6.addChangeListener(seriesChangeListener22);
        int int24 = month2.compareTo((java.lang.Object) seriesChangeListener22);
        java.util.Calendar calendar25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = month2.getFirstMillisecond(calendar25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + comparable20 + "' != '" + 100L + "'", comparable20, 100L);
        org.junit.Assert.assertNotNull(timeSeries21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1144");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.SerialDate serialDate14 = day9.getSerialDate();
        java.lang.String str15 = day9.toString();
        java.lang.Number number16 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day9, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        int int30 = timeSeries19.getItemCount();
        java.util.List list31 = timeSeries19.getItems();
        timeSeries1.data = list31;
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo33 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent34 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries1, seriesChangeInfo33);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(list31);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1145");
        java.lang.Class class0 = null;
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        java.util.Date date7 = day3.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond8 = new org.jfree.data.time.FixedMillisecond(date7);
        java.util.TimeZone timeZone9 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date7, timeZone9);
        org.jfree.data.time.FixedMillisecond fixedMillisecond11 = new org.jfree.data.time.FixedMillisecond(date7);
        java.util.Calendar calendar12 = null;
        fixedMillisecond11.peg(calendar12);
        java.util.Calendar calendar14 = null;
        long long15 = fixedMillisecond11.getFirstMillisecond(calendar14);
        java.util.Date date16 = fixedMillisecond11.getEnd();
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1711868400000L + "'", long15 == 1711868400000L);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1146");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        long long17 = day12.getSerialIndex();
        long long18 = day12.getSerialIndex();
        int int19 = day12.getYear();
        java.util.Calendar calendar20 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long21 = day12.getFirstMillisecond(calendar20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 45382L + "'", long17 == 45382L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 45382L + "'", long18 == 45382L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2024 + "'", int19 == 2024);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1147");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        long long2 = timeSeries1.getMaximumItemAge();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 9223372036854775807L + "'", long2 == 9223372036854775807L);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1148");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        long long9 = fixedMillisecond7.getFirstMillisecond();
        long long10 = fixedMillisecond7.getSerialIndex();
        long long11 = fixedMillisecond7.getFirstMillisecond();
        java.util.Date date12 = fixedMillisecond7.getTime();
        java.lang.Class<?> wildcardClass13 = fixedMillisecond7.getClass();
        java.lang.Class class14 = org.jfree.data.time.RegularTimePeriod.downsize((java.lang.Class) wildcardClass13);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711868400000L + "'", long9 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(class14);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1149");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = day10.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = regularTimePeriod16.next();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1150");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month((int) (short) 1, (int) 'a');
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1151");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double4 = timeSeries3.getMaxY();
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        java.lang.Number number6 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day5, number6, false);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day5);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        timeSeries11.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = timeSeries11.getNextTimePeriod();
        timeSeries11.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year22 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries11.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year22);
        java.util.Collection collection24 = timeSeries9.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        java.lang.String str25 = timeSeries11.getRangeDescription();
        timeSeries11.removeAgedItems(false);
        timeSeries11.clear();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries11, seriesChangeInfo29);
        java.util.Collection collection31 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        timeSeries1.setDomainDescription("org.jfree.data.general.SeriesException: ");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value" + "'", str25, "Value");
        org.junit.Assert.assertNotNull(collection31);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1152");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem13 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond7, (double) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = fixedMillisecond7.previous();
        long long15 = fixedMillisecond7.getSerialIndex();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1711868400000L + "'", long15 == 1711868400000L);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1153");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        long long3 = year2.getFirstMillisecond();
        long long4 = year2.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month();
        long long10 = month9.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.removeChangeListener(seriesChangeListener13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 10L);
        long long23 = day17.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries24 = timeSeries6.createCopy((org.jfree.data.time.RegularTimePeriod) month9, (org.jfree.data.time.RegularTimePeriod) day17);
        double double25 = timeSeries24.getMinY();
        boolean boolean26 = year2.equals((java.lang.Object) timeSeries24);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1704096000000L + "'", long3 == 1704096000000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1704096000000L + "'", long4 == 1704096000000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1709280000000L + "'", long10 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711911599999L + "'", long23 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1154");
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent1 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo2 = null;
        seriesChangeEvent1.setSummary(seriesChangeInfo2);
        java.lang.Object obj4 = seriesChangeEvent1.getSource();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo5 = seriesChangeEvent1.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo6 = seriesChangeEvent1.getSummary();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 10.0d + "'", obj4, 10.0d);
        org.junit.Assert.assertNull(seriesChangeInfo5);
        org.junit.Assert.assertNull(seriesChangeInfo6);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1155");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.addChangeListener(seriesChangeListener9);
        timeSeries1.setDomainDescription("hi!");
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        int int15 = day13.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = day13.next();
        timeSeries1.add(regularTimePeriod16, (java.lang.Number) 1);
        double double19 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        long long24 = timeSeries21.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.addChangeListener(seriesChangeListener27);
        long long29 = timeSeries26.getMaximumItemAge();
        java.lang.String str30 = timeSeries26.getDescription();
        double double31 = timeSeries26.getMinY();
        java.util.Collection collection32 = timeSeries21.getTimePeriodsUniqueToOtherSeries(timeSeries26);
        timeSeries26.setRangeDescription("");
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day();
        timeSeries36.add((org.jfree.data.time.RegularTimePeriod) day37, (double) (short) 0, false);
        java.util.Date date41 = day37.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond42 = new org.jfree.data.time.FixedMillisecond(date41);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = fixedMillisecond42.next();
        int int44 = timeSeries26.getIndex(regularTimePeriod43);
        boolean boolean45 = timeSeries1.equals((java.lang.Object) int44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number47 = timeSeries1.getValue(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 9223372036854775807L + "'", long29 == 9223372036854775807L);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(collection32);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1156");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMinY();
        timeSeries1.removeAgedItems(false);
        timeSeries1.setMaximumItemAge(1711911599999L);
        java.lang.Comparable comparable11 = timeSeries1.getKey();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + comparable11 + "' != '" + (short) 100 + "'", comparable11, (short) 100);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1157");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        org.jfree.data.time.Month month24 = new org.jfree.data.time.Month();
        long long25 = month24.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener28 = null;
        timeSeries27.removeChangeListener(seriesChangeListener28);
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        timeSeries31.add((org.jfree.data.time.RegularTimePeriod) day32, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries27.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day32, (java.lang.Number) 10L);
        long long38 = day32.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries39 = timeSeries21.createCopy((org.jfree.data.time.RegularTimePeriod) month24, (org.jfree.data.time.RegularTimePeriod) day32);
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        timeSeries41.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = timeSeries41.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent50 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean51 = timeSeries41.equals((java.lang.Object) seriesChangeEvent50);
        org.jfree.data.time.Day day52 = new org.jfree.data.time.Day();
        int int54 = day52.compareTo((java.lang.Object) (short) 100);
        java.lang.String str55 = day52.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem56 = timeSeries41.getDataItem((org.jfree.data.time.RegularTimePeriod) day52);
        timeSeriesDataItem56.setSelected(false);
        timeSeriesDataItem56.setValue((java.lang.Number) (byte) 100);
        boolean boolean61 = timeSeriesDataItem56.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem62 = timeSeries21.addOrUpdate(timeSeriesDataItem56);
        org.jfree.data.time.Day day63 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem65 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day63, (java.lang.Number) (byte) 10);
        int int66 = timeSeriesDataItem56.compareTo((java.lang.Object) (byte) 10);
        boolean boolean67 = month4.equals((java.lang.Object) timeSeriesDataItem56);
        long long68 = month4.getFirstMillisecond();
        java.util.Date date69 = month4.getStart();
        java.util.TimeZone timeZone70 = null;
        java.util.Locale locale71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month72 = new org.jfree.data.time.Month(date69, timeZone70, locale71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1709280000000L + "'", long25 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1711911599999L + "'", long38 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries39);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "31-March-2024" + "'", str55, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1709280000000L + "'", long68 == 1709280000000L);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Fri Mar 01 00:00:00 PST 2024");
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1158");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        long long3 = day0.getMiddleMillisecond();
        int int4 = day0.getYear();
        boolean boolean6 = day0.equals((java.lang.Object) 5);
        int int7 = day0.getDayOfMonth();
        java.lang.String str8 = day0.toString();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day0, "Value", "hi!");
        timeSeries11.setDescription("8");
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries15.addChangeListener(seriesChangeListener16);
        org.jfree.data.time.Month month18 = new org.jfree.data.time.Month();
        long long19 = month18.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.removeChangeListener(seriesChangeListener22);
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = timeSeries21.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day26, (java.lang.Number) 10L);
        long long32 = day26.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries15.createCopy((org.jfree.data.time.RegularTimePeriod) month18, (org.jfree.data.time.RegularTimePeriod) day26);
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener36 = null;
        timeSeries35.addChangeListener(seriesChangeListener36);
        org.jfree.data.time.Month month38 = new org.jfree.data.time.Month();
        long long39 = month38.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener42 = null;
        timeSeries41.removeChangeListener(seriesChangeListener42);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day46 = new org.jfree.data.time.Day();
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day46, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem51 = timeSeries41.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day46, (java.lang.Number) 10L);
        long long52 = day46.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries53 = timeSeries35.createCopy((org.jfree.data.time.RegularTimePeriod) month38, (org.jfree.data.time.RegularTimePeriod) day46);
        org.jfree.data.time.TimeSeries timeSeries55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        timeSeries55.add((org.jfree.data.time.RegularTimePeriod) day56, (double) (short) 0, false);
        timeSeries55.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = timeSeries55.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent64 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean65 = timeSeries55.equals((java.lang.Object) seriesChangeEvent64);
        org.jfree.data.time.Day day66 = new org.jfree.data.time.Day();
        int int68 = day66.compareTo((java.lang.Object) (short) 100);
        java.lang.String str69 = day66.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem70 = timeSeries55.getDataItem((org.jfree.data.time.RegularTimePeriod) day66);
        timeSeriesDataItem70.setSelected(false);
        timeSeriesDataItem70.setValue((java.lang.Number) (byte) 100);
        boolean boolean75 = timeSeriesDataItem70.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem76 = timeSeries35.addOrUpdate(timeSeriesDataItem70);
        org.jfree.data.time.Day day77 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem79 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day77, (java.lang.Number) (byte) 10);
        int int80 = timeSeriesDataItem70.compareTo((java.lang.Object) (byte) 10);
        boolean boolean81 = month18.equals((java.lang.Object) timeSeriesDataItem70);
        long long82 = month18.getFirstMillisecond();
        java.util.Date date83 = month18.getStart();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem84 = timeSeries11.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month18);
        long long85 = month18.getSerialIndex();
        java.lang.String str86 = month18.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = month18.next();
        java.util.Calendar calendar88 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long89 = month18.getLastMillisecond(calendar88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711911599999L + "'", long3 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "31-March-2024" + "'", str8, "31-March-2024");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1709280000000L + "'", long19 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711911599999L + "'", long32 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1709280000000L + "'", long39 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711911599999L + "'", long52 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries53);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "31-March-2024" + "'", str69, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1709280000000L + "'", long82 == 1709280000000L);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Fri Mar 01 00:00:00 PST 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 24291L + "'", long85 == 24291L);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "March 2024" + "'", str86, "March 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod87);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1159");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.clear();
        timeSeries1.removeAgedItems((long) 5, false);
        org.jfree.data.time.Month month7 = new org.jfree.data.time.Month();
        long long8 = month7.getFirstMillisecond();
        org.jfree.data.time.Year year9 = month7.getYear();
        java.lang.String str10 = month7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = month7.previous();
        long long12 = month7.getFirstMillisecond();
        java.lang.String str13 = month7.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = month7.previous();
        org.jfree.data.time.Month month15 = new org.jfree.data.time.Month();
        long long16 = month15.getFirstMillisecond();
        org.jfree.data.time.Year year17 = month15.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = year17.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = year17.previous();
        int int20 = year17.getYear();
        java.lang.String str21 = year17.toString();
        long long22 = year17.getSerialIndex();
        org.jfree.data.time.TimeSeries timeSeries23 = timeSeries1.createCopy(regularTimePeriod14, (org.jfree.data.time.RegularTimePeriod) year17);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1709280000000L + "'", long8 == 1709280000000L);
        org.junit.Assert.assertNotNull(year9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "March 2024" + "'", str10, "March 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1709280000000L + "'", long12 == 1709280000000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "March 2024" + "'", str13, "March 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1709280000000L + "'", long16 == 1709280000000L);
        org.junit.Assert.assertNotNull(year17);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2024 + "'", int20 == 2024);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2024" + "'", str21, "2024");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2024L + "'", long22 == 2024L);
        org.junit.Assert.assertNotNull(timeSeries23);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1160");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = year2.previous();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = year2.previous();
        java.lang.Object obj7 = null;
        int int8 = year2.compareTo(obj7);
        java.util.Date date9 = year2.getEnd();
        java.util.Calendar calendar10 = null;
        // The following exception was thrown during execution in test generation
        try {
            year2.peg(calendar10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Dec 31 23:59:59 PST 2024");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1161");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMinY();
        timeSeries1.removeAgedItems(false);
        timeSeries1.setMaximumItemAge(1711911599999L);
        timeSeries1.fireSeriesChanged();
        java.lang.Class class12 = timeSeries1.getTimePeriodClass();
        timeSeries1.setMaximumItemAge(1711938999750L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNull(class12);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1162");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        timeSeries1.clear();
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem7 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day5, (java.lang.Number) (byte) 10);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day5, (java.lang.Number) 12, true);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        java.util.Date date17 = day13.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond18 = new org.jfree.data.time.FixedMillisecond(date17);
        java.util.Date date19 = fixedMillisecond18.getTime();
        java.util.Calendar calendar20 = null;
        long long21 = fixedMillisecond18.getLastMillisecond(calendar20);
        long long22 = fixedMillisecond18.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = fixedMillisecond18.next();
        java.util.Calendar calendar24 = null;
        long long25 = fixedMillisecond18.getMiddleMillisecond(calendar24);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        double double28 = timeSeries27.getMinY();
        timeSeries27.setDescription("March 2024");
        timeSeries27.removeAgedItems(0L, true);
        double double34 = timeSeries27.getMaxY();
        int int35 = fixedMillisecond18.compareTo((java.lang.Object) timeSeries27);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond18);
        java.lang.Class class37 = null;
        org.jfree.data.time.TimeSeries timeSeries39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day40 = new org.jfree.data.time.Day();
        timeSeries39.add((org.jfree.data.time.RegularTimePeriod) day40, (double) (short) 0, false);
        java.util.Date date44 = day40.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond45 = new org.jfree.data.time.FixedMillisecond(date44);
        java.util.TimeZone timeZone46 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = org.jfree.data.time.RegularTimePeriod.createInstance(class37, date44, timeZone46);
        org.jfree.data.time.FixedMillisecond fixedMillisecond48 = new org.jfree.data.time.FixedMillisecond(date44);
        long long49 = fixedMillisecond48.getFirstMillisecond();
        boolean boolean51 = fixedMillisecond48.equals((java.lang.Object) 1709280000000L);
        long long52 = fixedMillisecond48.getFirstMillisecond();
        long long53 = fixedMillisecond48.getSerialIndex();
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) fixedMillisecond48, (java.lang.Number) (short) 0);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1711868400000L + "'", long21 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711868400000L + "'", long22 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711868400000L + "'", long25 == 1711868400000L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem36);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1711868400000L + "'", long49 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711868400000L + "'", long52 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1711868400000L + "'", long53 == 1711868400000L);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1163");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMinY();
        java.util.Collection collection12 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries6);
        timeSeries6.setRangeDescription("");
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        java.util.Date date21 = day17.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond22 = new org.jfree.data.time.FixedMillisecond(date21);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = fixedMillisecond22.next();
        int int24 = timeSeries6.getIndex(regularTimePeriod23);
        java.lang.Number number25 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem26 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod23, number25);
        int int28 = timeSeriesDataItem26.compareTo((java.lang.Object) 6);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(collection12);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1164");
        org.jfree.data.time.RegularTimePeriod regularTimePeriod0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem2 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod0, (java.lang.Number) (-61851744000000L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'period' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1165");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double27 = timeSeries26.getMaxY();
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        java.lang.Number number29 = null;
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day28, number29, false);
        double double32 = timeSeries26.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        timeSeries34.add((org.jfree.data.time.RegularTimePeriod) day35, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries26.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day35, (java.lang.Number) 1711911599999L);
        int int42 = timeSeriesDataItem40.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries1.addOrUpdate(timeSeriesDataItem40);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double46 = timeSeries45.getMaxY();
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        java.lang.Number number48 = null;
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day47, number48, false);
        double double51 = timeSeries45.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day54 = new org.jfree.data.time.Day();
        timeSeries53.add((org.jfree.data.time.RegularTimePeriod) day54, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day54, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries62 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        org.jfree.data.time.TimeSeries timeSeries64 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day65 = new org.jfree.data.time.Day();
        timeSeries64.add((org.jfree.data.time.RegularTimePeriod) day65, (double) (short) 0, false);
        timeSeries64.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries72 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day73 = new org.jfree.data.time.Day();
        timeSeries72.add((org.jfree.data.time.RegularTimePeriod) day73, (double) (short) 0, false);
        java.util.Date date77 = day73.getStart();
        int int78 = timeSeries64.getIndex((org.jfree.data.time.RegularTimePeriod) day73);
        java.lang.Class class79 = timeSeries64.timePeriodClass;
        org.jfree.data.time.Day day80 = new org.jfree.data.time.Day();
        int int81 = day80.getMonth();
        java.util.Date date82 = day80.getEnd();
        java.util.TimeZone timeZone83 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date82, timeZone83);
        boolean boolean85 = timeSeries62.equals((java.lang.Object) timeZone83);
        org.jfree.data.time.TimeSeries timeSeries86 = timeSeries1.addAndOrUpdate(timeSeries62);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries62.delete(11, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "31-March-2024" + "'", str22, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(class79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(timeSeries86);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1166");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        timeSeries1.setMaximumItemCount((int) ' ');
        timeSeries1.fireSeriesChanged();
        timeSeries1.setMaximumItemAge((long) 2);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries15.addChangeListener(seriesChangeListener16);
        long long18 = timeSeries15.getMaximumItemAge();
        java.lang.String str19 = timeSeries15.getDescription();
        int int20 = timeSeries15.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        java.util.Date date27 = day23.getStart();
        org.jfree.data.time.SerialDate serialDate28 = day23.getSerialDate();
        java.lang.String str29 = day23.toString();
        java.lang.Number number30 = null;
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day23, number30);
        java.lang.String str32 = timeSeries15.getDomainDescription();
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries1.addAndOrUpdate(timeSeries15);
        boolean boolean34 = timeSeries15.isEmpty();
        timeSeries15.setKey((java.lang.Comparable) (short) -1);
        timeSeries15.removeAgedItems(false);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 9223372036854775807L + "'", long18 == 9223372036854775807L);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31-March-2024" + "'", str29, "31-March-2024");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Time" + "'", str32, "Time");
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1167");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        timeSeries1.setMaximumItemAge(1711938995383L);
        java.util.List list10 = timeSeries1.data;
        long long11 = timeSeries1.getMaximumItemAge();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711938995383L + "'", long11 == 1711938995383L);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1168");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        java.lang.Object obj16 = timeSeriesDataItem15.clone();
        org.jfree.data.time.Month month17 = new org.jfree.data.time.Month();
        long long18 = month17.getFirstMillisecond();
        org.jfree.data.time.Year year19 = month17.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = year19.previous();
        long long21 = regularTimePeriod20.getMiddleMillisecond();
        boolean boolean22 = timeSeriesDataItem15.equals((java.lang.Object) long21);
        org.jfree.data.time.Month month23 = new org.jfree.data.time.Month();
        long long24 = month23.getFirstMillisecond();
        long long25 = month23.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = month23.next();
        long long27 = month23.getLastMillisecond();
        boolean boolean28 = timeSeriesDataItem15.equals((java.lang.Object) long27);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1709280000000L + "'", long18 == 1709280000000L);
        org.junit.Assert.assertNotNull(year19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1688327999999L + "'", long21 == 1688327999999L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1709280000000L + "'", long24 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 24291L + "'", long25 == 24291L);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1711954799999L + "'", long27 == 1711954799999L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1169");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getMiddleMillisecond();
        long long12 = fixedMillisecond7.getSerialIndex();
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getLastMillisecond(calendar13);
        java.util.Date date15 = fixedMillisecond7.getStart();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1170");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setDomainDescription("");
        int int22 = timeSeries1.getItemCount();
        int int23 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        timeSeries25.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day34, (double) (short) 0, false);
        timeSeries33.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        java.util.Date date46 = day42.getStart();
        org.jfree.data.time.SerialDate serialDate47 = day42.getSerialDate();
        java.lang.Number number48 = null;
        timeSeries33.update((org.jfree.data.time.RegularTimePeriod) day42, number48);
        java.lang.Number number50 = timeSeries25.getValue((org.jfree.data.time.RegularTimePeriod) day42);
        timeSeries25.removeAgedItems(true);
        org.jfree.data.time.TimeSeries timeSeries53 = timeSeries1.addAndOrUpdate(timeSeries25);
        org.jfree.data.time.TimeSeries timeSeries55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        timeSeries55.add((org.jfree.data.time.RegularTimePeriod) day56, (double) (short) 0, false);
        timeSeries55.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod62 = timeSeries55.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener63 = null;
        timeSeries55.addChangeListener(seriesChangeListener63);
        timeSeries55.setDomainDescription("hi!");
        org.jfree.data.time.Day day67 = new org.jfree.data.time.Day();
        int int69 = day67.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = day67.next();
        timeSeries55.add(regularTimePeriod70, (java.lang.Number) 1);
        org.jfree.data.time.Month month75 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number76 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem77 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month75, number76);
        long long78 = month75.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem79 = timeSeries55.getDataItem((org.jfree.data.time.RegularTimePeriod) month75);
        int int80 = month75.getYearValue();
        timeSeries25.update((org.jfree.data.time.RegularTimePeriod) month75, (java.lang.Number) 8);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate47);
        org.junit.Assert.assertEquals("'" + number50 + "' != '" + 0.0d + "'", number50, 0.0d);
        org.junit.Assert.assertNotNull(timeSeries53);
        org.junit.Assert.assertNotNull(regularTimePeriod62);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 118L + "'", long78 == 118L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1171");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3);
        long long8 = day3.getSerialIndex();
        int int9 = day3.getDayOfMonth();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 45382L + "'", long8 == 45382L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1172");
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (-62167363200000L), "org.jfree.data.event.SeriesChangeEvent[source=class org.jfree.data.time.Day]", "2024");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1173");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        long long24 = timeSeries21.getMaximumItemAge();
        java.lang.String str25 = timeSeries21.getDescription();
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        timeSeries27.add((org.jfree.data.time.RegularTimePeriod) day28, (double) (short) 0, false);
        java.util.Date date32 = day28.getStart();
        long long33 = day28.getFirstMillisecond();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day28, (java.lang.Number) 10, false);
        java.util.List list37 = timeSeries21.data;
        java.lang.String str38 = timeSeries21.getDomainDescription();
        timeSeries21.setDescription("hi!");
        java.lang.Comparable comparable41 = timeSeries21.getKey();
        timeSeries21.setDescription("2024");
        org.jfree.data.time.Month month44 = new org.jfree.data.time.Month();
        long long45 = month44.getFirstMillisecond();
        long long46 = month44.getSerialIndex();
        long long47 = month44.getSerialIndex();
        int int48 = month44.getMonth();
        org.jfree.data.time.TimeSeries timeSeries50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 2147483647);
        int int51 = timeSeries50.getMaximumItemCount();
        int int52 = month44.compareTo((java.lang.Object) timeSeries50);
        java.util.Collection collection53 = timeSeries21.getTimePeriodsUniqueToOtherSeries(timeSeries50);
        org.jfree.data.time.TimeSeries timeSeries54 = timeSeries19.addAndOrUpdate(timeSeries21);
        org.jfree.data.time.Month month57 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date58 = month57.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond59 = new org.jfree.data.time.FixedMillisecond(date58);
        timeSeries21.setKey((java.lang.Comparable) date58);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711868400000L + "'", long33 == 1711868400000L);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Time" + "'", str38, "Time");
        org.junit.Assert.assertEquals("'" + comparable41 + "' != '" + (short) 100 + "'", comparable41, (short) 100);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1709280000000L + "'", long45 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 24291L + "'", long46 == 24291L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 24291L + "'", long47 == 24291L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(timeSeries54);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Oct 01 00:00:00 PST 9");
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1174");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        java.util.List list6 = timeSeries1.getItems();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond14 = new org.jfree.data.time.FixedMillisecond(date13);
        java.util.Date date15 = fixedMillisecond14.getTime();
        long long16 = fixedMillisecond14.getFirstMillisecond();
        long long17 = fixedMillisecond14.getSerialIndex();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) fixedMillisecond14, (double) (short) 0, true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1711868400000L + "'", long17 == 1711868400000L);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1175");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        double double2 = timeSeries1.getMinY();
        timeSeries1.setDescription("March 2024");
        timeSeries1.removeAgedItems(0L, true);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.setMaximumItemCount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative 'maximum' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1176");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        long long24 = timeSeries21.getMaximumItemAge();
        java.lang.String str25 = timeSeries21.getDescription();
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        timeSeries27.add((org.jfree.data.time.RegularTimePeriod) day28, (double) (short) 0, false);
        java.util.Date date32 = day28.getStart();
        long long33 = day28.getFirstMillisecond();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day28, (java.lang.Number) 10, false);
        java.util.List list37 = timeSeries21.data;
        java.lang.String str38 = timeSeries21.getDomainDescription();
        timeSeries21.setDescription("hi!");
        java.lang.Comparable comparable41 = timeSeries21.getKey();
        timeSeries21.setDescription("2024");
        org.jfree.data.time.Month month44 = new org.jfree.data.time.Month();
        long long45 = month44.getFirstMillisecond();
        long long46 = month44.getSerialIndex();
        long long47 = month44.getSerialIndex();
        int int48 = month44.getMonth();
        org.jfree.data.time.TimeSeries timeSeries50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 2147483647);
        int int51 = timeSeries50.getMaximumItemCount();
        int int52 = month44.compareTo((java.lang.Object) timeSeries50);
        java.util.Collection collection53 = timeSeries21.getTimePeriodsUniqueToOtherSeries(timeSeries50);
        org.jfree.data.time.TimeSeries timeSeries54 = timeSeries19.addAndOrUpdate(timeSeries21);
        org.jfree.data.time.TimeSeries timeSeries57 = timeSeries54.createCopy(4, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711868400000L + "'", long33 == 1711868400000L);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Time" + "'", str38, "Time");
        org.junit.Assert.assertEquals("'" + comparable41 + "' != '" + (short) 100 + "'", comparable41, (short) 100);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1709280000000L + "'", long45 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 24291L + "'", long46 == 24291L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 24291L + "'", long47 == 24291L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(collection53);
        org.junit.Assert.assertNotNull(timeSeries54);
        org.junit.Assert.assertNotNull(timeSeries57);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1177");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        timeSeries9.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = timeSeries9.getNextTimePeriod();
        timeSeries9.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year20 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries9.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year20);
        java.util.Collection collection22 = timeSeries7.getTimePeriodsUniqueToOtherSeries(timeSeries9);
        timeSeries9.setMaximumItemCount(12);
        java.lang.String str25 = timeSeries9.getDomainDescription();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(timeSeriesDataItem21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Time" + "'", str25, "Time");
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1178");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day(serialDate7);
        boolean boolean10 = day8.equals((java.lang.Object) 1.0d);
        org.jfree.data.time.SerialDate serialDate11 = day8.getSerialDate();
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day(serialDate11);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serialDate11);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1179");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        java.lang.String str3 = day0.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = day0.previous();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem6 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod4, (double) (-61867512000001L));
        timeSeriesDataItem6.setSelected(true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "31-March-2024" + "'", str3, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1180");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        java.lang.Object obj16 = timeSeriesDataItem15.clone();
        java.lang.Number number17 = timeSeriesDataItem15.getValue();
        boolean boolean18 = timeSeriesDataItem15.isSelected();
        java.lang.Class class19 = null;
        java.lang.Class class20 = null;
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        java.util.Date date27 = day23.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond28 = new org.jfree.data.time.FixedMillisecond(date27);
        java.util.TimeZone timeZone29 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = org.jfree.data.time.RegularTimePeriod.createInstance(class20, date27, timeZone29);
        java.util.TimeZone timeZone31 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class19, date27, timeZone31);
        org.jfree.data.time.FixedMillisecond fixedMillisecond33 = new org.jfree.data.time.FixedMillisecond(date27);
        org.jfree.data.time.Month month34 = new org.jfree.data.time.Month(date27);
        int int35 = timeSeriesDataItem15.compareTo((java.lang.Object) month34);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNull(number17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod30);
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1181");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        int int3 = month0.getYearValue();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException5 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException7 = new org.jfree.data.time.TimePeriodFormatException("");
        timePeriodFormatException5.addSuppressed((java.lang.Throwable) timePeriodFormatException7);
        int int9 = month0.compareTo((java.lang.Object) timePeriodFormatException5);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) int9, "org.jfree.data.event.SeriesChangeEvent[source=true]", "March 2024");
        java.util.Collection collection13 = timeSeries12.getTimePeriods();
        org.jfree.data.time.Month month14 = new org.jfree.data.time.Month();
        long long15 = month14.getFirstMillisecond();
        org.jfree.data.time.Year year16 = month14.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = year16.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = year16.previous();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = year16.previous();
        java.lang.Object obj21 = null;
        int int22 = year16.compareTo(obj21);
        java.util.Date date23 = year16.getEnd();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries12.getDataItem((org.jfree.data.time.RegularTimePeriod) year16);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day27, (double) (short) 0, false);
        java.util.Date date31 = day27.getStart();
        org.jfree.data.time.SerialDate serialDate32 = day27.getSerialDate();
        long long33 = day27.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = day27.previous();
        long long35 = regularTimePeriod34.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod34, (double) 3);
        int int38 = year16.compareTo((java.lang.Object) timeSeriesDataItem37);
        org.jfree.data.time.TimeSeries timeSeries40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener41 = null;
        timeSeries40.addChangeListener(seriesChangeListener41);
        long long43 = timeSeries40.getMaximumItemAge();
        java.lang.String str44 = timeSeries40.getDescription();
        org.jfree.data.time.TimeSeries timeSeries46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        timeSeries46.add((org.jfree.data.time.RegularTimePeriod) day47, (double) (short) 0, false);
        java.util.Date date51 = day47.getStart();
        long long52 = day47.getFirstMillisecond();
        timeSeries40.add((org.jfree.data.time.RegularTimePeriod) day47, (java.lang.Number) 10, false);
        java.util.List list56 = timeSeries40.data;
        java.lang.String str57 = timeSeries40.getDomainDescription();
        org.jfree.data.time.TimeSeries timeSeries59 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day60 = new org.jfree.data.time.Day();
        timeSeries59.add((org.jfree.data.time.RegularTimePeriod) day60, (double) (short) 0, false);
        timeSeries59.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = timeSeries59.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent68 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean69 = timeSeries59.equals((java.lang.Object) seriesChangeEvent68);
        org.jfree.data.time.Day day70 = new org.jfree.data.time.Day();
        int int72 = day70.compareTo((java.lang.Object) (short) 100);
        java.lang.String str73 = day70.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem74 = timeSeries59.getDataItem((org.jfree.data.time.RegularTimePeriod) day70);
        timeSeries40.delete((org.jfree.data.time.RegularTimePeriod) day70);
        boolean boolean77 = timeSeries40.equals((java.lang.Object) 2147483647);
        int int78 = timeSeriesDataItem37.compareTo((java.lang.Object) boolean77);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2024 + "'", int3 == 2024);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(collection13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1709280000000L + "'", long15 == 1709280000000L);
        org.junit.Assert.assertNotNull(year16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 31 23:59:59 PST 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem24);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711911599999L + "'", long33 == 1711911599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1711868399999L + "'", long35 == 1711868399999L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 9223372036854775807L + "'", long43 == 9223372036854775807L);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711868400000L + "'", long52 == 1711868400000L);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Time" + "'", str57, "Time");
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "31-March-2024" + "'", str73, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1182");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException1 = new org.jfree.data.time.TimePeriodFormatException("9");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException3 = new org.jfree.data.time.TimePeriodFormatException("org.jfree.data.time.TimePeriodFormatException: March 2024");
        timePeriodFormatException1.addSuppressed((java.lang.Throwable) timePeriodFormatException3);
        java.lang.String str5 = timePeriodFormatException1.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.jfree.data.time.TimePeriodFormatException: 9" + "'", str5, "org.jfree.data.time.TimePeriodFormatException: 9");
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1183");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3);
        java.lang.String str8 = timeSeries7.getDescription();
        timeSeries7.clear();
        timeSeries7.setRangeDescription("org.jfree.data.general.SeriesException: 31-March-2024");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1184");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number3 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem4 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, number3);
        boolean boolean5 = timeSeriesDataItem4.isSelected();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.addChangeListener(seriesChangeListener8);
        org.jfree.data.time.Month month10 = new org.jfree.data.time.Month();
        long long11 = month10.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener14 = null;
        timeSeries13.removeChangeListener(seriesChangeListener14);
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries13.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day18, (java.lang.Number) 10L);
        long long24 = day18.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = timeSeries7.createCopy((org.jfree.data.time.RegularTimePeriod) month10, (org.jfree.data.time.RegularTimePeriod) day18);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        timeSeries27.add((org.jfree.data.time.RegularTimePeriod) day28, (double) (short) 0, false);
        timeSeries27.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = timeSeries27.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent36 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean37 = timeSeries27.equals((java.lang.Object) seriesChangeEvent36);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        int int40 = day38.compareTo((java.lang.Object) (short) 100);
        java.lang.String str41 = day38.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = timeSeries27.getDataItem((org.jfree.data.time.RegularTimePeriod) day38);
        timeSeriesDataItem42.setSelected(false);
        timeSeriesDataItem42.setValue((java.lang.Number) (byte) 100);
        boolean boolean47 = timeSeriesDataItem42.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem48 = timeSeries7.addOrUpdate(timeSeriesDataItem42);
        int int49 = timeSeriesDataItem4.compareTo((java.lang.Object) timeSeriesDataItem42);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        int int52 = day50.compareTo((java.lang.Object) (short) 100);
        long long53 = day50.getMiddleMillisecond();
        int int54 = day50.getYear();
        boolean boolean56 = day50.equals((java.lang.Object) 5);
        int int57 = day50.getDayOfMonth();
        java.lang.String str58 = day50.toString();
        int int59 = timeSeriesDataItem4.compareTo((java.lang.Object) day50);
        long long60 = day50.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1709280000000L + "'", long11 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1711911599999L + "'", long24 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries25);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "31-March-2024" + "'", str41, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1711911599999L + "'", long53 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2024 + "'", int54 == 2024);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 31 + "'", int57 == 31);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "31-March-2024" + "'", str58, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1711954799999L + "'", long60 == 1711954799999L);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1185");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        java.lang.Class class24 = null;
        timeSeries1.timePeriodClass = class24;
        java.lang.Object obj26 = timeSeries1.clone();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries1.getRawDataItem((int) (byte) 0);
        java.lang.Object obj29 = timeSeries1.clone();
        java.beans.PropertyChangeListener propertyChangeListener30 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day34, (double) (short) 0, false);
        java.util.Date date38 = day34.getStart();
        org.jfree.data.time.SerialDate serialDate39 = day34.getSerialDate();
        java.lang.String str40 = day34.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = day34.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day34, (java.lang.Number) (short) -1);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "31-March-2024" + "'", str40, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1186");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.SerialDate serialDate14 = day9.getSerialDate();
        java.lang.String str15 = day9.toString();
        java.lang.Number number16 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day9, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        int int30 = timeSeries19.getItemCount();
        java.util.List list31 = timeSeries19.getItems();
        timeSeries1.data = list31;
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(list31);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1187");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day6, (java.lang.Number) 10L);
        int int12 = timeSeries1.getItemCount();
        timeSeries1.clear();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent24 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean25 = timeSeries15.equals((java.lang.Object) seriesChangeEvent24);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double28 = timeSeries27.getMaxY();
        java.lang.Comparable comparable29 = timeSeries27.getKey();
        org.jfree.data.time.TimeSeries timeSeries30 = timeSeries15.addAndOrUpdate(timeSeries27);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener31 = null;
        timeSeries15.addChangeListener(seriesChangeListener31);
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries1.addAndOrUpdate(timeSeries15);
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        java.util.Date date40 = day36.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond41 = new org.jfree.data.time.FixedMillisecond(date40);
        long long42 = fixedMillisecond41.getFirstMillisecond();
        java.util.Date date43 = fixedMillisecond41.getTime();
        org.jfree.data.time.Month month44 = new org.jfree.data.time.Month(date43);
        int int45 = month44.getMonth();
        java.util.Date date46 = month44.getStart();
        int int47 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) month44);
        int int48 = month44.getMonth();
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertEquals("'" + comparable29 + "' != '" + 100L + "'", comparable29, 100L);
        org.junit.Assert.assertNotNull(timeSeries30);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1711868400000L + "'", long42 == 1711868400000L);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Fri Mar 01 00:00:00 PST 2024");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1188");
        org.jfree.data.time.Month month1 = new org.jfree.data.time.Month();
        long long2 = month1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = month1.getYear();
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month(11, year3);
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            month4.peg(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1709280000000L + "'", long2 == 1709280000000L);
        org.junit.Assert.assertNotNull(year3);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1189");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        long long6 = timeSeries3.getMaximumItemAge();
        java.lang.String str7 = timeSeries3.getDescription();
        int int8 = timeSeries3.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, false);
        java.util.Date date15 = day11.getStart();
        org.jfree.data.time.SerialDate serialDate16 = day11.getSerialDate();
        java.lang.String str17 = day11.toString();
        java.lang.Number number18 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day11, number18);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, true);
        org.jfree.data.time.TimeSeries timeSeries24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener25 = null;
        timeSeries24.addChangeListener(seriesChangeListener25);
        long long27 = timeSeries24.getMaximumItemAge();
        java.lang.String str28 = timeSeries24.getDescription();
        int int29 = timeSeries24.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        timeSeries31.add((org.jfree.data.time.RegularTimePeriod) day32, (double) (short) 0, false);
        java.util.Date date36 = day32.getStart();
        org.jfree.data.time.SerialDate serialDate37 = day32.getSerialDate();
        java.lang.String str38 = day32.toString();
        java.lang.Number number39 = null;
        timeSeries24.add((org.jfree.data.time.RegularTimePeriod) day32, number39);
        boolean boolean41 = timeSeries24.isEmpty();
        boolean boolean42 = day11.equals((java.lang.Object) timeSeries24);
        long long43 = day11.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9223372036854775807L + "'", long6 == 9223372036854775807L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "31-March-2024" + "'", str17, "31-March-2024");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 9223372036854775807L + "'", long27 == 9223372036854775807L);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "31-March-2024" + "'", str38, "31-March-2024");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1711954799999L + "'", long43 == 1711954799999L);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1190");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        timeSeries4.add((org.jfree.data.time.RegularTimePeriod) day5, (double) (short) 0, false);
        java.util.Date date9 = day5.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond10 = new org.jfree.data.time.FixedMillisecond(date9);
        long long11 = fixedMillisecond10.getFirstMillisecond();
        java.util.Date date12 = fixedMillisecond10.getTime();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem13 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond10);
        long long14 = fixedMillisecond10.getSerialIndex();
        long long15 = fixedMillisecond10.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1711868400000L + "'", long15 == 1711868400000L);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1191");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        java.util.List list6 = timeSeries1.getItems();
        java.lang.String str7 = timeSeries1.getDomainDescription();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem8 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add(timeSeriesDataItem8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'item' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Time" + "'", str7, "Time");
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1192");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        java.lang.Object obj16 = timeSeriesDataItem15.clone();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.addChangeListener(seriesChangeListener19);
        long long21 = timeSeries18.getMaximumItemAge();
        java.lang.String str22 = timeSeries18.getDescription();
        java.util.List list23 = timeSeries18.getItems();
        boolean boolean24 = timeSeriesDataItem15.equals((java.lang.Object) timeSeries18);
        boolean boolean25 = timeSeriesDataItem15.isSelected();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9223372036854775807L + "'", long21 == 9223372036854775807L);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1193");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        long long3 = day0.getMiddleMillisecond();
        int int4 = day0.getYear();
        boolean boolean6 = day0.equals((java.lang.Object) 5);
        int int7 = day0.getDayOfMonth();
        long long8 = day0.getSerialIndex();
        long long9 = day0.getFirstMillisecond();
        long long10 = day0.getMiddleMillisecond();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711911599999L + "'", long3 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 45382L + "'", long8 == 45382L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711868400000L + "'", long9 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711911599999L + "'", long10 == 1711911599999L);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1194");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day6, (java.lang.Number) 10L);
        int int12 = timeSeries1.getItemCount();
        timeSeries1.clear();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent24 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean25 = timeSeries15.equals((java.lang.Object) seriesChangeEvent24);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double28 = timeSeries27.getMaxY();
        java.lang.Comparable comparable29 = timeSeries27.getKey();
        org.jfree.data.time.TimeSeries timeSeries30 = timeSeries15.addAndOrUpdate(timeSeries27);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener31 = null;
        timeSeries15.addChangeListener(seriesChangeListener31);
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries1.addAndOrUpdate(timeSeries15);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        int int36 = day34.compareTo((java.lang.Object) (short) 100);
        long long37 = day34.getMiddleMillisecond();
        int int38 = day34.getYear();
        boolean boolean40 = day34.equals((java.lang.Object) 5);
        int int41 = day34.getDayOfMonth();
        java.lang.String str42 = day34.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = day34.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem45 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day34, (java.lang.Number) 9999L);
        timeSeries1.setKey((java.lang.Comparable) 9999L);
        timeSeries1.clear();
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        java.util.Date date54 = day50.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond55 = new org.jfree.data.time.FixedMillisecond(date54);
        java.util.Date date56 = fixedMillisecond55.getTime();
        org.jfree.data.time.FixedMillisecond fixedMillisecond57 = new org.jfree.data.time.FixedMillisecond(date56);
        boolean boolean59 = fixedMillisecond57.equals((java.lang.Object) 100L);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) fixedMillisecond57, (java.lang.Number) 1711868400000L);
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertEquals("'" + comparable29 + "' != '" + 100L + "'", comparable29, 100L);
        org.junit.Assert.assertNotNull(timeSeries30);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711911599999L + "'", long37 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2024 + "'", int38 == 2024);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 31 + "'", int41 == 31);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "31-March-2024" + "'", str42, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date56);
        org.junit.Assert.assertEquals(date56.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1195");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        double double2 = timeSeries1.getMinY();
        timeSeries1.setDescription("March 2024");
        timeSeries1.removeAgedItems(0L, true);
        java.util.List list8 = timeSeries1.getItems();
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double11 = timeSeries10.getMaxY();
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        java.lang.Number number13 = null;
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day12, number13, false);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day12);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        timeSeries18.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = timeSeries18.getNextTimePeriod();
        timeSeries18.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year29 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries18.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year29);
        java.util.Collection collection31 = timeSeries16.getTimePeriodsUniqueToOtherSeries(timeSeries18);
        org.jfree.data.time.TimeSeries timeSeries32 = timeSeries1.addAndOrUpdate(timeSeries18);
        double double33 = timeSeries32.getMinY();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertNotNull(timeSeries32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1196");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        long long16 = day10.getLastMillisecond();
        long long17 = day10.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = day10.next();
        long long19 = day10.getSerialIndex();
        long long20 = day10.getSerialIndex();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711954799999L + "'", long16 == 1711954799999L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1711954799999L + "'", long17 == 1711954799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 45382L + "'", long19 == 45382L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 45382L + "'", long20 == 45382L);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1197");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Day day3 = new org.jfree.data.time.Day((-9999), 8, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The 'year' argument must be in range 1900 to 9999.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1198");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException1 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException3 = new org.jfree.data.time.TimePeriodFormatException("");
        timePeriodFormatException1.addSuppressed((java.lang.Throwable) timePeriodFormatException3);
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException6 = new org.jfree.data.time.TimePeriodFormatException("");
        java.lang.Throwable[] throwableArray7 = timePeriodFormatException6.getSuppressed();
        timePeriodFormatException1.addSuppressed((java.lang.Throwable) timePeriodFormatException6);
        org.jfree.data.general.SeriesException seriesException10 = new org.jfree.data.general.SeriesException("March 2024");
        timePeriodFormatException1.addSuppressed((java.lang.Throwable) seriesException10);
        java.lang.String str12 = timePeriodFormatException1.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.jfree.data.time.TimePeriodFormatException: " + "'", str12, "org.jfree.data.time.TimePeriodFormatException: ");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1199");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double4 = timeSeries3.getMaxY();
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        java.lang.Number number6 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day5, number6, false);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day5);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        timeSeries11.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = timeSeries11.getNextTimePeriod();
        timeSeries11.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year22 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries11.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year22);
        java.util.Collection collection24 = timeSeries9.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        java.lang.String str25 = timeSeries11.getRangeDescription();
        timeSeries11.removeAgedItems(false);
        timeSeries11.clear();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries11, seriesChangeInfo29);
        java.util.Collection collection31 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.addChangeListener(seriesChangeListener34);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        timeSeries37.add((org.jfree.data.time.RegularTimePeriod) day38, (double) (short) 0, false);
        timeSeries37.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = timeSeries37.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent46 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean47 = timeSeries37.equals((java.lang.Object) seriesChangeEvent46);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        int int50 = day48.compareTo((java.lang.Object) (short) 100);
        java.lang.String str51 = day48.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem52 = timeSeries37.getDataItem((org.jfree.data.time.RegularTimePeriod) day48);
        timeSeriesDataItem52.setSelected(false);
        timeSeriesDataItem52.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem57 = timeSeries33.addOrUpdate(timeSeriesDataItem52);
        boolean boolean58 = timeSeries11.equals((java.lang.Object) timeSeries33);
        org.jfree.data.time.Month month59 = new org.jfree.data.time.Month();
        long long60 = month59.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = month59.previous();
        boolean boolean63 = month59.equals((java.lang.Object) 10.0d);
        timeSeries11.delete((org.jfree.data.time.RegularTimePeriod) month59);
        timeSeries11.setMaximumItemCount((int) (byte) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value" + "'", str25, "Value");
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "31-March-2024" + "'", str51, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem52);
        org.junit.Assert.assertNull(timeSeriesDataItem57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1709280000000L + "'", long60 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1200");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        long long3 = day0.getMiddleMillisecond();
        int int4 = day0.getYear();
        boolean boolean6 = day0.equals((java.lang.Object) 5);
        int int7 = day0.getDayOfMonth();
        long long8 = day0.getSerialIndex();
        java.util.Date date9 = day0.getEnd();
        org.jfree.data.time.SerialDate serialDate10 = day0.getSerialDate();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = day0.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = day0.next();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711911599999L + "'", long3 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 45382L + "'", long8 == 45382L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1201");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        java.beans.PropertyChangeListener propertyChangeListener4 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener4);
        java.lang.String str6 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.SerialDate serialDate14 = day9.getSerialDate();
        org.jfree.data.time.Day day15 = new org.jfree.data.time.Day(serialDate14);
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        java.util.Date date22 = day18.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond23 = new org.jfree.data.time.FixedMillisecond(date22);
        java.util.Date date24 = fixedMillisecond23.getTime();
        long long25 = fixedMillisecond23.getFirstMillisecond();
        long long26 = fixedMillisecond23.getSerialIndex();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo27 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent28 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) fixedMillisecond23, seriesChangeInfo27);
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) day15, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond23);
        timeSeries29.setDomainDescription("org.jfree.data.event.SeriesChangeEvent[source=1]");
        long long32 = timeSeries29.getMaximumItemAge();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate14);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711868400000L + "'", long25 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 9223372036854775807L + "'", long32 == 9223372036854775807L);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1202");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = year2.previous();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year2);
        long long6 = year2.getFirstMillisecond();
        long long7 = year2.getFirstMillisecond();
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = year2.getFirstMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1704096000000L + "'", long6 == 1704096000000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1704096000000L + "'", long7 == 1704096000000L);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1203");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        timeSeries9.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = timeSeries9.getNextTimePeriod();
        timeSeries9.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year20 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries9.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year20);
        java.util.Collection collection22 = timeSeries7.getTimePeriodsUniqueToOtherSeries(timeSeries9);
        java.lang.String str23 = timeSeries9.getRangeDescription();
        timeSeries9.removeAgedItems(false);
        timeSeries9.clear();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo27 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent28 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries9, seriesChangeInfo27);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        seriesChangeEvent28.setSummary(seriesChangeInfo29);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(timeSeriesDataItem21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value" + "'", str23, "Value");
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1204");
        java.lang.Class class0 = null;
        java.lang.Class class1 = null;
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day4 = new org.jfree.data.time.Day();
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day4, (double) (short) 0, false);
        java.util.Date date8 = day4.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond9 = new org.jfree.data.time.FixedMillisecond(date8);
        java.util.TimeZone timeZone10 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = org.jfree.data.time.RegularTimePeriod.createInstance(class1, date8, timeZone10);
        java.util.TimeZone timeZone12 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date8, timeZone12);
        org.jfree.data.time.FixedMillisecond fixedMillisecond14 = new org.jfree.data.time.FixedMillisecond(date8);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = fixedMillisecond14.next();
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod11);
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1205");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        java.util.Date date21 = day17.getStart();
        int int22 = timeSeries8.getIndex((org.jfree.data.time.RegularTimePeriod) day17);
        java.lang.Class class23 = timeSeries8.timePeriodClass;
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        java.util.Date date30 = day26.getStart();
        java.util.TimeZone timeZone31 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class23, date30, timeZone31);
        timeSeries1.timePeriodClass = class23;
        java.beans.PropertyChangeListener propertyChangeListener34 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener34);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod32);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1206");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = day0.next();
        java.lang.String str4 = day0.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "31-March-2024" + "'", str4, "31-March-2024");
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1207");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        java.util.Date date9 = fixedMillisecond7.getTime();
        org.jfree.data.time.FixedMillisecond fixedMillisecond10 = new org.jfree.data.time.FixedMillisecond(date9);
        org.jfree.data.time.FixedMillisecond fixedMillisecond11 = new org.jfree.data.time.FixedMillisecond(date9);
        java.util.Calendar calendar12 = null;
        long long13 = fixedMillisecond11.getMiddleMillisecond(calendar12);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener23 = null;
        timeSeries15.addChangeListener(seriesChangeListener23);
        timeSeries15.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        java.util.Date date33 = day29.getStart();
        java.lang.Number number34 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries15.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day29, number34);
        java.lang.Number number36 = timeSeriesDataItem35.getValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = timeSeriesDataItem35.getPeriod();
        boolean boolean38 = timeSeriesDataItem35.isSelected();
        boolean boolean39 = fixedMillisecond11.equals((java.lang.Object) boolean38);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem35);
        org.junit.Assert.assertEquals("'" + number36 + "' != '" + 0.0d + "'", number36, 0.0d);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1208");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        java.lang.String str18 = timeSeries1.getDomainDescription();
        timeSeries1.setDescription("hi!");
        java.lang.Comparable comparable21 = timeSeries1.getKey();
        timeSeries1.setDescription("2024");
        org.jfree.data.time.Year year25 = new org.jfree.data.time.Year((int) (byte) 10);
        long long26 = year25.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem27 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) year25);
        timeSeries1.removeAgedItems(false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Time" + "'", str18, "Time");
        org.junit.Assert.assertEquals("'" + comparable21 + "' != '" + (short) 100 + "'", comparable21, (short) 100);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-61820208000001L) + "'", long26 == (-61820208000001L));
        org.junit.Assert.assertNotNull(timeSeriesDataItem27);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1209");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double27 = timeSeries26.getMaxY();
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        java.lang.Number number29 = null;
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day28, number29, false);
        double double32 = timeSeries26.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        timeSeries34.add((org.jfree.data.time.RegularTimePeriod) day35, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries26.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day35, (java.lang.Number) 1711911599999L);
        int int42 = timeSeriesDataItem40.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries1.addOrUpdate(timeSeriesDataItem40);
        timeSeriesDataItem43.setValue((java.lang.Number) 1);
        org.jfree.data.time.Year year47 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        int int49 = day48.getMonth();
        java.util.Date date50 = day48.getEnd();
        boolean boolean51 = year47.equals((java.lang.Object) day48);
        boolean boolean52 = timeSeriesDataItem43.equals((java.lang.Object) day48);
        org.jfree.data.time.TimeSeries timeSeries55 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day48, "97", "org.jfree.data.event.SeriesChangeEvent[source=10.0]");
        org.jfree.data.time.Day day56 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem58 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day56, (java.lang.Number) (byte) 10);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem60 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day56, (java.lang.Number) 0L);
        java.lang.Number number61 = timeSeriesDataItem60.getValue();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem62 = timeSeries55.addOrUpdate(timeSeriesDataItem60);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "31-March-2024" + "'", str22, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + number61 + "' != '" + 0L + "'", number61, 0L);
        org.junit.Assert.assertNull(timeSeriesDataItem62);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1210");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = year2.previous();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = year2.previous();
        java.lang.Object obj7 = null;
        int int8 = year2.compareTo(obj7);
        java.lang.Object obj9 = null;
        boolean boolean10 = year2.equals(obj9);
        int int11 = year2.getYear();
        java.util.Calendar calendar12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = year2.getLastMillisecond(calendar12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2024 + "'", int11 == 2024);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1211");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double27 = timeSeries26.getMaxY();
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        java.lang.Number number29 = null;
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day28, number29, false);
        double double32 = timeSeries26.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        timeSeries34.add((org.jfree.data.time.RegularTimePeriod) day35, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries26.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day35, (java.lang.Number) 1711911599999L);
        int int42 = timeSeriesDataItem40.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries1.addOrUpdate(timeSeriesDataItem40);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double46 = timeSeries45.getMaxY();
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        java.lang.Number number48 = null;
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day47, number48, false);
        double double51 = timeSeries45.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day54 = new org.jfree.data.time.Day();
        timeSeries53.add((org.jfree.data.time.RegularTimePeriod) day54, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day54, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries62 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        org.jfree.data.time.TimeSeries timeSeries64 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day65 = new org.jfree.data.time.Day();
        timeSeries64.add((org.jfree.data.time.RegularTimePeriod) day65, (double) (short) 0, false);
        timeSeries64.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries72 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day73 = new org.jfree.data.time.Day();
        timeSeries72.add((org.jfree.data.time.RegularTimePeriod) day73, (double) (short) 0, false);
        java.util.Date date77 = day73.getStart();
        int int78 = timeSeries64.getIndex((org.jfree.data.time.RegularTimePeriod) day73);
        java.lang.Class class79 = timeSeries64.timePeriodClass;
        org.jfree.data.time.Day day80 = new org.jfree.data.time.Day();
        int int81 = day80.getMonth();
        java.util.Date date82 = day80.getEnd();
        java.util.TimeZone timeZone83 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date82, timeZone83);
        boolean boolean85 = timeSeries62.equals((java.lang.Object) timeZone83);
        org.jfree.data.time.TimeSeries timeSeries86 = timeSeries1.addAndOrUpdate(timeSeries62);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo87 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent88 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries1, seriesChangeInfo87);
        java.lang.Number number90 = timeSeries1.getValue(0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "31-March-2024" + "'", str22, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(class79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(timeSeries86);
        org.junit.Assert.assertNull(number90);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1212");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.util.List list3 = timeSeries1.data;
        timeSeries1.fireSeriesChanged();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1213");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.SerialDate serialDate14 = day9.getSerialDate();
        java.lang.String str15 = day9.toString();
        java.lang.Number number16 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day9, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        int int30 = timeSeries19.getItemCount();
        java.util.List list31 = timeSeries19.getItems();
        timeSeries1.data = list31;
        java.lang.Class class33 = timeSeries1.timePeriodClass;
        int int34 = timeSeries1.getItemCount();
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        int int37 = day35.compareTo((java.lang.Object) (short) 100);
        long long38 = day35.getMiddleMillisecond();
        int int39 = day35.getYear();
        boolean boolean41 = day35.equals((java.lang.Object) 5);
        int int42 = day35.getDayOfMonth();
        java.lang.String str43 = day35.toString();
        org.jfree.data.time.Year year44 = new org.jfree.data.time.Year();
        long long45 = year44.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = year44.next();
        java.util.Date date47 = regularTimePeriod46.getEnd();
        org.jfree.data.time.TimeSeries timeSeries48 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) day35, regularTimePeriod46);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertNotNull(class33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1711911599999L + "'", long38 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2024 + "'", int39 == 2024);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 31 + "'", int42 == 31);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "31-March-2024" + "'", str43, "31-March-2024");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1735718399999L + "'", long45 == 1735718399999L);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 23:59:59 PST 2025");
        org.junit.Assert.assertNotNull(timeSeries48);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1214");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod2 = month0.previous();
        long long3 = month0.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711954799999L + "'", long3 == 1711954799999L);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1215");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        long long16 = day10.getFirstMillisecond();
        org.jfree.data.time.SerialDate serialDate17 = day10.getSerialDate();
        long long18 = day10.getFirstMillisecond();
        long long19 = day10.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
        org.junit.Assert.assertNotNull(serialDate17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711868400000L + "'", long18 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1711868400000L + "'", long19 == 1711868400000L);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1216");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        int int5 = day3.compareTo((java.lang.Object) (short) 100);
        long long6 = day3.getMiddleMillisecond();
        int int7 = day3.getYear();
        boolean boolean9 = day3.equals((java.lang.Object) 5);
        int int10 = day3.getDayOfMonth();
        java.lang.String str11 = day3.toString();
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3, "Value", "hi!");
        int int15 = day0.compareTo((java.lang.Object) day3);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day0, "hi!", "2024");
        int int19 = day0.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711911599999L + "'", long6 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2024 + "'", int7 == 2024);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "31-March-2024" + "'", str11, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1217");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        int int3 = month0.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = month0.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = month0.previous();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2024 + "'", int3 == 2024);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1218");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double4 = timeSeries3.getMaxY();
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        java.lang.Number number6 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day5, number6, false);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day5);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        timeSeries11.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = timeSeries11.getNextTimePeriod();
        timeSeries11.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year22 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries11.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year22);
        java.util.Collection collection24 = timeSeries9.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        java.lang.String str25 = timeSeries11.getRangeDescription();
        timeSeries11.removeAgedItems(false);
        timeSeries11.clear();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries11, seriesChangeInfo29);
        java.util.Collection collection31 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.addChangeListener(seriesChangeListener34);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        timeSeries37.add((org.jfree.data.time.RegularTimePeriod) day38, (double) (short) 0, false);
        timeSeries37.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = timeSeries37.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent46 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean47 = timeSeries37.equals((java.lang.Object) seriesChangeEvent46);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        int int50 = day48.compareTo((java.lang.Object) (short) 100);
        java.lang.String str51 = day48.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem52 = timeSeries37.getDataItem((org.jfree.data.time.RegularTimePeriod) day48);
        timeSeriesDataItem52.setSelected(false);
        timeSeriesDataItem52.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem57 = timeSeries33.addOrUpdate(timeSeriesDataItem52);
        boolean boolean58 = timeSeries11.equals((java.lang.Object) timeSeries33);
        org.jfree.data.time.Month month59 = new org.jfree.data.time.Month();
        long long60 = month59.getFirstMillisecond();
        org.jfree.data.time.Year year61 = month59.getYear();
        long long62 = year61.getLastMillisecond();
        int int63 = year61.getYear();
        long long64 = year61.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = year61.previous();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries11.update(regularTimePeriod65, (java.lang.Number) 7);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: There is no existing value for the specified 'period'.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value" + "'", str25, "Value");
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "31-March-2024" + "'", str51, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem52);
        org.junit.Assert.assertNull(timeSeriesDataItem57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1709280000000L + "'", long60 == 1709280000000L);
        org.junit.Assert.assertNotNull(year61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1735718399999L + "'", long62 == 1735718399999L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2024 + "'", int63 == 2024);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1735718399999L + "'", long64 == 1735718399999L);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1219");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        long long3 = year2.getSerialIndex();
        long long4 = year2.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2024L + "'", long3 == 2024L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2024L + "'", long4 == 2024L);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1220");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.SerialDate serialDate14 = day9.getSerialDate();
        java.lang.String str15 = day9.toString();
        java.lang.Number number16 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day9, number16);
        boolean boolean18 = timeSeries1.isEmpty();
        timeSeries1.clear();
        java.util.Collection collection20 = timeSeries1.getTimePeriods();
        long long21 = timeSeries1.getMaximumItemAge();
        java.util.List list22 = timeSeries1.getItems();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(collection20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9223372036854775807L + "'", long21 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(list22);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1221");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = year2.previous();
        long long5 = year2.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem7 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) year2, (java.lang.Number) 1711868400000L);
        org.jfree.data.time.Month month8 = new org.jfree.data.time.Month();
        long long9 = month8.getFirstMillisecond();
        org.jfree.data.time.Year year10 = month8.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = year10.previous();
        boolean boolean12 = timeSeriesDataItem7.equals((java.lang.Object) year10);
        java.util.Date date13 = year10.getEnd();
        org.jfree.data.time.Month month16 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number17 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem18 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month16, number17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = month16.previous();
        boolean boolean20 = year10.equals((java.lang.Object) month16);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2024L + "'", long5 == 2024L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1709280000000L + "'", long9 == 1709280000000L);
        org.junit.Assert.assertNotNull(year10);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Dec 31 23:59:59 PST 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1222");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        timeSeries1.clear();
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem7 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day5, (java.lang.Number) (byte) 10);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day5, (java.lang.Number) 12, true);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        java.util.Date date17 = day13.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond18 = new org.jfree.data.time.FixedMillisecond(date17);
        java.util.Date date19 = fixedMillisecond18.getTime();
        java.util.Calendar calendar20 = null;
        long long21 = fixedMillisecond18.getLastMillisecond(calendar20);
        long long22 = fixedMillisecond18.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = fixedMillisecond18.next();
        java.util.Calendar calendar24 = null;
        long long25 = fixedMillisecond18.getMiddleMillisecond(calendar24);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        double double28 = timeSeries27.getMinY();
        timeSeries27.setDescription("March 2024");
        timeSeries27.removeAgedItems(0L, true);
        double double34 = timeSeries27.getMaxY();
        int int35 = fixedMillisecond18.compareTo((java.lang.Object) timeSeries27);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond18);
        boolean boolean37 = timeSeriesDataItem36.isSelected();
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1711868400000L + "'", long21 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711868400000L + "'", long22 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711868400000L + "'", long25 == 1711868400000L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1223");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.lang.Comparable comparable3 = timeSeries1.getKey();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.delete((int) 'a', (int) (byte) 0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + comparable3 + "' != '" + 100L + "'", comparable3, 100L);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1224");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 2147483647);
        int int2 = timeSeries1.getMaximumItemCount();
        java.lang.String str3 = timeSeries1.getDescription();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries1.addChangeListener(seriesChangeListener4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2147483647 + "'", int2 == 2147483647);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1225");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number3 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem4 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, number3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = month2.next();
        java.util.Date date6 = month2.getStart();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent7 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) month2);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double10 = timeSeries9.getMaxY();
        java.lang.Comparable comparable11 = timeSeries9.getKey();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent12 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries9);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo13 = seriesChangeEvent12.getSummary();
        java.lang.Object obj14 = seriesChangeEvent12.getSource();
        int int15 = month2.compareTo(obj14);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertEquals("'" + comparable11 + "' != '" + 100L + "'", comparable11, 100L);
        org.junit.Assert.assertNull(seriesChangeInfo13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1226");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        java.util.Date date9 = fixedMillisecond7.getTime();
        org.jfree.data.time.Month month10 = new org.jfree.data.time.Month(date9);
        int int11 = month10.getMonth();
        java.util.Date date12 = month10.getStart();
        java.lang.String str13 = month10.toString();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Fri Mar 01 00:00:00 PST 2024");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "March 2024" + "'", str13, "March 2024");
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1227");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month1 = org.jfree.data.time.Month.parseMonth("org.jfree.data.event.SeriesChangeEvent[source=1]");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the month.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1228");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = timeSeries1.getNextTimePeriod();
        java.lang.Class class17 = timeSeries1.getTimePeriodClass();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(class17);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1229");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = fixedMillisecond7.previous();
        long long10 = fixedMillisecond7.getLastMillisecond();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1230");
        org.jfree.data.time.Day day1 = org.jfree.data.time.Day.parseDay("org.jfree.data.general.SeriesException: 2024");
        org.junit.Assert.assertNull(day1);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1231");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 9999);
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        long long3 = month2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = month2.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = year4.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = year4.previous();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year4);
        boolean boolean8 = timeSeries1.equals((java.lang.Object) year4);
        java.lang.String str9 = timeSeries1.getDomainDescription();
        double double10 = timeSeries1.getMinY();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        timeSeries12.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = timeSeries12.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries12.addChangeListener(seriesChangeListener20);
        java.lang.Comparable comparable22 = timeSeries12.getKey();
        double double23 = timeSeries12.getMinY();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries12.getNextTimePeriod();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem26 = timeSeries1.addOrUpdate(regularTimePeriod24, 0.0d);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1709280000000L + "'", long3 == 1709280000000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Time" + "'", str9, "Time");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertEquals("'" + comparable22 + "' != '" + 100L + "'", comparable22, 100L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertNull(timeSeriesDataItem26);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1232");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        java.lang.String str24 = timeSeries1.getDescription();
        double double25 = timeSeries1.getMaxY();
        java.lang.String str26 = timeSeries1.getDescription();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1233");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        double double11 = timeSeries6.getMinY();
        java.util.Collection collection12 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries6);
        org.jfree.data.time.Year year14 = new org.jfree.data.time.Year(0);
        long long15 = year14.getSerialIndex();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) year14, (java.lang.Number) 100L, true);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = year14.next();
        long long20 = year14.getLastMillisecond();
        java.util.Calendar calendar21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = year14.getFirstMillisecond(calendar21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(collection12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-62104204800001L) + "'", long20 == (-62104204800001L));
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1234");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        timeSeries9.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = timeSeries9.getNextTimePeriod();
        timeSeries9.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year20 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries9.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year20);
        java.util.Collection collection22 = timeSeries7.getTimePeriodsUniqueToOtherSeries(timeSeries9);
        java.lang.String str23 = timeSeries9.getRangeDescription();
        java.util.List list24 = timeSeries9.getItems();
        timeSeries9.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(timeSeriesDataItem21);
        org.junit.Assert.assertNotNull(collection22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value" + "'", str23, "Value");
        org.junit.Assert.assertNotNull(list24);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1235");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = year2.previous();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = year2.previous();
        java.lang.Object obj7 = null;
        int int8 = year2.compareTo(obj7);
        java.lang.Object obj9 = null;
        boolean boolean10 = year2.equals(obj9);
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = year2.getFirstMillisecond(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1236");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = fixedMillisecond7.next();
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getMiddleMillisecond(calendar13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        double double17 = timeSeries16.getMinY();
        timeSeries16.setDescription("March 2024");
        timeSeries16.removeAgedItems(0L, true);
        double double23 = timeSeries16.getMaxY();
        int int24 = fixedMillisecond7.compareTo((java.lang.Object) timeSeries16);
        java.util.Calendar calendar25 = null;
        long long26 = fixedMillisecond7.getFirstMillisecond(calendar25);
        java.util.Calendar calendar27 = null;
        long long28 = fixedMillisecond7.getMiddleMillisecond(calendar27);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1711868400000L + "'", long28 == 1711868400000L);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1237");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.addChangeListener(seriesChangeListener9);
        timeSeries1.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day15 = new org.jfree.data.time.Day();
        timeSeries14.add((org.jfree.data.time.RegularTimePeriod) day15, (double) (short) 0, false);
        java.util.Date date19 = day15.getStart();
        java.lang.Number number20 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day15, number20);
        java.lang.String str22 = day15.toString();
        int int23 = day15.getDayOfMonth();
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day15, "2024", "8");
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        java.util.Date date33 = day29.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond34 = new org.jfree.data.time.FixedMillisecond(date33);
        java.util.Date date35 = fixedMillisecond34.getTime();
        long long36 = fixedMillisecond34.getFirstMillisecond();
        long long37 = fixedMillisecond34.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = fixedMillisecond34.next();
        boolean boolean39 = day15.equals((java.lang.Object) fixedMillisecond34);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "31-March-2024" + "'", str22, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711868400000L + "'", long36 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711868400000L + "'", long37 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1238");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        java.lang.String str17 = day12.toString();
        java.util.Calendar calendar18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = day12.getFirstMillisecond(calendar18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "31-March-2024" + "'", str17, "31-March-2024");
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1239");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Day day3 = new org.jfree.data.time.Day(1, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The 'year' argument must be in range 1900 to 9999.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1240");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem10 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod8, (double) 24291L);
        timeSeriesDataItem10.setValue((java.lang.Number) 24290L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = timeSeriesDataItem10.getPeriod();
        java.lang.Class<?> wildcardClass14 = regularTimePeriod13.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1241");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        org.jfree.data.time.Year year3 = month2.getYear();
        long long4 = year3.getLastMillisecond();
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-61851744000001L) + "'", long4 == (-61851744000001L));
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1242");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day6, (java.lang.Number) 10L);
        int int12 = timeSeries1.getItemCount();
        timeSeries1.clear();
        timeSeries1.setDescription("9");
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1243");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.time.Month month3 = new org.jfree.data.time.Month();
        long long4 = month3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = month3.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = year5.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = year5.previous();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = year5.previous();
        java.lang.Object obj10 = null;
        int int11 = year5.compareTo(obj10);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) year5, (double) (short) -1);
        timeSeries1.setMaximumItemAge((long) (short) 1);
        java.lang.Class class16 = timeSeries1.getTimePeriodClass();
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1709280000000L + "'", long4 == 1709280000000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(class16);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1244");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 9999);
        timeSeries1.removeAgedItems(true);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries1.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        org.jfree.data.time.SerialDate serialDate13 = day8.getSerialDate();
        long long14 = day8.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = day8.previous();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener18 = null;
        timeSeries17.addChangeListener(seriesChangeListener18);
        long long20 = timeSeries17.getMaximumItemAge();
        java.lang.String str21 = timeSeries17.getDescription();
        double double22 = timeSeries17.getMaxY();
        java.lang.Object obj23 = timeSeries17.clone();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        timeSeries25.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = timeSeries25.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries25.addChangeListener(seriesChangeListener33);
        timeSeries25.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day39 = new org.jfree.data.time.Day();
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day39, (double) (short) 0, false);
        java.util.Date date43 = day39.getStart();
        java.lang.Number number44 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem45 = timeSeries25.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day39, number44);
        java.util.Date date46 = day39.getEnd();
        boolean boolean47 = timeSeries17.equals((java.lang.Object) day39);
        boolean boolean48 = day8.equals((java.lang.Object) timeSeries17);
        org.jfree.data.time.TimeSeries timeSeries49 = timeSeries1.addAndOrUpdate(timeSeries17);
        org.jfree.data.time.TimeSeries timeSeries51 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double52 = timeSeries51.getMaxY();
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        java.lang.Number number54 = null;
        timeSeries51.add((org.jfree.data.time.RegularTimePeriod) day53, number54, false);
        double double57 = timeSeries51.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries59 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day60 = new org.jfree.data.time.Day();
        timeSeries59.add((org.jfree.data.time.RegularTimePeriod) day60, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem65 = timeSeries51.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day60, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries68 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        java.lang.Comparable comparable69 = timeSeries68.getKey();
        timeSeries68.setDomainDescription("");
        org.jfree.data.time.Year year73 = new org.jfree.data.time.Year((int) (short) 10);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem74 = timeSeries68.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year73);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = year73.next();
        timeSeries49.add(regularTimePeriod75, (java.lang.Number) 12);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711911599999L + "'", long14 == 1711911599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 9223372036854775807L + "'", long20 == 9223372036854775807L);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeSeries49);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(timeSeriesDataItem65);
        org.junit.Assert.assertEquals("'" + comparable69 + "' != '" + 1711911599999L + "'", comparable69, 1711911599999L);
        org.junit.Assert.assertNull(timeSeriesDataItem74);
        org.junit.Assert.assertNotNull(regularTimePeriod75);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1245");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        timeSeries1.removeAgedItems(1L, false);
        boolean boolean10 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.removeChangeListener(seriesChangeListener13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 10L);
        long long23 = day17.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day17);
        long long25 = day17.getMiddleMillisecond();
        int int26 = day17.getYear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(timeSeriesDataItem22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 45382L + "'", long23 == 45382L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711911599999L + "'", long25 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2024 + "'", int26 == 2024);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1246");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod1 = day0.previous();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem3 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod1, (java.lang.Number) (-1.0d));
        timeSeriesDataItem3.setValue((java.lang.Number) 0);
        timeSeriesDataItem3.setSelected(false);
        org.junit.Assert.assertNotNull(regularTimePeriod1);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1247");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.SerialDate serialDate14 = day9.getSerialDate();
        java.lang.String str15 = day9.toString();
        java.lang.Number number16 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day9, number16);
        boolean boolean18 = timeSeries1.isEmpty();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = timeSeries1.getTimePeriod(0);
        java.lang.Object obj21 = timeSeries1.clone();
        int int22 = timeSeries1.getMaximumItemCount();
        timeSeries1.removeAgedItems(false);
        timeSeries1.setRangeDescription("hi!");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1248");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        java.lang.String str24 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries27 = timeSeries1.createCopy((int) (byte) 0, 0);
        int int28 = timeSeries1.getItemCount();
        timeSeries1.setNotify(false);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        java.util.Date date37 = day33.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond38 = new org.jfree.data.time.FixedMillisecond(date37);
        java.util.Calendar calendar39 = null;
        long long40 = fixedMillisecond38.getMiddleMillisecond(calendar39);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond38, (double) (byte) 0);
        timeSeriesDataItem42.setValue((java.lang.Number) (short) 100);
        java.lang.Object obj45 = timeSeriesDataItem42.clone();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add(timeSeriesDataItem42);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(timeSeries27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1711868400000L + "'", long40 == 1711868400000L);
        org.junit.Assert.assertNotNull(obj45);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1249");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) timeSeriesDataItem15);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        java.util.Date date23 = day19.getStart();
        org.jfree.data.time.SerialDate serialDate24 = day19.getSerialDate();
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day(serialDate24);
        long long26 = day25.getFirstMillisecond();
        java.lang.String str27 = day25.toString();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day25, 0.0d);
        java.beans.PropertyChangeListener propertyChangeListener30 = null;
        timeSeries16.removePropertyChangeListener(propertyChangeListener30);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "31-March-2024" + "'", str27, "31-March-2024");
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1250");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        java.util.Calendar calendar11 = null;
        long long12 = fixedMillisecond7.getMiddleMillisecond(calendar11);
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getLastMillisecond(calendar13);
        java.util.Calendar calendar15 = null;
        long long16 = fixedMillisecond7.getLastMillisecond(calendar15);
        org.jfree.data.time.Month month17 = new org.jfree.data.time.Month();
        long long18 = month17.getFirstMillisecond();
        org.jfree.data.time.Year year19 = month17.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = year19.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = year19.previous();
        int int22 = fixedMillisecond7.compareTo((java.lang.Object) year19);
        long long23 = fixedMillisecond7.getSerialIndex();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1709280000000L + "'", long18 == 1709280000000L);
        org.junit.Assert.assertNotNull(year19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711868400000L + "'", long23 == 1711868400000L);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1251");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        int int3 = month0.getYearValue();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException5 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException7 = new org.jfree.data.time.TimePeriodFormatException("");
        timePeriodFormatException5.addSuppressed((java.lang.Throwable) timePeriodFormatException7);
        int int9 = month0.compareTo((java.lang.Object) timePeriodFormatException5);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) int9, "org.jfree.data.event.SeriesChangeEvent[source=true]", "March 2024");
        java.util.Collection collection13 = timeSeries12.getTimePeriods();
        org.jfree.data.time.Month month14 = new org.jfree.data.time.Month();
        long long15 = month14.getFirstMillisecond();
        org.jfree.data.time.Year year16 = month14.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = year16.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = year16.previous();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = year16.previous();
        java.lang.Object obj21 = null;
        int int22 = year16.compareTo(obj21);
        java.util.Date date23 = year16.getEnd();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries12.getDataItem((org.jfree.data.time.RegularTimePeriod) year16);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day27, (double) (short) 0, false);
        java.util.Date date31 = day27.getStart();
        org.jfree.data.time.SerialDate serialDate32 = day27.getSerialDate();
        long long33 = day27.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = day27.previous();
        long long35 = regularTimePeriod34.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod34, (double) 3);
        int int38 = year16.compareTo((java.lang.Object) timeSeriesDataItem37);
        org.jfree.data.time.Year year39 = new org.jfree.data.time.Year();
        long long40 = year39.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = year39.next();
        boolean boolean42 = year16.equals((java.lang.Object) regularTimePeriod41);
        org.jfree.data.time.Year year44 = new org.jfree.data.time.Year((int) (short) 100);
        java.util.Date date45 = year44.getEnd();
        boolean boolean46 = year16.equals((java.lang.Object) date45);
        org.jfree.data.time.TimeSeries timeSeries48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day49 = new org.jfree.data.time.Day();
        timeSeries48.add((org.jfree.data.time.RegularTimePeriod) day49, (double) (short) 0, false);
        java.util.Date date53 = day49.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond54 = new org.jfree.data.time.FixedMillisecond(date53);
        java.util.Date date55 = fixedMillisecond54.getTime();
        long long56 = fixedMillisecond54.getFirstMillisecond();
        long long57 = fixedMillisecond54.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries59 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double60 = timeSeries59.getMaxY();
        org.jfree.data.time.Day day61 = new org.jfree.data.time.Day();
        java.lang.Number number62 = null;
        timeSeries59.add((org.jfree.data.time.RegularTimePeriod) day61, number62, false);
        double double65 = timeSeries59.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries67 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day68 = new org.jfree.data.time.Day();
        timeSeries67.add((org.jfree.data.time.RegularTimePeriod) day68, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem73 = timeSeries59.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day68, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries76 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        java.lang.Comparable comparable77 = timeSeries76.getKey();
        timeSeries76.removeAgedItems(false);
        org.jfree.data.time.Month month80 = new org.jfree.data.time.Month();
        long long81 = month80.getFirstMillisecond();
        long long82 = month80.getSerialIndex();
        int int83 = month80.getYearValue();
        timeSeries76.setKey((java.lang.Comparable) month80);
        int int85 = fixedMillisecond54.compareTo((java.lang.Object) timeSeries76);
        int int86 = year16.compareTo((java.lang.Object) int85);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2024 + "'", int3 == 2024);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(collection13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1709280000000L + "'", long15 == 1709280000000L);
        org.junit.Assert.assertNotNull(year16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 31 23:59:59 PST 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem24);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711911599999L + "'", long33 == 1711911599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1711868399999L + "'", long35 == 1711868399999L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1735718399999L + "'", long40 == 1735718399999L);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Dec 31 23:59:59 PST 100");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1711868400000L + "'", long56 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1711868400000L + "'", long57 == 1711868400000L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(timeSeriesDataItem73);
        org.junit.Assert.assertEquals("'" + comparable77 + "' != '" + 1711911599999L + "'", comparable77, 1711911599999L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1709280000000L + "'", long81 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 24291L + "'", long82 == 24291L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2024 + "'", int83 == 2024);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1252");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.clear();
        timeSeries1.removeAgedItems((long) 5, false);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        int int9 = day7.compareTo((java.lang.Object) (short) 100);
        long long10 = day7.getMiddleMillisecond();
        int int11 = day7.getYear();
        boolean boolean13 = day7.equals((java.lang.Object) 5);
        int int14 = day7.getDayOfMonth();
        long long15 = day7.getSerialIndex();
        java.lang.Number number16 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) day7);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        java.util.Date date23 = day19.getStart();
        org.jfree.data.time.SerialDate serialDate24 = day19.getSerialDate();
        int int25 = day19.getYear();
        int int27 = day19.compareTo((java.lang.Object) (-1L));
        org.jfree.data.time.Month month30 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date31 = month30.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = month30.next();
        long long33 = month30.getSerialIndex();
        java.util.Date date34 = month30.getStart();
        int int35 = day19.compareTo((java.lang.Object) date34);
        int int36 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day19);
        org.jfree.data.time.Year year38 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) year38, (double) (-9999));
        long long41 = year38.getFirstMillisecond();
        boolean boolean42 = day19.equals((java.lang.Object) year38);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711911599999L + "'", long10 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2024 + "'", int11 == 2024);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 45382L + "'", long15 == 45382L);
        org.junit.Assert.assertNull(number16);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2024 + "'", int25 == 2024);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 118L + "'", long33 == 118L);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-62167363200000L) + "'", long41 == (-62167363200000L));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1253");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 9999);
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        long long3 = month2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = month2.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = year4.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = year4.previous();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year4);
        boolean boolean8 = timeSeries1.equals((java.lang.Object) year4);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, false);
        java.util.Date date15 = day11.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond16 = new org.jfree.data.time.FixedMillisecond(date15);
        long long17 = fixedMillisecond16.getFirstMillisecond();
        java.util.Calendar calendar18 = null;
        fixedMillisecond16.peg(calendar18);
        long long20 = fixedMillisecond16.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = fixedMillisecond16.next();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) fixedMillisecond16, (double) (-1), false);
        long long25 = fixedMillisecond16.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1709280000000L + "'", long3 == 1709280000000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1711868400000L + "'", long17 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1711868400000L + "'", long20 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711868400000L + "'", long25 == 1711868400000L);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1254");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries8.addChangeListener(seriesChangeListener9);
        long long11 = timeSeries8.getMaximumItemAge();
        java.lang.String str12 = timeSeries8.getDescription();
        double double13 = timeSeries8.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent24 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean25 = timeSeries15.equals((java.lang.Object) seriesChangeEvent24);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        int int28 = day26.compareTo((java.lang.Object) (short) 100);
        java.lang.String str29 = day26.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries15.getDataItem((org.jfree.data.time.RegularTimePeriod) day26);
        timeSeries8.add(timeSeriesDataItem30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double34 = timeSeries33.getMaxY();
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        java.lang.Number number36 = null;
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day35, number36, false);
        double double39 = timeSeries33.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries33.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day42, (java.lang.Number) 1711911599999L);
        int int49 = timeSeriesDataItem47.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries8.addOrUpdate(timeSeriesDataItem47);
        java.util.Collection collection51 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries8);
        org.jfree.data.time.TimeSeries timeSeries53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day54 = new org.jfree.data.time.Day();
        timeSeries53.add((org.jfree.data.time.RegularTimePeriod) day54, (double) (short) 0, false);
        java.util.Date date58 = day54.getStart();
        org.jfree.data.time.SerialDate serialDate59 = day54.getSerialDate();
        long long60 = day54.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = day54.previous();
        long long62 = regularTimePeriod61.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem64 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod61, (double) 3);
        org.jfree.data.time.TimeSeries timeSeries66 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double67 = timeSeries66.getMaxY();
        org.jfree.data.time.Day day68 = new org.jfree.data.time.Day();
        java.lang.Number number69 = null;
        timeSeries66.add((org.jfree.data.time.RegularTimePeriod) day68, number69, false);
        double double72 = timeSeries66.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries74 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day75 = new org.jfree.data.time.Day();
        timeSeries74.add((org.jfree.data.time.RegularTimePeriod) day75, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem80 = timeSeries66.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day75, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries81 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) timeSeriesDataItem80);
        boolean boolean82 = timeSeriesDataItem64.equals((java.lang.Object) timeSeriesDataItem80);
        boolean boolean83 = timeSeriesDataItem80.isSelected();
        java.lang.Object obj84 = null;
        int int85 = timeSeriesDataItem80.compareTo(obj84);
        timeSeriesDataItem80.setValue((java.lang.Number) 1711939017671L);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem88 = timeSeries1.addOrUpdate(timeSeriesDataItem80);
        timeSeries1.setDomainDescription("Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 9223372036854775807L + "'", long11 == 9223372036854775807L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31-March-2024" + "'", str29, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(timeSeriesDataItem47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertNotNull(collection51);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1711911599999L + "'", long60 == 1711911599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1711868399999L + "'", long62 == 1711868399999L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(timeSeriesDataItem80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNull(timeSeriesDataItem88);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1255");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        int int3 = month0.getYearValue();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException5 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException7 = new org.jfree.data.time.TimePeriodFormatException("");
        timePeriodFormatException5.addSuppressed((java.lang.Throwable) timePeriodFormatException7);
        int int9 = month0.compareTo((java.lang.Object) timePeriodFormatException5);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) int9, "org.jfree.data.event.SeriesChangeEvent[source=true]", "March 2024");
        java.util.Collection collection13 = timeSeries12.getTimePeriods();
        org.jfree.data.time.Year year15 = new org.jfree.data.time.Year(3);
        java.lang.Number number16 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) year15, number16);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2024 + "'", int3 == 2024);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(collection13);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1256");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        long long3 = month2.getFirstMillisecond();
        long long4 = month2.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem6 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, 0.0d);
        timeSeries1.add(timeSeriesDataItem6, false);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        int int11 = day9.compareTo((java.lang.Object) (short) 100);
        long long12 = day9.getMiddleMillisecond();
        int int13 = day9.getYear();
        boolean boolean15 = day9.equals((java.lang.Object) 5);
        int int16 = day9.getDayOfMonth();
        java.lang.String str17 = day9.toString();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day9, "Value", "hi!");
        java.lang.Number number21 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) day9);
        int int22 = day9.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1709280000000L + "'", long3 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24291L + "'", long4 == 24291L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711911599999L + "'", long12 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2024 + "'", int13 == 2024);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "31-March-2024" + "'", str17, "31-March-2024");
        org.junit.Assert.assertEquals("'" + number21 + "' != '" + 0.0d + "'", number21, 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1257");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day6, (java.lang.Number) 10L);
        long long12 = day6.getSerialIndex();
        long long13 = day6.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = day6.next();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day6, "March 2024", "org.jfree.data.time.TimePeriodFormatException: March 2024");
        int int18 = day6.getMonth();
        java.lang.Class class19 = null;
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        java.util.Date date26 = day22.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond(date26);
        java.util.TimeZone timeZone28 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = org.jfree.data.time.RegularTimePeriod.createInstance(class19, date26, timeZone28);
        org.jfree.data.time.FixedMillisecond fixedMillisecond30 = new org.jfree.data.time.FixedMillisecond(date26);
        long long31 = fixedMillisecond30.getFirstMillisecond();
        boolean boolean33 = fixedMillisecond30.equals((java.lang.Object) 1709280000000L);
        boolean boolean34 = day6.equals((java.lang.Object) 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 45382L + "'", long12 == 45382L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711954799999L + "'", long13 == 1711954799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1711868400000L + "'", long31 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1258");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day9, (java.lang.Number) (byte) 10);
        timeSeriesDataItem11.setValue((java.lang.Number) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem14 = timeSeries1.addOrUpdate(timeSeriesDataItem11);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double17 = timeSeries16.getMaxY();
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        java.lang.Number number19 = null;
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day18, number19, false);
        double double22 = timeSeries16.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day();
        timeSeries24.add((org.jfree.data.time.RegularTimePeriod) day25, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries16.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day25, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = day25.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) day25);
        java.lang.Object obj33 = timeSeriesDataItem32.clone();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent34 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(timeSeriesDataItem14);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(obj33);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1259");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        long long16 = day10.getLastMillisecond();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.addChangeListener(seriesChangeListener19);
        org.jfree.data.time.Month month21 = new org.jfree.data.time.Month();
        long long22 = month21.getFirstMillisecond();
        org.jfree.data.time.Year year23 = month21.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = year23.next();
        long long25 = year23.getLastMillisecond();
        java.lang.Number number26 = null;
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) year23, number26);
        int int28 = year23.getYear();
        java.lang.String str29 = year23.toString();
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        timeSeries31.add((org.jfree.data.time.RegularTimePeriod) day32, (double) (short) 0, false);
        java.util.Date date36 = day32.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond37 = new org.jfree.data.time.FixedMillisecond(date36);
        java.util.Date date38 = fixedMillisecond37.getTime();
        java.util.Calendar calendar39 = null;
        long long40 = fixedMillisecond37.getLastMillisecond(calendar39);
        java.util.Calendar calendar41 = null;
        long long42 = fixedMillisecond37.getFirstMillisecond(calendar41);
        java.util.Calendar calendar43 = null;
        long long44 = fixedMillisecond37.getFirstMillisecond(calendar43);
        java.util.Calendar calendar45 = null;
        long long46 = fixedMillisecond37.getMiddleMillisecond(calendar45);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = fixedMillisecond37.previous();
        boolean boolean48 = year23.equals((java.lang.Object) fixedMillisecond37);
        int int49 = day10.compareTo((java.lang.Object) fixedMillisecond37);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711954799999L + "'", long16 == 1711954799999L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1709280000000L + "'", long22 == 1709280000000L);
        org.junit.Assert.assertNotNull(year23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1735718399999L + "'", long25 == 1735718399999L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2024 + "'", int28 == 2024);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2024" + "'", str29, "2024");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1711868400000L + "'", long40 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1711868400000L + "'", long42 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1711868400000L + "'", long44 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1711868400000L + "'", long46 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1260");
        java.lang.Class class0 = null;
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        java.util.Date date7 = day3.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond8 = new org.jfree.data.time.FixedMillisecond(date7);
        java.util.TimeZone timeZone9 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date7, timeZone9);
        org.jfree.data.time.FixedMillisecond fixedMillisecond11 = new org.jfree.data.time.FixedMillisecond(date7);
        java.util.TimeZone timeZone12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month13 = new org.jfree.data.time.Month(date7, timeZone12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod10);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1261");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        java.util.List list6 = timeSeries1.getItems();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number10 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month9, number10);
        long long12 = month9.getSerialIndex();
        java.util.Date date13 = month9.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = month9.previous();
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) month9);
        timeSeries1.setNotify(false);
        java.lang.Class class18 = null;
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        java.util.Date date25 = day21.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond26 = new org.jfree.data.time.FixedMillisecond(date25);
        java.util.TimeZone timeZone27 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance(class18, date25, timeZone27);
        org.jfree.data.time.FixedMillisecond fixedMillisecond29 = new org.jfree.data.time.FixedMillisecond(date25);
        long long30 = fixedMillisecond29.getFirstMillisecond();
        java.util.Calendar calendar31 = null;
        fixedMillisecond29.peg(calendar31);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem33 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond29);
        java.lang.String str34 = timeSeries1.getDomainDescription();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 118L + "'", long12 == 118L);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711868400000L + "'", long30 == 1711868400000L);
        org.junit.Assert.assertNull(timeSeriesDataItem33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Time" + "'", str34, "Time");
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1262");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        timeSeries9.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        java.util.Date date22 = day18.getStart();
        org.jfree.data.time.SerialDate serialDate23 = day18.getSerialDate();
        java.lang.Number number24 = null;
        timeSeries9.update((org.jfree.data.time.RegularTimePeriod) day18, number24);
        java.lang.Number number26 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) day18);
        timeSeries1.setKey((java.lang.Comparable) "hi!");
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month30 = new org.jfree.data.time.Month();
        long long31 = month30.getFirstMillisecond();
        long long32 = month30.getSerialIndex();
        java.lang.String str33 = month30.toString();
        java.lang.String str34 = month30.toString();
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) month30, (java.lang.Number) (-62104204800001L));
        java.lang.String str37 = timeSeries1.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection collection39 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate23);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + 0.0d + "'", number26, 0.0d);
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1709280000000L + "'", long31 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 24291L + "'", long32 == 24291L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "March 2024" + "'", str33, "March 2024");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "March 2024" + "'", str34, "March 2024");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Value" + "'", str37, "Value");
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1263");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.clear();
        timeSeries1.removeAgedItems((long) 5, false);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        int int9 = day7.compareTo((java.lang.Object) (short) 100);
        long long10 = day7.getMiddleMillisecond();
        int int11 = day7.getYear();
        boolean boolean13 = day7.equals((java.lang.Object) 5);
        int int14 = day7.getDayOfMonth();
        long long15 = day7.getSerialIndex();
        java.lang.Number number16 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) day7);
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy(9, (int) (byte) 100);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        java.util.Date date26 = day22.getStart();
        org.jfree.data.time.SerialDate serialDate27 = day22.getSerialDate();
        long long28 = day22.getMiddleMillisecond();
        long long29 = day22.getLastMillisecond();
        timeSeries19.delete((org.jfree.data.time.RegularTimePeriod) day22);
        java.lang.String str31 = timeSeries19.getDomainDescription();
        java.beans.PropertyChangeListener propertyChangeListener32 = null;
        timeSeries19.removePropertyChangeListener(propertyChangeListener32);
        org.jfree.data.time.Year year34 = new org.jfree.data.time.Year();
        java.lang.String str35 = year34.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = timeSeries19.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year34);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711911599999L + "'", long10 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2024 + "'", int11 == 2024);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 45382L + "'", long15 == 45382L);
        org.junit.Assert.assertNull(number16);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1711911599999L + "'", long28 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711954799999L + "'", long29 == 1711954799999L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Time" + "'", str31, "Time");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2024" + "'", str35, "2024");
        org.junit.Assert.assertNull(timeSeriesDataItem36);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1264");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day6, (java.lang.Number) 10L);
        long long12 = day6.getSerialIndex();
        long long13 = day6.getLastMillisecond();
        java.util.Date date14 = day6.getEnd();
        org.jfree.data.time.SerialDate serialDate15 = day6.getSerialDate();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        timeSeries25.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day34, (double) (short) 0, false);
        java.util.Date date38 = day34.getStart();
        org.jfree.data.time.SerialDate serialDate39 = day34.getSerialDate();
        java.lang.Number number40 = null;
        timeSeries25.update((org.jfree.data.time.RegularTimePeriod) day34, number40);
        java.lang.Number number42 = timeSeries17.getValue((org.jfree.data.time.RegularTimePeriod) day34);
        timeSeries17.setKey((java.lang.Comparable) "hi!");
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = timeSeries17.getNextTimePeriod();
        org.jfree.data.time.Month month46 = new org.jfree.data.time.Month();
        long long47 = month46.getFirstMillisecond();
        long long48 = month46.getSerialIndex();
        java.lang.String str49 = month46.toString();
        java.lang.String str50 = month46.toString();
        timeSeries17.update((org.jfree.data.time.RegularTimePeriod) month46, (java.lang.Number) (-62104204800001L));
        boolean boolean53 = day6.equals((java.lang.Object) timeSeries17);
        java.beans.PropertyChangeListener propertyChangeListener54 = null;
        timeSeries17.addPropertyChangeListener(propertyChangeListener54);
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 45382L + "'", long12 == 45382L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711954799999L + "'", long13 == 1711954799999L);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate39);
        org.junit.Assert.assertEquals("'" + number42 + "' != '" + 0.0d + "'", number42, 0.0d);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1709280000000L + "'", long47 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 24291L + "'", long48 == 24291L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "March 2024" + "'", str49, "March 2024");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "March 2024" + "'", str50, "March 2024");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1265");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int1 = day0.getMonth();
        org.jfree.data.time.SerialDate serialDate2 = day0.getSerialDate();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day(serialDate2);
        org.jfree.data.time.Day day4 = new org.jfree.data.time.Day(serialDate2);
        java.util.Date date5 = day4.getStart();
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day(date5);
        java.lang.String str7 = day6.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(serialDate2);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "31-March-2024" + "'", str7, "31-March-2024");
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1266");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = year2.previous();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = year2.previous();
        java.lang.Object obj7 = null;
        int int8 = year2.compareTo(obj7);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        timeSeries10.fireSeriesChanged();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener18 = null;
        timeSeries17.addChangeListener(seriesChangeListener18);
        long long20 = timeSeries17.getMaximumItemAge();
        java.lang.String str21 = timeSeries17.getDescription();
        double double22 = timeSeries17.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day();
        timeSeries24.add((org.jfree.data.time.RegularTimePeriod) day25, (double) (short) 0, false);
        timeSeries24.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = timeSeries24.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent33 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean34 = timeSeries24.equals((java.lang.Object) seriesChangeEvent33);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        int int37 = day35.compareTo((java.lang.Object) (short) 100);
        java.lang.String str38 = day35.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries24.getDataItem((org.jfree.data.time.RegularTimePeriod) day35);
        timeSeries17.add(timeSeriesDataItem39);
        org.jfree.data.time.TimeSeries timeSeries42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double43 = timeSeries42.getMaxY();
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        java.lang.Number number45 = null;
        timeSeries42.add((org.jfree.data.time.RegularTimePeriod) day44, number45, false);
        double double48 = timeSeries42.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day51 = new org.jfree.data.time.Day();
        timeSeries50.add((org.jfree.data.time.RegularTimePeriod) day51, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem56 = timeSeries42.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day51, (java.lang.Number) 1711911599999L);
        int int58 = timeSeriesDataItem56.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries17.addOrUpdate(timeSeriesDataItem56);
        java.util.Collection collection60 = timeSeries10.getTimePeriodsUniqueToOtherSeries(timeSeries17);
        boolean boolean62 = timeSeries10.equals((java.lang.Object) 10);
        int int63 = year2.compareTo((java.lang.Object) boolean62);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = year2.previous();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 9223372036854775807L + "'", long20 == 9223372036854775807L);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "31-March-2024" + "'", str38, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem39);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(timeSeriesDataItem56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1267");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        java.lang.Object obj16 = timeSeriesDataItem15.clone();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.addChangeListener(seriesChangeListener19);
        long long21 = timeSeries18.getMaximumItemAge();
        java.lang.String str22 = timeSeries18.getDescription();
        java.util.List list23 = timeSeries18.getItems();
        boolean boolean24 = timeSeriesDataItem15.equals((java.lang.Object) timeSeries18);
        java.lang.Comparable comparable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeSeries18.setKey(comparable25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'key' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9223372036854775807L + "'", long21 == 9223372036854775807L);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1268");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.setMaximumItemCount((int) (short) 0);
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries6.addChangeListener(seriesChangeListener7);
        long long9 = timeSeries6.getMaximumItemAge();
        java.lang.String str10 = timeSeries6.getDescription();
        timeSeries6.fireSeriesChanged();
        org.jfree.data.time.TimeSeries timeSeries12 = timeSeries1.addAndOrUpdate(timeSeries6);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 9223372036854775807L + "'", long9 == 9223372036854775807L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeSeries12);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1269");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        java.util.Calendar calendar11 = null;
        long long12 = fixedMillisecond7.getMiddleMillisecond(calendar11);
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getMiddleMillisecond(calendar13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = fixedMillisecond7.next();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1270");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.util.List list3 = timeSeries1.data;
        timeSeries1.removeAgedItems((long) 12, false);
        java.lang.Comparable comparable7 = timeSeries1.getKey();
        timeSeries1.removeAgedItems(true);
        java.lang.String str10 = timeSeries1.getDescription();
        java.beans.PropertyChangeListener propertyChangeListener11 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener11);
        long long13 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        java.util.Date date20 = day16.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond21 = new org.jfree.data.time.FixedMillisecond(date20);
        long long22 = fixedMillisecond21.getFirstMillisecond();
        java.util.Calendar calendar23 = null;
        fixedMillisecond21.peg(calendar23);
        long long25 = fixedMillisecond21.getMiddleMillisecond();
        long long26 = fixedMillisecond21.getMiddleMillisecond();
        java.util.Calendar calendar27 = null;
        fixedMillisecond21.peg(calendar27);
        org.jfree.data.time.Month month29 = new org.jfree.data.time.Month();
        long long30 = month29.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = month29.previous();
        boolean boolean33 = month29.equals((java.lang.Object) 10.0d);
        long long34 = month29.getSerialIndex();
        org.jfree.data.time.Year year35 = month29.getYear();
        org.jfree.data.time.TimeSeries timeSeries36 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond21, (org.jfree.data.time.RegularTimePeriod) month29);
        org.jfree.data.time.TimeSeries timeSeries39 = timeSeries36.createCopy(7, 9);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem41 = timeSeries39.getDataItem(2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertEquals("'" + comparable7 + "' != '" + 100L + "'", comparable7, 100L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711868400000L + "'", long22 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711868400000L + "'", long25 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1709280000000L + "'", long30 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 24291L + "'", long34 == 24291L);
        org.junit.Assert.assertNotNull(year35);
        org.junit.Assert.assertNotNull(timeSeries36);
        org.junit.Assert.assertNotNull(timeSeries39);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1271");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        java.util.List list6 = timeSeries1.getItems();
        org.jfree.data.time.Month month9 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number10 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month9, number10);
        long long12 = month9.getSerialIndex();
        java.util.Date date13 = month9.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = month9.previous();
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) month9);
        java.lang.String str16 = timeSeries1.getRangeDescription();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(list6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 118L + "'", long12 == 118L);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value" + "'", str16, "Value");
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1272");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.lang.Comparable comparable3 = timeSeries1.getKey();
        java.beans.PropertyChangeListener propertyChangeListener4 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener4);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        java.lang.String str10 = timeSeries7.getRangeDescription();
        java.util.List list11 = timeSeries7.getItems();
        java.util.List list12 = timeSeries7.data;
        timeSeries1.data = list12;
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener23 = null;
        timeSeries15.addChangeListener(seriesChangeListener23);
        timeSeries15.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries28 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day29 = new org.jfree.data.time.Day();
        timeSeries28.add((org.jfree.data.time.RegularTimePeriod) day29, (double) (short) 0, false);
        java.util.Date date33 = day29.getStart();
        java.lang.Number number34 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries15.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day29, number34);
        java.lang.Number number36 = timeSeriesDataItem35.getValue();
        boolean boolean37 = timeSeries1.equals((java.lang.Object) timeSeriesDataItem35);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + comparable3 + "' != '" + 100L + "'", comparable3, 100L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value" + "'", str10, "Value");
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem35);
        org.junit.Assert.assertEquals("'" + number36 + "' != '" + 0.0d + "'", number36, 0.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1273");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        int int18 = timeSeries1.getItemCount();
        java.util.Collection collection19 = timeSeries1.getTimePeriods();
        timeSeries1.setMaximumItemAge(1719907199999L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(collection19);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1274");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        java.util.Calendar calendar11 = null;
        long long12 = fixedMillisecond7.getFirstMillisecond(calendar11);
        java.util.Date date13 = fixedMillisecond7.getStart();
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day(date13);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1275");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        int int8 = timeSeries1.getItemCount();
        double double9 = timeSeries1.getMinY();
        double double10 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double13 = timeSeries12.getMaxY();
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        java.lang.Number number15 = null;
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day14, number15, false);
        double double18 = timeSeries12.getMaxY();
        int int19 = timeSeries12.getItemCount();
        double double20 = timeSeries12.getMinY();
        double double21 = timeSeries12.getMaxY();
        int int22 = timeSeries12.getItemCount();
        java.util.Collection collection23 = timeSeries12.getTimePeriods();
        boolean boolean24 = timeSeries1.equals((java.lang.Object) collection23);
        timeSeries1.fireSeriesChanged();
        timeSeries1.setMaximumItemCount((int) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(collection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1276");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double4 = timeSeries3.getMaxY();
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        java.lang.Number number6 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day5, number6, false);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day5);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        timeSeries11.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = timeSeries11.getNextTimePeriod();
        timeSeries11.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year22 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries11.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year22);
        java.util.Collection collection24 = timeSeries9.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        java.lang.String str25 = timeSeries11.getRangeDescription();
        timeSeries11.removeAgedItems(false);
        timeSeries11.clear();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries11, seriesChangeInfo29);
        java.util.Collection collection31 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        int int32 = timeSeries11.getItemCount();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value" + "'", str25, "Value");
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1277");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 9999);
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        long long3 = month2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = month2.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = year4.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = year4.previous();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year4);
        boolean boolean8 = timeSeries1.equals((java.lang.Object) year4);
        timeSeries1.setRangeDescription("Time");
        java.lang.Comparable comparable11 = timeSeries1.getKey();
        timeSeries1.removeAgedItems(true);
        org.jfree.data.time.Month month16 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date17 = month16.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = month16.next();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        timeSeries20.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = timeSeries20.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener28 = null;
        timeSeries20.addChangeListener(seriesChangeListener28);
        timeSeries20.setDomainDescription("hi!");
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        int int34 = day32.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = day32.next();
        timeSeries20.add(regularTimePeriod35, (java.lang.Number) 1);
        org.jfree.data.time.Month month40 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number41 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month40, number41);
        long long43 = month40.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries20.getDataItem((org.jfree.data.time.RegularTimePeriod) month40);
        org.jfree.data.time.Year year45 = month40.getYear();
        int int46 = month16.compareTo((java.lang.Object) year45);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = month16.next();
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries51 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener52 = null;
        timeSeries51.addChangeListener(seriesChangeListener52);
        long long54 = timeSeries51.getMaximumItemAge();
        java.lang.String str55 = timeSeries51.getDescription();
        int int56 = timeSeries51.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries58 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day59 = new org.jfree.data.time.Day();
        timeSeries58.add((org.jfree.data.time.RegularTimePeriod) day59, (double) (short) 0, false);
        java.util.Date date63 = day59.getStart();
        org.jfree.data.time.SerialDate serialDate64 = day59.getSerialDate();
        java.lang.String str65 = day59.toString();
        java.lang.Number number66 = null;
        timeSeries51.add((org.jfree.data.time.RegularTimePeriod) day59, number66);
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day59, (double) (short) 0, true);
        org.jfree.data.time.FixedMillisecond fixedMillisecond71 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem72 = timeSeries49.getRawDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond71);
        org.jfree.data.time.TimeSeries timeSeries74 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day75 = new org.jfree.data.time.Day();
        timeSeries74.add((org.jfree.data.time.RegularTimePeriod) day75, (double) (short) 0, false);
        java.util.Date date79 = day75.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond80 = new org.jfree.data.time.FixedMillisecond(date79);
        java.util.Date date81 = fixedMillisecond80.getTime();
        java.util.Calendar calendar82 = null;
        long long83 = fixedMillisecond80.getLastMillisecond(calendar82);
        java.util.Calendar calendar84 = null;
        long long85 = fixedMillisecond80.getFirstMillisecond(calendar84);
        java.util.Calendar calendar86 = null;
        long long87 = fixedMillisecond80.getFirstMillisecond(calendar86);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem88 = timeSeries49.getRawDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond80);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod89 = fixedMillisecond80.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod90 = fixedMillisecond80.next();
        org.jfree.data.time.TimeSeries timeSeries91 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month16, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond80);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1709280000000L + "'", long3 == 1709280000000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + comparable11 + "' != '" + 9999 + "'", comparable11, 9999);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 118L + "'", long43 == 118L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem44);
        org.junit.Assert.assertNotNull(year45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 9223372036854775807L + "'", long54 == 9223372036854775807L);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "31-March-2024" + "'", str65, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem72);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date81);
        org.junit.Assert.assertEquals(date81.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1711868400000L + "'", long83 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1711868400000L + "'", long85 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1711868400000L + "'", long87 == 1711868400000L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem88);
        org.junit.Assert.assertNotNull(regularTimePeriod89);
        org.junit.Assert.assertNotNull(regularTimePeriod90);
        org.junit.Assert.assertNotNull(timeSeries91);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1278");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number3 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem4 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, number3);
        boolean boolean5 = timeSeriesDataItem4.isSelected();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.addChangeListener(seriesChangeListener8);
        org.jfree.data.time.Month month10 = new org.jfree.data.time.Month();
        long long11 = month10.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener14 = null;
        timeSeries13.removeChangeListener(seriesChangeListener14);
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries13.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day18, (java.lang.Number) 10L);
        long long24 = day18.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = timeSeries7.createCopy((org.jfree.data.time.RegularTimePeriod) month10, (org.jfree.data.time.RegularTimePeriod) day18);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        timeSeries27.add((org.jfree.data.time.RegularTimePeriod) day28, (double) (short) 0, false);
        timeSeries27.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = timeSeries27.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent36 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean37 = timeSeries27.equals((java.lang.Object) seriesChangeEvent36);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        int int40 = day38.compareTo((java.lang.Object) (short) 100);
        java.lang.String str41 = day38.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = timeSeries27.getDataItem((org.jfree.data.time.RegularTimePeriod) day38);
        timeSeriesDataItem42.setSelected(false);
        timeSeriesDataItem42.setValue((java.lang.Number) (byte) 100);
        boolean boolean47 = timeSeriesDataItem42.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem48 = timeSeries7.addOrUpdate(timeSeriesDataItem42);
        int int49 = timeSeriesDataItem4.compareTo((java.lang.Object) timeSeriesDataItem42);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        int int52 = day50.compareTo((java.lang.Object) (short) 100);
        long long53 = day50.getMiddleMillisecond();
        int int54 = day50.getYear();
        boolean boolean56 = day50.equals((java.lang.Object) 5);
        int int57 = day50.getDayOfMonth();
        java.lang.String str58 = day50.toString();
        int int59 = timeSeriesDataItem4.compareTo((java.lang.Object) day50);
        java.lang.String str60 = day50.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1709280000000L + "'", long11 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1711911599999L + "'", long24 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries25);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "31-March-2024" + "'", str41, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1711911599999L + "'", long53 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2024 + "'", int54 == 2024);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 31 + "'", int57 == 31);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "31-March-2024" + "'", str58, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "31-March-2024" + "'", str60, "31-March-2024");
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1279");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3);
        int int8 = timeSeries7.getItemCount();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1280");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond((long) 11);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1281");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        long long9 = fixedMillisecond7.getFirstMillisecond();
        long long10 = fixedMillisecond7.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = fixedMillisecond7.next();
        long long12 = fixedMillisecond7.getLastMillisecond();
        long long13 = fixedMillisecond7.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711868400000L + "'", long9 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1282");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        java.lang.String str3 = month0.toString();
        int int4 = month0.getYearValue();
        long long5 = month0.getSerialIndex();
        int int6 = month0.getMonth();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "March 2024" + "'", str3, "March 2024");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 24291L + "'", long5 == 24291L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1283");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        java.lang.Class class24 = null;
        timeSeries1.timePeriodClass = class24;
        timeSeries1.clear();
        org.jfree.data.time.Month month27 = new org.jfree.data.time.Month();
        long long28 = month27.getFirstMillisecond();
        org.jfree.data.time.Year year29 = month27.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = year29.previous();
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries32.addChangeListener(seriesChangeListener33);
        long long35 = timeSeries32.getMaximumItemAge();
        java.lang.String str36 = timeSeries32.getDescription();
        double double37 = timeSeries32.getMaxY();
        java.lang.Object obj38 = timeSeries32.clone();
        int int39 = year29.compareTo(obj38);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) year29, 1.0d, false);
        java.lang.String str43 = timeSeries1.getDomainDescription();
        java.lang.String str44 = timeSeries1.getDomainDescription();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1709280000000L + "'", long28 == 1709280000000L);
        org.junit.Assert.assertNotNull(year29);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 9223372036854775807L + "'", long35 == 9223372036854775807L);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Time" + "'", str43, "Time");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Time" + "'", str44, "Time");
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1284");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day6, (java.lang.Number) 10L);
        int int12 = timeSeries1.getItemCount();
        java.util.List list13 = timeSeries1.getItems();
        double double14 = timeSeries1.getMinY();
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(list13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1285");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = year2.previous();
        java.util.Calendar calendar5 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long6 = year2.getLastMillisecond(calendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1286");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        int int3 = month0.getYearValue();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException5 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException7 = new org.jfree.data.time.TimePeriodFormatException("");
        timePeriodFormatException5.addSuppressed((java.lang.Throwable) timePeriodFormatException7);
        int int9 = month0.compareTo((java.lang.Object) timePeriodFormatException5);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) int9, "org.jfree.data.event.SeriesChangeEvent[source=true]", "March 2024");
        java.util.Collection collection13 = timeSeries12.getTimePeriods();
        org.jfree.data.time.Month month14 = new org.jfree.data.time.Month();
        long long15 = month14.getFirstMillisecond();
        org.jfree.data.time.Year year16 = month14.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = year16.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = year16.previous();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = year16.previous();
        java.lang.Object obj21 = null;
        int int22 = year16.compareTo(obj21);
        java.util.Date date23 = year16.getEnd();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries12.getDataItem((org.jfree.data.time.RegularTimePeriod) year16);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day27, (double) (short) 0, false);
        java.util.Date date31 = day27.getStart();
        org.jfree.data.time.SerialDate serialDate32 = day27.getSerialDate();
        long long33 = day27.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = day27.previous();
        long long35 = regularTimePeriod34.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod34, (double) 3);
        int int38 = year16.compareTo((java.lang.Object) timeSeriesDataItem37);
        org.jfree.data.time.Year year39 = new org.jfree.data.time.Year();
        long long40 = year39.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = year39.next();
        boolean boolean42 = year16.equals((java.lang.Object) regularTimePeriod41);
        org.jfree.data.time.Year year44 = new org.jfree.data.time.Year((int) (short) 100);
        java.util.Date date45 = year44.getEnd();
        boolean boolean46 = year16.equals((java.lang.Object) date45);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod47 = year16.next();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2024 + "'", int3 == 2024);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(collection13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1709280000000L + "'", long15 == 1709280000000L);
        org.junit.Assert.assertNotNull(year16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 31 23:59:59 PST 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem24);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711911599999L + "'", long33 == 1711911599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1711868399999L + "'", long35 == 1711868399999L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1735718399999L + "'", long40 == 1735718399999L);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Dec 31 23:59:59 PST 100");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod47);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1287");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 9999);
        timeSeries1.removeAgedItems(true);
        java.lang.Class class4 = timeSeries1.getTimePeriodClass();
        double double5 = timeSeries1.getMinY();
        timeSeries1.clear();
        java.lang.Class class7 = timeSeries1.timePeriodClass;
        org.junit.Assert.assertNull(class4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNull(class7);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1288");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        java.util.Date date21 = day17.getStart();
        int int22 = timeSeries8.getIndex((org.jfree.data.time.RegularTimePeriod) day17);
        java.lang.Class class23 = timeSeries8.timePeriodClass;
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        java.util.Date date30 = day26.getStart();
        java.util.TimeZone timeZone31 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class23, date30, timeZone31);
        timeSeries1.timePeriodClass = class23;
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        timeSeries35.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        java.util.Date date48 = day44.getStart();
        int int49 = timeSeries35.getIndex((org.jfree.data.time.RegularTimePeriod) day44);
        long long50 = day44.getFirstMillisecond();
        org.jfree.data.time.SerialDate serialDate51 = day44.getSerialDate();
        long long52 = day44.getFirstMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem54 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day44, (java.lang.Number) 118L);
        long long55 = day44.getLastMillisecond();
        org.jfree.data.time.TimeSeries timeSeries57 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Month month58 = new org.jfree.data.time.Month();
        long long59 = month58.getFirstMillisecond();
        long long60 = month58.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem62 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month58, 0.0d);
        timeSeries57.add(timeSeriesDataItem62, false);
        boolean boolean65 = timeSeries57.getNotify();
        boolean boolean66 = day44.equals((java.lang.Object) boolean65);
        java.lang.String str67 = day44.toString();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711868400000L + "'", long50 == 1711868400000L);
        org.junit.Assert.assertNotNull(serialDate51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711868400000L + "'", long52 == 1711868400000L);
        org.junit.Assert.assertNull(timeSeriesDataItem54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1711954799999L + "'", long55 == 1711954799999L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1709280000000L + "'", long59 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 24291L + "'", long60 == 24291L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "31-March-2024" + "'", str67, "31-March-2024");
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1289");
        org.jfree.data.time.Year year0 = new org.jfree.data.time.Year();
        long long1 = year0.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod2 = year0.previous();
        long long3 = year0.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1735718399999L + "'", long1 == 1735718399999L);
        org.junit.Assert.assertNotNull(regularTimePeriod2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2024L + "'", long3 == 2024L);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1290");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        long long9 = fixedMillisecond7.getFirstMillisecond();
        long long10 = fixedMillisecond7.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = fixedMillisecond7.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = fixedMillisecond7.next();
        long long13 = fixedMillisecond7.getLastMillisecond();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711868400000L + "'", long9 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1291");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        long long24 = timeSeries19.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double27 = timeSeries26.getMaxY();
        java.util.List list28 = timeSeries26.data;
        timeSeries26.removeAgedItems((long) 12, false);
        java.lang.Comparable comparable32 = timeSeries26.getKey();
        timeSeries26.removeAgedItems(true);
        java.util.Collection collection35 = timeSeries19.getTimePeriodsUniqueToOtherSeries(timeSeries26);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        timeSeries37.add((org.jfree.data.time.RegularTimePeriod) day38, (double) (short) 0, false);
        java.util.Date date42 = day38.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond43 = new org.jfree.data.time.FixedMillisecond(date42);
        timeSeries19.setKey((java.lang.Comparable) fixedMillisecond43);
        timeSeries19.setMaximumItemCount(0);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertEquals("'" + comparable32 + "' != '" + 100L + "'", comparable32, 100L);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1292");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number3 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem4 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, number3);
        long long5 = month2.getSerialIndex();
        java.util.Date date6 = month2.getStart();
        long long7 = month2.getLastMillisecond();
        java.lang.String str8 = month2.toString();
        java.lang.String str9 = month2.toString();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 118L + "'", long5 == 118L);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-61857014400001L) + "'", long7 == (-61857014400001L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "October 9" + "'", str8, "October 9");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "October 9" + "'", str9, "October 9");
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1293");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.lang.Comparable comparable3 = timeSeries1.getKey();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent4 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries1);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo5 = seriesChangeEvent4.getSummary();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo6 = seriesChangeEvent4.getSummary();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + comparable3 + "' != '" + 100L + "'", comparable3, 100L);
        org.junit.Assert.assertNull(seriesChangeInfo5);
        org.junit.Assert.assertNull(seriesChangeInfo6);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1294");
        org.jfree.data.time.Month month1 = new org.jfree.data.time.Month();
        long long2 = month1.getFirstMillisecond();
        org.jfree.data.time.Year year3 = month1.getYear();
        long long4 = year3.getLastMillisecond();
        int int5 = year3.getYear();
        long long6 = year3.getLastMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month7 = new org.jfree.data.time.Month((int) (byte) -1, year3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Month outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1709280000000L + "'", long2 == 1709280000000L);
        org.junit.Assert.assertNotNull(year3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1735718399999L + "'", long4 == 1735718399999L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2024 + "'", int5 == 2024);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1735718399999L + "'", long6 == 1735718399999L);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1295");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) "31-March-2024");
        java.util.List list22 = timeSeries1.getItems();
        timeSeries1.setMaximumItemAge((long) (byte) 0);
        int int25 = timeSeries1.getItemCount();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.delete(2147483647, 31, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1296");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.util.List list3 = timeSeries1.data;
        timeSeries1.removeAgedItems((long) 12, false);
        java.lang.Comparable comparable7 = timeSeries1.getKey();
        timeSeries1.removeAgedItems(true);
        java.lang.String str10 = timeSeries1.getDescription();
        java.beans.PropertyChangeListener propertyChangeListener11 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener11);
        long long13 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        java.util.Date date20 = day16.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond21 = new org.jfree.data.time.FixedMillisecond(date20);
        long long22 = fixedMillisecond21.getFirstMillisecond();
        java.util.Calendar calendar23 = null;
        fixedMillisecond21.peg(calendar23);
        long long25 = fixedMillisecond21.getMiddleMillisecond();
        long long26 = fixedMillisecond21.getMiddleMillisecond();
        java.util.Calendar calendar27 = null;
        fixedMillisecond21.peg(calendar27);
        org.jfree.data.time.Month month29 = new org.jfree.data.time.Month();
        long long30 = month29.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = month29.previous();
        boolean boolean33 = month29.equals((java.lang.Object) 10.0d);
        long long34 = month29.getSerialIndex();
        org.jfree.data.time.Year year35 = month29.getYear();
        org.jfree.data.time.TimeSeries timeSeries36 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond21, (org.jfree.data.time.RegularTimePeriod) month29);
        long long37 = fixedMillisecond21.getMiddleMillisecond();
        java.util.Calendar calendar38 = null;
        long long39 = fixedMillisecond21.getMiddleMillisecond(calendar38);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertEquals("'" + comparable7 + "' != '" + 100L + "'", comparable7, 100L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711868400000L + "'", long22 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711868400000L + "'", long25 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1709280000000L + "'", long30 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 24291L + "'", long34 == 24291L);
        org.junit.Assert.assertNotNull(year35);
        org.junit.Assert.assertNotNull(timeSeries36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711868400000L + "'", long37 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1711868400000L + "'", long39 == 1711868400000L);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1297");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.addChangeListener(seriesChangeListener9);
        timeSeries1.setDomainDescription("hi!");
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        int int15 = day13.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = day13.next();
        timeSeries1.add(regularTimePeriod16, (java.lang.Number) 1);
        double double19 = timeSeries1.getMaxY();
        timeSeries1.setRangeDescription("");
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.addChangeListener(seriesChangeListener26);
        long long28 = timeSeries25.getMaximumItemAge();
        java.lang.String str29 = timeSeries25.getDescription();
        int int30 = timeSeries25.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        java.util.Date date37 = day33.getStart();
        org.jfree.data.time.SerialDate serialDate38 = day33.getSerialDate();
        java.lang.String str39 = day33.toString();
        java.lang.Number number40 = null;
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day33, number40);
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, true);
        org.jfree.data.time.FixedMillisecond fixedMillisecond45 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem46 = timeSeries23.getRawDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond45);
        org.jfree.data.time.TimeSeries timeSeries48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day49 = new org.jfree.data.time.Day();
        timeSeries48.add((org.jfree.data.time.RegularTimePeriod) day49, (double) (short) 0, false);
        java.util.Date date53 = day49.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond54 = new org.jfree.data.time.FixedMillisecond(date53);
        java.util.Date date55 = fixedMillisecond54.getTime();
        java.util.Calendar calendar56 = null;
        long long57 = fixedMillisecond54.getLastMillisecond(calendar56);
        java.util.Calendar calendar58 = null;
        long long59 = fixedMillisecond54.getFirstMillisecond(calendar58);
        java.util.Calendar calendar60 = null;
        long long61 = fixedMillisecond54.getFirstMillisecond(calendar60);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem62 = timeSeries23.getRawDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond54);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = fixedMillisecond54.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = fixedMillisecond54.previous();
        boolean boolean65 = timeSeries1.equals((java.lang.Object) fixedMillisecond54);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 9223372036854775807L + "'", long28 == 9223372036854775807L);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "31-March-2024" + "'", str39, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem46);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1711868400000L + "'", long57 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1711868400000L + "'", long59 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1711868400000L + "'", long61 == 1711868400000L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem62);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1298");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        java.util.Date date9 = fixedMillisecond7.getTime();
        org.jfree.data.time.FixedMillisecond fixedMillisecond10 = new org.jfree.data.time.FixedMillisecond(date9);
        org.jfree.data.time.FixedMillisecond fixedMillisecond11 = new org.jfree.data.time.FixedMillisecond(date9);
        java.lang.String str12 = fixedMillisecond11.toString();
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond11.getMiddleMillisecond(calendar13);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Sun Mar 31 00:00:00 PDT 2024" + "'", str12, "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1299");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        java.util.List list8 = timeSeries1.data;
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date12 = month11.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = month11.next();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener23 = null;
        timeSeries15.addChangeListener(seriesChangeListener23);
        timeSeries15.setDomainDescription("hi!");
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        int int29 = day27.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = day27.next();
        timeSeries15.add(regularTimePeriod30, (java.lang.Number) 1);
        org.jfree.data.time.Month month35 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number36 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month35, number36);
        long long38 = month35.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries15.getDataItem((org.jfree.data.time.RegularTimePeriod) month35);
        org.jfree.data.time.Year year40 = month35.getYear();
        int int41 = month11.compareTo((java.lang.Object) year40);
        long long42 = month11.getLastMillisecond();
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) month11, (java.lang.Number) 0.0d);
        timeSeries1.setNotify(false);
        int int47 = timeSeries1.getItemCount();
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 118L + "'", long38 == 118L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem39);
        org.junit.Assert.assertNotNull(year40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-61857014400001L) + "'", long42 == (-61857014400001L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1300");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond((long) (byte) 0);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1301");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener5 = null;
        timeSeries4.addChangeListener(seriesChangeListener5);
        org.jfree.data.time.Month month7 = new org.jfree.data.time.Month();
        long long8 = month7.getFirstMillisecond();
        org.jfree.data.time.Year year9 = month7.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = year9.next();
        long long11 = year9.getLastMillisecond();
        java.lang.Number number12 = null;
        timeSeries4.add((org.jfree.data.time.RegularTimePeriod) year9, number12);
        java.util.Date date14 = year9.getStart();
        long long15 = year9.getLastMillisecond();
        java.lang.String str16 = year9.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) year9);
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1709280000000L + "'", long8 == 1709280000000L);
        org.junit.Assert.assertNotNull(year9);
        org.junit.Assert.assertNotNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1735718399999L + "'", long11 == 1735718399999L);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Mon Jan 01 00:00:00 PST 2024");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1735718399999L + "'", long15 == 1735718399999L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2024" + "'", str16, "2024");
        org.junit.Assert.assertNull(timeSeriesDataItem17);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1302");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getMiddleMillisecond();
        java.util.Calendar calendar12 = null;
        long long13 = fixedMillisecond7.getMiddleMillisecond(calendar12);
        long long14 = fixedMillisecond7.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1303");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number3 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem4 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, number3);
        long long5 = month2.getSerialIndex();
        java.util.Date date6 = month2.getStart();
        java.util.Calendar calendar7 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long8 = month2.getMiddleMillisecond(calendar7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 118L + "'", long5 == 118L);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 01 00:00:00 PST 9");
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1304");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getLastMillisecond();
        java.lang.String str3 = month0.toString();
        java.util.Calendar calendar4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = month0.getFirstMillisecond(calendar4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711954799999L + "'", long2 == 1711954799999L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "March 2024" + "'", str3, "March 2024");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1305");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.SerialDate serialDate14 = day9.getSerialDate();
        java.lang.String str15 = day9.toString();
        java.lang.Number number16 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day9, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        int int30 = timeSeries19.getItemCount();
        java.util.List list31 = timeSeries19.getItems();
        timeSeries1.data = list31;
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener37 = null;
        timeSeries36.addChangeListener(seriesChangeListener37);
        long long39 = timeSeries36.getMaximumItemAge();
        java.lang.String str40 = timeSeries36.getDescription();
        int int41 = timeSeries36.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        java.util.Date date48 = day44.getStart();
        org.jfree.data.time.SerialDate serialDate49 = day44.getSerialDate();
        java.lang.String str50 = day44.toString();
        java.lang.Number number51 = null;
        timeSeries36.add((org.jfree.data.time.RegularTimePeriod) day44, number51);
        timeSeries34.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, true);
        org.jfree.data.time.FixedMillisecond fixedMillisecond56 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem57 = timeSeries34.getRawDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond56);
        org.jfree.data.time.TimeSeries timeSeries59 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day60 = new org.jfree.data.time.Day();
        timeSeries59.add((org.jfree.data.time.RegularTimePeriod) day60, (double) (short) 0, false);
        java.util.Date date64 = day60.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond65 = new org.jfree.data.time.FixedMillisecond(date64);
        java.util.Date date66 = fixedMillisecond65.getTime();
        java.util.Calendar calendar67 = null;
        long long68 = fixedMillisecond65.getLastMillisecond(calendar67);
        java.util.Calendar calendar69 = null;
        long long70 = fixedMillisecond65.getFirstMillisecond(calendar69);
        java.util.Calendar calendar71 = null;
        long long72 = fixedMillisecond65.getFirstMillisecond(calendar71);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem73 = timeSeries34.getRawDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond65);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = fixedMillisecond65.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem75 = timeSeries1.getRawDataItem(regularTimePeriod74);
        java.beans.PropertyChangeListener propertyChangeListener76 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener76);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9223372036854775807L + "'", long39 == 9223372036854775807L);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "31-March-2024" + "'", str50, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem57);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1711868400000L + "'", long68 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1711868400000L + "'", long70 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1711868400000L + "'", long72 == 1711868400000L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem73);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertNotNull(timeSeriesDataItem75);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1306");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day9, (java.lang.Number) (byte) 10);
        timeSeriesDataItem11.setValue((java.lang.Number) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem14 = timeSeries1.addOrUpdate(timeSeriesDataItem11);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double17 = timeSeries16.getMaxY();
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        java.lang.Number number19 = null;
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day18, number19, false);
        double double22 = timeSeries16.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day();
        timeSeries24.add((org.jfree.data.time.RegularTimePeriod) day25, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries16.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day25, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = day25.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) day25);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = timeSeries1.getTimePeriod(8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(timeSeriesDataItem14);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1307");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) "31-March-2024");
        java.util.List list22 = timeSeries1.getItems();
        java.lang.String str23 = timeSeries1.getDomainDescription();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Time" + "'", str23, "Time");
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1308");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        long long3 = month0.getFirstMillisecond();
        long long4 = month0.getLastMillisecond();
        long long5 = month0.getSerialIndex();
        long long6 = month0.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1709280000000L + "'", long3 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1711954799999L + "'", long4 == 1711954799999L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 24291L + "'", long5 == 24291L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 24291L + "'", long6 == 24291L);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1309");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        java.lang.String str8 = day2.toString();
        java.lang.String str9 = day2.toString();
        java.lang.String str10 = day2.toString();
        org.jfree.data.time.SerialDate serialDate11 = day2.getSerialDate();
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day(serialDate11);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = day12.next();
        long long14 = day12.getSerialIndex();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "31-March-2024" + "'", str8, "31-March-2024");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "31-March-2024" + "'", str9, "31-March-2024");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "31-March-2024" + "'", str10, "31-March-2024");
        org.junit.Assert.assertNotNull(serialDate11);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 45382L + "'", long14 == 45382L);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1310");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(31);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double4 = timeSeries3.getMaxY();
        java.util.List list5 = timeSeries3.data;
        boolean boolean6 = timeSeries3.isEmpty();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.SerialDate serialDate14 = day9.getSerialDate();
        java.lang.String str15 = day9.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = day9.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem18 = timeSeries3.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 10);
        boolean boolean19 = year1.equals((java.lang.Object) timeSeries3);
        org.jfree.data.time.Year year21 = new org.jfree.data.time.Year((int) (short) 10);
        int int22 = year21.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = year21.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries3.getRawDataItem(regularTimePeriod23);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNull(timeSeriesDataItem18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1311");
        java.util.Date date0 = null;
        java.util.TimeZone timeZone1 = null;
        java.util.Locale locale2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month3 = new org.jfree.data.time.Month(date0, timeZone1, locale2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1312");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Calendar calendar8 = null;
        long long9 = fixedMillisecond7.getMiddleMillisecond(calendar8);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond7, (double) (byte) 0);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (byte) 0);
        java.lang.Comparable comparable13 = timeSeries12.getKey();
        timeSeries12.setDescription("8");
        timeSeries12.setDescription("8");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711868400000L + "'", long9 == 1711868400000L);
        org.junit.Assert.assertEquals("'" + comparable13 + "' != '" + (byte) 0 + "'", comparable13, (byte) 0);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1313");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day20 = new org.jfree.data.time.Day();
        timeSeries19.add((org.jfree.data.time.RegularTimePeriod) day20, (double) (short) 0, false);
        java.util.Date date24 = day20.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond25 = new org.jfree.data.time.FixedMillisecond(date24);
        long long26 = fixedMillisecond25.getFirstMillisecond();
        java.util.Date date27 = fixedMillisecond25.getTime();
        int int28 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) fixedMillisecond25);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        timeSeries30.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = timeSeries30.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries30.addChangeListener(seriesChangeListener38);
        timeSeries30.setDomainDescription("hi!");
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        int int44 = day42.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = day42.next();
        timeSeries30.add(regularTimePeriod45, (java.lang.Number) 1);
        java.lang.Number number48 = null;
        timeSeries1.add(regularTimePeriod45, number48);
        org.jfree.data.time.Month month50 = new org.jfree.data.time.Month();
        long long51 = month50.getFirstMillisecond();
        long long52 = month50.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem54 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month50, 0.0d);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = month50.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem56 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month50);
        java.lang.String str57 = month50.toString();
        long long58 = month50.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = month50.previous();
        boolean boolean61 = month50.equals((java.lang.Object) 10);
        long long62 = month50.getFirstMillisecond();
        java.lang.String str63 = month50.toString();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException65 = new org.jfree.data.time.TimePeriodFormatException("Time");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException67 = new org.jfree.data.time.TimePeriodFormatException("March 2024");
        timePeriodFormatException65.addSuppressed((java.lang.Throwable) timePeriodFormatException67);
        org.jfree.data.general.SeriesException seriesException70 = new org.jfree.data.general.SeriesException("org.jfree.data.event.SeriesChangeEvent[source=10.0]");
        timePeriodFormatException65.addSuppressed((java.lang.Throwable) seriesException70);
        java.lang.Throwable[] throwableArray72 = timePeriodFormatException65.getSuppressed();
        int int73 = month50.compareTo((java.lang.Object) timePeriodFormatException65);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1709280000000L + "'", long51 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 24291L + "'", long52 == 24291L);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(timeSeriesDataItem56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "March 2024" + "'", str57, "March 2024");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1711954799999L + "'", long58 == 1711954799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1709280000000L + "'", long62 == 1709280000000L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "March 2024" + "'", str63, "March 2024");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1314");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        long long3 = month2.getFirstMillisecond();
        long long4 = month2.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem6 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, 0.0d);
        timeSeries1.add(timeSeriesDataItem6, false);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        int int11 = day9.compareTo((java.lang.Object) (short) 100);
        long long12 = day9.getMiddleMillisecond();
        int int13 = day9.getYear();
        boolean boolean15 = day9.equals((java.lang.Object) 5);
        int int16 = day9.getDayOfMonth();
        java.lang.String str17 = day9.toString();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day9, "Value", "hi!");
        java.lang.Number number21 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) day9);
        timeSeries1.setMaximumItemCount(0);
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.removeChangeListener(seriesChangeListener26);
        java.lang.String str28 = timeSeries25.getRangeDescription();
        java.util.List list29 = timeSeries25.getItems();
        java.util.List list30 = timeSeries25.data;
        timeSeries1.data = list30;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1709280000000L + "'", long3 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24291L + "'", long4 == 24291L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711911599999L + "'", long12 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2024 + "'", int13 == 2024);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "31-March-2024" + "'", str17, "31-March-2024");
        org.junit.Assert.assertEquals("'" + number21 + "' != '" + 0.0d + "'", number21, 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Value" + "'", str28, "Value");
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(list30);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1315");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        long long3 = day0.getMiddleMillisecond();
        int int4 = day0.getYear();
        boolean boolean6 = day0.equals((java.lang.Object) 5);
        int int7 = day0.getDayOfMonth();
        java.lang.String str8 = day0.toString();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day0, "Value", "hi!");
        timeSeries11.setMaximumItemAge(10L);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent24 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean25 = timeSeries15.equals((java.lang.Object) seriesChangeEvent24);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        int int28 = day26.compareTo((java.lang.Object) (short) 100);
        java.lang.String str29 = day26.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries15.getDataItem((org.jfree.data.time.RegularTimePeriod) day26);
        timeSeriesDataItem30.setSelected(false);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = timeSeriesDataItem30.getPeriod();
        boolean boolean34 = timeSeriesDataItem30.isSelected();
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day();
        timeSeries36.add((org.jfree.data.time.RegularTimePeriod) day37, (double) (short) 0, false);
        java.util.Date date41 = day37.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond42 = new org.jfree.data.time.FixedMillisecond(date41);
        long long43 = fixedMillisecond42.getFirstMillisecond();
        java.util.Date date44 = fixedMillisecond42.getTime();
        org.jfree.data.time.FixedMillisecond fixedMillisecond45 = new org.jfree.data.time.FixedMillisecond(date44);
        int int46 = timeSeriesDataItem30.compareTo((java.lang.Object) fixedMillisecond45);
        org.jfree.data.time.Month month49 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date50 = month49.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod51 = month49.next();
        org.jfree.data.time.TimeSeries timeSeries52 = timeSeries11.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond45, regularTimePeriod51);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener53 = null;
        timeSeries52.addChangeListener(seriesChangeListener53);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeSeries52.add(timeSeriesDataItem55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'item' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711911599999L + "'", long3 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "31-March-2024" + "'", str8, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31-March-2024" + "'", str29, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1711868400000L + "'", long43 == 1711868400000L);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod51);
        org.junit.Assert.assertNotNull(timeSeries52);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1316");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException1 = new org.jfree.data.time.TimePeriodFormatException("31-March-2024");
        java.lang.Throwable[] throwableArray2 = timePeriodFormatException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1317");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        long long4 = year2.getLastMillisecond();
        boolean boolean6 = year2.equals((java.lang.Object) "October 9");
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        int int15 = timeSeries10.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        java.util.Date date22 = day18.getStart();
        org.jfree.data.time.SerialDate serialDate23 = day18.getSerialDate();
        java.lang.String str24 = day18.toString();
        java.lang.Number number25 = null;
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day18, number25);
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, true);
        org.jfree.data.time.FixedMillisecond fixedMillisecond30 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = timeSeries8.getRawDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond30);
        int int32 = year2.compareTo((java.lang.Object) timeSeriesDataItem31);
        boolean boolean33 = timeSeriesDataItem31.isSelected();
        timeSeriesDataItem31.setSelected(true);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.addChangeListener(seriesChangeListener38);
        long long40 = timeSeries37.getMaximumItemAge();
        java.lang.String str41 = timeSeries37.getDescription();
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        java.util.Date date48 = day44.getStart();
        long long49 = day44.getFirstMillisecond();
        timeSeries37.add((org.jfree.data.time.RegularTimePeriod) day44, (java.lang.Number) 10, false);
        java.util.List list53 = timeSeries37.data;
        java.lang.String str54 = timeSeries37.getDomainDescription();
        org.jfree.data.time.TimeSeries timeSeries56 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day57 = new org.jfree.data.time.Day();
        timeSeries56.add((org.jfree.data.time.RegularTimePeriod) day57, (double) (short) 0, false);
        timeSeries56.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = timeSeries56.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent65 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean66 = timeSeries56.equals((java.lang.Object) seriesChangeEvent65);
        org.jfree.data.time.Day day67 = new org.jfree.data.time.Day();
        int int69 = day67.compareTo((java.lang.Object) (short) 100);
        java.lang.String str70 = day67.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem71 = timeSeries56.getDataItem((org.jfree.data.time.RegularTimePeriod) day67);
        timeSeries37.delete((org.jfree.data.time.RegularTimePeriod) day67);
        java.util.Date date73 = day67.getStart();
        org.jfree.data.time.Month month74 = new org.jfree.data.time.Month(date73);
        boolean boolean75 = timeSeriesDataItem31.equals((java.lang.Object) date73);
        java.util.TimeZone timeZone76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month77 = new org.jfree.data.time.Month(date73, timeZone76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1735718399999L + "'", long4 == 1735718399999L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "31-March-2024" + "'", str24, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9223372036854775807L + "'", long40 == 9223372036854775807L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1711868400000L + "'", long49 == 1711868400000L);
        org.junit.Assert.assertNotNull(list53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Time" + "'", str54, "Time");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "31-March-2024" + "'", str70, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem71);
        org.junit.Assert.assertNotNull(date73);
        org.junit.Assert.assertEquals(date73.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1318");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = fixedMillisecond7.next();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) fixedMillisecond7, "", "");
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = fixedMillisecond7.previous();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1319");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem13 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond7, (double) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = fixedMillisecond7.previous();
        java.util.Calendar calendar15 = null;
        long long16 = fixedMillisecond7.getLastMillisecond(calendar15);
        java.util.Calendar calendar17 = null;
        fixedMillisecond7.peg(calendar17);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = fixedMillisecond7.previous();
        java.util.Calendar calendar20 = null;
        fixedMillisecond7.peg(calendar20);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1320");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = month4.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = year6.next();
        long long8 = year6.getLastMillisecond();
        java.lang.Number number9 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) year6, number9);
        java.util.Date date11 = year6.getStart();
        org.jfree.data.time.Year year12 = new org.jfree.data.time.Year(date11);
        java.lang.String str13 = year12.toString();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1735718399999L + "'", long8 == 1735718399999L);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Jan 01 00:00:00 PST 2024");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2024" + "'", str13, "2024");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1321");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double4 = timeSeries3.getMaxY();
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        java.lang.Number number6 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day5, number6, false);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day5);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        timeSeries11.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = timeSeries11.getNextTimePeriod();
        timeSeries11.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year22 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries11.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year22);
        java.util.Collection collection24 = timeSeries9.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        java.lang.String str25 = timeSeries11.getRangeDescription();
        timeSeries11.removeAgedItems(false);
        timeSeries11.clear();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries11, seriesChangeInfo29);
        java.util.Collection collection31 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.addChangeListener(seriesChangeListener34);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        timeSeries37.add((org.jfree.data.time.RegularTimePeriod) day38, (double) (short) 0, false);
        timeSeries37.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = timeSeries37.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent46 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean47 = timeSeries37.equals((java.lang.Object) seriesChangeEvent46);
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        int int50 = day48.compareTo((java.lang.Object) (short) 100);
        java.lang.String str51 = day48.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem52 = timeSeries37.getDataItem((org.jfree.data.time.RegularTimePeriod) day48);
        timeSeriesDataItem52.setSelected(false);
        timeSeriesDataItem52.setValue((java.lang.Number) (byte) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem57 = timeSeries33.addOrUpdate(timeSeriesDataItem52);
        boolean boolean58 = timeSeries11.equals((java.lang.Object) timeSeries33);
        org.jfree.data.time.Month month59 = new org.jfree.data.time.Month();
        long long60 = month59.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = month59.previous();
        boolean boolean63 = month59.equals((java.lang.Object) 10.0d);
        timeSeries11.delete((org.jfree.data.time.RegularTimePeriod) month59);
        timeSeries11.fireSeriesChanged();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value" + "'", str25, "Value");
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "31-March-2024" + "'", str51, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem52);
        org.junit.Assert.assertNull(timeSeriesDataItem57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1709280000000L + "'", long60 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1322");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        double double20 = timeSeries19.getMinY();
        java.lang.String str21 = timeSeries19.getDescription();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1323");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year(0);
        long long2 = year1.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year1.previous();
        int int4 = year1.getYear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1324");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        timeSeries1.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year12 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem13 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year12);
        java.util.Date date14 = year12.getEnd();
        java.util.TimeZone timeZone15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Year year16 = new org.jfree.data.time.Year(date14, timeZone15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(timeSeriesDataItem13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Dec 31 23:59:59 PST 1");
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1325");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number3 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem4 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, number3);
        boolean boolean5 = timeSeriesDataItem4.isSelected();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.addChangeListener(seriesChangeListener8);
        org.jfree.data.time.Month month10 = new org.jfree.data.time.Month();
        long long11 = month10.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener14 = null;
        timeSeries13.removeChangeListener(seriesChangeListener14);
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries13.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day18, (java.lang.Number) 10L);
        long long24 = day18.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = timeSeries7.createCopy((org.jfree.data.time.RegularTimePeriod) month10, (org.jfree.data.time.RegularTimePeriod) day18);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        timeSeries27.add((org.jfree.data.time.RegularTimePeriod) day28, (double) (short) 0, false);
        timeSeries27.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = timeSeries27.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent36 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean37 = timeSeries27.equals((java.lang.Object) seriesChangeEvent36);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        int int40 = day38.compareTo((java.lang.Object) (short) 100);
        java.lang.String str41 = day38.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = timeSeries27.getDataItem((org.jfree.data.time.RegularTimePeriod) day38);
        timeSeriesDataItem42.setSelected(false);
        timeSeriesDataItem42.setValue((java.lang.Number) (byte) 100);
        boolean boolean47 = timeSeriesDataItem42.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem48 = timeSeries7.addOrUpdate(timeSeriesDataItem42);
        int int49 = timeSeriesDataItem4.compareTo((java.lang.Object) timeSeriesDataItem42);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        int int52 = day50.compareTo((java.lang.Object) (short) 100);
        long long53 = day50.getMiddleMillisecond();
        int int54 = day50.getYear();
        boolean boolean56 = day50.equals((java.lang.Object) 5);
        int int57 = day50.getDayOfMonth();
        java.lang.String str58 = day50.toString();
        int int59 = timeSeriesDataItem4.compareTo((java.lang.Object) day50);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = day50.previous();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1709280000000L + "'", long11 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1711911599999L + "'", long24 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries25);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "31-March-2024" + "'", str41, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1711911599999L + "'", long53 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2024 + "'", int54 == 2024);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 31 + "'", int57 == 31);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "31-March-2024" + "'", str58, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1326");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        long long3 = day0.getMiddleMillisecond();
        int int4 = day0.getYear();
        boolean boolean6 = day0.equals((java.lang.Object) 5);
        int int7 = day0.getDayOfMonth();
        long long8 = day0.getSerialIndex();
        java.util.Date date9 = day0.getEnd();
        org.jfree.data.time.SerialDate serialDate10 = day0.getSerialDate();
        long long11 = day0.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711911599999L + "'", long3 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 45382L + "'", long8 == 45382L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711954799999L + "'", long11 == 1711954799999L);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1327");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day(serialDate7);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = day8.previous();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent11 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo12 = null;
        seriesChangeEvent11.setSummary(seriesChangeInfo12);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo14 = seriesChangeEvent11.getSummary();
        java.lang.Object obj15 = seriesChangeEvent11.getSource();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo16 = seriesChangeEvent11.getSummary();
        boolean boolean17 = day8.equals((java.lang.Object) seriesChangeInfo16);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNull(seriesChangeInfo14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + 10.0d + "'", obj15, 10.0d);
        org.junit.Assert.assertNull(seriesChangeInfo16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1328");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod2 = month0.previous();
        boolean boolean4 = month0.equals((java.lang.Object) 10.0d);
        long long5 = month0.getSerialIndex();
        org.jfree.data.time.Year year6 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = year6.previous();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem9 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod7, 0.0d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 24291L + "'", long5 == 24291L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1329");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        timeSeries21.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = timeSeries21.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean31 = timeSeries21.equals((java.lang.Object) seriesChangeEvent30);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        int int34 = day32.compareTo((java.lang.Object) (short) 100);
        java.lang.String str35 = day32.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = timeSeries21.getDataItem((org.jfree.data.time.RegularTimePeriod) day32);
        timeSeriesDataItem36.setSelected(false);
        timeSeriesDataItem36.setValue((java.lang.Number) (byte) 100);
        boolean boolean41 = timeSeriesDataItem36.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = timeSeries1.addOrUpdate(timeSeriesDataItem36);
        org.jfree.data.time.Day day43 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem45 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day43, (java.lang.Number) (byte) 10);
        int int46 = timeSeriesDataItem36.compareTo((java.lang.Object) (byte) 10);
        java.lang.Number number47 = null;
        timeSeriesDataItem36.setValue(number47);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = timeSeriesDataItem36.getPeriod();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "31-March-2024" + "'", str35, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1330");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        java.lang.Comparable comparable19 = timeSeries18.getKey();
        timeSeries18.removeAgedItems(false);
        int int22 = timeSeries18.getMaximumItemCount();
        java.lang.String str23 = timeSeries18.getDomainDescription();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        timeSeries25.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day34, (double) (short) 0, false);
        java.util.Date date38 = day34.getStart();
        int int39 = timeSeries25.getIndex((org.jfree.data.time.RegularTimePeriod) day34);
        long long40 = day34.getFirstMillisecond();
        org.jfree.data.time.SerialDate serialDate41 = day34.getSerialDate();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = timeSeries18.getDataItem((org.jfree.data.time.RegularTimePeriod) day34);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertEquals("'" + comparable19 + "' != '" + 1711911599999L + "'", comparable19, 1711911599999L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "31-March-2024" + "'", str23, "31-March-2024");
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1711868400000L + "'", long40 == 1711868400000L);
        org.junit.Assert.assertNotNull(serialDate41);
        org.junit.Assert.assertNull(timeSeriesDataItem42);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1331");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod1 = month0.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod2 = month0.next();
        int int3 = month0.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = month0.next();
        org.junit.Assert.assertNotNull(regularTimePeriod1);
        org.junit.Assert.assertNotNull(regularTimePeriod2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2024 + "'", int3 == 2024);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1332");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list2 = timeSeries1.data;
        org.jfree.data.time.Month month3 = new org.jfree.data.time.Month();
        long long4 = month3.getFirstMillisecond();
        org.jfree.data.time.Year year5 = month3.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = year5.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = year5.previous();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year5);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = year5.previous();
        java.lang.Object obj10 = null;
        int int11 = year5.compareTo(obj10);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) year5, (double) (short) -1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.Month month15 = new org.jfree.data.time.Month();
        long long16 = month15.getFirstMillisecond();
        org.jfree.data.time.Year year17 = month15.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = year17.next();
        long long19 = year17.getLastMillisecond();
        long long20 = year17.getFirstMillisecond();
        int int21 = year17.getYear();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add((org.jfree.data.time.RegularTimePeriod) year17, (java.lang.Number) (-62167363200000L));
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are attempting to add an observation for the time period 2024 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(list2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1709280000000L + "'", long4 == 1709280000000L);
        org.junit.Assert.assertNotNull(year5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1709280000000L + "'", long16 == 1709280000000L);
        org.junit.Assert.assertNotNull(year17);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1735718399999L + "'", long19 == 1735718399999L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1704096000000L + "'", long20 == 1704096000000L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2024 + "'", int21 == 2024);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1333");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.clear();
        timeSeries1.removeAgedItems((long) 5, false);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        int int9 = day7.compareTo((java.lang.Object) (short) 100);
        long long10 = day7.getMiddleMillisecond();
        int int11 = day7.getYear();
        boolean boolean13 = day7.equals((java.lang.Object) 5);
        int int14 = day7.getDayOfMonth();
        long long15 = day7.getSerialIndex();
        java.lang.Number number16 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) day7);
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy(9, (int) (byte) 100);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        java.util.Date date26 = day22.getStart();
        org.jfree.data.time.SerialDate serialDate27 = day22.getSerialDate();
        long long28 = day22.getMiddleMillisecond();
        long long29 = day22.getLastMillisecond();
        timeSeries19.delete((org.jfree.data.time.RegularTimePeriod) day22);
        java.lang.String str31 = timeSeries19.getDomainDescription();
        java.beans.PropertyChangeListener propertyChangeListener32 = null;
        timeSeries19.removePropertyChangeListener(propertyChangeListener32);
        java.util.Collection collection34 = timeSeries19.getTimePeriods();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711911599999L + "'", long10 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2024 + "'", int11 == 2024);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 45382L + "'", long15 == 45382L);
        org.junit.Assert.assertNull(number16);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1711911599999L + "'", long28 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711954799999L + "'", long29 == 1711954799999L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Time" + "'", str31, "Time");
        org.junit.Assert.assertNotNull(collection34);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1334");
        org.jfree.data.time.FixedMillisecond fixedMillisecond1 = new org.jfree.data.time.FixedMillisecond((long) 12);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1335");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        long long9 = fixedMillisecond7.getFirstMillisecond();
        long long10 = fixedMillisecond7.getSerialIndex();
        long long11 = fixedMillisecond7.getFirstMillisecond();
        java.util.Date date12 = fixedMillisecond7.getTime();
        org.jfree.data.time.Year year14 = new org.jfree.data.time.Year((-1));
        int int15 = fixedMillisecond7.compareTo((java.lang.Object) (-1));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711868400000L + "'", long9 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1336");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.lang.Object obj3 = timeSeries1.clone();
        org.jfree.data.time.Day day4 = new org.jfree.data.time.Day();
        int int6 = day4.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = day4.next();
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day4, "org.jfree.data.general.SeriesException: 31-March-2024", "org.jfree.data.time.TimePeriodFormatException: March 2024");
        java.lang.Number number11 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) day4);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertNull(number11);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1337");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        java.util.Date date9 = fixedMillisecond7.getTime();
        org.jfree.data.time.Month month10 = new org.jfree.data.time.Month(date9);
        int int11 = month10.getMonth();
        int int12 = month10.getMonth();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1338");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int1 = day0.getMonth();
        org.jfree.data.time.SerialDate serialDate2 = day0.getSerialDate();
        java.util.Date date3 = day0.getStart();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        timeSeries5.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        java.util.Date date18 = day14.getStart();
        int int19 = timeSeries5.getIndex((org.jfree.data.time.RegularTimePeriod) day14);
        java.lang.Class class20 = timeSeries5.timePeriodClass;
        boolean boolean21 = timeSeries5.getNotify();
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener24 = null;
        timeSeries23.addChangeListener(seriesChangeListener24);
        long long26 = timeSeries23.getMaximumItemAge();
        boolean boolean27 = timeSeries5.equals((java.lang.Object) timeSeries23);
        java.lang.String str28 = timeSeries5.getDescription();
        double double29 = timeSeries5.getMaxY();
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) (byte) 10);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem34 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day30, (java.lang.Number) 0L);
        boolean boolean35 = timeSeriesDataItem34.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = timeSeries5.addOrUpdate(timeSeriesDataItem34);
        boolean boolean37 = day0.equals((java.lang.Object) timeSeriesDataItem34);
        java.lang.Number number38 = timeSeriesDataItem34.getValue();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(serialDate2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 9223372036854775807L + "'", long26 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeSeriesDataItem36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + number38 + "' != '" + 0L + "'", number38, 0L);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1339");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.util.List list3 = timeSeries1.data;
        timeSeries1.removeAgedItems((long) 12, false);
        timeSeries1.setMaximumItemAge((long) 100);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.update(1, (java.lang.Number) (-61867512000001L));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(list3);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1340");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day20 = new org.jfree.data.time.Day();
        timeSeries19.add((org.jfree.data.time.RegularTimePeriod) day20, (double) (short) 0, false);
        java.util.Date date24 = day20.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond25 = new org.jfree.data.time.FixedMillisecond(date24);
        long long26 = fixedMillisecond25.getFirstMillisecond();
        java.util.Date date27 = fixedMillisecond25.getTime();
        int int28 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) fixedMillisecond25);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        timeSeries30.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = timeSeries30.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries30.addChangeListener(seriesChangeListener38);
        timeSeries30.setDomainDescription("hi!");
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        int int44 = day42.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = day42.next();
        timeSeries30.add(regularTimePeriod45, (java.lang.Number) 1);
        java.lang.Number number48 = null;
        timeSeries1.add(regularTimePeriod45, number48);
        org.jfree.data.time.Month month50 = new org.jfree.data.time.Month();
        long long51 = month50.getFirstMillisecond();
        long long52 = month50.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem54 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month50, 0.0d);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = month50.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem56 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month50);
        java.lang.String str57 = month50.toString();
        long long58 = month50.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = month50.previous();
        boolean boolean61 = month50.equals((java.lang.Object) 10);
        java.util.Calendar calendar62 = null;
        // The following exception was thrown during execution in test generation
        try {
            month50.peg(calendar62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1709280000000L + "'", long51 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 24291L + "'", long52 == 24291L);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(timeSeriesDataItem56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "March 2024" + "'", str57, "March 2024");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1711954799999L + "'", long58 == 1711954799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1341");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        java.util.List list3 = timeSeries1.getItems();
        java.beans.PropertyChangeListener propertyChangeListener4 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener4);
        timeSeries1.removeAgedItems(false);
        java.lang.String str8 = timeSeries1.getDomainDescription();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Time" + "'", str8, "Time");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1342");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        int int17 = timeSeriesDataItem15.compareTo((java.lang.Object) (byte) -1);
        java.lang.Object obj18 = timeSeriesDataItem15.clone();
        java.lang.Number number19 = timeSeriesDataItem15.getValue();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(number19);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1343");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.addChangeListener(seriesChangeListener9);
        java.lang.Comparable comparable11 = timeSeries1.getKey();
        double double12 = timeSeries1.getMinY();
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener15 = null;
        timeSeries14.addChangeListener(seriesChangeListener15);
        org.jfree.data.time.Month month17 = new org.jfree.data.time.Month();
        long long18 = month17.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener21 = null;
        timeSeries20.removeChangeListener(seriesChangeListener21);
        org.jfree.data.time.TimeSeries timeSeries24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day();
        timeSeries24.add((org.jfree.data.time.RegularTimePeriod) day25, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries20.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day25, (java.lang.Number) 10L);
        long long31 = day25.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries32 = timeSeries14.createCopy((org.jfree.data.time.RegularTimePeriod) month17, (org.jfree.data.time.RegularTimePeriod) day25);
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.addChangeListener(seriesChangeListener35);
        org.jfree.data.time.Month month37 = new org.jfree.data.time.Month();
        long long38 = month37.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener41 = null;
        timeSeries40.removeChangeListener(seriesChangeListener41);
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries40.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day45, (java.lang.Number) 10L);
        long long51 = day45.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries52 = timeSeries34.createCopy((org.jfree.data.time.RegularTimePeriod) month37, (org.jfree.data.time.RegularTimePeriod) day45);
        org.jfree.data.time.TimeSeries timeSeries54 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        timeSeries54.add((org.jfree.data.time.RegularTimePeriod) day55, (double) (short) 0, false);
        timeSeries54.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = timeSeries54.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent63 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean64 = timeSeries54.equals((java.lang.Object) seriesChangeEvent63);
        org.jfree.data.time.Day day65 = new org.jfree.data.time.Day();
        int int67 = day65.compareTo((java.lang.Object) (short) 100);
        java.lang.String str68 = day65.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = timeSeries54.getDataItem((org.jfree.data.time.RegularTimePeriod) day65);
        timeSeriesDataItem69.setSelected(false);
        timeSeriesDataItem69.setValue((java.lang.Number) (byte) 100);
        boolean boolean74 = timeSeriesDataItem69.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem75 = timeSeries34.addOrUpdate(timeSeriesDataItem69);
        org.jfree.data.time.Day day76 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem78 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day76, (java.lang.Number) (byte) 10);
        int int79 = timeSeriesDataItem69.compareTo((java.lang.Object) (byte) 10);
        boolean boolean80 = month17.equals((java.lang.Object) timeSeriesDataItem69);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem81 = timeSeries1.addOrUpdate(timeSeriesDataItem69);
        boolean boolean82 = timeSeriesDataItem69.isSelected();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertEquals("'" + comparable11 + "' != '" + 100L + "'", comparable11, 100L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1709280000000L + "'", long18 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1711911599999L + "'", long31 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1709280000000L + "'", long38 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1711911599999L + "'", long51 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries52);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "31-March-2024" + "'", str68, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(timeSeriesDataItem81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1344");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = month4.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = year6.next();
        long long8 = year6.getLastMillisecond();
        java.lang.Number number9 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) year6, number9);
        java.util.List list11 = timeSeries1.data;
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        java.util.Date date18 = day14.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond19 = new org.jfree.data.time.FixedMillisecond(date18);
        java.util.Date date20 = fixedMillisecond19.getTime();
        java.util.Calendar calendar21 = null;
        long long22 = fixedMillisecond19.getLastMillisecond(calendar21);
        java.util.Calendar calendar23 = null;
        long long24 = fixedMillisecond19.getMiddleMillisecond(calendar23);
        java.util.Calendar calendar25 = null;
        long long26 = fixedMillisecond19.getMiddleMillisecond(calendar25);
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) fixedMillisecond19);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = fixedMillisecond19.previous();
        java.util.Calendar calendar29 = null;
        long long30 = fixedMillisecond19.getLastMillisecond(calendar29);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1735718399999L + "'", long8 == 1735718399999L);
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711868400000L + "'", long22 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1711868400000L + "'", long24 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711868400000L + "'", long30 == 1711868400000L);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1345");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod2 = month0.previous();
        boolean boolean4 = month0.equals((java.lang.Object) 10.0d);
        long long5 = month0.getSerialIndex();
        long long6 = month0.getMiddleMillisecond();
        long long7 = month0.getLastMillisecond();
        long long8 = month0.getSerialIndex();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 24291L + "'", long5 == 24291L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1710617399999L + "'", long6 == 1710617399999L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711954799999L + "'", long7 == 1711954799999L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 24291L + "'", long8 == 24291L);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1346");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        int int8 = timeSeries1.getItemCount();
        double double9 = timeSeries1.getMinY();
        double double10 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        timeSeries12.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = timeSeries12.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries12.addChangeListener(seriesChangeListener20);
        timeSeries12.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        java.util.Date date30 = day26.getStart();
        java.lang.Number number31 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day26, number31);
        long long33 = day26.getFirstMillisecond();
        long long34 = day26.getFirstMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem35 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) day26);
        long long36 = day26.getFirstMillisecond();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1711868400000L + "'", long33 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1711868400000L + "'", long34 == 1711868400000L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711868400000L + "'", long36 == 1711868400000L);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1347");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        org.jfree.data.time.Month month24 = new org.jfree.data.time.Month();
        long long25 = month24.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener28 = null;
        timeSeries27.removeChangeListener(seriesChangeListener28);
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        timeSeries31.add((org.jfree.data.time.RegularTimePeriod) day32, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = timeSeries27.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day32, (java.lang.Number) 10L);
        long long38 = day32.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries39 = timeSeries21.createCopy((org.jfree.data.time.RegularTimePeriod) month24, (org.jfree.data.time.RegularTimePeriod) day32);
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        timeSeries41.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod48 = timeSeries41.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent50 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean51 = timeSeries41.equals((java.lang.Object) seriesChangeEvent50);
        org.jfree.data.time.Day day52 = new org.jfree.data.time.Day();
        int int54 = day52.compareTo((java.lang.Object) (short) 100);
        java.lang.String str55 = day52.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem56 = timeSeries41.getDataItem((org.jfree.data.time.RegularTimePeriod) day52);
        timeSeriesDataItem56.setSelected(false);
        timeSeriesDataItem56.setValue((java.lang.Number) (byte) 100);
        boolean boolean61 = timeSeriesDataItem56.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem62 = timeSeries21.addOrUpdate(timeSeriesDataItem56);
        org.jfree.data.time.Day day63 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem65 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day63, (java.lang.Number) (byte) 10);
        int int66 = timeSeriesDataItem56.compareTo((java.lang.Object) (byte) 10);
        boolean boolean67 = month4.equals((java.lang.Object) timeSeriesDataItem56);
        long long68 = month4.getFirstMillisecond();
        java.util.Date date69 = month4.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = month4.next();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1709280000000L + "'", long25 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1711911599999L + "'", long38 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries39);
        org.junit.Assert.assertNotNull(regularTimePeriod48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "31-March-2024" + "'", str55, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1709280000000L + "'", long68 == 1709280000000L);
        org.junit.Assert.assertNotNull(date69);
        org.junit.Assert.assertEquals(date69.toString(), "Fri Mar 01 00:00:00 PST 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod70);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1348");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number3 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem4 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, number3);
        long long5 = month2.getSerialIndex();
        java.util.Date date6 = month2.getStart();
        java.lang.String str7 = month2.toString();
        java.util.Date date8 = month2.getEnd();
        java.lang.String str9 = month2.toString();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 118L + "'", long5 == 118L);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "October 9" + "'", str7, "October 9");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Oct 31 23:59:59 PST 9");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "October 9" + "'", str9, "October 9");
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1349");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        int int18 = day17.getMonth();
        java.util.Date date19 = day17.getEnd();
        java.util.TimeZone timeZone20 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date19, timeZone20);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        int int24 = day22.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = day22.next();
        java.util.Date date26 = regularTimePeriod25.getStart();
        java.util.TimeZone timeZone27 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date26, timeZone27);
        org.jfree.data.time.Year year29 = new org.jfree.data.time.Year(date26);
        java.lang.String str30 = year29.toString();
        long long31 = year29.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Apr 01 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2024" + "'", str30, "2024");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1704096000000L + "'", long31 == 1704096000000L);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1350");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 9999);
        timeSeries1.removeAgedItems(true);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries1.addChangeListener(seriesChangeListener4);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.addChangeListener(seriesChangeListener8);
        long long10 = timeSeries7.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.addChangeListener(seriesChangeListener13);
        long long15 = timeSeries12.getMaximumItemAge();
        java.lang.String str16 = timeSeries12.getDescription();
        double double17 = timeSeries12.getMinY();
        java.util.Collection collection18 = timeSeries7.getTimePeriodsUniqueToOtherSeries(timeSeries12);
        timeSeries12.setRangeDescription("");
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        java.util.Date date27 = day23.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond28 = new org.jfree.data.time.FixedMillisecond(date27);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod29 = fixedMillisecond28.next();
        int int30 = timeSeries12.getIndex(regularTimePeriod29);
        java.lang.Number number31 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod29, number31);
        timeSeries1.add(regularTimePeriod29, (java.lang.Number) (short) 0, true);
        timeSeries1.setNotify(false);
        timeSeries1.delete((int) (byte) 0, 0, false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 9223372036854775807L + "'", long10 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 9223372036854775807L + "'", long15 == 9223372036854775807L);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(collection18);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1351");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        timeSeries1.setMaximumItemCount((int) ' ');
        timeSeries1.fireSeriesChanged();
        timeSeries1.setMaximumItemAge((long) 2);
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double16 = timeSeries15.getMaxY();
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        java.lang.Number number18 = null;
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day17, number18, false);
        double double21 = timeSeries15.getMaxY();
        int int22 = timeSeries15.getItemCount();
        double double23 = timeSeries15.getMinY();
        double double24 = timeSeries15.getMaxY();
        int int25 = timeSeries15.getItemCount();
        java.util.Collection collection26 = timeSeries15.getTimePeriods();
        int int27 = timeSeries15.getItemCount();
        java.util.Collection collection28 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries15);
        timeSeries15.removeAgedItems((long) 12, false);
        int int32 = timeSeries15.getItemCount();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(collection26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(collection28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1352");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        java.lang.String str8 = day2.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = day2.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod9, (double) (-62041132800001L));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "31-March-2024" + "'", str8, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1353");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setDomainDescription("");
        int int22 = timeSeries1.getItemCount();
        int int23 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        timeSeries25.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day34, (double) (short) 0, false);
        timeSeries33.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        java.util.Date date46 = day42.getStart();
        org.jfree.data.time.SerialDate serialDate47 = day42.getSerialDate();
        java.lang.Number number48 = null;
        timeSeries33.update((org.jfree.data.time.RegularTimePeriod) day42, number48);
        java.lang.Number number50 = timeSeries25.getValue((org.jfree.data.time.RegularTimePeriod) day42);
        timeSeries25.removeAgedItems(true);
        org.jfree.data.time.TimeSeries timeSeries53 = timeSeries1.addAndOrUpdate(timeSeries25);
        org.jfree.data.time.Day day54 = new org.jfree.data.time.Day();
        int int56 = day54.compareTo((java.lang.Object) (short) 100);
        long long57 = day54.getMiddleMillisecond();
        int int58 = day54.getYear();
        boolean boolean60 = day54.equals((java.lang.Object) 5);
        int int61 = day54.getDayOfMonth();
        java.lang.String str62 = day54.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = day54.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem65 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod63, (java.lang.Number) 1711868400000L);
        org.jfree.data.time.TimeSeries timeSeries67 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double68 = timeSeries67.getMaxY();
        org.jfree.data.time.Day day69 = new org.jfree.data.time.Day();
        java.lang.Number number70 = null;
        timeSeries67.add((org.jfree.data.time.RegularTimePeriod) day69, number70, false);
        double double73 = timeSeries67.getMaxY();
        timeSeries67.setMaximumItemAge(1711938995383L);
        timeSeries67.removeAgedItems(true);
        java.lang.String str78 = timeSeries67.getDescription();
        timeSeries67.setRangeDescription("9");
        boolean boolean81 = timeSeriesDataItem65.equals((java.lang.Object) "9");
        boolean boolean82 = timeSeries1.equals((java.lang.Object) "9");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate47);
        org.junit.Assert.assertEquals("'" + number50 + "' != '" + 0.0d + "'", number50, 0.0d);
        org.junit.Assert.assertNotNull(timeSeries53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1711911599999L + "'", long57 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2024 + "'", int58 == 2024);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 31 + "'", int61 == 31);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "31-March-2024" + "'", str62, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1354");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        java.util.Calendar calendar11 = null;
        long long12 = fixedMillisecond7.getMiddleMillisecond(calendar11);
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getLastMillisecond(calendar13);
        java.util.Date date15 = fixedMillisecond7.getTime();
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day(date15);
        java.util.Date date17 = day16.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = day16.next();
        java.util.Date date19 = day16.getEnd();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Mar 31 23:59:59 PDT 2024");
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1355");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        long long16 = day10.getFirstMillisecond();
        org.jfree.data.time.SerialDate serialDate17 = day10.getSerialDate();
        long long18 = day10.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener21 = null;
        timeSeries20.addChangeListener(seriesChangeListener21);
        org.jfree.data.time.Month month23 = new org.jfree.data.time.Month();
        long long24 = month23.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = timeSeries26.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day31, (java.lang.Number) 10L);
        long long37 = day31.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries38 = timeSeries20.createCopy((org.jfree.data.time.RegularTimePeriod) month23, (org.jfree.data.time.RegularTimePeriod) day31);
        org.jfree.data.time.TimeSeries timeSeries40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day41 = new org.jfree.data.time.Day();
        timeSeries40.add((org.jfree.data.time.RegularTimePeriod) day41, (double) (short) 0, false);
        timeSeries40.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day49 = new org.jfree.data.time.Day();
        timeSeries48.add((org.jfree.data.time.RegularTimePeriod) day49, (double) (short) 0, false);
        java.util.Date date53 = day49.getStart();
        int int54 = timeSeries40.getIndex((org.jfree.data.time.RegularTimePeriod) day49);
        java.lang.Class class55 = timeSeries40.timePeriodClass;
        timeSeries38.timePeriodClass = class55;
        java.util.Collection collection57 = timeSeries38.getTimePeriods();
        int int58 = day10.compareTo((java.lang.Object) timeSeries38);
        long long59 = timeSeries38.getMaximumItemAge();
        timeSeries38.setMaximumItemCount(11);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
        org.junit.Assert.assertNotNull(serialDate17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711868400000L + "'", long18 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1709280000000L + "'", long24 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711911599999L + "'", long37 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries38);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(class55);
        org.junit.Assert.assertNotNull(collection57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 9223372036854775807L + "'", long59 == 9223372036854775807L);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1356");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        java.util.Calendar calendar1 = null;
        long long2 = fixedMillisecond0.getLastMillisecond(calendar1);
        org.jfree.data.time.TimeSeries timeSeries4 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double5 = timeSeries4.getMaxY();
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        java.lang.Number number7 = null;
        timeSeries4.add((org.jfree.data.time.RegularTimePeriod) day6, number7, false);
        double double10 = timeSeries4.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day13, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem18 = timeSeries4.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day13, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        java.lang.Comparable comparable22 = timeSeries21.getKey();
        timeSeries21.removeAgedItems(false);
        boolean boolean25 = fixedMillisecond0.equals((java.lang.Object) timeSeries21);
        long long26 = fixedMillisecond0.getSerialIndex();
        long long27 = fixedMillisecond0.getFirstMillisecond();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711939192984L + "'", long2 == 1711939192984L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(timeSeriesDataItem18);
        org.junit.Assert.assertEquals("'" + comparable22 + "' != '" + 1711911599999L + "'", comparable22, 1711911599999L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711939192984L + "'", long26 == 1711939192984L);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1711939192984L + "'", long27 == 1711939192984L);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1357");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year((int) 'a');
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.removeChangeListener(seriesChangeListener4);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem13 = timeSeries3.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10L);
        int int14 = timeSeries3.getItemCount();
        timeSeries3.clear();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        timeSeries17.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = timeSeries17.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean27 = timeSeries17.equals((java.lang.Object) seriesChangeEvent26);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double30 = timeSeries29.getMaxY();
        java.lang.Comparable comparable31 = timeSeries29.getKey();
        org.jfree.data.time.TimeSeries timeSeries32 = timeSeries17.addAndOrUpdate(timeSeries29);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener33 = null;
        timeSeries17.addChangeListener(seriesChangeListener33);
        org.jfree.data.time.TimeSeries timeSeries35 = timeSeries3.addAndOrUpdate(timeSeries17);
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        timeSeries37.add((org.jfree.data.time.RegularTimePeriod) day38, (double) (short) 0, false);
        java.util.Date date42 = day38.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond43 = new org.jfree.data.time.FixedMillisecond(date42);
        long long44 = fixedMillisecond43.getFirstMillisecond();
        java.util.Date date45 = fixedMillisecond43.getTime();
        org.jfree.data.time.Month month46 = new org.jfree.data.time.Month(date45);
        int int47 = month46.getMonth();
        java.util.Date date48 = month46.getStart();
        int int49 = timeSeries3.getIndex((org.jfree.data.time.RegularTimePeriod) month46);
        boolean boolean50 = year1.equals((java.lang.Object) month46);
        java.util.Calendar calendar51 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long52 = month46.getFirstMillisecond(calendar51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(timeSeriesDataItem13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertEquals("'" + comparable31 + "' != '" + 100L + "'", comparable31, 100L);
        org.junit.Assert.assertNotNull(timeSeries32);
        org.junit.Assert.assertNotNull(timeSeries35);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1711868400000L + "'", long44 == 1711868400000L);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Fri Mar 01 00:00:00 PST 2024");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1358");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        long long24 = timeSeries19.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double27 = timeSeries26.getMaxY();
        java.util.List list28 = timeSeries26.data;
        timeSeries26.removeAgedItems((long) 12, false);
        java.lang.Comparable comparable32 = timeSeries26.getKey();
        timeSeries26.removeAgedItems(true);
        java.util.Collection collection35 = timeSeries19.getTimePeriodsUniqueToOtherSeries(timeSeries26);
        org.jfree.data.time.Month month36 = new org.jfree.data.time.Month();
        long long37 = month36.getFirstMillisecond();
        long long38 = month36.getSerialIndex();
        long long39 = month36.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod40 = month36.next();
        timeSeries19.add(regularTimePeriod40, (java.lang.Number) 1711939045829L, false);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 9223372036854775807L + "'", long24 == 9223372036854775807L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertEquals("'" + comparable32 + "' != '" + 100L + "'", comparable32, 100L);
        org.junit.Assert.assertNotNull(collection35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1709280000000L + "'", long37 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 24291L + "'", long38 == 24291L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1709280000000L + "'", long39 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod40);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1359");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year((int) (short) 100);
        long long2 = year1.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-58979980800001L) + "'", long2 == (-58979980800001L));
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1360");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem3 = timeSeries1.getDataItem((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1361");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        java.util.List list6 = timeSeries1.getItems();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getTimePeriod((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(list6);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1362");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 2147483647);
        timeSeries1.setDescription("");
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        java.util.Date date10 = day6.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond11 = new org.jfree.data.time.FixedMillisecond(date10);
        java.util.Calendar calendar12 = null;
        long long13 = fixedMillisecond11.getMiddleMillisecond(calendar12);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond11, (double) (byte) 0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.addOrUpdate(timeSeriesDataItem15);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.removeChangeListener(seriesChangeListener19);
        java.lang.String str21 = timeSeries18.getRangeDescription();
        java.util.List list22 = timeSeries18.getItems();
        double double23 = timeSeries18.getMinY();
        timeSeries18.setRangeDescription("org.jfree.data.event.SeriesChangeEvent[source=10.0]");
        java.lang.Class class26 = timeSeries18.timePeriodClass;
        java.lang.Object obj27 = timeSeries18.clone();
        java.beans.PropertyChangeListener propertyChangeListener28 = null;
        timeSeries18.removePropertyChangeListener(propertyChangeListener28);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = timeSeriesDataItem16.equals((java.lang.Object) propertyChangeListener28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNull(timeSeriesDataItem16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value" + "'", str21, "Value");
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNull(class26);
        org.junit.Assert.assertNotNull(obj27);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1363");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        java.lang.Object obj16 = timeSeriesDataItem15.clone();
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener19 = null;
        timeSeries18.addChangeListener(seriesChangeListener19);
        long long21 = timeSeries18.getMaximumItemAge();
        java.lang.String str22 = timeSeries18.getDescription();
        java.util.List list23 = timeSeries18.getItems();
        boolean boolean24 = timeSeriesDataItem15.equals((java.lang.Object) timeSeries18);
        org.jfree.data.time.Month month27 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number28 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month27, number28);
        long long30 = month27.getSerialIndex();
        java.util.Date date31 = month27.getStart();
        java.lang.String str32 = month27.toString();
        java.util.Date date33 = month27.getEnd();
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        java.util.Date date40 = day36.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond41 = new org.jfree.data.time.FixedMillisecond(date40);
        long long42 = fixedMillisecond41.getFirstMillisecond();
        java.util.Date date43 = fixedMillisecond41.getTime();
        long long44 = fixedMillisecond41.getSerialIndex();
        java.util.Calendar calendar45 = null;
        long long46 = fixedMillisecond41.getMiddleMillisecond(calendar45);
        org.jfree.data.time.Month month47 = new org.jfree.data.time.Month();
        long long48 = month47.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod49 = month47.previous();
        boolean boolean51 = month47.equals((java.lang.Object) 10.0d);
        long long52 = month47.getSerialIndex();
        java.lang.Object obj53 = null;
        int int54 = month47.compareTo(obj53);
        boolean boolean55 = fixedMillisecond41.equals(obj53);
        java.util.Calendar calendar56 = null;
        long long57 = fixedMillisecond41.getMiddleMillisecond(calendar56);
        org.jfree.data.time.TimeSeries timeSeries58 = timeSeries18.createCopy((org.jfree.data.time.RegularTimePeriod) month27, (org.jfree.data.time.RegularTimePeriod) fixedMillisecond41);
        org.jfree.data.time.Year year60 = new org.jfree.data.time.Year((int) (short) 100);
        org.jfree.data.general.SeriesException seriesException62 = new org.jfree.data.general.SeriesException("org.jfree.data.event.SeriesChangeEvent[source=10.0]");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException64 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException66 = new org.jfree.data.time.TimePeriodFormatException("");
        timePeriodFormatException64.addSuppressed((java.lang.Throwable) timePeriodFormatException66);
        seriesException62.addSuppressed((java.lang.Throwable) timePeriodFormatException66);
        java.lang.Throwable[] throwableArray69 = timePeriodFormatException66.getSuppressed();
        int int70 = year60.compareTo((java.lang.Object) throwableArray69);
        java.lang.Number number71 = timeSeries18.getValue((org.jfree.data.time.RegularTimePeriod) year60);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9223372036854775807L + "'", long21 == 9223372036854775807L);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 118L + "'", long30 == 118L);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "October 9" + "'", str32, "October 9");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Oct 31 23:59:59 PST 9");
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1711868400000L + "'", long42 == 1711868400000L);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1711868400000L + "'", long44 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1711868400000L + "'", long46 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1709280000000L + "'", long48 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 24291L + "'", long52 == 24291L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1711868400000L + "'", long57 == 1711868400000L);
        org.junit.Assert.assertNotNull(timeSeries58);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNull(number71);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1364");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getMiddleMillisecond();
        long long12 = fixedMillisecond7.getLastMillisecond();
        long long13 = fixedMillisecond7.getLastMillisecond();
        long long14 = fixedMillisecond7.getSerialIndex();
        java.util.Calendar calendar15 = null;
        long long16 = fixedMillisecond7.getMiddleMillisecond(calendar15);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1365");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setDomainDescription("");
        int int22 = timeSeries1.getItemCount();
        int int23 = timeSeries1.getItemCount();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent24 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries1);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day27, (double) (short) 0, false);
        java.util.Date date31 = day27.getStart();
        org.jfree.data.time.SerialDate serialDate32 = day27.getSerialDate();
        java.lang.String str33 = day27.toString();
        java.lang.String str34 = day27.toString();
        java.lang.String str35 = day27.toString();
        org.jfree.data.time.SerialDate serialDate36 = day27.getSerialDate();
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day(serialDate36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod38 = day37.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries1.getRawDataItem(regularTimePeriod38);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "31-March-2024" + "'", str33, "31-March-2024");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "31-March-2024" + "'", str34, "31-March-2024");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "31-March-2024" + "'", str35, "31-March-2024");
        org.junit.Assert.assertNotNull(serialDate36);
        org.junit.Assert.assertNotNull(regularTimePeriod38);
        org.junit.Assert.assertNull(timeSeriesDataItem39);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1366");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        long long17 = day12.getSerialIndex();
        long long18 = day12.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = day12.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = day12.next();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 45382L + "'", long17 == 45382L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 45382L + "'", long18 == 45382L);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1367");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.lang.Comparable comparable3 = timeSeries1.getKey();
        java.beans.PropertyChangeListener propertyChangeListener4 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener4);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        timeSeries7.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = timeSeries7.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener15 = null;
        timeSeries7.addChangeListener(seriesChangeListener15);
        timeSeries7.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        java.util.Date date25 = day21.getStart();
        java.lang.Number number26 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem27 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day21, number26);
        timeSeries1.add(timeSeriesDataItem27);
        double double29 = timeSeries1.getMinY();
        org.jfree.data.time.Month month30 = new org.jfree.data.time.Month();
        long long31 = month30.getFirstMillisecond();
        long long32 = month30.getSerialIndex();
        long long33 = month30.getFirstMillisecond();
        long long34 = month30.getLastMillisecond();
        long long35 = month30.getSerialIndex();
        org.jfree.data.time.Year year36 = month30.getYear();
        int int37 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) year36);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries1.getTimePeriod((int) (short) 0);
        org.jfree.data.time.Month month42 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number43 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month42, number43);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = month42.previous();
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) month42, (java.lang.Number) 7);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + comparable3 + "' != '" + 100L + "'", comparable3, 100L);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1709280000000L + "'", long31 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 24291L + "'", long32 == 24291L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1709280000000L + "'", long33 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1711954799999L + "'", long34 == 1711954799999L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 24291L + "'", long35 == 24291L);
        org.junit.Assert.assertNotNull(year36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1368");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        long long3 = year2.getLastMillisecond();
        int int4 = year2.getYear();
        long long5 = year2.getLastMillisecond();
        int int6 = year2.getYear();
        long long7 = year2.getSerialIndex();
        long long8 = year2.getLastMillisecond();
        java.util.Calendar calendar9 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long10 = year2.getFirstMillisecond(calendar9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1735718399999L + "'", long3 == 1735718399999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1735718399999L + "'", long5 == 1735718399999L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2024 + "'", int6 == 2024);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2024L + "'", long7 == 2024L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1735718399999L + "'", long8 == 1735718399999L);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1369");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        long long6 = timeSeries3.getMaximumItemAge();
        java.lang.String str7 = timeSeries3.getDescription();
        int int8 = timeSeries3.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, false);
        java.util.Date date15 = day11.getStart();
        org.jfree.data.time.SerialDate serialDate16 = day11.getSerialDate();
        java.lang.String str17 = day11.toString();
        java.lang.Number number18 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day11, number18);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, true);
        org.jfree.data.time.FixedMillisecond fixedMillisecond23 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day27, (double) (short) 0, false);
        java.util.Date date31 = day27.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond32 = new org.jfree.data.time.FixedMillisecond(date31);
        java.util.Date date33 = fixedMillisecond32.getTime();
        java.util.Calendar calendar34 = null;
        long long35 = fixedMillisecond32.getLastMillisecond(calendar34);
        java.util.Calendar calendar36 = null;
        long long37 = fixedMillisecond32.getFirstMillisecond(calendar36);
        java.util.Calendar calendar38 = null;
        long long39 = fixedMillisecond32.getFirstMillisecond(calendar38);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond32);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod41 = fixedMillisecond32.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = fixedMillisecond32.previous();
        long long43 = fixedMillisecond32.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day46 = new org.jfree.data.time.Day();
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day46, (double) (short) 0, false);
        java.util.Date date50 = day46.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond51 = new org.jfree.data.time.FixedMillisecond(date50);
        long long52 = fixedMillisecond51.getFirstMillisecond();
        java.util.Calendar calendar53 = null;
        fixedMillisecond51.peg(calendar53);
        long long55 = fixedMillisecond51.getMiddleMillisecond();
        long long56 = fixedMillisecond51.getMiddleMillisecond();
        long long57 = fixedMillisecond51.getFirstMillisecond();
        java.util.Calendar calendar58 = null;
        fixedMillisecond51.peg(calendar58);
        boolean boolean60 = fixedMillisecond32.equals((java.lang.Object) calendar58);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = fixedMillisecond32.previous();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9223372036854775807L + "'", long6 == 9223372036854775807L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "31-March-2024" + "'", str17, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1711868400000L + "'", long35 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711868400000L + "'", long37 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1711868400000L + "'", long39 == 1711868400000L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertNotNull(regularTimePeriod41);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1711868400000L + "'", long43 == 1711868400000L);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711868400000L + "'", long52 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1711868400000L + "'", long55 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1711868400000L + "'", long56 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1711868400000L + "'", long57 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1370");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        java.lang.String str24 = timeSeries1.getDescription();
        timeSeries1.setDomainDescription("org.jfree.data.event.SeriesChangeEvent[source=10.0]");
        java.lang.Object obj27 = timeSeries1.clone();
        java.lang.Class<?> wildcardClass28 = timeSeries1.getClass();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1371");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        int int18 = timeSeries1.getItemCount();
        org.jfree.data.time.Month month19 = new org.jfree.data.time.Month();
        long long20 = month19.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = month19.previous();
        timeSeries1.setKey((java.lang.Comparable) regularTimePeriod21);
        java.util.Date date23 = regularTimePeriod21.getEnd();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1709280000000L + "'", long20 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Feb 29 23:59:59 PST 2024");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1372");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number3 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem4 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, number3);
        boolean boolean5 = timeSeriesDataItem4.isSelected();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.addChangeListener(seriesChangeListener8);
        org.jfree.data.time.Month month10 = new org.jfree.data.time.Month();
        long long11 = month10.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener14 = null;
        timeSeries13.removeChangeListener(seriesChangeListener14);
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        timeSeries17.add((org.jfree.data.time.RegularTimePeriod) day18, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries13.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day18, (java.lang.Number) 10L);
        long long24 = day18.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries25 = timeSeries7.createCopy((org.jfree.data.time.RegularTimePeriod) month10, (org.jfree.data.time.RegularTimePeriod) day18);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        timeSeries27.add((org.jfree.data.time.RegularTimePeriod) day28, (double) (short) 0, false);
        timeSeries27.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod34 = timeSeries27.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent36 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean37 = timeSeries27.equals((java.lang.Object) seriesChangeEvent36);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        int int40 = day38.compareTo((java.lang.Object) (short) 100);
        java.lang.String str41 = day38.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = timeSeries27.getDataItem((org.jfree.data.time.RegularTimePeriod) day38);
        timeSeriesDataItem42.setSelected(false);
        timeSeriesDataItem42.setValue((java.lang.Number) (byte) 100);
        boolean boolean47 = timeSeriesDataItem42.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem48 = timeSeries7.addOrUpdate(timeSeriesDataItem42);
        int int49 = timeSeriesDataItem4.compareTo((java.lang.Object) timeSeriesDataItem42);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        int int52 = day50.compareTo((java.lang.Object) (short) 100);
        long long53 = day50.getMiddleMillisecond();
        int int54 = day50.getYear();
        boolean boolean56 = day50.equals((java.lang.Object) 5);
        int int57 = day50.getDayOfMonth();
        java.lang.String str58 = day50.toString();
        int int59 = timeSeriesDataItem4.compareTo((java.lang.Object) day50);
        org.jfree.data.time.TimeSeries timeSeries61 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 2147483647);
        timeSeries61.setDescription("");
        org.jfree.data.time.TimeSeries timeSeries65 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day66 = new org.jfree.data.time.Day();
        timeSeries65.add((org.jfree.data.time.RegularTimePeriod) day66, (double) (short) 0, false);
        java.util.Date date70 = day66.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond71 = new org.jfree.data.time.FixedMillisecond(date70);
        java.util.Calendar calendar72 = null;
        long long73 = fixedMillisecond71.getMiddleMillisecond(calendar72);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem75 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond71, (double) (byte) 0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem76 = timeSeries61.addOrUpdate(timeSeriesDataItem75);
        timeSeries61.removeAgedItems(false);
        int int79 = day50.compareTo((java.lang.Object) timeSeries61);
        long long80 = timeSeries61.getMaximumItemAge();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1709280000000L + "'", long11 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1711911599999L + "'", long24 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries25);
        org.junit.Assert.assertNotNull(regularTimePeriod34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "31-March-2024" + "'", str41, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1711911599999L + "'", long53 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2024 + "'", int54 == 2024);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 31 + "'", int57 == 31);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "31-March-2024" + "'", str58, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1711868400000L + "'", long73 == 1711868400000L);
        org.junit.Assert.assertNull(timeSeriesDataItem76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 9223372036854775807L + "'", long80 == 9223372036854775807L);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1373");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        java.lang.String str4 = timeSeries1.getRangeDescription();
        java.util.List list5 = timeSeries1.getItems();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.addChangeListener(seriesChangeListener8);
        long long10 = timeSeries7.getMaximumItemAge();
        java.lang.String str11 = timeSeries7.getDescription();
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        java.util.Date date18 = day14.getStart();
        long long19 = day14.getFirstMillisecond();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day14, (java.lang.Number) 10, false);
        int int23 = day14.getYear();
        timeSeries1.setKey((java.lang.Comparable) day14);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value" + "'", str4, "Value");
        org.junit.Assert.assertNotNull(list5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 9223372036854775807L + "'", long10 == 9223372036854775807L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1711868400000L + "'", long19 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2024 + "'", int23 == 2024);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1374");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = fixedMillisecond7.next();
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getMiddleMillisecond(calendar13);
        java.util.Date date15 = fixedMillisecond7.getTime();
        java.util.Calendar calendar16 = null;
        long long17 = fixedMillisecond7.getLastMillisecond(calendar16);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1711868400000L + "'", long17 == 1711868400000L);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1375");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = day0.next();
        java.util.Date date4 = regularTimePeriod3.getStart();
        org.jfree.data.time.Month month5 = new org.jfree.data.time.Month(date4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Mon Apr 01 00:00:00 PDT 2024");
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1376");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        timeSeries1.clear();
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem7 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day5, (java.lang.Number) (byte) 10);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day5, (java.lang.Number) 12, true);
        org.jfree.data.time.Month month13 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date14 = month13.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = month13.next();
        long long16 = month13.getSerialIndex();
        org.jfree.data.time.Year year17 = month13.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = month13.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeries timeSeries20 = timeSeries1.createCopy(regularTimePeriod18, regularTimePeriod19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'end' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 118L + "'", long16 == 118L);
        org.junit.Assert.assertNotNull(year17);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1377");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        long long4 = year2.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = year2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = year2.next();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year2);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1704096000000L + "'", long4 == 1704096000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1378");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        long long8 = day2.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = day2.previous();
        long long10 = regularTimePeriod9.getLastMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem12 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod9, (double) 3);
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double15 = timeSeries14.getMaxY();
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        java.lang.Number number17 = null;
        timeSeries14.add((org.jfree.data.time.RegularTimePeriod) day16, number17, false);
        double double20 = timeSeries14.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = timeSeries14.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day23, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) timeSeriesDataItem28);
        boolean boolean30 = timeSeriesDataItem12.equals((java.lang.Object) timeSeriesDataItem28);
        boolean boolean31 = timeSeriesDataItem28.isSelected();
        java.lang.Object obj32 = null;
        int int33 = timeSeriesDataItem28.compareTo(obj32);
        java.lang.Number number34 = timeSeriesDataItem28.getValue();
        java.lang.Object obj35 = timeSeriesDataItem28.clone();
        java.lang.Class<?> wildcardClass36 = timeSeriesDataItem28.getClass();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711911599999L + "'", long8 == 1711911599999L);
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868399999L + "'", long10 == 1711868399999L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(timeSeriesDataItem28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNull(number34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1379");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = fixedMillisecond7.next();
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getMiddleMillisecond(calendar13);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = fixedMillisecond7.previous();
        java.util.Calendar calendar16 = null;
        long long17 = fixedMillisecond7.getMiddleMillisecond(calendar16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double22 = timeSeries21.getMaxY();
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        java.lang.Number number24 = null;
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day23, number24, false);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day23);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = timeSeries29.getNextTimePeriod();
        timeSeries29.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year40 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem41 = timeSeries29.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year40);
        java.util.Collection collection42 = timeSeries27.getTimePeriodsUniqueToOtherSeries(timeSeries29);
        java.lang.String str43 = timeSeries29.getRangeDescription();
        timeSeries29.removeAgedItems(false);
        timeSeries29.clear();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo47 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent48 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries29, seriesChangeInfo47);
        java.util.Collection collection49 = timeSeries19.getTimePeriodsUniqueToOtherSeries(timeSeries29);
        int int50 = timeSeries19.getItemCount();
        boolean boolean51 = fixedMillisecond7.equals((java.lang.Object) timeSeries19);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1711868400000L + "'", long17 == 1711868400000L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(timeSeriesDataItem41);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Value" + "'", str43, "Value");
        org.junit.Assert.assertNotNull(collection49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1380");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        long long3 = day0.getMiddleMillisecond();
        int int4 = day0.getYear();
        boolean boolean6 = day0.equals((java.lang.Object) 5);
        int int7 = day0.getDayOfMonth();
        java.lang.String str8 = day0.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod9 = day0.next();
        java.lang.Class<?> wildcardClass10 = day0.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711911599999L + "'", long3 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "31-March-2024" + "'", str8, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1381");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double4 = timeSeries3.getMaxY();
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        java.lang.Number number6 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day5, number6, false);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day5);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        timeSeries11.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = timeSeries11.getNextTimePeriod();
        timeSeries11.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year22 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries11.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year22);
        java.util.Collection collection24 = timeSeries9.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        java.lang.String str25 = timeSeries11.getRangeDescription();
        timeSeries11.removeAgedItems(false);
        timeSeries11.clear();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries11, seriesChangeInfo29);
        java.util.Collection collection31 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        timeSeries1.setNotify(false);
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        timeSeries35.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod42 = timeSeries35.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener43 = null;
        timeSeries35.addChangeListener(seriesChangeListener43);
        java.lang.Comparable comparable45 = timeSeries35.getKey();
        java.lang.String str46 = timeSeries35.getRangeDescription();
        org.jfree.data.time.TimeSeries timeSeries47 = timeSeries1.addAndOrUpdate(timeSeries35);
        double double48 = timeSeries1.getMaxY();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value" + "'", str25, "Value");
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertNotNull(regularTimePeriod42);
        org.junit.Assert.assertEquals("'" + comparable45 + "' != '" + 100L + "'", comparable45, 100L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Value" + "'", str46, "Value");
        org.junit.Assert.assertNotNull(timeSeries47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1382");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        timeSeriesDataItem16.setSelected(false);
        timeSeriesDataItem16.setValue((java.lang.Number) (byte) 100);
        boolean boolean21 = timeSeriesDataItem16.isSelected();
        java.lang.Class<?> wildcardClass22 = timeSeriesDataItem16.getClass();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1383");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        long long3 = day0.getMiddleMillisecond();
        int int4 = day0.getYear();
        boolean boolean6 = day0.equals((java.lang.Object) 5);
        int int7 = day0.getDayOfMonth();
        java.lang.String str8 = day0.toString();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day0, "Value", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem13 = timeSeries11.getRawDataItem(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711911599999L + "'", long3 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "31-March-2024" + "'", str8, "31-March-2024");
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1384");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        int int3 = month0.getYearValue();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException5 = new org.jfree.data.time.TimePeriodFormatException("");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException7 = new org.jfree.data.time.TimePeriodFormatException("");
        timePeriodFormatException5.addSuppressed((java.lang.Throwable) timePeriodFormatException7);
        int int9 = month0.compareTo((java.lang.Object) timePeriodFormatException5);
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) int9, "org.jfree.data.event.SeriesChangeEvent[source=true]", "March 2024");
        java.util.Collection collection13 = timeSeries12.getTimePeriods();
        org.jfree.data.time.Month month14 = new org.jfree.data.time.Month();
        long long15 = month14.getFirstMillisecond();
        org.jfree.data.time.Year year16 = month14.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = year16.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = year16.previous();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year16);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod20 = year16.previous();
        java.lang.Object obj21 = null;
        int int22 = year16.compareTo(obj21);
        java.util.Date date23 = year16.getEnd();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries12.getDataItem((org.jfree.data.time.RegularTimePeriod) year16);
        java.lang.String str25 = year16.toString();
        long long26 = year16.getLastMillisecond();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2024 + "'", int3 == 2024);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(collection13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1709280000000L + "'", long15 == 1709280000000L);
        org.junit.Assert.assertNotNull(year16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(regularTimePeriod20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Tue Dec 31 23:59:59 PST 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2024" + "'", str25, "2024");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1735718399999L + "'", long26 == 1735718399999L);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1385");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int1 = day0.getMonth();
        org.jfree.data.time.SerialDate serialDate2 = day0.getSerialDate();
        java.util.Date date3 = day0.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond4 = new org.jfree.data.time.FixedMillisecond(date3);
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day(date3);
        org.jfree.data.time.SerialDate serialDate6 = day5.getSerialDate();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) serialDate6);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(serialDate2);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate6);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1386");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 2147483647);
        org.jfree.data.time.Year year3 = new org.jfree.data.time.Year(31);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        timeSeries5.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries13 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        timeSeries13.add((org.jfree.data.time.RegularTimePeriod) day14, (double) (short) 0, false);
        java.util.Date date18 = day14.getStart();
        int int19 = timeSeries5.getIndex((org.jfree.data.time.RegularTimePeriod) day14);
        java.lang.Class class20 = timeSeries5.timePeriodClass;
        boolean boolean21 = timeSeries5.getNotify();
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener24 = null;
        timeSeries23.addChangeListener(seriesChangeListener24);
        long long26 = timeSeries23.getMaximumItemAge();
        boolean boolean27 = timeSeries5.equals((java.lang.Object) timeSeries23);
        java.lang.String str28 = timeSeries5.getDescription();
        org.jfree.data.time.TimeSeries timeSeries31 = timeSeries5.createCopy((int) (byte) 0, 0);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double34 = timeSeries33.getMaxY();
        java.lang.Comparable comparable35 = timeSeries33.getKey();
        java.beans.PropertyChangeListener propertyChangeListener36 = null;
        timeSeries33.addPropertyChangeListener(propertyChangeListener36);
        org.jfree.data.time.TimeSeries timeSeries39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day40 = new org.jfree.data.time.Day();
        timeSeries39.add((org.jfree.data.time.RegularTimePeriod) day40, (double) (short) 0, false);
        timeSeries39.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod46 = timeSeries39.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener47 = null;
        timeSeries39.addChangeListener(seriesChangeListener47);
        timeSeries39.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        timeSeries52.add((org.jfree.data.time.RegularTimePeriod) day53, (double) (short) 0, false);
        java.util.Date date57 = day53.getStart();
        java.lang.Number number58 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries39.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day53, number58);
        timeSeries33.add(timeSeriesDataItem59);
        double double61 = timeSeries33.getMinY();
        double double62 = timeSeries33.getMinY();
        timeSeries33.removeAgedItems(false);
        org.jfree.data.time.Month month67 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number68 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month67, number68);
        java.util.Date date70 = month67.getEnd();
        int int71 = month67.getYearValue();
        org.jfree.data.time.TimeSeries timeSeries73 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day74 = new org.jfree.data.time.Day();
        timeSeries73.add((org.jfree.data.time.RegularTimePeriod) day74, (double) (short) 0, false);
        java.util.Date date78 = day74.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond79 = new org.jfree.data.time.FixedMillisecond(date78);
        java.util.Date date80 = fixedMillisecond79.getTime();
        java.util.Calendar calendar81 = null;
        long long82 = fixedMillisecond79.getLastMillisecond(calendar81);
        long long83 = fixedMillisecond79.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem85 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond79, (double) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod86 = fixedMillisecond79.previous();
        java.util.Calendar calendar87 = null;
        long long88 = fixedMillisecond79.getLastMillisecond(calendar87);
        java.util.Calendar calendar89 = null;
        fixedMillisecond79.peg(calendar89);
        boolean boolean91 = month67.equals((java.lang.Object) calendar89);
        timeSeries33.update((org.jfree.data.time.RegularTimePeriod) month67, (java.lang.Number) 0);
        long long94 = month67.getSerialIndex();
        timeSeries5.update((org.jfree.data.time.RegularTimePeriod) month67, (java.lang.Number) 1710617399999L);
        org.jfree.data.time.TimeSeries timeSeries97 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) year3, (org.jfree.data.time.RegularTimePeriod) month67);
        long long98 = month67.getFirstMillisecond();
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(class20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 9223372036854775807L + "'", long26 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(timeSeries31);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertEquals("'" + comparable35 + "' != '" + 100L + "'", comparable35, 100L);
        org.junit.Assert.assertNotNull(regularTimePeriod46);
        org.junit.Assert.assertNotNull(date57);
        org.junit.Assert.assertEquals(date57.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Oct 31 23:59:59 PST 9");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1711868400000L + "'", long82 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1711868400000L + "'", long83 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod86);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1711868400000L + "'", long88 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 118L + "'", long94 == 118L);
        org.junit.Assert.assertNotNull(timeSeries97);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + (-61859692800000L) + "'", long98 == (-61859692800000L));
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1387");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem2 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day0, (java.lang.Number) (byte) 10);
        java.lang.Class class3 = null;
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        java.util.Date date10 = day6.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond11 = new org.jfree.data.time.FixedMillisecond(date10);
        java.util.TimeZone timeZone12 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = org.jfree.data.time.RegularTimePeriod.createInstance(class3, date10, timeZone12);
        org.jfree.data.time.FixedMillisecond fixedMillisecond14 = new org.jfree.data.time.FixedMillisecond(date10);
        org.jfree.data.time.Day day15 = new org.jfree.data.time.Day(date10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = day15.next();
        long long17 = day15.getFirstMillisecond();
        boolean boolean18 = day0.equals((java.lang.Object) day15);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = day15.previous();
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1711868400000L + "'", long17 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(regularTimePeriod19);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1388");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        java.lang.Comparable comparable19 = timeSeries18.getKey();
        timeSeries18.removeAgedItems(false);
        int int22 = timeSeries18.getMaximumItemCount();
        timeSeries18.clear();
        int int24 = timeSeries18.getMaximumItemCount();
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double27 = timeSeries26.getMaxY();
        java.lang.Comparable comparable28 = timeSeries26.getKey();
        java.beans.PropertyChangeListener propertyChangeListener29 = null;
        timeSeries26.addPropertyChangeListener(propertyChangeListener29);
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        timeSeries32.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod39 = timeSeries32.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries32.addChangeListener(seriesChangeListener40);
        timeSeries32.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day46 = new org.jfree.data.time.Day();
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day46, (double) (short) 0, false);
        java.util.Date date50 = day46.getStart();
        java.lang.Number number51 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem52 = timeSeries32.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day46, number51);
        timeSeries26.add(timeSeriesDataItem52);
        double double54 = timeSeries26.getMinY();
        double double55 = timeSeries26.getMinY();
        timeSeries26.removeAgedItems(false);
        java.lang.Number number59 = timeSeries26.getValue(0);
        timeSeries26.setNotify(true);
        org.jfree.data.time.Month month62 = new org.jfree.data.time.Month();
        long long63 = month62.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod64 = month62.previous();
        boolean boolean66 = month62.equals((java.lang.Object) 10.0d);
        long long67 = month62.getSerialIndex();
        org.jfree.data.time.Year year68 = month62.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = year68.previous();
        timeSeries26.update(regularTimePeriod69, (java.lang.Number) 1711938995383L);
        boolean boolean72 = timeSeries18.equals((java.lang.Object) regularTimePeriod69);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertEquals("'" + comparable19 + "' != '" + 1711911599999L + "'", comparable19, 1711911599999L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertEquals("'" + comparable28 + "' != '" + 100L + "'", comparable28, 100L);
        org.junit.Assert.assertNotNull(regularTimePeriod39);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertEquals("'" + number59 + "' != '" + 0.0d + "'", number59, 0.0d);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1709280000000L + "'", long63 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 24291L + "'", long67 == 24291L);
        org.junit.Assert.assertNotNull(year68);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1389");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        int int18 = timeSeries1.getItemCount();
        timeSeries1.setMaximumItemCount(31);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1390");
        java.lang.Class class0 = null;
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        java.util.Date date7 = day3.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond8 = new org.jfree.data.time.FixedMillisecond(date7);
        java.util.TimeZone timeZone9 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date7, timeZone9);
        org.jfree.data.time.FixedMillisecond fixedMillisecond11 = new org.jfree.data.time.FixedMillisecond(date7);
        long long12 = fixedMillisecond11.getFirstMillisecond();
        java.util.Calendar calendar13 = null;
        fixedMillisecond11.peg(calendar13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        timeSeries16.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day();
        timeSeries24.add((org.jfree.data.time.RegularTimePeriod) day25, (double) (short) 0, false);
        java.util.Date date29 = day25.getStart();
        org.jfree.data.time.SerialDate serialDate30 = day25.getSerialDate();
        java.lang.Number number31 = null;
        timeSeries16.update((org.jfree.data.time.RegularTimePeriod) day25, number31);
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        timeSeries34.add((org.jfree.data.time.RegularTimePeriod) day35, (double) (short) 0, false);
        java.util.Date date39 = day35.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond40 = new org.jfree.data.time.FixedMillisecond(date39);
        long long41 = fixedMillisecond40.getFirstMillisecond();
        java.util.Date date42 = fixedMillisecond40.getTime();
        int int43 = timeSeries16.getIndex((org.jfree.data.time.RegularTimePeriod) fixedMillisecond40);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day46 = new org.jfree.data.time.Day();
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day46, (double) (short) 0, false);
        timeSeries45.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod52 = timeSeries45.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener53 = null;
        timeSeries45.addChangeListener(seriesChangeListener53);
        timeSeries45.setDomainDescription("hi!");
        org.jfree.data.time.Day day57 = new org.jfree.data.time.Day();
        int int59 = day57.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = day57.next();
        timeSeries45.add(regularTimePeriod60, (java.lang.Number) 1);
        java.lang.Number number63 = null;
        timeSeries16.add(regularTimePeriod60, number63);
        org.jfree.data.time.Month month65 = new org.jfree.data.time.Month();
        long long66 = month65.getFirstMillisecond();
        long long67 = month65.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month65, 0.0d);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod70 = month65.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem71 = timeSeries16.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month65);
        java.lang.String str72 = month65.toString();
        long long73 = month65.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod74 = month65.previous();
        boolean boolean76 = month65.equals((java.lang.Object) 10);
        int int77 = fixedMillisecond11.compareTo((java.lang.Object) boolean76);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate30);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711868400000L + "'", long41 == 1711868400000L);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1709280000000L + "'", long66 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 24291L + "'", long67 == 24291L);
        org.junit.Assert.assertNotNull(regularTimePeriod70);
        org.junit.Assert.assertNotNull(timeSeriesDataItem71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "March 2024" + "'", str72, "March 2024");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1711954799999L + "'", long73 == 1711954799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1391");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        java.util.Date date21 = day17.getStart();
        int int22 = timeSeries8.getIndex((org.jfree.data.time.RegularTimePeriod) day17);
        java.lang.Class class23 = timeSeries8.timePeriodClass;
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        java.util.Date date30 = day26.getStart();
        java.util.TimeZone timeZone31 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class23, date30, timeZone31);
        timeSeries1.timePeriodClass = class23;
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        timeSeries35.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        java.util.Date date48 = day44.getStart();
        int int49 = timeSeries35.getIndex((org.jfree.data.time.RegularTimePeriod) day44);
        long long50 = day44.getFirstMillisecond();
        org.jfree.data.time.SerialDate serialDate51 = day44.getSerialDate();
        long long52 = day44.getFirstMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem54 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day44, (java.lang.Number) 118L);
        long long55 = day44.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod56 = day44.next();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711868400000L + "'", long50 == 1711868400000L);
        org.junit.Assert.assertNotNull(serialDate51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711868400000L + "'", long52 == 1711868400000L);
        org.junit.Assert.assertNull(timeSeriesDataItem54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1711954799999L + "'", long55 == 1711954799999L);
        org.junit.Assert.assertNotNull(regularTimePeriod56);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1392");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        java.lang.Object obj7 = timeSeries1.clone();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        timeSeries9.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = timeSeries9.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener17 = null;
        timeSeries9.addChangeListener(seriesChangeListener17);
        timeSeries9.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries22 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day23 = new org.jfree.data.time.Day();
        timeSeries22.add((org.jfree.data.time.RegularTimePeriod) day23, (double) (short) 0, false);
        java.util.Date date27 = day23.getStart();
        java.lang.Number number28 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries9.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day23, number28);
        java.util.Date date30 = day23.getEnd();
        boolean boolean31 = timeSeries1.equals((java.lang.Object) day23);
        int int32 = day23.getMonth();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1393");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        timeSeries21.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = timeSeries21.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean31 = timeSeries21.equals((java.lang.Object) seriesChangeEvent30);
        org.jfree.data.time.Day day32 = new org.jfree.data.time.Day();
        int int34 = day32.compareTo((java.lang.Object) (short) 100);
        java.lang.String str35 = day32.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = timeSeries21.getDataItem((org.jfree.data.time.RegularTimePeriod) day32);
        timeSeriesDataItem36.setSelected(false);
        timeSeriesDataItem36.setValue((java.lang.Number) (byte) 100);
        boolean boolean41 = timeSeriesDataItem36.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = timeSeries1.addOrUpdate(timeSeriesDataItem36);
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener45 = null;
        timeSeries44.addChangeListener(seriesChangeListener45);
        org.jfree.data.time.Month month47 = new org.jfree.data.time.Month();
        long long48 = month47.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener51 = null;
        timeSeries50.removeChangeListener(seriesChangeListener51);
        org.jfree.data.time.TimeSeries timeSeries54 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        timeSeries54.add((org.jfree.data.time.RegularTimePeriod) day55, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem60 = timeSeries50.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day55, (java.lang.Number) 10L);
        long long61 = day55.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries62 = timeSeries44.createCopy((org.jfree.data.time.RegularTimePeriod) month47, (org.jfree.data.time.RegularTimePeriod) day55);
        timeSeries44.setDomainDescription("");
        org.jfree.data.time.TimeSeries timeSeries65 = timeSeries1.addAndOrUpdate(timeSeries44);
        org.jfree.data.time.TimeSeries timeSeries67 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 9999);
        org.jfree.data.time.Month month68 = new org.jfree.data.time.Month();
        long long69 = month68.getFirstMillisecond();
        org.jfree.data.time.Year year70 = month68.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod71 = year70.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod72 = year70.previous();
        org.jfree.data.time.TimeSeries timeSeries73 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year70);
        boolean boolean74 = timeSeries67.equals((java.lang.Object) year70);
        org.jfree.data.time.Month month75 = new org.jfree.data.time.Month();
        long long76 = month75.getFirstMillisecond();
        long long77 = month75.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod78 = month75.next();
        boolean boolean79 = year70.equals((java.lang.Object) month75);
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) month75, (java.lang.Number) (byte) 10);
        java.lang.Class<?> wildcardClass82 = month75.getClass();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "31-March-2024" + "'", str35, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1709280000000L + "'", long48 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1711911599999L + "'", long61 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries62);
        org.junit.Assert.assertNotNull(timeSeries65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1709280000000L + "'", long69 == 1709280000000L);
        org.junit.Assert.assertNotNull(year70);
        org.junit.Assert.assertNotNull(regularTimePeriod71);
        org.junit.Assert.assertNotNull(regularTimePeriod72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1709280000000L + "'", long76 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 24291L + "'", long77 == 24291L);
        org.junit.Assert.assertNotNull(regularTimePeriod78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1394");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        timeSeries1.removeAgedItems(1L, false);
        boolean boolean10 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.removeChangeListener(seriesChangeListener13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day17, (java.lang.Number) 10L);
        long long23 = day17.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day17);
        timeSeries1.removeAgedItems((long) (short) -1, true);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = timeSeries1.getNextTimePeriod();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(timeSeriesDataItem22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 45382L + "'", long23 == 45382L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1395");
        org.jfree.data.time.FixedMillisecond fixedMillisecond0 = new org.jfree.data.time.FixedMillisecond();
        java.util.Calendar calendar1 = null;
        long long2 = fixedMillisecond0.getLastMillisecond(calendar1);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        boolean boolean4 = fixedMillisecond0.equals((java.lang.Object) day3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = day3.previous();
        int int6 = day3.getDayOfMonth();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711939201010L + "'", long2 == 1711939201010L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1396");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        double double20 = timeSeries19.getMinY();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener21 = null;
        timeSeries19.removeChangeListener(seriesChangeListener21);
        timeSeries19.setDescription("2025");
        timeSeries19.removeAgedItems(true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1397");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day(serialDate7);
        boolean boolean10 = day8.equals((java.lang.Object) 1.0d);
        org.jfree.data.time.SerialDate serialDate11 = day8.getSerialDate();
        long long12 = day8.getSerialIndex();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serialDate11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 45382L + "'", long12 == 45382L);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1398");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        long long9 = fixedMillisecond7.getFirstMillisecond();
        long long10 = fixedMillisecond7.getMiddleMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod11 = fixedMillisecond7.next();
        java.util.Calendar calendar12 = null;
        long long13 = fixedMillisecond7.getMiddleMillisecond(calendar12);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711868400000L + "'", long9 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1399");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        timeSeries1.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year12 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem13 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year12);
        long long14 = year12.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = year12.next();
        java.util.Date date16 = year12.getEnd();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(timeSeriesDataItem13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Dec 31 23:59:59 PST 1");
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1400");
        org.jfree.data.time.Year year2 = new org.jfree.data.time.Year(6);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month3 = new org.jfree.data.time.Month(100, year2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Month outside valid range.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1401");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = day12.next();
        org.jfree.data.time.Month month20 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date21 = month20.getStart();
        org.jfree.data.time.Year year22 = month20.getYear();
        int int23 = day12.compareTo((java.lang.Object) year22);
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        timeSeries25.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day34 = new org.jfree.data.time.Day();
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day34, (double) (short) 0, false);
        java.util.Date date38 = day34.getStart();
        org.jfree.data.time.SerialDate serialDate39 = day34.getSerialDate();
        java.lang.Number number40 = null;
        timeSeries25.update((org.jfree.data.time.RegularTimePeriod) day34, number40);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        java.util.Date date48 = day44.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond49 = new org.jfree.data.time.FixedMillisecond(date48);
        long long50 = fixedMillisecond49.getFirstMillisecond();
        java.util.Date date51 = fixedMillisecond49.getTime();
        int int52 = timeSeries25.getIndex((org.jfree.data.time.RegularTimePeriod) fixedMillisecond49);
        org.jfree.data.time.TimeSeries timeSeries54 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        timeSeries54.add((org.jfree.data.time.RegularTimePeriod) day55, (double) (short) 0, false);
        timeSeries54.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = timeSeries54.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener62 = null;
        timeSeries54.addChangeListener(seriesChangeListener62);
        timeSeries54.setDomainDescription("hi!");
        org.jfree.data.time.Day day66 = new org.jfree.data.time.Day();
        int int68 = day66.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod69 = day66.next();
        timeSeries54.add(regularTimePeriod69, (java.lang.Number) 1);
        java.lang.Number number72 = null;
        timeSeries25.add(regularTimePeriod69, number72);
        boolean boolean74 = day12.equals((java.lang.Object) number72);
        java.util.Calendar calendar75 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long76 = day12.getLastMillisecond(calendar75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(year22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate39);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711868400000L + "'", long50 == 1711868400000L);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1402");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.util.List list3 = timeSeries1.data;
        timeSeries1.removeAgedItems((long) 12, false);
        java.lang.Comparable comparable7 = timeSeries1.getKey();
        timeSeries1.removeAgedItems(true);
        java.lang.String str10 = timeSeries1.getDescription();
        java.beans.PropertyChangeListener propertyChangeListener11 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener11);
        long long13 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        java.util.Date date20 = day16.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond21 = new org.jfree.data.time.FixedMillisecond(date20);
        long long22 = fixedMillisecond21.getFirstMillisecond();
        java.util.Calendar calendar23 = null;
        fixedMillisecond21.peg(calendar23);
        long long25 = fixedMillisecond21.getMiddleMillisecond();
        long long26 = fixedMillisecond21.getMiddleMillisecond();
        java.util.Calendar calendar27 = null;
        fixedMillisecond21.peg(calendar27);
        org.jfree.data.time.Month month29 = new org.jfree.data.time.Month();
        long long30 = month29.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = month29.previous();
        boolean boolean33 = month29.equals((java.lang.Object) 10.0d);
        long long34 = month29.getSerialIndex();
        org.jfree.data.time.Year year35 = month29.getYear();
        org.jfree.data.time.TimeSeries timeSeries36 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond21, (org.jfree.data.time.RegularTimePeriod) month29);
        org.jfree.data.time.TimeSeries timeSeries39 = timeSeries36.createCopy(7, 9);
        org.jfree.data.time.Month month41 = new org.jfree.data.time.Month();
        long long42 = month41.getFirstMillisecond();
        org.jfree.data.time.Year year43 = month41.getYear();
        org.jfree.data.time.Month month44 = new org.jfree.data.time.Month(11, year43);
        timeSeries36.setKey((java.lang.Comparable) 11);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertEquals("'" + comparable7 + "' != '" + 100L + "'", comparable7, 100L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711868400000L + "'", long22 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711868400000L + "'", long25 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1709280000000L + "'", long30 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 24291L + "'", long34 == 24291L);
        org.junit.Assert.assertNotNull(year35);
        org.junit.Assert.assertNotNull(timeSeries36);
        org.junit.Assert.assertNotNull(timeSeries39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1709280000000L + "'", long42 == 1709280000000L);
        org.junit.Assert.assertNotNull(year43);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1403");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = year2.previous();
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year2);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = year2.previous();
        java.lang.Object obj7 = null;
        int int8 = year2.compareTo(obj7);
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener11 = null;
        timeSeries10.addChangeListener(seriesChangeListener11);
        long long13 = timeSeries10.getMaximumItemAge();
        java.lang.String str14 = timeSeries10.getDescription();
        timeSeries10.fireSeriesChanged();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener18 = null;
        timeSeries17.addChangeListener(seriesChangeListener18);
        long long20 = timeSeries17.getMaximumItemAge();
        java.lang.String str21 = timeSeries17.getDescription();
        double double22 = timeSeries17.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day();
        timeSeries24.add((org.jfree.data.time.RegularTimePeriod) day25, (double) (short) 0, false);
        timeSeries24.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = timeSeries24.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent33 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean34 = timeSeries24.equals((java.lang.Object) seriesChangeEvent33);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        int int37 = day35.compareTo((java.lang.Object) (short) 100);
        java.lang.String str38 = day35.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries24.getDataItem((org.jfree.data.time.RegularTimePeriod) day35);
        timeSeries17.add(timeSeriesDataItem39);
        org.jfree.data.time.TimeSeries timeSeries42 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double43 = timeSeries42.getMaxY();
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        java.lang.Number number45 = null;
        timeSeries42.add((org.jfree.data.time.RegularTimePeriod) day44, number45, false);
        double double48 = timeSeries42.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries50 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day51 = new org.jfree.data.time.Day();
        timeSeries50.add((org.jfree.data.time.RegularTimePeriod) day51, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem56 = timeSeries42.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day51, (java.lang.Number) 1711911599999L);
        int int58 = timeSeriesDataItem56.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries17.addOrUpdate(timeSeriesDataItem56);
        java.util.Collection collection60 = timeSeries10.getTimePeriodsUniqueToOtherSeries(timeSeries17);
        boolean boolean62 = timeSeries10.equals((java.lang.Object) 10);
        int int63 = year2.compareTo((java.lang.Object) boolean62);
        java.lang.Class class64 = null;
        java.lang.Class class65 = null;
        org.jfree.data.time.TimeSeries timeSeries67 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day68 = new org.jfree.data.time.Day();
        timeSeries67.add((org.jfree.data.time.RegularTimePeriod) day68, (double) (short) 0, false);
        java.util.Date date72 = day68.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond73 = new org.jfree.data.time.FixedMillisecond(date72);
        java.util.TimeZone timeZone74 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod75 = org.jfree.data.time.RegularTimePeriod.createInstance(class65, date72, timeZone74);
        java.util.TimeZone timeZone76 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod77 = org.jfree.data.time.RegularTimePeriod.createInstance(class64, date72, timeZone76);
        org.jfree.data.time.FixedMillisecond fixedMillisecond78 = new org.jfree.data.time.FixedMillisecond(date72);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo79 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent80 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) date72, seriesChangeInfo79);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo81 = null;
        seriesChangeEvent80.setSummary(seriesChangeInfo81);
        boolean boolean83 = year2.equals((java.lang.Object) seriesChangeInfo81);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 9223372036854775807L + "'", long20 == 9223372036854775807L);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "31-March-2024" + "'", str38, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem39);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(timeSeriesDataItem56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(collection60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod75);
        org.junit.Assert.assertNull(regularTimePeriod77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1404");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.lang.Comparable comparable3 = timeSeries1.getKey();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent4 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries1);
        org.jfree.data.time.Month month7 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number8 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem9 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month7, number8);
        timeSeries1.add(timeSeriesDataItem9);
        int int11 = timeSeries1.getItemCount();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + comparable3 + "' != '" + 100L + "'", comparable3, 100L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1405");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        java.lang.String str18 = timeSeries1.getDomainDescription();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod19 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent20 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) regularTimePeriod19);
        java.lang.String str21 = seriesChangeEvent20.toString();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Time" + "'", str18, "Time");
        org.junit.Assert.assertNotNull(regularTimePeriod19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org.jfree.data.event.SeriesChangeEvent[source=1-April-2024]" + "'", str21, "org.jfree.data.event.SeriesChangeEvent[source=1-April-2024]");
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1406");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries8.addChangeListener(seriesChangeListener9);
        long long11 = timeSeries8.getMaximumItemAge();
        java.lang.String str12 = timeSeries8.getDescription();
        double double13 = timeSeries8.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent24 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean25 = timeSeries15.equals((java.lang.Object) seriesChangeEvent24);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        int int28 = day26.compareTo((java.lang.Object) (short) 100);
        java.lang.String str29 = day26.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries15.getDataItem((org.jfree.data.time.RegularTimePeriod) day26);
        timeSeries8.add(timeSeriesDataItem30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double34 = timeSeries33.getMaxY();
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        java.lang.Number number36 = null;
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day35, number36, false);
        double double39 = timeSeries33.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries33.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day42, (java.lang.Number) 1711911599999L);
        int int49 = timeSeriesDataItem47.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries8.addOrUpdate(timeSeriesDataItem47);
        java.util.Collection collection51 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries8);
        boolean boolean53 = timeSeries1.equals((java.lang.Object) 10);
        java.util.Collection collection54 = timeSeries1.getTimePeriods();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 9223372036854775807L + "'", long11 == 9223372036854775807L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31-March-2024" + "'", str29, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(timeSeriesDataItem47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertNotNull(collection51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(collection54);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1407");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double4 = timeSeries3.getMaxY();
        org.jfree.data.time.Day day5 = new org.jfree.data.time.Day();
        java.lang.Number number6 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day5, number6, false);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day5);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        timeSeries11.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod18 = timeSeries11.getNextTimePeriod();
        timeSeries11.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year22 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries11.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year22);
        java.util.Collection collection24 = timeSeries9.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        java.lang.String str25 = timeSeries11.getRangeDescription();
        timeSeries11.removeAgedItems(false);
        timeSeries11.clear();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries11, seriesChangeInfo29);
        java.util.Collection collection31 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries11);
        timeSeries1.setNotify(false);
        long long34 = timeSeries1.getMaximumItemAge();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(regularTimePeriod18);
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(collection24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value" + "'", str25, "Value");
        org.junit.Assert.assertNotNull(collection31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 9223372036854775807L + "'", long34 == 9223372036854775807L);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1408");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        java.lang.String str18 = timeSeries1.getDomainDescription();
        java.util.List list19 = timeSeries1.data;
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Time" + "'", str18, "Time");
        org.junit.Assert.assertNotNull(list19);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1409");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date3 = month2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = month2.next();
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        timeSeries6.add((org.jfree.data.time.RegularTimePeriod) day7, (double) (short) 0, false);
        timeSeries6.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = timeSeries6.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener14 = null;
        timeSeries6.addChangeListener(seriesChangeListener14);
        timeSeries6.setDomainDescription("hi!");
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        int int20 = day18.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = day18.next();
        timeSeries6.add(regularTimePeriod21, (java.lang.Number) 1);
        org.jfree.data.time.Month month26 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number27 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month26, number27);
        long long29 = month26.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries6.getDataItem((org.jfree.data.time.RegularTimePeriod) month26);
        org.jfree.data.time.Year year31 = month26.getYear();
        int int32 = month2.compareTo((java.lang.Object) year31);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = month2.next();
        int int34 = month2.getYearValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod35 = month2.next();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 118L + "'", long29 == 118L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
        org.junit.Assert.assertNotNull(year31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(regularTimePeriod35);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1410");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries25.addChangeListener(seriesChangeListener26);
        org.jfree.data.time.Month month28 = new org.jfree.data.time.Month();
        long long29 = month28.getFirstMillisecond();
        org.jfree.data.time.Year year30 = month28.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = year30.next();
        long long32 = year30.getLastMillisecond();
        java.lang.Number number33 = null;
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) year30, number33);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) year30, (double) 100.0f);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        java.util.List list39 = timeSeries38.data;
        timeSeries19.data = list39;
        org.jfree.data.event.SeriesChangeListener seriesChangeListener41 = null;
        timeSeries19.removeChangeListener(seriesChangeListener41);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1709280000000L + "'", long29 == 1709280000000L);
        org.junit.Assert.assertNotNull(year30);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1735718399999L + "'", long32 == 1735718399999L);
        org.junit.Assert.assertNull(timeSeriesDataItem36);
        org.junit.Assert.assertNotNull(list39);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1411");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number3 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem4 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, number3);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = month2.next();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            month2.peg(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1412");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        timeSeries1.clear();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        java.util.Date date25 = day21.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond26 = new org.jfree.data.time.FixedMillisecond(date25);
        java.util.Date date27 = fixedMillisecond26.getTime();
        long long28 = fixedMillisecond26.getFirstMillisecond();
        long long29 = fixedMillisecond26.getSerialIndex();
        long long30 = fixedMillisecond26.getFirstMillisecond();
        java.util.Date date31 = fixedMillisecond26.getTime();
        org.jfree.data.time.Month month34 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number35 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month34, number35);
        boolean boolean37 = timeSeriesDataItem36.isSelected();
        org.jfree.data.time.TimeSeries timeSeries39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries39.addChangeListener(seriesChangeListener40);
        org.jfree.data.time.Month month42 = new org.jfree.data.time.Month();
        long long43 = month42.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener46 = null;
        timeSeries45.removeChangeListener(seriesChangeListener46);
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem55 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, (java.lang.Number) 10L);
        long long56 = day50.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries57 = timeSeries39.createCopy((org.jfree.data.time.RegularTimePeriod) month42, (org.jfree.data.time.RegularTimePeriod) day50);
        org.jfree.data.time.TimeSeries timeSeries59 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day60 = new org.jfree.data.time.Day();
        timeSeries59.add((org.jfree.data.time.RegularTimePeriod) day60, (double) (short) 0, false);
        timeSeries59.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod66 = timeSeries59.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent68 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean69 = timeSeries59.equals((java.lang.Object) seriesChangeEvent68);
        org.jfree.data.time.Day day70 = new org.jfree.data.time.Day();
        int int72 = day70.compareTo((java.lang.Object) (short) 100);
        java.lang.String str73 = day70.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem74 = timeSeries59.getDataItem((org.jfree.data.time.RegularTimePeriod) day70);
        timeSeriesDataItem74.setSelected(false);
        timeSeriesDataItem74.setValue((java.lang.Number) (byte) 100);
        boolean boolean79 = timeSeriesDataItem74.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem80 = timeSeries39.addOrUpdate(timeSeriesDataItem74);
        int int81 = timeSeriesDataItem36.compareTo((java.lang.Object) timeSeriesDataItem74);
        org.jfree.data.time.Day day82 = new org.jfree.data.time.Day();
        int int84 = day82.compareTo((java.lang.Object) (short) 100);
        long long85 = day82.getMiddleMillisecond();
        int int86 = day82.getYear();
        boolean boolean88 = day82.equals((java.lang.Object) 5);
        int int89 = day82.getDayOfMonth();
        java.lang.String str90 = day82.toString();
        int int91 = timeSeriesDataItem36.compareTo((java.lang.Object) day82);
        int int92 = fixedMillisecond26.compareTo((java.lang.Object) timeSeriesDataItem36);
        java.lang.Number number93 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) fixedMillisecond26);
        timeSeries1.setDomainDescription("org.jfree.data.general.SeriesException: 31-March-2024");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1711868400000L + "'", long28 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711868400000L + "'", long29 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1711868400000L + "'", long30 == 1711868400000L);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1709280000000L + "'", long43 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1711911599999L + "'", long56 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries57);
        org.junit.Assert.assertNotNull(regularTimePeriod66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "31-March-2024" + "'", str73, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1711911599999L + "'", long85 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2024 + "'", int86 == 2024);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 31 + "'", int89 == 31);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "31-March-2024" + "'", str90, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNull(number93);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1413");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month1 = org.jfree.data.time.Month.parseMonth("org.jfree.data.event.SeriesChangeEvent[source=class org.jfree.data.time.Day]");
            org.junit.Assert.fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException; message: Can't evaluate the month.");
        } catch (org.jfree.data.time.TimePeriodFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1414");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        java.beans.PropertyChangeListener propertyChangeListener4 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener4);
        double double6 = timeSeries1.getMinY();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1415");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        java.lang.String str8 = day2.toString();
        java.lang.String str9 = day2.toString();
        java.lang.String str10 = day2.toString();
        org.jfree.data.time.SerialDate serialDate11 = day2.getSerialDate();
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.Day day15 = new org.jfree.data.time.Day();
        int int17 = day15.compareTo((java.lang.Object) (short) 100);
        long long18 = day15.getMiddleMillisecond();
        int int19 = day15.getYear();
        boolean boolean21 = day15.equals((java.lang.Object) 5);
        int int22 = day15.getDayOfMonth();
        java.lang.String str23 = day15.toString();
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day15, "Value", "hi!");
        int int27 = day12.compareTo((java.lang.Object) day15);
        boolean boolean28 = day2.equals((java.lang.Object) day15);
        java.util.Date date29 = day15.getEnd();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = day15.previous();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "31-March-2024" + "'", str8, "31-March-2024");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "31-March-2024" + "'", str9, "31-March-2024");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "31-March-2024" + "'", str10, "31-March-2024");
        org.junit.Assert.assertNotNull(serialDate11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2024 + "'", int19 == 2024);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "31-March-2024" + "'", str23, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod30);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1416");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        java.lang.String str24 = timeSeries1.getDescription();
        double double25 = timeSeries1.getMaxY();
        org.jfree.data.time.Month month26 = new org.jfree.data.time.Month();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = month26.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod28 = month26.next();
        int int29 = month26.getYearValue();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month26);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertNotNull(regularTimePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2024 + "'", int29 == 2024);
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1417");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        boolean boolean2 = timeSeries1.isEmpty();
        timeSeries1.clear();
        boolean boolean4 = timeSeries1.getNotify();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1418");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        java.lang.Object obj17 = timeSeries1.clone();
        boolean boolean18 = timeSeries1.getNotify();
        java.util.List list19 = timeSeries1.getItems();
        double double20 = timeSeries1.getMaxY();
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1419");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        java.util.Calendar calendar11 = null;
        long long12 = fixedMillisecond7.getFirstMillisecond(calendar11);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = fixedMillisecond7.previous();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = regularTimePeriod13.previous();
        java.util.Date date15 = regularTimePeriod14.getEnd();
        java.util.Date date16 = regularTimePeriod14.getEnd();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Mar 30 23:59:59 PDT 2024");
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Mar 30 23:59:59 PDT 2024");
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1420");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        java.lang.String str24 = timeSeries1.getDescription();
        double double25 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day26, (java.lang.Number) (byte) 10);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day26, (java.lang.Number) 0L);
        boolean boolean31 = timeSeriesDataItem30.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries1.addOrUpdate(timeSeriesDataItem30);
        timeSeries1.setDescription("Value");
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1421");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        timeSeries11.add((org.jfree.data.time.RegularTimePeriod) day12, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem17 = timeSeries7.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day12, (java.lang.Number) 10L);
        long long18 = day12.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) month4, (org.jfree.data.time.RegularTimePeriod) day12);
        timeSeries1.setKey((java.lang.Comparable) "31-March-2024");
        java.util.List list22 = timeSeries1.getItems();
        timeSeries1.setMaximumItemAge((long) (byte) 0);
        int int25 = timeSeries1.getItemCount();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener26 = null;
        timeSeries1.removeChangeListener(seriesChangeListener26);
        java.lang.Class class28 = timeSeries1.timePeriodClass;
        timeSeries1.setDescription("");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711911599999L + "'", long18 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(class28);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1422");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month1 = org.jfree.data.time.Month.parseMonth("31");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 5");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1423");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries8.addChangeListener(seriesChangeListener9);
        long long11 = timeSeries8.getMaximumItemAge();
        java.lang.String str12 = timeSeries8.getDescription();
        double double13 = timeSeries8.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent24 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean25 = timeSeries15.equals((java.lang.Object) seriesChangeEvent24);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        int int28 = day26.compareTo((java.lang.Object) (short) 100);
        java.lang.String str29 = day26.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries15.getDataItem((org.jfree.data.time.RegularTimePeriod) day26);
        timeSeries8.add(timeSeriesDataItem30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double34 = timeSeries33.getMaxY();
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        java.lang.Number number36 = null;
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day35, number36, false);
        double double39 = timeSeries33.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries33.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day42, (java.lang.Number) 1711911599999L);
        int int49 = timeSeriesDataItem47.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries8.addOrUpdate(timeSeriesDataItem47);
        java.util.Collection collection51 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries8);
        java.lang.Class class52 = timeSeries1.timePeriodClass;
        org.jfree.data.time.Month month54 = new org.jfree.data.time.Month();
        long long55 = month54.getFirstMillisecond();
        org.jfree.data.time.Year year56 = month54.getYear();
        org.jfree.data.time.Month month57 = new org.jfree.data.time.Month(11, year56);
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) year56);
        long long59 = year56.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries61 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day62 = new org.jfree.data.time.Day();
        timeSeries61.add((org.jfree.data.time.RegularTimePeriod) day62, (double) (short) 0, false);
        timeSeries61.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod68 = timeSeries61.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener69 = null;
        timeSeries61.addChangeListener(seriesChangeListener69);
        timeSeries61.setDomainDescription("hi!");
        org.jfree.data.time.Day day73 = new org.jfree.data.time.Day();
        int int75 = day73.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod76 = day73.next();
        timeSeries61.add(regularTimePeriod76, (java.lang.Number) 1);
        org.jfree.data.time.Month month81 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number82 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem83 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month81, number82);
        long long84 = month81.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem85 = timeSeries61.getDataItem((org.jfree.data.time.RegularTimePeriod) month81);
        java.lang.Number number86 = timeSeriesDataItem85.getValue();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod87 = timeSeriesDataItem85.getPeriod();
        org.jfree.data.time.TimeSeries timeSeries88 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) timeSeriesDataItem85);
        boolean boolean89 = year56.equals((java.lang.Object) timeSeriesDataItem85);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 9223372036854775807L + "'", long11 == 9223372036854775807L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31-March-2024" + "'", str29, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(timeSeriesDataItem47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertNotNull(collection51);
        org.junit.Assert.assertNull(class52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1709280000000L + "'", long55 == 1709280000000L);
        org.junit.Assert.assertNotNull(year56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1704096000000L + "'", long59 == 1704096000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod68);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod76);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 118L + "'", long84 == 118L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem85);
        org.junit.Assert.assertEquals("'" + number86 + "' != '" + 0.0d + "'", number86, 0.0d);
        org.junit.Assert.assertNotNull(regularTimePeriod87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1424");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 1);
        int int3 = month2.getMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1425");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem15 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day10, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        java.lang.Comparable comparable19 = timeSeries18.getKey();
        timeSeries18.setDomainDescription("");
        org.jfree.data.time.Year year23 = new org.jfree.data.time.Year((int) (short) 10);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries18.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year23);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener25 = null;
        timeSeries18.addChangeListener(seriesChangeListener25);
        boolean boolean27 = timeSeries18.isEmpty();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(timeSeriesDataItem15);
        org.junit.Assert.assertEquals("'" + comparable19 + "' != '" + 1711911599999L + "'", comparable19, 1711911599999L);
        org.junit.Assert.assertNull(timeSeriesDataItem24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1426");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        org.jfree.data.time.Month month4 = new org.jfree.data.time.Month();
        long long5 = month4.getFirstMillisecond();
        org.jfree.data.time.Year year6 = month4.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = year6.next();
        long long8 = year6.getLastMillisecond();
        java.lang.Number number9 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) year6, number9);
        java.util.Date date11 = year6.getStart();
        long long12 = year6.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1735718399999L + "'", long8 == 1735718399999L);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Jan 01 00:00:00 PST 2024");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1704096000000L + "'", long12 == 1704096000000L);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1427");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        java.lang.String str24 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries27 = timeSeries1.createCopy((int) (byte) 0, 0);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        timeSeries29.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = timeSeries29.getNextTimePeriod();
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day37, (java.lang.Number) (byte) 10);
        timeSeriesDataItem39.setValue((java.lang.Number) 100);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem42 = timeSeries29.addOrUpdate(timeSeriesDataItem39);
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double45 = timeSeries44.getMaxY();
        org.jfree.data.time.Day day46 = new org.jfree.data.time.Day();
        java.lang.Number number47 = null;
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day46, number47, false);
        double double50 = timeSeries44.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries52 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day53 = new org.jfree.data.time.Day();
        timeSeries52.add((org.jfree.data.time.RegularTimePeriod) day53, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem58 = timeSeries44.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day53, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod59 = day53.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem60 = timeSeries29.getRawDataItem((org.jfree.data.time.RegularTimePeriod) day53);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem61 = timeSeries27.addOrUpdate(timeSeriesDataItem60);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeries timeSeries64 = timeSeries27.createCopy(2024, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requires start <= end.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(timeSeries27);
        org.junit.Assert.assertNotNull(regularTimePeriod36);
        org.junit.Assert.assertNotNull(timeSeriesDataItem42);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(timeSeriesDataItem58);
        org.junit.Assert.assertNotNull(regularTimePeriod59);
        org.junit.Assert.assertNotNull(timeSeriesDataItem60);
        org.junit.Assert.assertNotNull(timeSeriesDataItem61);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1428");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getMiddleMillisecond();
        java.util.Date date12 = fixedMillisecond7.getTime();
        java.util.TimeZone timeZone13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month14 = new org.jfree.data.time.Month(date12, timeZone13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1429");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day6, (java.lang.Number) 10L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = day6.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem14 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod12, (java.lang.Number) 6);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = regularTimePeriod12.next();
        long long16 = regularTimePeriod12.getFirstMillisecond();
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711954800000L + "'", long16 == 1711954800000L);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1430");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.SerialDate serialDate14 = day9.getSerialDate();
        java.lang.String str15 = day9.toString();
        java.lang.Number number16 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day9, number16);
        java.util.Collection collection18 = timeSeries1.getTimePeriods();
        boolean boolean19 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        java.util.Date date26 = day22.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond27 = new org.jfree.data.time.FixedMillisecond(date26);
        java.util.Calendar calendar28 = null;
        long long29 = fixedMillisecond27.getMiddleMillisecond(calendar28);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond27, (double) (byte) 0);
        timeSeriesDataItem31.setValue((java.lang.Number) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem34 = timeSeries1.addOrUpdate(timeSeriesDataItem31);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNotNull(collection18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1711868400000L + "'", long29 == 1711868400000L);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1431");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double27 = timeSeries26.getMaxY();
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        java.lang.Number number29 = null;
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day28, number29, false);
        double double32 = timeSeries26.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        timeSeries34.add((org.jfree.data.time.RegularTimePeriod) day35, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries26.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day35, (java.lang.Number) 1711911599999L);
        int int42 = timeSeriesDataItem40.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries1.addOrUpdate(timeSeriesDataItem40);
        java.lang.Object obj44 = timeSeries1.clone();
        int int45 = timeSeries1.getItemCount();
        java.lang.Object obj46 = timeSeries1.clone();
        timeSeries1.removeAgedItems(false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "31-March-2024" + "'", str22, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(obj46);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1432");
        java.lang.Class class0 = null;
        org.jfree.data.time.TimeSeries timeSeries2 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        timeSeries2.add((org.jfree.data.time.RegularTimePeriod) day3, (double) (short) 0, false);
        java.util.Date date7 = day3.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond8 = new org.jfree.data.time.FixedMillisecond(date7);
        java.util.TimeZone timeZone9 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod10 = org.jfree.data.time.RegularTimePeriod.createInstance(class0, date7, timeZone9);
        org.jfree.data.time.FixedMillisecond fixedMillisecond11 = new org.jfree.data.time.FixedMillisecond(date7);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day(date7);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = day12.next();
        java.util.Date date14 = day12.getStart();
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod10);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1433");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        long long6 = timeSeries3.getMaximumItemAge();
        java.lang.String str7 = timeSeries3.getDescription();
        int int8 = timeSeries3.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, false);
        java.util.Date date15 = day11.getStart();
        org.jfree.data.time.SerialDate serialDate16 = day11.getSerialDate();
        java.lang.String str17 = day11.toString();
        java.lang.Number number18 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day11, number18);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, true);
        org.jfree.data.time.FixedMillisecond fixedMillisecond23 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day27, (double) (short) 0, false);
        timeSeries26.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod33 = timeSeries26.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent35 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean36 = timeSeries26.equals((java.lang.Object) seriesChangeEvent35);
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day();
        int int39 = day37.compareTo((java.lang.Object) (short) 100);
        java.lang.String str40 = day37.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem41 = timeSeries26.getDataItem((org.jfree.data.time.RegularTimePeriod) day37);
        java.lang.Object obj42 = timeSeries26.clone();
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        java.util.Date date49 = day45.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod50 = day45.next();
        timeSeries26.setKey((java.lang.Comparable) regularTimePeriod50);
        org.jfree.data.time.TimeSeries timeSeries53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day54 = new org.jfree.data.time.Day();
        timeSeries53.add((org.jfree.data.time.RegularTimePeriod) day54, (double) (short) 0, false);
        timeSeries53.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod60 = timeSeries53.getNextTimePeriod();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem62 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod60, (double) 24291L);
        timeSeriesDataItem62.setValue((java.lang.Number) 24290L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod65 = timeSeriesDataItem62.getPeriod();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem66 = timeSeries26.getRawDataItem(regularTimePeriod65);
        java.util.Collection collection67 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries26);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9223372036854775807L + "'", long6 == 9223372036854775807L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "31-March-2024" + "'", str17, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertNotNull(regularTimePeriod33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "31-March-2024" + "'", str40, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod50);
        org.junit.Assert.assertNotNull(regularTimePeriod60);
        org.junit.Assert.assertNotNull(regularTimePeriod65);
        org.junit.Assert.assertNull(timeSeriesDataItem66);
        org.junit.Assert.assertNotNull(collection67);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1434");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        java.util.Calendar calendar11 = null;
        long long12 = fixedMillisecond7.getMiddleMillisecond(calendar11);
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getMiddleMillisecond(calendar13);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond7, (double) 24291L);
        java.util.Date date17 = fixedMillisecond7.getTime();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1435");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        org.jfree.data.time.FixedMillisecond fixedMillisecond9 = new org.jfree.data.time.FixedMillisecond(date8);
        boolean boolean11 = fixedMillisecond9.equals((java.lang.Object) 100L);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem13 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond9, (double) (-62041132800001L));
        java.util.Calendar calendar14 = null;
        long long15 = fixedMillisecond9.getFirstMillisecond(calendar14);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1711868400000L + "'", long15 == 1711868400000L);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1436");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        int int8 = timeSeries1.getItemCount();
        double double9 = timeSeries1.getMinY();
        double double10 = timeSeries1.getMaxY();
        int int11 = timeSeries1.getMaximumItemCount();
        boolean boolean12 = timeSeries1.getNotify();
        java.lang.Class class13 = null;
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        java.util.Date date20 = day16.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond21 = new org.jfree.data.time.FixedMillisecond(date20);
        java.util.TimeZone timeZone22 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = org.jfree.data.time.RegularTimePeriod.createInstance(class13, date20, timeZone22);
        org.jfree.data.time.FixedMillisecond fixedMillisecond24 = new org.jfree.data.time.FixedMillisecond(date20);
        long long25 = fixedMillisecond24.getFirstMillisecond();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add((org.jfree.data.time.RegularTimePeriod) fixedMillisecond24, (java.lang.Number) 1);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711868400000L + "'", long25 == 1711868400000L);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1437");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        int int5 = day3.compareTo((java.lang.Object) (short) 100);
        long long6 = day3.getMiddleMillisecond();
        int int7 = day3.getYear();
        boolean boolean9 = day3.equals((java.lang.Object) 5);
        int int10 = day3.getDayOfMonth();
        java.lang.String str11 = day3.toString();
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3, "Value", "hi!");
        int int15 = day0.compareTo((java.lang.Object) day3);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day0, "hi!", "2024");
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double21 = timeSeries20.getMaxY();
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        java.lang.Number number23 = null;
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day22, number23, false);
        double double26 = timeSeries20.getMaxY();
        int int27 = timeSeries20.getItemCount();
        double double28 = timeSeries20.getMinY();
        double double29 = timeSeries20.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double32 = timeSeries31.getMaxY();
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        java.lang.Number number34 = null;
        timeSeries31.add((org.jfree.data.time.RegularTimePeriod) day33, number34, false);
        double double37 = timeSeries31.getMaxY();
        int int38 = timeSeries31.getItemCount();
        double double39 = timeSeries31.getMinY();
        double double40 = timeSeries31.getMaxY();
        int int41 = timeSeries31.getItemCount();
        java.util.Collection collection42 = timeSeries31.getTimePeriods();
        boolean boolean43 = timeSeries20.equals((java.lang.Object) collection42);
        java.lang.Comparable comparable44 = timeSeries20.getKey();
        org.jfree.data.time.TimeSeries timeSeries46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double47 = timeSeries46.getMaxY();
        org.jfree.data.time.Day day48 = new org.jfree.data.time.Day();
        java.lang.Number number49 = null;
        timeSeries46.add((org.jfree.data.time.RegularTimePeriod) day48, number49, false);
        double double52 = timeSeries46.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries54 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        timeSeries54.add((org.jfree.data.time.RegularTimePeriod) day55, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem60 = timeSeries46.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day55, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries63 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        java.lang.Comparable comparable64 = timeSeries63.getKey();
        timeSeries63.removeAgedItems(false);
        org.jfree.data.time.Month month67 = new org.jfree.data.time.Month();
        long long68 = month67.getFirstMillisecond();
        long long69 = month67.getSerialIndex();
        int int70 = month67.getYearValue();
        timeSeries63.setKey((java.lang.Comparable) month67);
        boolean boolean72 = timeSeries63.getNotify();
        org.jfree.data.time.Day day73 = new org.jfree.data.time.Day();
        int int74 = day73.getMonth();
        org.jfree.data.time.SerialDate serialDate75 = day73.getSerialDate();
        org.jfree.data.time.Day day76 = new org.jfree.data.time.Day(serialDate75);
        org.jfree.data.time.Day day77 = new org.jfree.data.time.Day(serialDate75);
        java.util.Date date78 = day77.getStart();
        org.jfree.data.time.TimeSeries timeSeries80 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Month month81 = new org.jfree.data.time.Month();
        long long82 = month81.getFirstMillisecond();
        long long83 = month81.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem85 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month81, 0.0d);
        timeSeries80.add(timeSeriesDataItem85, false);
        boolean boolean88 = timeSeries80.getNotify();
        boolean boolean89 = day77.equals((java.lang.Object) boolean88);
        timeSeries63.add((org.jfree.data.time.RegularTimePeriod) day77, (java.lang.Number) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem93 = timeSeries20.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day77, (double) (short) -1);
        timeSeries18.add(timeSeriesDataItem93);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem96 = timeSeries18.getDataItem((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711911599999L + "'", long6 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2024 + "'", int7 == 2024);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "31-March-2024" + "'", str11, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(collection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + comparable44 + "' != '" + 100L + "'", comparable44, 100L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(timeSeriesDataItem60);
        org.junit.Assert.assertEquals("'" + comparable64 + "' != '" + 1711911599999L + "'", comparable64, 1711911599999L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1709280000000L + "'", long68 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 24291L + "'", long69 == 24291L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2024 + "'", int70 == 2024);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(serialDate75);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1709280000000L + "'", long82 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 24291L + "'", long83 == 24291L);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(timeSeriesDataItem93);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1438");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        int int18 = timeSeries1.getItemCount();
        java.lang.Class class19 = timeSeries1.timePeriodClass;
        timeSeries1.setNotify(false);
        timeSeries1.clear();
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException24 = new org.jfree.data.time.TimePeriodFormatException("9");
        java.lang.Throwable[] throwableArray25 = timePeriodFormatException24.getSuppressed();
        boolean boolean26 = timeSeries1.equals((java.lang.Object) throwableArray25);
        org.jfree.data.time.Month month29 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number30 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month29, number30);
        boolean boolean32 = timeSeriesDataItem31.isSelected();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener35 = null;
        timeSeries34.addChangeListener(seriesChangeListener35);
        org.jfree.data.time.Month month37 = new org.jfree.data.time.Month();
        long long38 = month37.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener41 = null;
        timeSeries40.removeChangeListener(seriesChangeListener41);
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day45 = new org.jfree.data.time.Day();
        timeSeries44.add((org.jfree.data.time.RegularTimePeriod) day45, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries40.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day45, (java.lang.Number) 10L);
        long long51 = day45.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries52 = timeSeries34.createCopy((org.jfree.data.time.RegularTimePeriod) month37, (org.jfree.data.time.RegularTimePeriod) day45);
        org.jfree.data.time.TimeSeries timeSeries54 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day55 = new org.jfree.data.time.Day();
        timeSeries54.add((org.jfree.data.time.RegularTimePeriod) day55, (double) (short) 0, false);
        timeSeries54.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod61 = timeSeries54.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent63 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean64 = timeSeries54.equals((java.lang.Object) seriesChangeEvent63);
        org.jfree.data.time.Day day65 = new org.jfree.data.time.Day();
        int int67 = day65.compareTo((java.lang.Object) (short) 100);
        java.lang.String str68 = day65.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = timeSeries54.getDataItem((org.jfree.data.time.RegularTimePeriod) day65);
        timeSeriesDataItem69.setSelected(false);
        timeSeriesDataItem69.setValue((java.lang.Number) (byte) 100);
        boolean boolean74 = timeSeriesDataItem69.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem75 = timeSeries34.addOrUpdate(timeSeriesDataItem69);
        int int76 = timeSeriesDataItem31.compareTo((java.lang.Object) timeSeriesDataItem69);
        timeSeries1.add(timeSeriesDataItem69);
        timeSeries1.setDescription("org.jfree.data.general.SeriesException: 31-March-2024");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1709280000000L + "'", long38 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1711911599999L + "'", long51 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries52);
        org.junit.Assert.assertNotNull(regularTimePeriod61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "31-March-2024" + "'", str68, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1439");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getMiddleMillisecond();
        java.util.Date date12 = fixedMillisecond7.getTime();
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day(date12);
        java.lang.Object obj14 = null;
        int int15 = day13.compareTo(obj14);
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = day13.getLastMillisecond(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1440");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        boolean boolean24 = timeSeries1.isEmpty();
        java.lang.Comparable comparable25 = timeSeries1.getKey();
        int int26 = timeSeries1.getItemCount();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number28 = timeSeries1.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + comparable25 + "' != '" + 100L + "'", comparable25, 100L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1441");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        long long13 = day8.getFirstMillisecond();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day8, (java.lang.Number) 10, false);
        java.util.List list17 = timeSeries1.data;
        java.lang.String str18 = timeSeries1.getDomainDescription();
        timeSeries1.setDescription("hi!");
        java.lang.Comparable comparable21 = timeSeries1.getKey();
        timeSeries1.setDescription("2024");
        org.jfree.data.time.Month month24 = new org.jfree.data.time.Month();
        long long25 = month24.getFirstMillisecond();
        long long26 = month24.getSerialIndex();
        long long27 = month24.getSerialIndex();
        int int28 = month24.getMonth();
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 2147483647);
        int int31 = timeSeries30.getMaximumItemCount();
        int int32 = month24.compareTo((java.lang.Object) timeSeries30);
        java.util.Collection collection33 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries30);
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        java.util.Date date40 = day36.getStart();
        org.jfree.data.time.SerialDate serialDate41 = day36.getSerialDate();
        java.lang.String str42 = day36.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = day36.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day36);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertNotNull(list17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Time" + "'", str18, "Time");
        org.junit.Assert.assertEquals("'" + comparable21 + "' != '" + (short) 100 + "'", comparable21, (short) 100);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1709280000000L + "'", long25 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 24291L + "'", long26 == 24291L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 24291L + "'", long27 == 24291L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2147483647 + "'", int31 == 2147483647);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(collection33);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "31-March-2024" + "'", str42, "31-March-2024");
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(timeSeriesDataItem44);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1442");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.SerialDate serialDate14 = day9.getSerialDate();
        java.lang.String str15 = day9.toString();
        java.lang.Number number16 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day9, number16);
        boolean boolean18 = timeSeries1.isEmpty();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener21 = null;
        timeSeries20.addChangeListener(seriesChangeListener21);
        java.beans.PropertyChangeListener propertyChangeListener23 = null;
        timeSeries20.addPropertyChangeListener(propertyChangeListener23);
        timeSeries20.setMaximumItemCount((int) (byte) 0);
        java.lang.Class class27 = timeSeries20.timePeriodClass;
        org.jfree.data.time.Month month28 = new org.jfree.data.time.Month();
        long long29 = month28.getFirstMillisecond();
        org.jfree.data.time.Year year30 = month28.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = year30.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = year30.previous();
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year30);
        boolean boolean34 = timeSeries20.equals((java.lang.Object) timeSeries33);
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries38 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double39 = timeSeries38.getMaxY();
        org.jfree.data.time.Day day40 = new org.jfree.data.time.Day();
        java.lang.Number number41 = null;
        timeSeries38.add((org.jfree.data.time.RegularTimePeriod) day40, number41, false);
        org.jfree.data.time.TimeSeries timeSeries44 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day40);
        org.jfree.data.time.TimeSeries timeSeries46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        timeSeries46.add((org.jfree.data.time.RegularTimePeriod) day47, (double) (short) 0, false);
        timeSeries46.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = timeSeries46.getNextTimePeriod();
        timeSeries46.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year57 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem58 = timeSeries46.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year57);
        java.util.Collection collection59 = timeSeries44.getTimePeriodsUniqueToOtherSeries(timeSeries46);
        java.lang.String str60 = timeSeries46.getRangeDescription();
        timeSeries46.removeAgedItems(false);
        timeSeries46.clear();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo64 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent65 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries46, seriesChangeInfo64);
        java.util.Collection collection66 = timeSeries36.getTimePeriodsUniqueToOtherSeries(timeSeries46);
        int int67 = timeSeries36.getItemCount();
        org.jfree.data.time.Year year68 = new org.jfree.data.time.Year();
        timeSeries36.delete((org.jfree.data.time.RegularTimePeriod) year68);
        int int70 = timeSeries20.getIndex((org.jfree.data.time.RegularTimePeriod) year68);
        java.util.Collection collection71 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries20);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(class27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1709280000000L + "'", long29 == 1709280000000L);
        org.junit.Assert.assertNotNull(year30);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(regularTimePeriod32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertNotNull(timeSeriesDataItem58);
        org.junit.Assert.assertNotNull(collection59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Value" + "'", str60, "Value");
        org.junit.Assert.assertNotNull(collection66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(collection71);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1443");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem4 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month0, 0.0d);
        long long5 = month0.getFirstMillisecond();
        java.util.Calendar calendar6 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long7 = month0.getLastMillisecond(calendar6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1709280000000L + "'", long5 == 1709280000000L);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1444");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = year2.previous();
        int int5 = year2.getYear();
        long long6 = year2.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year2);
        java.util.Calendar calendar8 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = year2.getLastMillisecond(calendar8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2024 + "'", int5 == 2024);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1704096000000L + "'", long6 == 1704096000000L);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1445");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        double double7 = timeSeries1.getMaxY();
        timeSeries1.setMaximumItemAge(1711938995383L);
        java.util.List list10 = timeSeries1.data;
        boolean boolean11 = timeSeries1.getNotify();
        int int12 = timeSeries1.getMaximumItemCount();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(list10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1446");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.addChangeListener(seriesChangeListener9);
        timeSeries1.setDomainDescription("hi!");
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day();
        int int15 = day13.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod16 = day13.next();
        timeSeries1.add(regularTimePeriod16, (java.lang.Number) 1);
        java.lang.String str19 = timeSeries1.getDescription();
        double double20 = timeSeries1.getMinY();
        org.jfree.data.time.Month month21 = new org.jfree.data.time.Month();
        long long22 = month21.getFirstMillisecond();
        long long23 = month21.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem25 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month21, 0.0d);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = timeSeriesDataItem25.getPeriod();
        timeSeries1.setKey((java.lang.Comparable) regularTimePeriod26);
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        int int30 = day28.compareTo((java.lang.Object) (short) 100);
        long long31 = day28.getMiddleMillisecond();
        int int32 = day28.getYear();
        boolean boolean34 = day28.equals((java.lang.Object) 5);
        int int35 = day28.getDayOfMonth();
        long long36 = day28.getSerialIndex();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day28, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are attempting to add an observation for the time period 31-March-2024 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1709280000000L + "'", long22 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 24291L + "'", long23 == 24291L);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1711911599999L + "'", long31 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2024 + "'", int32 == 2024);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 31 + "'", int35 == 31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 45382L + "'", long36 == 45382L);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1447");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        java.lang.String str3 = month0.toString();
        java.lang.String str4 = month0.toString();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = month0.previous();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "March 2024" + "'", str3, "March 2024");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "March 2024" + "'", str4, "March 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod5);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1448");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        java.util.Calendar calendar11 = null;
        long long12 = fixedMillisecond7.getMiddleMillisecond(calendar11);
        long long13 = fixedMillisecond7.getFirstMillisecond();
        java.lang.String str14 = fixedMillisecond7.toString();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711868400000L + "'", long12 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1711868400000L + "'", long13 == 1711868400000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Sun Mar 31 00:00:00 PDT 2024" + "'", str14, "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1449");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 9999);
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        long long3 = month2.getFirstMillisecond();
        org.jfree.data.time.Year year4 = month2.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = year4.next();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod6 = year4.previous();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) year4);
        boolean boolean8 = timeSeries1.equals((java.lang.Object) year4);
        java.lang.String str9 = timeSeries1.getDomainDescription();
        java.lang.Object obj10 = timeSeries1.clone();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo11 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent12 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries1, seriesChangeInfo11);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem14 = timeSeries1.getDataItem((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1709280000000L + "'", long3 == 1709280000000L);
        org.junit.Assert.assertNotNull(year4);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(regularTimePeriod6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Time" + "'", str9, "Time");
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1450");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        long long3 = month2.getFirstMillisecond();
        long long4 = month2.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem6 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, 0.0d);
        timeSeries1.add(timeSeriesDataItem6, false);
        timeSeries1.clear();
        java.lang.Class class10 = timeSeries1.timePeriodClass;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = timeSeries1.getTimePeriod(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1709280000000L + "'", long3 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24291L + "'", long4 == 24291L);
        org.junit.Assert.assertNull(class10);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1451");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        long long16 = day10.getFirstMillisecond();
        org.jfree.data.time.SerialDate serialDate17 = day10.getSerialDate();
        long long18 = day10.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener21 = null;
        timeSeries20.addChangeListener(seriesChangeListener21);
        org.jfree.data.time.Month month23 = new org.jfree.data.time.Month();
        long long24 = month23.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener27 = null;
        timeSeries26.removeChangeListener(seriesChangeListener27);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem36 = timeSeries26.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day31, (java.lang.Number) 10L);
        long long37 = day31.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries38 = timeSeries20.createCopy((org.jfree.data.time.RegularTimePeriod) month23, (org.jfree.data.time.RegularTimePeriod) day31);
        org.jfree.data.time.TimeSeries timeSeries40 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day41 = new org.jfree.data.time.Day();
        timeSeries40.add((org.jfree.data.time.RegularTimePeriod) day41, (double) (short) 0, false);
        timeSeries40.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day49 = new org.jfree.data.time.Day();
        timeSeries48.add((org.jfree.data.time.RegularTimePeriod) day49, (double) (short) 0, false);
        java.util.Date date53 = day49.getStart();
        int int54 = timeSeries40.getIndex((org.jfree.data.time.RegularTimePeriod) day49);
        java.lang.Class class55 = timeSeries40.timePeriodClass;
        timeSeries38.timePeriodClass = class55;
        java.util.Collection collection57 = timeSeries38.getTimePeriods();
        int int58 = day10.compareTo((java.lang.Object) timeSeries38);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem60 = timeSeries38.getRawDataItem((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
        org.junit.Assert.assertNotNull(serialDate17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1711868400000L + "'", long18 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1709280000000L + "'", long24 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1711911599999L + "'", long37 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries38);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(class55);
        org.junit.Assert.assertNotNull(collection57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1452");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date3 = month2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = month2.next();
        org.jfree.data.time.TimeSeries timeSeries6 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day7 = new org.jfree.data.time.Day();
        timeSeries6.add((org.jfree.data.time.RegularTimePeriod) day7, (double) (short) 0, false);
        timeSeries6.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = timeSeries6.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener14 = null;
        timeSeries6.addChangeListener(seriesChangeListener14);
        timeSeries6.setDomainDescription("hi!");
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        int int20 = day18.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod21 = day18.next();
        timeSeries6.add(regularTimePeriod21, (java.lang.Number) 1);
        org.jfree.data.time.Month month26 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number27 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem28 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month26, number27);
        long long29 = month26.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries6.getDataItem((org.jfree.data.time.RegularTimePeriod) month26);
        org.jfree.data.time.Year year31 = month26.getYear();
        int int32 = month2.compareTo((java.lang.Object) year31);
        java.util.Calendar calendar33 = null;
        // The following exception was thrown during execution in test generation
        try {
            month2.peg(calendar33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod21);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 118L + "'", long29 == 118L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
        org.junit.Assert.assertNotNull(year31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1453");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        int int5 = day3.compareTo((java.lang.Object) (short) 100);
        long long6 = day3.getMiddleMillisecond();
        int int7 = day3.getYear();
        boolean boolean9 = day3.equals((java.lang.Object) 5);
        int int10 = day3.getDayOfMonth();
        java.lang.String str11 = day3.toString();
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3, "Value", "hi!");
        int int15 = day0.compareTo((java.lang.Object) day3);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day0, "hi!", "2024");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem20 = timeSeries18.getDataItem(2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711911599999L + "'", long6 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2024 + "'", int7 == 2024);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "31-March-2024" + "'", str11, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1454");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener16 = null;
        timeSeries8.addChangeListener(seriesChangeListener16);
        timeSeries8.setDomainDescription("hi!");
        org.jfree.data.time.Day day20 = new org.jfree.data.time.Day();
        int int22 = day20.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = day20.next();
        timeSeries8.add(regularTimePeriod23, (java.lang.Number) 1);
        org.jfree.data.time.Month month28 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number29 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month28, number29);
        long long31 = month28.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem32 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) month28);
        org.jfree.data.time.Year year33 = month28.getYear();
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        java.util.Date date40 = day36.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond41 = new org.jfree.data.time.FixedMillisecond(date40);
        long long42 = fixedMillisecond41.getFirstMillisecond();
        java.util.Date date43 = fixedMillisecond41.getTime();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod44 = fixedMillisecond41.next();
        int int45 = year33.compareTo((java.lang.Object) fixedMillisecond41);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem46 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond41);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem48 = timeSeries1.getRawDataItem(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 118L + "'", long31 == 118L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem32);
        org.junit.Assert.assertNotNull(year33);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1711868400000L + "'", long42 == 1711868400000L);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(timeSeriesDataItem46);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1455");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.addChangeListener(seriesChangeListener9);
        timeSeries1.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day15 = new org.jfree.data.time.Day();
        timeSeries14.add((org.jfree.data.time.RegularTimePeriod) day15, (double) (short) 0, false);
        java.util.Date date19 = day15.getStart();
        java.lang.Number number20 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day15, number20);
        java.util.Date date22 = day15.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond23 = new org.jfree.data.time.FixedMillisecond(date22);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Mar 31 00:00:00 PDT 2024");
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1456");
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date3 = month2.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod4 = month2.previous();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod4);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1457");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.lang.Comparable comparable6 = timeSeries1.getKey();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener7 = null;
        timeSeries1.removeChangeListener(seriesChangeListener7);
        timeSeries1.removeAgedItems(1711939094733L, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number13 = timeSeries1.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + comparable6 + "' != '" + 100L + "'", comparable6, 100L);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1458");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        timeSeries1.setMaximumItemCount((int) (byte) 10);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day20 = new org.jfree.data.time.Day();
        timeSeries19.add((org.jfree.data.time.RegularTimePeriod) day20, (double) (short) 0, false);
        timeSeries19.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod26 = timeSeries19.getNextTimePeriod();
        timeSeries19.setMaximumItemCount((int) ' ');
        org.jfree.data.time.Year year30 = new org.jfree.data.time.Year(0);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem31 = timeSeries19.getRawDataItem((org.jfree.data.time.RegularTimePeriod) year30);
        org.jfree.data.time.TimeSeries timeSeries32 = timeSeries1.addAndOrUpdate(timeSeries19);
        timeSeries32.fireSeriesChanged();
        timeSeries32.setDomainDescription("org.jfree.data.time.TimePeriodFormatException: 9");
        org.jfree.data.time.RegularTimePeriod regularTimePeriod36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = timeSeries32.getIndex(regularTimePeriod36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'period' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod26);
        org.junit.Assert.assertNotNull(timeSeriesDataItem31);
        org.junit.Assert.assertNotNull(timeSeries32);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1459");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        long long7 = day2.getFirstMillisecond();
        int int8 = day2.getDayOfMonth();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711868400000L + "'", long7 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1460");
        org.jfree.data.time.Month month1 = org.jfree.data.time.Month.parseMonth("March 2024");
        int int2 = month1.getMonth();
        org.junit.Assert.assertNotNull(month1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1461");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        long long3 = day0.getMiddleMillisecond();
        int int4 = day0.getYear();
        boolean boolean6 = day0.equals((java.lang.Object) 5);
        int int7 = day0.getDayOfMonth();
        long long8 = day0.getSerialIndex();
        java.util.Date date9 = day0.getEnd();
        int int10 = day0.getDayOfMonth();
        java.util.Calendar calendar11 = null;
        // The following exception was thrown during execution in test generation
        try {
            day0.peg(calendar11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1711911599999L + "'", long3 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 45382L + "'", long8 == 45382L);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1462");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem10 = new org.jfree.data.time.TimeSeriesDataItem(regularTimePeriod8, (double) 24291L);
        timeSeriesDataItem10.setValue((java.lang.Number) 24290L);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = timeSeriesDataItem10.getPeriod();
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(regularTimePeriod13);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1463");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = fixedMillisecond7.next();
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getMiddleMillisecond(calendar13);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        double double17 = timeSeries16.getMinY();
        timeSeries16.setDescription("March 2024");
        timeSeries16.removeAgedItems(0L, true);
        double double23 = timeSeries16.getMaxY();
        int int24 = fixedMillisecond7.compareTo((java.lang.Object) timeSeries16);
        java.lang.Object obj25 = timeSeries16.clone();
        java.lang.Class class26 = timeSeries16.timePeriodClass;
        timeSeries16.fireSeriesChanged();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNull(class26);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1464");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        timeSeries1.fireSeriesChanged();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries8.addChangeListener(seriesChangeListener9);
        long long11 = timeSeries8.getMaximumItemAge();
        java.lang.String str12 = timeSeries8.getDescription();
        double double13 = timeSeries8.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent24 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean25 = timeSeries15.equals((java.lang.Object) seriesChangeEvent24);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        int int28 = day26.compareTo((java.lang.Object) (short) 100);
        java.lang.String str29 = day26.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem30 = timeSeries15.getDataItem((org.jfree.data.time.RegularTimePeriod) day26);
        timeSeries8.add(timeSeriesDataItem30);
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double34 = timeSeries33.getMaxY();
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        java.lang.Number number36 = null;
        timeSeries33.add((org.jfree.data.time.RegularTimePeriod) day35, number36, false);
        double double39 = timeSeries33.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries33.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day42, (java.lang.Number) 1711911599999L);
        int int49 = timeSeriesDataItem47.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = timeSeries8.addOrUpdate(timeSeriesDataItem47);
        java.util.Collection collection51 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries8);
        java.lang.Comparable comparable52 = timeSeries1.getKey();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener53 = null;
        timeSeries1.addChangeListener(seriesChangeListener53);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 9223372036854775807L + "'", long11 == 9223372036854775807L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "31-March-2024" + "'", str29, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem30);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(timeSeriesDataItem47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem50);
        org.junit.Assert.assertNotNull(collection51);
        org.junit.Assert.assertEquals("'" + comparable52 + "' != '" + (short) 100 + "'", comparable52, (short) 100);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1465");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Day day3 = new org.jfree.data.time.Day(1, (-9999), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The 'year' argument must be in range 1900 to 9999.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1466");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        java.lang.Number number4 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day3, number4, false);
        timeSeries1.removeAgedItems(1L, false);
        boolean boolean10 = timeSeries1.isEmpty();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        timeSeries12.addChangeListener(seriesChangeListener13);
        long long15 = timeSeries12.getMaximumItemAge();
        java.lang.String str16 = timeSeries12.getDescription();
        double double17 = timeSeries12.getMaxY();
        java.lang.Object obj18 = timeSeries12.clone();
        java.util.List list19 = timeSeries12.data;
        timeSeries1.data = list19;
        long long21 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        java.util.Date date28 = day24.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond29 = new org.jfree.data.time.FixedMillisecond(date28);
        java.util.Date date30 = fixedMillisecond29.getTime();
        long long31 = fixedMillisecond29.getFirstMillisecond();
        long long32 = fixedMillisecond29.getMiddleMillisecond();
        java.util.Calendar calendar33 = null;
        fixedMillisecond29.peg(calendar33);
        timeSeries1.delete((org.jfree.data.time.RegularTimePeriod) fixedMillisecond29);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 9223372036854775807L + "'", long15 == 9223372036854775807L);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9223372036854775807L + "'", long21 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1711868400000L + "'", long31 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1711868400000L + "'", long32 == 1711868400000L);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1467");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getSerialIndex();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = fixedMillisecond7.next();
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getMiddleMillisecond(calendar13);
        java.util.Date date15 = fixedMillisecond7.getTime();
        long long16 = fixedMillisecond7.getMiddleMillisecond();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1468");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        boolean boolean17 = timeSeries1.getNotify();
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.addChangeListener(seriesChangeListener20);
        long long22 = timeSeries19.getMaximumItemAge();
        boolean boolean23 = timeSeries1.equals((java.lang.Object) timeSeries19);
        java.lang.String str24 = timeSeries1.getDescription();
        org.jfree.data.time.TimeSeries timeSeries27 = timeSeries1.createCopy((int) (byte) 0, 0);
        int int28 = timeSeries1.getItemCount();
        java.lang.String str29 = timeSeries1.getDomainDescription();
        double double30 = timeSeries1.getMinY();
        org.jfree.data.time.TimeSeries timeSeries32 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day33 = new org.jfree.data.time.Day();
        timeSeries32.add((org.jfree.data.time.RegularTimePeriod) day33, (double) (short) 0, false);
        java.util.Date date37 = day33.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond38 = new org.jfree.data.time.FixedMillisecond(date37);
        java.util.Date date39 = fixedMillisecond38.getTime();
        java.util.Calendar calendar40 = null;
        long long41 = fixedMillisecond38.getLastMillisecond(calendar40);
        java.util.Calendar calendar42 = null;
        long long43 = fixedMillisecond38.getFirstMillisecond(calendar42);
        java.util.Calendar calendar44 = null;
        long long45 = fixedMillisecond38.getFirstMillisecond(calendar44);
        java.util.Calendar calendar46 = null;
        long long47 = fixedMillisecond38.getMiddleMillisecond(calendar46);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem49 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond38, (java.lang.Number) Double.NaN);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem51 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond38, (double) 118L);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem52 = timeSeries1.addOrUpdate(timeSeriesDataItem51);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 9223372036854775807L + "'", long22 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(timeSeries27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Time" + "'", str29, "Time");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertEquals(date39.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711868400000L + "'", long41 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1711868400000L + "'", long43 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711868400000L + "'", long45 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1711868400000L + "'", long47 == 1711868400000L);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1469");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod24 = day19.next();
        int int25 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day19);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "31-March-2024" + "'", str22, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertNotNull(regularTimePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1470");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        timeSeries18.add((org.jfree.data.time.RegularTimePeriod) day19, (double) (short) 0, false);
        java.util.Date date23 = day19.getStart();
        java.util.TimeZone timeZone24 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = org.jfree.data.time.RegularTimePeriod.createInstance(class16, date23, timeZone24);
        java.util.TimeZone timeZone26 = null;
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.Month month28 = new org.jfree.data.time.Month(date23, timeZone26, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod25);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1471");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        int int5 = day3.compareTo((java.lang.Object) (short) 100);
        long long6 = day3.getMiddleMillisecond();
        int int7 = day3.getYear();
        boolean boolean9 = day3.equals((java.lang.Object) 5);
        int int10 = day3.getDayOfMonth();
        java.lang.String str11 = day3.toString();
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3, "Value", "hi!");
        int int15 = day0.compareTo((java.lang.Object) day3);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day0, "hi!", "2024");
        java.beans.PropertyChangeListener propertyChangeListener19 = null;
        timeSeries18.removePropertyChangeListener(propertyChangeListener19);
        org.jfree.data.time.TimeSeries timeSeries23 = timeSeries18.createCopy(1, 10);
        int int24 = timeSeries18.getItemCount();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711911599999L + "'", long6 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2024 + "'", int7 == 2024);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "31-March-2024" + "'", str11, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeSeries23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1472");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener4 = null;
        timeSeries3.addChangeListener(seriesChangeListener4);
        long long6 = timeSeries3.getMaximumItemAge();
        java.lang.String str7 = timeSeries3.getDescription();
        int int8 = timeSeries3.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries10 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day11 = new org.jfree.data.time.Day();
        timeSeries10.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, false);
        java.util.Date date15 = day11.getStart();
        org.jfree.data.time.SerialDate serialDate16 = day11.getSerialDate();
        java.lang.String str17 = day11.toString();
        java.lang.Number number18 = null;
        timeSeries3.add((org.jfree.data.time.RegularTimePeriod) day11, number18);
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day11, (double) (short) 0, true);
        org.jfree.data.time.FixedMillisecond fixedMillisecond23 = new org.jfree.data.time.FixedMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem24 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond23);
        java.lang.Class class25 = timeSeries1.timePeriodClass;
        java.lang.Object obj26 = timeSeries1.clone();
        java.lang.Comparable comparable27 = timeSeries1.getKey();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 9223372036854775807L + "'", long6 == 9223372036854775807L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "31-March-2024" + "'", str17, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem24);
        org.junit.Assert.assertNotNull(class25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals("'" + comparable27 + "' != '" + 100L + "'", comparable27, 100L);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1473");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year((int) (short) 10);
        int int2 = year1.getYear();
        org.jfree.data.time.TimeSeries timeSeries3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) int2);
        double double4 = timeSeries3.getMaxY();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1474");
        org.jfree.data.time.Year year1 = new org.jfree.data.time.Year((int) (short) 100);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo2 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent3 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) (short) 100, seriesChangeInfo2);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1475");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getMiddleMillisecond();
        java.util.Date date12 = fixedMillisecond7.getTime();
        org.jfree.data.time.Day day13 = new org.jfree.data.time.Day(date12);
        long long14 = day13.getFirstMillisecond();
        java.util.Date date15 = day13.getStart();
        int int16 = day13.getMonth();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1476");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Month month2 = new org.jfree.data.time.Month();
        long long3 = month2.getFirstMillisecond();
        long long4 = month2.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem6 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month2, 0.0d);
        timeSeries1.add(timeSeriesDataItem6, false);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        int int11 = day9.compareTo((java.lang.Object) (short) 100);
        long long12 = day9.getMiddleMillisecond();
        int int13 = day9.getYear();
        boolean boolean15 = day9.equals((java.lang.Object) 5);
        int int16 = day9.getDayOfMonth();
        java.lang.String str17 = day9.toString();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day9, "Value", "hi!");
        java.lang.Number number21 = timeSeries1.getValue((org.jfree.data.time.RegularTimePeriod) day9);
        java.lang.Class class22 = timeSeries1.timePeriodClass;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1709280000000L + "'", long3 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 24291L + "'", long4 == 24291L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711911599999L + "'", long12 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2024 + "'", int13 == 2024);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "31-March-2024" + "'", str17, "31-March-2024");
        org.junit.Assert.assertEquals("'" + number21 + "' != '" + 0.0d + "'", number21, 0.0d);
        org.junit.Assert.assertNotNull(class22);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1477");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod15 = timeSeries8.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent17 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean18 = timeSeries8.equals((java.lang.Object) seriesChangeEvent17);
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day();
        int int21 = day19.compareTo((java.lang.Object) (short) 100);
        java.lang.String str22 = day19.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem23 = timeSeries8.getDataItem((org.jfree.data.time.RegularTimePeriod) day19);
        timeSeries1.add(timeSeriesDataItem23);
        org.jfree.data.time.TimeSeries timeSeries26 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double27 = timeSeries26.getMaxY();
        org.jfree.data.time.Day day28 = new org.jfree.data.time.Day();
        java.lang.Number number29 = null;
        timeSeries26.add((org.jfree.data.time.RegularTimePeriod) day28, number29, false);
        double double32 = timeSeries26.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries34 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day35 = new org.jfree.data.time.Day();
        timeSeries34.add((org.jfree.data.time.RegularTimePeriod) day35, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = timeSeries26.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day35, (java.lang.Number) 1711911599999L);
        int int42 = timeSeriesDataItem40.compareTo((java.lang.Object) (byte) -1);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem43 = timeSeries1.addOrUpdate(timeSeriesDataItem40);
        org.jfree.data.time.TimeSeries timeSeries45 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double46 = timeSeries45.getMaxY();
        org.jfree.data.time.Day day47 = new org.jfree.data.time.Day();
        java.lang.Number number48 = null;
        timeSeries45.add((org.jfree.data.time.RegularTimePeriod) day47, number48, false);
        double double51 = timeSeries45.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries53 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day54 = new org.jfree.data.time.Day();
        timeSeries53.add((org.jfree.data.time.RegularTimePeriod) day54, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem59 = timeSeries45.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day54, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries62 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        org.jfree.data.time.TimeSeries timeSeries64 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day65 = new org.jfree.data.time.Day();
        timeSeries64.add((org.jfree.data.time.RegularTimePeriod) day65, (double) (short) 0, false);
        timeSeries64.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries72 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day73 = new org.jfree.data.time.Day();
        timeSeries72.add((org.jfree.data.time.RegularTimePeriod) day73, (double) (short) 0, false);
        java.util.Date date77 = day73.getStart();
        int int78 = timeSeries64.getIndex((org.jfree.data.time.RegularTimePeriod) day73);
        java.lang.Class class79 = timeSeries64.timePeriodClass;
        org.jfree.data.time.Day day80 = new org.jfree.data.time.Day();
        int int81 = day80.getMonth();
        java.util.Date date82 = day80.getEnd();
        java.util.TimeZone timeZone83 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = org.jfree.data.time.RegularTimePeriod.createInstance(class79, date82, timeZone83);
        boolean boolean85 = timeSeries62.equals((java.lang.Object) timeZone83);
        org.jfree.data.time.TimeSeries timeSeries86 = timeSeries1.addAndOrUpdate(timeSeries62);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo87 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent88 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) timeSeries1, seriesChangeInfo87);
        java.lang.String str89 = seriesChangeEvent88.toString();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(regularTimePeriod15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "31-March-2024" + "'", str22, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem23);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(timeSeriesDataItem40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(timeSeriesDataItem43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(timeSeriesDataItem59);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(class79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertNotNull(date82);
        org.junit.Assert.assertEquals(date82.toString(), "Sun Mar 31 23:59:59 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(timeSeries86);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1478");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException1 = new org.jfree.data.time.TimePeriodFormatException("Time");
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException3 = new org.jfree.data.time.TimePeriodFormatException("March 2024");
        timePeriodFormatException1.addSuppressed((java.lang.Throwable) timePeriodFormatException3);
        org.jfree.data.general.SeriesException seriesException6 = new org.jfree.data.general.SeriesException("");
        timePeriodFormatException3.addSuppressed((java.lang.Throwable) seriesException6);
        org.jfree.data.time.TimePeriodFormatException timePeriodFormatException9 = new org.jfree.data.time.TimePeriodFormatException("org.jfree.data.time.TimePeriodFormatException: March 2024");
        seriesException6.addSuppressed((java.lang.Throwable) timePeriodFormatException9);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1479");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod3 = year2.next();
        long long4 = year2.getSerialIndex();
        int int5 = year2.getYear();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        timeSeries7.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = timeSeries7.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent16 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean17 = timeSeries7.equals((java.lang.Object) seriesChangeEvent16);
        org.jfree.data.time.Day day18 = new org.jfree.data.time.Day();
        int int20 = day18.compareTo((java.lang.Object) (short) 100);
        java.lang.String str21 = day18.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem22 = timeSeries7.getDataItem((org.jfree.data.time.RegularTimePeriod) day18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod23 = day18.next();
        boolean boolean24 = year2.equals((java.lang.Object) day18);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod25 = day18.next();
        int int26 = day18.getMonth();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertNotNull(regularTimePeriod3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 2024L + "'", long4 == 2024L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2024 + "'", int5 == 2024);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "31-March-2024" + "'", str21, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem22);
        org.junit.Assert.assertNotNull(regularTimePeriod23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(regularTimePeriod25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1480");
        org.jfree.data.time.Day day0 = new org.jfree.data.time.Day();
        int int2 = day0.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.Day day3 = new org.jfree.data.time.Day();
        int int5 = day3.compareTo((java.lang.Object) (short) 100);
        long long6 = day3.getMiddleMillisecond();
        int int7 = day3.getYear();
        boolean boolean9 = day3.equals((java.lang.Object) 5);
        int int10 = day3.getDayOfMonth();
        java.lang.String str11 = day3.toString();
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day3, "Value", "hi!");
        int int15 = day0.compareTo((java.lang.Object) day3);
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) day0, "hi!", "2024");
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        java.util.Date date25 = day21.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond26 = new org.jfree.data.time.FixedMillisecond(date25);
        long long27 = fixedMillisecond26.getFirstMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries18.addOrUpdate((org.jfree.data.time.RegularTimePeriod) fixedMillisecond26, 0.0d);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1711911599999L + "'", long6 == 1711911599999L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2024 + "'", int7 == 2024);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "31-March-2024" + "'", str11, "31-March-2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1711868400000L + "'", long27 == 1711868400000L);
        org.junit.Assert.assertNull(timeSeriesDataItem29);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1481");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        double double6 = timeSeries1.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        timeSeries8.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries16 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day17 = new org.jfree.data.time.Day();
        timeSeries16.add((org.jfree.data.time.RegularTimePeriod) day17, (double) (short) 0, false);
        java.util.Date date21 = day17.getStart();
        int int22 = timeSeries8.getIndex((org.jfree.data.time.RegularTimePeriod) day17);
        java.lang.Class class23 = timeSeries8.timePeriodClass;
        org.jfree.data.time.TimeSeries timeSeries25 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day26 = new org.jfree.data.time.Day();
        timeSeries25.add((org.jfree.data.time.RegularTimePeriod) day26, (double) (short) 0, false);
        java.util.Date date30 = day26.getStart();
        java.util.TimeZone timeZone31 = null;
        org.jfree.data.time.RegularTimePeriod regularTimePeriod32 = org.jfree.data.time.RegularTimePeriod.createInstance(class23, date30, timeZone31);
        timeSeries1.timePeriodClass = class23;
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        timeSeries35.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries43 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day44 = new org.jfree.data.time.Day();
        timeSeries43.add((org.jfree.data.time.RegularTimePeriod) day44, (double) (short) 0, false);
        java.util.Date date48 = day44.getStart();
        int int49 = timeSeries35.getIndex((org.jfree.data.time.RegularTimePeriod) day44);
        long long50 = day44.getFirstMillisecond();
        org.jfree.data.time.SerialDate serialDate51 = day44.getSerialDate();
        long long52 = day44.getFirstMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem54 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day44, (java.lang.Number) 118L);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem56 = timeSeries1.getDataItem(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(class23);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(regularTimePeriod32);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1711868400000L + "'", long50 == 1711868400000L);
        org.junit.Assert.assertNotNull(serialDate51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1711868400000L + "'", long52 == 1711868400000L);
        org.junit.Assert.assertNull(timeSeriesDataItem54);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1482");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent10 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean11 = timeSeries1.equals((java.lang.Object) seriesChangeEvent10);
        org.jfree.data.time.Day day12 = new org.jfree.data.time.Day();
        int int14 = day12.compareTo((java.lang.Object) (short) 100);
        java.lang.String str15 = day12.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem16 = timeSeries1.getDataItem((org.jfree.data.time.RegularTimePeriod) day12);
        timeSeriesDataItem16.setSelected(false);
        timeSeriesDataItem16.setValue((java.lang.Number) (byte) 100);
        boolean boolean21 = timeSeriesDataItem16.isSelected();
        java.lang.Object obj22 = timeSeriesDataItem16.clone();
        timeSeriesDataItem16.setValue((java.lang.Number) 1709280000000L);
        timeSeriesDataItem16.setSelected(false);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1483");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        org.jfree.data.time.Year year3 = new org.jfree.data.time.Year();
        long long4 = year3.getLastMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod5 = year3.previous();
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day();
        timeSeries7.add((org.jfree.data.time.RegularTimePeriod) day8, (double) (short) 0, false);
        java.util.Date date12 = day8.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond13 = new org.jfree.data.time.FixedMillisecond(date12);
        long long14 = fixedMillisecond13.getFirstMillisecond();
        java.util.Date date15 = fixedMillisecond13.getTime();
        org.jfree.data.time.Month month16 = new org.jfree.data.time.Month(date15);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = month16.previous();
        long long18 = month16.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries19 = timeSeries1.createCopy(regularTimePeriod5, (org.jfree.data.time.RegularTimePeriod) month16);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        timeSeries21.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day30 = new org.jfree.data.time.Day();
        timeSeries29.add((org.jfree.data.time.RegularTimePeriod) day30, (double) (short) 0, false);
        java.util.Date date34 = day30.getStart();
        int int35 = timeSeries21.getIndex((org.jfree.data.time.RegularTimePeriod) day30);
        java.lang.Class class36 = timeSeries21.timePeriodClass;
        boolean boolean37 = timeSeries21.getNotify();
        org.jfree.data.time.TimeSeries timeSeries39 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener40 = null;
        timeSeries39.addChangeListener(seriesChangeListener40);
        long long42 = timeSeries39.getMaximumItemAge();
        boolean boolean43 = timeSeries21.equals((java.lang.Object) timeSeries39);
        long long44 = timeSeries39.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries46 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double47 = timeSeries46.getMaxY();
        java.util.List list48 = timeSeries46.data;
        timeSeries46.removeAgedItems((long) 12, false);
        java.lang.Comparable comparable52 = timeSeries46.getKey();
        timeSeries46.removeAgedItems(true);
        java.util.Collection collection55 = timeSeries39.getTimePeriodsUniqueToOtherSeries(timeSeries46);
        java.lang.Comparable comparable56 = timeSeries46.getKey();
        java.util.Collection collection57 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries46);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1735718399999L + "'", long4 == 1735718399999L);
        org.junit.Assert.assertNotNull(regularTimePeriod5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1709280000000L + "'", long18 == 1709280000000L);
        org.junit.Assert.assertNotNull(timeSeries19);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 9223372036854775807L + "'", long42 == 9223372036854775807L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 9223372036854775807L + "'", long44 == 9223372036854775807L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertEquals("'" + comparable52 + "' != '" + 100L + "'", comparable52, 100L);
        org.junit.Assert.assertNotNull(collection55);
        org.junit.Assert.assertEquals("'" + comparable56 + "' != '" + 100L + "'", comparable56, 100L);
        org.junit.Assert.assertNotNull(collection57);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1484");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        org.jfree.data.time.Year year2 = month0.getYear();
        long long3 = year2.getLastMillisecond();
        int int4 = year2.getYear();
        long long5 = year2.getLastMillisecond();
        long long6 = year2.getFirstMillisecond();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertNotNull(year2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1735718399999L + "'", long3 == 1735718399999L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2024 + "'", int4 == 2024);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1735718399999L + "'", long5 == 1735718399999L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1704096000000L + "'", long6 == 1704096000000L);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1485");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.util.List list3 = timeSeries1.data;
        timeSeries1.removeAgedItems((long) 12, false);
        java.lang.Comparable comparable7 = timeSeries1.getKey();
        timeSeries1.removeAgedItems(true);
        java.lang.String str10 = timeSeries1.getDescription();
        java.beans.PropertyChangeListener propertyChangeListener11 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener11);
        long long13 = timeSeries1.getMaximumItemAge();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        java.util.Date date20 = day16.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond21 = new org.jfree.data.time.FixedMillisecond(date20);
        long long22 = fixedMillisecond21.getFirstMillisecond();
        java.util.Calendar calendar23 = null;
        fixedMillisecond21.peg(calendar23);
        long long25 = fixedMillisecond21.getMiddleMillisecond();
        long long26 = fixedMillisecond21.getMiddleMillisecond();
        java.util.Calendar calendar27 = null;
        fixedMillisecond21.peg(calendar27);
        org.jfree.data.time.Month month29 = new org.jfree.data.time.Month();
        long long30 = month29.getFirstMillisecond();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = month29.previous();
        boolean boolean33 = month29.equals((java.lang.Object) 10.0d);
        long long34 = month29.getSerialIndex();
        org.jfree.data.time.Year year35 = month29.getYear();
        org.jfree.data.time.TimeSeries timeSeries36 = timeSeries1.createCopy((org.jfree.data.time.RegularTimePeriod) fixedMillisecond21, (org.jfree.data.time.RegularTimePeriod) month29);
        org.jfree.data.time.TimeSeries timeSeries39 = timeSeries36.createCopy(7, 9);
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener42 = null;
        timeSeries41.addChangeListener(seriesChangeListener42);
        long long44 = timeSeries41.getMaximumItemAge();
        java.lang.String str45 = timeSeries41.getDescription();
        timeSeries41.fireSeriesChanged();
        org.jfree.data.time.TimeSeries timeSeries48 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day49 = new org.jfree.data.time.Day();
        timeSeries48.add((org.jfree.data.time.RegularTimePeriod) day49, (double) (short) 0, false);
        timeSeries48.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = timeSeries48.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener56 = null;
        timeSeries48.addChangeListener(seriesChangeListener56);
        timeSeries48.setDomainDescription("hi!");
        org.jfree.data.time.Day day60 = new org.jfree.data.time.Day();
        int int62 = day60.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod63 = day60.next();
        timeSeries48.add(regularTimePeriod63, (java.lang.Number) 1);
        org.jfree.data.time.Month month68 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number69 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem70 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month68, number69);
        long long71 = month68.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem72 = timeSeries48.getDataItem((org.jfree.data.time.RegularTimePeriod) month68);
        org.jfree.data.time.Year year73 = month68.getYear();
        org.jfree.data.time.TimeSeries timeSeries75 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day76 = new org.jfree.data.time.Day();
        timeSeries75.add((org.jfree.data.time.RegularTimePeriod) day76, (double) (short) 0, false);
        java.util.Date date80 = day76.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond81 = new org.jfree.data.time.FixedMillisecond(date80);
        long long82 = fixedMillisecond81.getFirstMillisecond();
        java.util.Date date83 = fixedMillisecond81.getTime();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod84 = fixedMillisecond81.next();
        int int85 = year73.compareTo((java.lang.Object) fixedMillisecond81);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem86 = timeSeries41.getDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond81);
        timeSeries36.delete((org.jfree.data.time.RegularTimePeriod) fixedMillisecond81);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertEquals("'" + comparable7 + "' != '" + 100L + "'", comparable7, 100L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711868400000L + "'", long22 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1711868400000L + "'", long25 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1709280000000L + "'", long30 == 1709280000000L);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 24291L + "'", long34 == 24291L);
        org.junit.Assert.assertNotNull(year35);
        org.junit.Assert.assertNotNull(timeSeries36);
        org.junit.Assert.assertNotNull(timeSeries39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 9223372036854775807L + "'", long44 == 9223372036854775807L);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod63);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 118L + "'", long71 == 118L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem72);
        org.junit.Assert.assertNotNull(year73);
        org.junit.Assert.assertNotNull(date80);
        org.junit.Assert.assertEquals(date80.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1711868400000L + "'", long82 == 1711868400000L);
        org.junit.Assert.assertNotNull(date83);
        org.junit.Assert.assertEquals(date83.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(regularTimePeriod84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNull(timeSeriesDataItem86);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1486");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        java.util.Calendar calendar9 = null;
        long long10 = fixedMillisecond7.getLastMillisecond(calendar9);
        long long11 = fixedMillisecond7.getMiddleMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem13 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) fixedMillisecond7, (double) (byte) 10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod14 = fixedMillisecond7.previous();
        java.util.Calendar calendar15 = null;
        long long16 = fixedMillisecond7.getMiddleMillisecond(calendar15);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = fixedMillisecond7.previous();
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711868400000L + "'", long16 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1487");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        java.util.List list8 = timeSeries1.data;
        org.jfree.data.time.Month month11 = new org.jfree.data.time.Month(10, 9);
        java.util.Date date12 = month11.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod13 = month11.next();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener23 = null;
        timeSeries15.addChangeListener(seriesChangeListener23);
        timeSeries15.setDomainDescription("hi!");
        org.jfree.data.time.Day day27 = new org.jfree.data.time.Day();
        int int29 = day27.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod30 = day27.next();
        timeSeries15.add(regularTimePeriod30, (java.lang.Number) 1);
        org.jfree.data.time.Month month35 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number36 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem37 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month35, number36);
        long long38 = month35.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem39 = timeSeries15.getDataItem((org.jfree.data.time.RegularTimePeriod) month35);
        org.jfree.data.time.Year year40 = month35.getYear();
        int int41 = month11.compareTo((java.lang.Object) year40);
        long long42 = month11.getLastMillisecond();
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) month11, (java.lang.Number) 0.0d);
        timeSeries1.setDomainDescription("hi!");
        org.junit.Assert.assertNotNull(list8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod13);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod30);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 118L + "'", long38 == 118L);
        org.junit.Assert.assertNotNull(timeSeriesDataItem39);
        org.junit.Assert.assertNotNull(year40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-61857014400001L) + "'", long42 == (-61857014400001L));
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1488");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day20 = new org.jfree.data.time.Day();
        timeSeries19.add((org.jfree.data.time.RegularTimePeriod) day20, (double) (short) 0, false);
        java.util.Date date24 = day20.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond25 = new org.jfree.data.time.FixedMillisecond(date24);
        long long26 = fixedMillisecond25.getFirstMillisecond();
        java.util.Date date27 = fixedMillisecond25.getTime();
        int int28 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) fixedMillisecond25);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double31 = timeSeries30.getMaxY();
        java.lang.Comparable comparable32 = timeSeries30.getKey();
        java.beans.PropertyChangeListener propertyChangeListener33 = null;
        timeSeries30.addPropertyChangeListener(propertyChangeListener33);
        org.jfree.data.time.TimeSeries timeSeries36 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day37 = new org.jfree.data.time.Day();
        timeSeries36.add((org.jfree.data.time.RegularTimePeriod) day37, (double) (short) 0, false);
        timeSeries36.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod43 = timeSeries36.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener44 = null;
        timeSeries36.addChangeListener(seriesChangeListener44);
        timeSeries36.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries49 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day50 = new org.jfree.data.time.Day();
        timeSeries49.add((org.jfree.data.time.RegularTimePeriod) day50, (double) (short) 0, false);
        java.util.Date date54 = day50.getStart();
        java.lang.Number number55 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem56 = timeSeries36.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day50, number55);
        timeSeries30.add(timeSeriesDataItem56);
        double double58 = timeSeries30.getMinY();
        org.jfree.data.time.Month month59 = new org.jfree.data.time.Month();
        long long60 = month59.getFirstMillisecond();
        long long61 = month59.getSerialIndex();
        long long62 = month59.getFirstMillisecond();
        long long63 = month59.getLastMillisecond();
        long long64 = month59.getSerialIndex();
        org.jfree.data.time.Year year65 = month59.getYear();
        int int66 = timeSeries30.getIndex((org.jfree.data.time.RegularTimePeriod) year65);
        org.jfree.data.time.TimeSeries timeSeries67 = timeSeries1.addAndOrUpdate(timeSeries30);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem69 = timeSeries30.getDataItem(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertEquals("'" + comparable32 + "' != '" + 100L + "'", comparable32, 100L);
        org.junit.Assert.assertNotNull(regularTimePeriod43);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1709280000000L + "'", long60 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 24291L + "'", long61 == 24291L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1709280000000L + "'", long62 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1711954799999L + "'", long63 == 1711954799999L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 24291L + "'", long64 == 24291L);
        org.junit.Assert.assertNotNull(year65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(timeSeries67);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1489");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.removeChangeListener(seriesChangeListener2);
        org.jfree.data.time.TimeSeries timeSeries5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day6 = new org.jfree.data.time.Day();
        timeSeries5.add((org.jfree.data.time.RegularTimePeriod) day6, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem11 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day6, (java.lang.Number) 10L);
        int int12 = timeSeries1.getItemCount();
        timeSeries1.clear();
        org.jfree.data.time.TimeSeries timeSeries15 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day16 = new org.jfree.data.time.Day();
        timeSeries15.add((org.jfree.data.time.RegularTimePeriod) day16, (double) (short) 0, false);
        timeSeries15.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod22 = timeSeries15.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent24 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean25 = timeSeries15.equals((java.lang.Object) seriesChangeEvent24);
        org.jfree.data.time.TimeSeries timeSeries27 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double28 = timeSeries27.getMaxY();
        java.lang.Comparable comparable29 = timeSeries27.getKey();
        org.jfree.data.time.TimeSeries timeSeries30 = timeSeries15.addAndOrUpdate(timeSeries27);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener31 = null;
        timeSeries15.addChangeListener(seriesChangeListener31);
        org.jfree.data.time.TimeSeries timeSeries33 = timeSeries1.addAndOrUpdate(timeSeries15);
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day36 = new org.jfree.data.time.Day();
        timeSeries35.add((org.jfree.data.time.RegularTimePeriod) day36, (double) (short) 0, false);
        java.util.Date date40 = day36.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond41 = new org.jfree.data.time.FixedMillisecond(date40);
        long long42 = fixedMillisecond41.getFirstMillisecond();
        java.util.Date date43 = fixedMillisecond41.getTime();
        org.jfree.data.time.Month month44 = new org.jfree.data.time.Month(date43);
        int int45 = month44.getMonth();
        java.util.Date date46 = month44.getStart();
        int int47 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) month44);
        timeSeries1.setMaximumItemAge((long) ' ');
        org.junit.Assert.assertNull(timeSeriesDataItem11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertEquals("'" + comparable29 + "' != '" + 100L + "'", comparable29, 100L);
        org.junit.Assert.assertNotNull(timeSeries30);
        org.junit.Assert.assertNotNull(timeSeries33);
        org.junit.Assert.assertNotNull(date40);
        org.junit.Assert.assertEquals(date40.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1711868400000L + "'", long42 == 1711868400000L);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Fri Mar 01 00:00:00 PST 2024");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1490");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.lang.Comparable comparable3 = timeSeries1.getKey();
        java.beans.PropertyChangeListener propertyChangeListener4 = null;
        timeSeries1.addPropertyChangeListener(propertyChangeListener4);
        org.jfree.data.time.TimeSeries timeSeries7 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener8 = null;
        timeSeries7.removeChangeListener(seriesChangeListener8);
        java.lang.String str10 = timeSeries7.getRangeDescription();
        java.util.List list11 = timeSeries7.getItems();
        java.util.List list12 = timeSeries7.data;
        timeSeries1.data = list12;
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        int int16 = day14.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod17 = day14.next();
        java.util.Date date18 = day14.getStart();
        org.jfree.data.time.Day day19 = new org.jfree.data.time.Day(date18);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day19, (java.lang.Number) 31);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertEquals("'" + comparable3 + "' != '" + 100L + "'", comparable3, 100L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value" + "'", str10, "Value");
        org.junit.Assert.assertNotNull(list11);
        org.junit.Assert.assertNotNull(list12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNull(timeSeriesDataItem21);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1491");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener2 = null;
        timeSeries1.addChangeListener(seriesChangeListener2);
        long long4 = timeSeries1.getMaximumItemAge();
        java.lang.String str5 = timeSeries1.getDescription();
        int int6 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries8 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day9 = new org.jfree.data.time.Day();
        timeSeries8.add((org.jfree.data.time.RegularTimePeriod) day9, (double) (short) 0, false);
        java.util.Date date13 = day9.getStart();
        org.jfree.data.time.SerialDate serialDate14 = day9.getSerialDate();
        java.lang.String str15 = day9.toString();
        java.lang.Number number16 = null;
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day9, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener20 = null;
        timeSeries19.removeChangeListener(seriesChangeListener20);
        org.jfree.data.time.TimeSeries timeSeries23 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day24 = new org.jfree.data.time.Day();
        timeSeries23.add((org.jfree.data.time.RegularTimePeriod) day24, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem29 = timeSeries19.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day24, (java.lang.Number) 10L);
        int int30 = timeSeries19.getItemCount();
        java.util.List list31 = timeSeries19.getItems();
        timeSeries1.data = list31;
        int int33 = timeSeries1.getItemCount();
        org.jfree.data.time.TimeSeries timeSeries35 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Month month36 = new org.jfree.data.time.Month();
        long long37 = month36.getFirstMillisecond();
        long long38 = month36.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem40 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month36, 0.0d);
        timeSeries35.add(timeSeriesDataItem40, false);
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.add(timeSeriesDataItem40);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.general.SeriesException; message: You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.");
        } catch (org.jfree.data.general.SeriesException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9223372036854775807L + "'", long4 == 9223372036854775807L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "31-March-2024" + "'", str15, "31-March-2024");
        org.junit.Assert.assertNull(timeSeriesDataItem29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1709280000000L + "'", long37 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 24291L + "'", long38 == 24291L);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1492");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod8 = timeSeries1.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener9 = null;
        timeSeries1.addChangeListener(seriesChangeListener9);
        timeSeries1.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries14 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day15 = new org.jfree.data.time.Day();
        timeSeries14.add((org.jfree.data.time.RegularTimePeriod) day15, (double) (short) 0, false);
        java.util.Date date19 = day15.getStart();
        java.lang.Number number20 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem21 = timeSeries1.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day15, number20);
        long long22 = day15.getFirstMillisecond();
        long long23 = day15.getFirstMillisecond();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem25 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day15, (java.lang.Number) 1.0f);
        org.junit.Assert.assertNotNull(regularTimePeriod8);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1711868400000L + "'", long22 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1711868400000L + "'", long23 == 1711868400000L);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1493");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double2 = timeSeries1.getMaxY();
        java.util.List list3 = timeSeries1.data;
        timeSeries1.removeAgedItems((long) 12, false);
        java.lang.Comparable comparable7 = timeSeries1.getKey();
        timeSeries1.removeAgedItems(true);
        java.lang.String str10 = timeSeries1.getDescription();
        java.beans.PropertyChangeListener propertyChangeListener11 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener11);
        long long13 = timeSeries1.getMaximumItemAge();
        // The following exception was thrown during execution in test generation
        try {
            timeSeries1.update((-1), (java.lang.Number) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(list3);
        org.junit.Assert.assertEquals("'" + comparable7 + "' != '" + 100L + "'", comparable7, 100L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223372036854775807L + "'", long13 == 9223372036854775807L);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1494");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        java.lang.Class class16 = timeSeries1.timePeriodClass;
        org.jfree.data.time.TimeSeries timeSeries18 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double19 = timeSeries18.getMaxY();
        java.lang.Comparable comparable20 = timeSeries18.getKey();
        java.beans.PropertyChangeListener propertyChangeListener21 = null;
        timeSeries18.addPropertyChangeListener(propertyChangeListener21);
        org.jfree.data.time.TimeSeries timeSeries24 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day25 = new org.jfree.data.time.Day();
        timeSeries24.add((org.jfree.data.time.RegularTimePeriod) day25, (double) (short) 0, false);
        timeSeries24.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod31 = timeSeries24.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener32 = null;
        timeSeries24.addChangeListener(seriesChangeListener32);
        timeSeries24.setDomainDescription("hi!");
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day38 = new org.jfree.data.time.Day();
        timeSeries37.add((org.jfree.data.time.RegularTimePeriod) day38, (double) (short) 0, false);
        java.util.Date date42 = day38.getStart();
        java.lang.Number number43 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem44 = timeSeries24.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day38, number43);
        timeSeries18.add(timeSeriesDataItem44);
        org.jfree.data.time.Month month48 = new org.jfree.data.time.Month(10, 9);
        java.lang.Number number49 = null;
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem50 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month48, number49);
        long long51 = month48.getSerialIndex();
        java.util.Date date52 = month48.getStart();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod53 = month48.previous();
        org.jfree.data.time.Month month54 = new org.jfree.data.time.Month();
        long long55 = month54.getFirstMillisecond();
        org.jfree.data.time.Year year56 = month54.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod57 = year56.next();
        long long58 = year56.getSerialIndex();
        org.jfree.data.time.TimeSeries timeSeries59 = timeSeries18.createCopy(regularTimePeriod53, (org.jfree.data.time.RegularTimePeriod) year56);
        java.lang.Number number60 = timeSeries1.getValue(regularTimePeriod53);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(class16);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + comparable20 + "' != '" + 100L + "'", comparable20, 100L);
        org.junit.Assert.assertNotNull(regularTimePeriod31);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem44);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 118L + "'", long51 == 118L);
        org.junit.Assert.assertNotNull(date52);
        org.junit.Assert.assertEquals(date52.toString(), "Tue Oct 01 00:00:00 PST 9");
        org.junit.Assert.assertNotNull(regularTimePeriod53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1709280000000L + "'", long55 == 1709280000000L);
        org.junit.Assert.assertNotNull(year56);
        org.junit.Assert.assertNotNull(regularTimePeriod57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 2024L + "'", long58 == 2024L);
        org.junit.Assert.assertNotNull(timeSeries59);
        org.junit.Assert.assertEquals("'" + number60 + "' != '" + 0.0d + "'", number60, 0.0d);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1495");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        java.util.Date date8 = fixedMillisecond7.getTime();
        long long9 = fixedMillisecond7.getFirstMillisecond();
        long long10 = fixedMillisecond7.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        double double13 = timeSeries12.getMaxY();
        org.jfree.data.time.Day day14 = new org.jfree.data.time.Day();
        java.lang.Number number15 = null;
        timeSeries12.add((org.jfree.data.time.RegularTimePeriod) day14, number15, false);
        double double18 = timeSeries12.getMaxY();
        org.jfree.data.time.TimeSeries timeSeries20 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day21 = new org.jfree.data.time.Day();
        timeSeries20.add((org.jfree.data.time.RegularTimePeriod) day21, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem26 = timeSeries12.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day21, (java.lang.Number) 1711911599999L);
        org.jfree.data.time.TimeSeries timeSeries29 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 1711911599999L, "31-March-2024", "");
        java.lang.Comparable comparable30 = timeSeries29.getKey();
        timeSeries29.removeAgedItems(false);
        org.jfree.data.time.Month month33 = new org.jfree.data.time.Month();
        long long34 = month33.getFirstMillisecond();
        long long35 = month33.getSerialIndex();
        int int36 = month33.getYearValue();
        timeSeries29.setKey((java.lang.Comparable) month33);
        int int38 = fixedMillisecond7.compareTo((java.lang.Object) timeSeries29);
        timeSeries29.setRangeDescription("8");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711868400000L + "'", long9 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1711868400000L + "'", long10 == 1711868400000L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(timeSeriesDataItem26);
        org.junit.Assert.assertEquals("'" + comparable30 + "' != '" + 1711911599999L + "'", comparable30, 1711911599999L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1709280000000L + "'", long34 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 24291L + "'", long35 == 24291L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2024 + "'", int36 == 2024);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1496");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        org.jfree.data.time.SerialDate serialDate15 = day10.getSerialDate();
        java.lang.Number number16 = null;
        timeSeries1.update((org.jfree.data.time.RegularTimePeriod) day10, number16);
        org.jfree.data.time.TimeSeries timeSeries19 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day20 = new org.jfree.data.time.Day();
        timeSeries19.add((org.jfree.data.time.RegularTimePeriod) day20, (double) (short) 0, false);
        java.util.Date date24 = day20.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond25 = new org.jfree.data.time.FixedMillisecond(date24);
        long long26 = fixedMillisecond25.getFirstMillisecond();
        java.util.Date date27 = fixedMillisecond25.getTime();
        int int28 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) fixedMillisecond25);
        org.jfree.data.time.TimeSeries timeSeries30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day31 = new org.jfree.data.time.Day();
        timeSeries30.add((org.jfree.data.time.RegularTimePeriod) day31, (double) (short) 0, false);
        timeSeries30.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod37 = timeSeries30.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries30.addChangeListener(seriesChangeListener38);
        timeSeries30.setDomainDescription("hi!");
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        int int44 = day42.compareTo((java.lang.Object) (short) 100);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod45 = day42.next();
        timeSeries30.add(regularTimePeriod45, (java.lang.Number) 1);
        java.lang.Number number48 = null;
        timeSeries1.add(regularTimePeriod45, number48);
        org.jfree.data.time.Month month50 = new org.jfree.data.time.Month();
        long long51 = month50.getFirstMillisecond();
        long long52 = month50.getSerialIndex();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem54 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) month50, 0.0d);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod55 = month50.next();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem56 = timeSeries1.getRawDataItem((org.jfree.data.time.RegularTimePeriod) month50);
        java.lang.String str57 = timeSeries1.getDescription();
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate15);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1711868400000L + "'", long26 == 1711868400000L);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(regularTimePeriod37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(regularTimePeriod45);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1709280000000L + "'", long51 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 24291L + "'", long52 == 24291L);
        org.junit.Assert.assertNotNull(regularTimePeriod55);
        org.junit.Assert.assertNotNull(timeSeriesDataItem56);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1497");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.FixedMillisecond fixedMillisecond7 = new org.jfree.data.time.FixedMillisecond(date6);
        long long8 = fixedMillisecond7.getFirstMillisecond();
        long long9 = fixedMillisecond7.getMiddleMillisecond();
        java.util.Calendar calendar10 = null;
        long long11 = fixedMillisecond7.getMiddleMillisecond(calendar10);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod12 = fixedMillisecond7.previous();
        java.util.Calendar calendar13 = null;
        long long14 = fixedMillisecond7.getLastMillisecond(calendar13);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1711868400000L + "'", long8 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711868400000L + "'", long9 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1711868400000L + "'", long11 == 1711868400000L);
        org.junit.Assert.assertNotNull(regularTimePeriod12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1711868400000L + "'", long14 == 1711868400000L);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1498");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        java.util.Date date6 = day2.getStart();
        org.jfree.data.time.SerialDate serialDate7 = day2.getSerialDate();
        org.jfree.data.time.Day day8 = new org.jfree.data.time.Day(serialDate7);
        long long9 = day8.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries11 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener12 = null;
        timeSeries11.addChangeListener(seriesChangeListener12);
        org.jfree.data.time.Month month14 = new org.jfree.data.time.Month();
        long long15 = month14.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener18 = null;
        timeSeries17.removeChangeListener(seriesChangeListener18);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day22 = new org.jfree.data.time.Day();
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) day22, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem27 = timeSeries17.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day22, (java.lang.Number) 10L);
        long long28 = day22.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries29 = timeSeries11.createCopy((org.jfree.data.time.RegularTimePeriod) month14, (org.jfree.data.time.RegularTimePeriod) day22);
        org.jfree.data.time.TimeSeries timeSeries31 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener32 = null;
        timeSeries31.addChangeListener(seriesChangeListener32);
        org.jfree.data.time.Month month34 = new org.jfree.data.time.Month();
        long long35 = month34.getFirstMillisecond();
        org.jfree.data.time.TimeSeries timeSeries37 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener38 = null;
        timeSeries37.removeChangeListener(seriesChangeListener38);
        org.jfree.data.time.TimeSeries timeSeries41 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day42 = new org.jfree.data.time.Day();
        timeSeries41.add((org.jfree.data.time.RegularTimePeriod) day42, (double) (short) 0, false);
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem47 = timeSeries37.addOrUpdate((org.jfree.data.time.RegularTimePeriod) day42, (java.lang.Number) 10L);
        long long48 = day42.getMiddleMillisecond();
        org.jfree.data.time.TimeSeries timeSeries49 = timeSeries31.createCopy((org.jfree.data.time.RegularTimePeriod) month34, (org.jfree.data.time.RegularTimePeriod) day42);
        org.jfree.data.time.TimeSeries timeSeries51 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day52 = new org.jfree.data.time.Day();
        timeSeries51.add((org.jfree.data.time.RegularTimePeriod) day52, (double) (short) 0, false);
        timeSeries51.setMaximumItemAge((long) 1);
        org.jfree.data.time.RegularTimePeriod regularTimePeriod58 = timeSeries51.getNextTimePeriod();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent60 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 10.0d);
        boolean boolean61 = timeSeries51.equals((java.lang.Object) seriesChangeEvent60);
        org.jfree.data.time.Day day62 = new org.jfree.data.time.Day();
        int int64 = day62.compareTo((java.lang.Object) (short) 100);
        java.lang.String str65 = day62.toString();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem66 = timeSeries51.getDataItem((org.jfree.data.time.RegularTimePeriod) day62);
        timeSeriesDataItem66.setSelected(false);
        timeSeriesDataItem66.setValue((java.lang.Number) (byte) 100);
        boolean boolean71 = timeSeriesDataItem66.isSelected();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem72 = timeSeries31.addOrUpdate(timeSeriesDataItem66);
        org.jfree.data.time.Day day73 = new org.jfree.data.time.Day();
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem75 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod) day73, (java.lang.Number) (byte) 10);
        int int76 = timeSeriesDataItem66.compareTo((java.lang.Object) (byte) 10);
        boolean boolean77 = month14.equals((java.lang.Object) timeSeriesDataItem66);
        long long78 = month14.getFirstMillisecond();
        java.util.Date date79 = month14.getStart();
        boolean boolean80 = day8.equals((java.lang.Object) date79);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertNotNull(serialDate7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1711868400000L + "'", long9 == 1711868400000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1709280000000L + "'", long15 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1711911599999L + "'", long28 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries29);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1709280000000L + "'", long35 == 1709280000000L);
        org.junit.Assert.assertNull(timeSeriesDataItem47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1711911599999L + "'", long48 == 1711911599999L);
        org.junit.Assert.assertNotNull(timeSeries49);
        org.junit.Assert.assertNotNull(regularTimePeriod58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "31-March-2024" + "'", str65, "31-March-2024");
        org.junit.Assert.assertNotNull(timeSeriesDataItem66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(timeSeriesDataItem72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1709280000000L + "'", long78 == 1709280000000L);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Fri Mar 01 00:00:00 PST 2024");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1499");
        org.jfree.data.time.TimeSeries timeSeries1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day2 = new org.jfree.data.time.Day();
        timeSeries1.add((org.jfree.data.time.RegularTimePeriod) day2, (double) (short) 0, false);
        timeSeries1.setMaximumItemAge((long) 1);
        org.jfree.data.time.TimeSeries timeSeries9 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) 100L);
        org.jfree.data.time.Day day10 = new org.jfree.data.time.Day();
        timeSeries9.add((org.jfree.data.time.RegularTimePeriod) day10, (double) (short) 0, false);
        java.util.Date date14 = day10.getStart();
        int int15 = timeSeries1.getIndex((org.jfree.data.time.RegularTimePeriod) day10);
        timeSeries1.setMaximumItemCount((int) (byte) 10);
        java.beans.PropertyChangeListener propertyChangeListener18 = null;
        timeSeries1.removePropertyChangeListener(propertyChangeListener18);
        org.jfree.data.time.TimeSeries timeSeries21 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener22 = null;
        timeSeries21.addChangeListener(seriesChangeListener22);
        org.jfree.data.time.Month month24 = new org.jfree.data.time.Month();
        long long25 = month24.getFirstMillisecond();
        org.jfree.data.time.Year year26 = month24.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod27 = year26.next();
        long long28 = year26.getLastMillisecond();
        java.lang.Number number29 = null;
        timeSeries21.add((org.jfree.data.time.RegularTimePeriod) year26, number29);
        java.util.List list31 = timeSeries21.data;
        org.jfree.data.time.TimeSeries timeSeries33 = new org.jfree.data.time.TimeSeries((java.lang.Comparable) (short) 100);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener34 = null;
        timeSeries33.addChangeListener(seriesChangeListener34);
        long long36 = timeSeries33.getMaximumItemAge();
        java.lang.String str37 = timeSeries33.getDescription();
        double double38 = timeSeries33.getMinY();
        timeSeries33.removeAgedItems(false);
        timeSeries33.setMaximumItemAge(1711911599999L);
        timeSeries33.fireSeriesChanged();
        java.util.Collection collection44 = timeSeries21.getTimePeriodsUniqueToOtherSeries(timeSeries33);
        boolean boolean45 = timeSeries1.equals((java.lang.Object) timeSeries33);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sun Mar 31 00:00:00 PDT 2024");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1709280000000L + "'", long25 == 1709280000000L);
        org.junit.Assert.assertNotNull(year26);
        org.junit.Assert.assertNotNull(regularTimePeriod27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1735718399999L + "'", long28 == 1735718399999L);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 9223372036854775807L + "'", long36 == 9223372036854775807L);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(collection44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1500");
        org.jfree.data.time.Month month0 = new org.jfree.data.time.Month();
        long long1 = month0.getFirstMillisecond();
        long long2 = month0.getSerialIndex();
        long long3 = month0.getFirstMillisecond();
        long long4 = month0.getLastMillisecond();
        long long5 = month0.getSerialIndex();
        org.jfree.data.time.Year year6 = month0.getYear();
        org.jfree.data.time.RegularTimePeriod regularTimePeriod7 = month0.next();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1709280000000L + "'", long1 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 24291L + "'", long2 == 24291L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1709280000000L + "'", long3 == 1709280000000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1711954799999L + "'", long4 == 1711954799999L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 24291L + "'", long5 == 24291L);
        org.junit.Assert.assertNotNull(year6);
        org.junit.Assert.assertNotNull(regularTimePeriod7);
    }
}
