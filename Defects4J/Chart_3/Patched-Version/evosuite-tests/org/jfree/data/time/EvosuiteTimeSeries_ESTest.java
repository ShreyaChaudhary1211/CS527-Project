/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:52:57 GMT 2024
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteTimeSeries_ESTest extends EvosuiteTimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.setDomainDescription("C");
      assertEquals("C", TimeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (-3546.0), true);
      TimeSeries TimeSeries1 = new TimeSeries(hour0);
      TimeSeries1.addOrUpdate((RegularTimePeriod) hour0, 0.0);
      boolean boolean0 = TimeSeries1.equals(TimeSeries0);
      assertEquals(1, TimeSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.getItems();
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1520), (-1520), 2, 4873, 7, 2);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      TimeSeries TimeSeries0 = new TimeSeries(month0);
      TimeSeries0.getTimePeriodClass();
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals("Time", TimeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (-3191.78));
      TimeSeries0.getTimePeriodsUniqueToOtherSeries(TimeSeries0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (double) 23, true);
      TimeSeries0.getValue((RegularTimePeriod) hour0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeSeries TimeSeries0 = new TimeSeries("SortOrder.ASCENDING", (String) null, "SortOrder.ASCENDING");
      double double0 = TimeSeries0.getMaxY();
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals("SortOrder.ASCENDING", TimeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.setRangeDescription("org.jfree.data.xy.DefaultHighLowDataset");
      assertEquals("org.jfree.data.xy.DefaultHighLowDataset", TimeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Week week0 = new Week((-1659), (-1659));
      TimeSeries TimeSeries0 = new TimeSeries(week0);
      double double0 = TimeSeries0.getMinY();
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (double) 23, true);
      TimeSeriesDataItem TimeSeriesDataItem0 = TimeSeries0.getDataItem((RegularTimePeriod) hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.add(TimeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period [20,14/2/2014] but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.setMaximumItemCount((-559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(">1GhVM(uT<*jo", ">1GhVM(uT<*jo", "");
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
      TimeSeries0.setMaximumItemCount(0);
      assertEquals(0, TimeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.setMaximumItemAge((-2564L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.getDataItem((RegularTimePeriod) hour0);
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.getRawDataItem(hour0);
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
      TimeSeries0.getRawDataItem(hour0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (double) 23);
      TimeSeries0.getTimePeriods();
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries TimeSeries1 = new TimeSeries(hour0, "Domain", "Domain");
      TimeSeries1.add((RegularTimePeriod) hour0, (-3191.78));
      TimeSeries0.getTimePeriodsUniqueToOtherSeries(TimeSeries1);
      assertEquals(1, TimeSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.getValue((RegularTimePeriod) hour0);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        TimeSeries0.add((RegularTimePeriod) hour0, (double) 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Millisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      MockDate mockDate0 = new MockDate(23, 23, 23, 0, 23, 23);
      TimeSeries TimeSeries0 = new TimeSeries(mockDate0);
      TimeSeries0.add((RegularTimePeriod) hour0, (-31.131938176715337), false);
      TimeSeries0.add(regularTimePeriod0, (Number) 23, false);
      TimeSeries0.update(regularTimePeriod0, (Number) hour0.LAST_HOUR_IN_DAY);
      assertEquals(2, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(23, 23, 23, 0, 23, 23);
      TimeSeries TimeSeries0 = new TimeSeries(mockDate0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 23, false);
      TimeSeries0.update((RegularTimePeriod) hour0, (Number) hour0.LAST_HOUR_IN_DAY);
      assertEquals(23.0, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.update((RegularTimePeriod) hour0, (Number) 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) null, false);
      TimeSeries0.update((RegularTimePeriod) hour0, (Number) 0);
      assertEquals(0.0, TimeSeries0.getMinY(), 0.01);
      assertEquals(0.0, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, Double.NaN, false);
      TimeSeries0.update((RegularTimePeriod) hour0, (Number) null);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      MockDate mockDate0 = new MockDate(23, 23, 23, 0, 23, 23);
      Integer integer0 = new Integer(0);
      TimeSeries TimeSeries0 = new TimeSeries(mockDate0);
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      TimeSeries0.add((RegularTimePeriod) hour0, (-31.131938176715337), false);
      TimeSeries0.add(regularTimePeriod0, (Number) 23, false);
      TimeSeries0.add(regularTimePeriod1, (Number) integer0, true);
      TimeSeries0.update(regularTimePeriod1, (Number) 23);
      assertEquals(23.0, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
      TimeSeries0.addAndOrUpdate(TimeSeries0);
      assertEquals(0.0, TimeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeriesDataItem TimeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 0);
      TimeSeries0.add(TimeSeriesDataItem0);
      TimeSeries TimeSeries1 = new TimeSeries(TimeSeriesDataItem0, "", "");
      TimeSeries1.addAndOrUpdate(TimeSeries0);
      assertEquals(1, TimeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeriesDataItem TimeSeriesDataItem0 = new TimeSeriesDataItem(hour0, (Number) null);
      TimeSeries TimeSeries0 = new TimeSeries("a5J`95;VRpXz~lF}");
      TimeSeries0.add(TimeSeriesDataItem0);
      TimeSeries0.addOrUpdate(TimeSeriesDataItem0);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      MockDate mockDate0 = new MockDate(23, 23, 23, 0, 23, 23);
      TimeSeries TimeSeries0 = new TimeSeries(mockDate0);
      TimeSeries0.add((RegularTimePeriod) hour0, (-31.131938176715337), false);
      TimeSeries0.add(regularTimePeriod0, (Number) 23, false);
      TimeSeries0.addOrUpdate(regularTimePeriod0, (Number) 23);
      assertEquals(2, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      MockDate mockDate0 = new MockDate(23, 23, 23, 0, 23, 23);
      TimeSeries TimeSeries0 = new TimeSeries(mockDate0);
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      TimeSeries0.add((RegularTimePeriod) hour0, (-31.131938176715337), false);
      TimeSeries0.add(regularTimePeriod0, (Number) 23, false);
      TimeSeries0.add(regularTimePeriod1, 5412.37347428, false);
      TimeSeries0.addOrUpdate(regularTimePeriod0, (double) 23);
      assertEquals(3, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.setMaximumItemCount(0);
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 23);
      assertEquals(0, TimeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(regularTimePeriod0, "A?GhVMuT<*jo", "A?GhVMuT<*jo");
      TimeSeries0.add(regularTimePeriod0, (-1.0), true);
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 23);
      TimeSeries0.setMaximumItemAge(0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(regularTimePeriod0, "A?GhVMuT<*jo", "A?GhVMuT<*jo");
      TimeSeries0.add(regularTimePeriod0, (-1.0), true);
      TimeSeries0.setMaximumItemAge(0);
      TimeSeries0.add((RegularTimePeriod) hour0, 0.5, true);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.removeAgedItems((long) 0, false);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeriesDataItem TimeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      TimeSeries0.add(TimeSeriesDataItem0);
      TimeSeries0.removeAgedItems((long) 0, true);
      TimeSeries0.removeAgedItems((long) 0, true);
      assertEquals(23.0, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0, ">1GhVM(uT<*jo", "createInstance");
      TimeSeries0.setMaximumItemAge(0);
      Week week0 = new Week(0, 0);
      TimeSeries0.add((RegularTimePeriod) week0, (double) 1, false);
      TimeSeries0.removeAgedItems((long) 0, false);
      assertEquals(0, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0, ">1GhVM(uT<*jo", ">1GhVM(uT<*jo");
      TimeSeries0.setMaximumItemAge(0);
      Week week0 = new Week(0, 0);
      TimeSeries0.add((RegularTimePeriod) week0, (-4701.36809), true);
      TimeSeries0.removeAgedItems((long) 0, true);
      assertEquals(0, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeSeries TimeSeries0 = new TimeSeries("C;hE'8!u", "C;hE'8!u", "C;hE'8!u");
      TimeSeries0.clear();
      assertEquals("C;hE'8!u", TimeSeries0.getDomainDescription());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals("C;hE'8!u", TimeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (double) 0);
      TimeSeries0.clear();
      assertEquals(0, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals("Value", TimeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      MockDate mockDate0 = new MockDate(23, 23, 23, 0, 23, 23);
      TimeSeries TimeSeries0 = new TimeSeries(mockDate0);
      TimeSeries0.add((RegularTimePeriod) hour0, (-31.131938176715337), false);
      TimeSeries0.add(regularTimePeriod0, (Number) ((Hour) regularTimePeriod0).LAST_HOUR_IN_DAY, false);
      TimeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeSeries TimeSeries0 = new TimeSeries("Ch#E'8u", "Ch#E'8u", "Ch#E'8u");
      // Undeclared exception!
      try { 
        TimeSeries0.delete(23, 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.add((RegularTimePeriod) hour0, (double) 23, true);
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      TimeSeries0.addOrUpdate(regularTimePeriod0, (double) 23);
      TimeSeries0.delete(0, 0, true);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0, "", ")/ujcA");
      TimeSeries0.add((RegularTimePeriod) hour0, 1154.38835, false);
      TimeSeries0.delete(0, 0, false);
      assertEquals(0, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeriesDataItem TimeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      TimeSeries0.add(TimeSeriesDataItem0);
      TimeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.createCopy((-2213), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.createCopy(23, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries TimeSeries1 = TimeSeries0.createCopy(23, 23);
      assertEquals(Integer.MAX_VALUE, TimeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Time", TimeSeries1.getDomainDescription());
      assertEquals("Value", TimeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, TimeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, TimeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        TimeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0, "@", "");
      // Undeclared exception!
      try { 
        TimeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(regularTimePeriod0);
      // Undeclared exception!
      try { 
        TimeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) hour0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0, ">1GhVM(uT<[jo", "createInstance");
      Week week0 = new Week();
      TimeSeries TimeSeries1 = TimeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) week0);
      assertEquals(Double.NaN, TimeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, TimeSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries1.getMaximumItemCount());
      assertEquals(">1GhVM(uT<[jo", TimeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, TimeSeries1.getMaximumItemAge());
      assertEquals("createInstance", TimeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeriesDataItem TimeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 0);
      TimeSeries0.add(TimeSeriesDataItem0);
      TimeSeries0.createCopy((RegularTimePeriod) hour0, regularTimePeriod0);
      assertEquals(0.0, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(regularTimePeriod0, ">1GhVM(uT<[jo", "createInstance");
      Week week0 = new Week();
      TimeSeries0.add((RegularTimePeriod) hour0, (double) 53, true);
      TimeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) week0);
      assertEquals(53.0, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeSeries TimeSeries0 = new TimeSeries("Ch#E'u", "Ch#E'u", "Ch#E'u");
      boolean boolean0 = TimeSeries0.equals(TimeSeries0);
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals("Ch#E'u", TimeSeries0.getDomainDescription());
      assertEquals("Ch#E'u", TimeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(23, 23, 23, 0, 23, 23);
      TimeSeries TimeSeries0 = new TimeSeries(mockDate0);
      boolean boolean0 = TimeSeries0.equals(hour0);
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries TimeSeries1 = new TimeSeries(hour0, "(2ahAP", "(2ahAP");
      boolean boolean0 = TimeSeries1.equals(TimeSeries0);
      assertEquals("(2ahAP", TimeSeries1.getRangeDescription());
      assertFalse(boolean0);
      assertEquals("(2ahAP", TimeSeries1.getDomainDescription());
      assertEquals(Double.NaN, TimeSeries1.getMinY(), 0.01);
      assertEquals("Time", TimeSeries0.getDomainDescription());
      assertEquals("Value", TimeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, TimeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, TimeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0, "C*#q'8u", "C*#q'8u");
      TimeSeries TimeSeries1 = new TimeSeries("C*#q'8u", "C*#q'8u", "");
      boolean boolean0 = TimeSeries0.equals(TimeSeries1);
      assertEquals(Double.NaN, TimeSeries1.getMinY(), 0.01);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, TimeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, TimeSeries1.getMaximumItemAge());
      assertEquals("", TimeSeries1.getRangeDescription());
      assertEquals(Double.NaN, TimeSeries1.getMaxY(), 0.01);
      assertEquals("C*#q'8u", TimeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0, "Ch#E'u", "Ch#E'u");
      TimeSeries TimeSeries1 = new TimeSeries("Ch#E'u", "Ch#E'u", "Ch#E'u");
      TimeSeries1.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
      boolean boolean0 = TimeSeries1.equals(TimeSeries0);
      assertEquals(23.0, TimeSeries1.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0, "H?GhVM(uT<*jo", "H?GhVM(uT<*jo");
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      
      TimeSeries0.setMaximumItemAge(0);
      TimeSeries TimeSeries1 = new TimeSeries("H?GhVM(uT<*jo", "H?GhVM(uT<*jo", "H?GhVM(uT<*jo");
      boolean boolean0 = TimeSeries1.equals(TimeSeries0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0, "a5J`95;VRpXz~lF}", "a5J`95;VRpXz~lF}");
      TimeSeries TimeSeries1 = new TimeSeries("a5J`95;VRpXz~lF}", "a5J`95;VRpXz~lF}", "a5J`95;VRpXz~lF}");
      TimeSeries1.setMaximumItemCount(0);
      boolean boolean0 = TimeSeries1.equals(TimeSeries0);
      assertEquals(0, TimeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      RegularTimePeriod regularTimePeriod0 = hour0.previous();
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 23);
      TimeSeries TimeSeries1 = (TimeSeries)TimeSeries0.clone();
      TimeSeries1.addOrUpdate(regularTimePeriod0, 4160.37446013952);
      boolean boolean0 = TimeSeries0.equals(TimeSeries1);
      assertEquals(2, TimeSeries1.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TimeSeries TimeSeries0 = new TimeSeries("C;hEE'8(_!u", "C;hEE'8(_!u", "C;hEE'8(_!u");
      TimeSeries TimeSeries1 = (TimeSeries)TimeSeries0.clone();
      boolean boolean0 = TimeSeries0.equals(TimeSeries1);
      assertEquals("C;hEE'8(_!u", TimeSeries1.getDomainDescription());
      assertEquals(Double.NaN, TimeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries1.getMaximumItemCount());
      assertEquals("C;hEE'8(_!u", TimeSeries1.getRangeDescription());
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, TimeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries1.getMaxY(), 0.01);
      assertNotSame(TimeSeries1, TimeSeries0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0, (String) null, (String) null);
      TimeSeries0.hashCode();
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TimeSeries TimeSeries0 = new TimeSeries(">1GhVM(uT<*jo", ">1GhVM(uT<*jo", "");
      TimeSeries0.hashCode();
      assertEquals("", TimeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, TimeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, TimeSeries0.getMaxY(), 0.01);
      assertEquals(">1GhVM(uT<*jo", TimeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, TimeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, TimeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(">1GhVM(uT<*jo", ">1GhVM(uT<*jo", "");
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
      TimeSeries0.hashCode();
      assertEquals(0.0, TimeSeries0.getMinY(), 0.01);
      assertEquals(0.0, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(">1GhVM(uT<*jo", ">1GhVM(uT<*jo", "");
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
      TimeSeries0.add(regularTimePeriod0, (double) 23, false);
      TimeSeries0.hashCode();
      assertEquals(23.0, TimeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(">1GhVM(uT<*jo", ">1GhVM(uT<*jo", "");
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) 0);
      TimeSeries0.add(regularTimePeriod0, (double) 23, false);
      RegularTimePeriod regularTimePeriod1 = hour0.previous();
      TimeSeries0.addOrUpdate(regularTimePeriod1, (-427.65562707));
      TimeSeries0.hashCode();
      assertEquals(3, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Hour hour0 = new Hour();
      MockDate mockDate0 = new MockDate(23, 0, 23, 23, 23);
      TimeSeries TimeSeries0 = new TimeSeries(mockDate0);
      TimeSeries0.add((RegularTimePeriod) hour0, (Number) null, true);
      TimeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(0, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries TimeSeries0 = new TimeSeries(hour0);
      TimeSeries0.setMaximumItemCount(0);
      TimeSeries0.add((RegularTimePeriod) hour0, Double.NaN);
      assertEquals(0, TimeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      MockDate mockDate0 = new MockDate(23, 23, 23, 0, 23, 23);
      TimeSeries TimeSeries0 = new TimeSeries(mockDate0);
      TimeSeries0.add((RegularTimePeriod) hour0, (-31.131938176715337), false);
      TimeSeries0.add(regularTimePeriod0, (Number) ((Hour) regularTimePeriod0).FIRST_HOUR_IN_DAY, false);
      TimeSeries0.delete(regularTimePeriod0);
      assertEquals(1, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      MockDate mockDate0 = new MockDate(23, 23, 23, 0, 23, 23);
      Integer integer0 = new Integer(0);
      TimeSeries TimeSeries0 = new TimeSeries(mockDate0);
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      TimeSeries0.add((RegularTimePeriod) hour0, (-31.131938176715337), false);
      TimeSeries0.add(regularTimePeriod0, (Number) 23, false);
      TimeSeries0.add(regularTimePeriod1, (Number) integer0, false);
      TimeSeries0.delete(regularTimePeriod1);
      assertEquals(2, TimeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      TimeSeries TimeSeries0 = new TimeSeries(regularTimePeriod0, "H1GhVM(uT<*jo", "H1GhVM(uT<*jo");
      TimeSeries0.add(regularTimePeriod0, (double) 23, true);
      TimeSeries0.addOrUpdate((RegularTimePeriod) hour0, Double.NaN);
      assertEquals(2, TimeSeries0.getItemCount());
  }
}
