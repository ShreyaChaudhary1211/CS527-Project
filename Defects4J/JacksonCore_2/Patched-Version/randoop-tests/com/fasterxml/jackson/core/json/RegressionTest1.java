package com.fasterxml.jackson.core.json;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test501");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        java.io.OutputStream outputStream39 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory38.createJsonGenerator(outputStream39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version42 = jsonFactory41.version();
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray52 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream55 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray52, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader59 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext43, inputStream45, byteArray52, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser60 = jsonFactory41.createParser((java.io.Reader) uTF32Reader59);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonFactory38.createJsonParser((java.io.Reader) uTF32Reader59);
        // The following exception was thrown during execution in test generation
        try {
            uTF32Reader59.freeBuffers();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(jsonParser60);
        org.junit.Assert.assertNotNull(jsonParser61);
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test502");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        boolean boolean79 = readerBasedJsonParser77.hasTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            float float80 = readerBasedJsonParser77.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test503");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator36 = jsonFactory35.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext38 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray40 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext38, inputStream39, byteArray40, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader53 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext37, inputStream39, byteArray46, 0, 0, false);
        char[] charArray56 = new char[] { ' ', '#' };
        int int57 = uTF32Reader53.read(charArray56);
        char[] charArray61 = new char[] { ' ', '#', '4' };
        int int64 = uTF32Reader53.read(charArray61, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser65 = jsonFactory35.createParser((java.io.Reader) uTF32Reader53);
        com.fasterxml.jackson.core.JsonParser jsonParser66 = jsonFactory0.createJsonParser((java.io.Reader) uTF32Reader53);
        com.fasterxml.jackson.core.JsonFactory jsonFactory67 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator68 = jsonFactory67.getInputDecorator();
        boolean boolean69 = jsonFactory67.requiresPropertyOrdering();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator70 = jsonFactory67.getInputDecorator();
        com.fasterxml.jackson.core.JsonFactory.Feature feature71 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory72 = jsonFactory67.enable(feature71);
        com.fasterxml.jackson.core.JsonFactory jsonFactory73 = jsonFactory0.disable(feature71);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNull(inputDecorator36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , #]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(jsonParser65);
        org.junit.Assert.assertNotNull(jsonParser66);
        org.junit.Assert.assertNull(inputDecorator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(inputDecorator70);
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature71.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory72);
        org.junit.Assert.assertNotNull(jsonFactory73);
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test504");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        int int90 = uTF8JsonGenerator70._outputMaxContiguous;
        com.fasterxml.jackson.core.io.IOContext iOContext91 = uTF8JsonGenerator70._ioContext;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(iOContext91);
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test505");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature39 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonGenerator38.enable(feature39);
        com.fasterxml.jackson.core.Base64Variant base64Variant41 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = new com.fasterxml.jackson.core.io.SerializedString(" ");
        char[] charArray44 = serializedString43.asQuotedChars();
        byte[] byteArray45 = serializedString43.asUnquotedUTF8();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator40.writeBinary(base64Variant41, byteArray45, (int) (short) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN + "'", feature39.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ ]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[32]");
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test506");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser("");
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator24 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator25 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory0.setOutputDecorator(outputDecorator25);
        com.fasterxml.jackson.core.JsonParser.Feature feature27 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory29 = jsonFactory0.configure(feature27, false);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNull(inputDecorator24);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertTrue("'" + feature27 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature27.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertNotNull(jsonFactory29);
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test507");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = mergedStream14.skip((long) 1026993362);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test508");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean31 = uTF32Reader18.markSupported();
        java.lang.Class<?> wildcardClass32 = uTF32Reader18.getClass();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test509");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.OutputStream outputStream71 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer72 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext7, outputStream71);
        uTF8Writer72.write("com.fasterxml.jackson.core.JsonParseException: ARRAY", 705487640, (-1270519895));
        uTF8Writer72.write("[Source: ALLOW_COMMENTS; line: 35, column: 1]", (-1270428133), (-70702289));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test510");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createJsonParser("JSON");
        double double35 = jsonParser34.getValueAsDouble();
        java.io.OutputStream outputStream36 = null;
        int int37 = jsonParser34.releaseBuffered(outputStream36);
        boolean boolean38 = jsonParser34.isClosed();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test511");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        boolean boolean42 = jsonFactory41.requiresPropertyOrdering();
        boolean boolean43 = jsonFactory41.requiresPropertyOrdering();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler44 = jsonFactory41._getBufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType45 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.CONCAT_BUFFER;
        char[] charArray47 = bufferRecycler44.allocCharBuffer(charBufferType45, 0);
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType48 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.TEXT_BUFFER;
        char[] charArray49 = null;
        bufferRecycler44.releaseCharBuffer(charBufferType48, charArray49);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(bufferRecycler44);
        org.junit.Assert.assertTrue("'" + charBufferType45 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.CONCAT_BUFFER + "'", charBufferType45.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.CONCAT_BUFFER));
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertTrue("'" + charBufferType48 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.TEXT_BUFFER + "'", charBufferType48.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.TEXT_BUFFER));
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test512");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.lang.String str51 = jsonParser50.getText();
        int int52 = jsonParser50.getTextLength();
        java.lang.Object obj53 = jsonParser50.getInputSource();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(obj53);
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test513");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        int[] intArray90 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeComment();
        uTF8JsonGenerator70._outputEscapes = intArray90;
        byte[] byteArray92 = uTF8JsonGenerator70._outputBuffer;
        java.math.BigDecimal bigDecimal93 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber(bigDecimal93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 1, -65, 1, 0, 0]");
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test514");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        java.io.Reader reader81 = readerBasedJsonParser77._reader;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger82 = readerBasedJsonParser77.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(reader81);
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test515");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonParser30.setFeatureMask(64);
        com.fasterxml.jackson.core.JsonToken jsonToken37 = jsonParser36.nextValue();
        boolean boolean38 = jsonParser36.isClosed();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertNull(jsonToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test516");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        uTF8JsonGenerator70._bufferRecyclable = false;
        uTF8JsonGenerator70._outputTail = 0;
        uTF8JsonGenerator70._releaseBuffers();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test517");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = uTF8JsonGenerator70.getCharacterEscapes();
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int81 = serializedString72.appendQuotedUTF8(byteArray79, (int) ' ');
        int int82 = serializedString72.charLength();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator83 = uTF8JsonGenerator70.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString72);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator83.writeRaw('a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(characterEscapes71);
        org.junit.Assert.assertNotNull(serializedString72);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(jsonGenerator83);
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test518");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        java.io.OutputStream outputStream39 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory38.createJsonGenerator(outputStream39);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext42 = null;
        java.io.InputStream inputStream43 = null;
        byte[] byteArray44 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream47 = new com.fasterxml.jackson.core.io.MergedStream(iOContext42, inputStream43, byteArray44, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray50 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream53 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray50, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader57 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext41, inputStream43, byteArray50, 0, 0, false);
        char[] charArray60 = new char[] { ' ', '#' };
        int int61 = uTF32Reader57.read(charArray60);
        char[] charArray65 = new char[] { ' ', '#', '4' };
        int int68 = uTF32Reader57.read(charArray65, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonFactory38.createParser((java.io.Reader) uTF32Reader57);
        int int70 = uTF32Reader57.read();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , #]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test519");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        long long80 = readerBasedJsonParser77.nextLongValue((long) (-69));
        // The following exception was thrown during execution in test generation
        try {
            double double81 = readerBasedJsonParser77.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-69L) + "'", long80 == (-69L));
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test520");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger80 = readerBasedJsonParser77.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test521");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.io.IOContext iOContext31 = null;
        java.io.InputStream inputStream32 = null;
        byte[] byteArray33 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream36 = new com.fasterxml.jackson.core.io.MergedStream(iOContext31, inputStream32, byteArray33, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser37 = jsonFactory0.createJsonParser(inputStream32);
        com.fasterxml.jackson.core.JsonFactory.Feature feature38 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean39 = jsonFactory0.isEnabled(feature38);
        java.io.File file40 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser41 = jsonFactory0.createParser(file40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(jsonParser37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature38.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test522");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int65 = serializedString56.appendQuotedUTF8(byteArray63, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonGenerator52.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString56);
        byte[] byteArray68 = new byte[] { (byte) -1 };
        int int70 = serializedString56.appendQuotedUTF8(byteArray68, 100);
        char[] charArray71 = serializedString56.asQuotedChars();
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer72 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int73 = charsToNameCanonicalizer72.collisionCount();
        int int74 = charsToNameCanonicalizer72.bucketCount();
        int int75 = charsToNameCanonicalizer72.hashSeed();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler76 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType77 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
        char[] charArray78 = bufferRecycler76.allocCharBuffer(charBufferType77);
        int int81 = charsToNameCanonicalizer72.calcHash(charArray78, (int) (byte) -65, 64);
        int int83 = serializedString56.appendQuoted(charArray78, (int) (byte) 1);
        byte[] byteArray84 = serializedString56.asQuotedUTF8();
        char[] charArray85 = serializedString56.asQuotedChars();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(serializedString56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ ]");
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 64 + "'", int74 == 64);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1270368393) + "'", int75 == (-1270368393));
        org.junit.Assert.assertTrue("'" + charBufferType77 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER + "'", charBufferType77.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1640492919 + "'", int81 == 1640492919);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[32]");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[ ]");
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test523");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setInputDecorator(inputDecorator33);
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator36 = jsonFactory35.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext38 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray40 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext38, inputStream39, byteArray40, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader53 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext37, inputStream39, byteArray46, 0, 0, false);
        char[] charArray56 = new char[] { ' ', '#' };
        int int57 = uTF32Reader53.read(charArray56);
        char[] charArray61 = new char[] { ' ', '#', '4' };
        int int64 = uTF32Reader53.read(charArray61, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser65 = jsonFactory35.createParser((java.io.Reader) uTF32Reader53);
        int int67 = jsonParser65.nextIntValue((int) 'a');
        int int68 = jsonParser65.getFeatureMask();
        double double69 = jsonParser65.getValueAsDouble();
        java.lang.Object obj70 = jsonParser65.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature71 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean72 = jsonParser65.isEnabled(feature71);
        com.fasterxml.jackson.core.JsonFactory jsonFactory74 = jsonFactory34.configure(feature71, false);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNull(inputDecorator36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , #]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(jsonParser65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature71.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(jsonFactory74);
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test524");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        java.io.OutputStream outputStream57 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer58 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext7, outputStream57);
        java.io.Writer writer60 = uTF8Writer58.append((java.lang.CharSequence) "com.fasterxml.jackson.core.JsonParseException: hi!");
        uTF8Writer58.write(56319);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertNotNull(writer60);
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test525");
        com.fasterxml.jackson.core.JsonLocation jsonLocation1 = com.fasterxml.jackson.core.JsonLocation.NA;
        com.fasterxml.jackson.core.JsonParseException jsonParseException2 = new com.fasterxml.jackson.core.JsonParseException("JSON", jsonLocation1);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler3 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation5 = null;
        java.lang.Throwable throwable6 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException7 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation5, throwable6);
        java.lang.String str8 = jsonParseException7.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext10 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler3, (java.lang.Object) jsonParseException7, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer11 = iOContext10.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        int int18 = mergedStream17.available();
        boolean boolean19 = mergedStream17.markSupported();
        int int20 = mergedStream17.available();
        int int21 = mergedStream17.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version23 = jsonFactory22.version();
        com.fasterxml.jackson.core.io.IOContext iOContext24 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext25 = null;
        java.io.InputStream inputStream26 = null;
        byte[] byteArray27 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream30 = new com.fasterxml.jackson.core.io.MergedStream(iOContext25, inputStream26, byteArray27, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext31 = null;
        java.io.InputStream inputStream32 = null;
        byte[] byteArray33 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream36 = new com.fasterxml.jackson.core.io.MergedStream(iOContext31, inputStream32, byteArray33, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader40 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext24, inputStream26, byteArray33, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser41 = jsonFactory22.createParser((java.io.Reader) uTF32Reader40);
        com.fasterxml.jackson.core.JsonFactory jsonFactory43 = jsonFactory22.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int53 = serializedString44.appendQuotedUTF8(byteArray51, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser56 = jsonFactory22.createParser(byteArray51, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream59 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, (java.io.InputStream) mergedStream17, byteArray51, (int) (short) 10, 79);
        java.io.OutputStream outputStream60 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer61 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext10, outputStream60);
        java.io.Writer writer63 = uTF8Writer61.append('#');
        boolean boolean64 = jsonLocation1.equals((java.lang.Object) uTF8Writer61);
        org.junit.Assert.assertNotNull(jsonLocation1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(textBuffer11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(jsonParser41);
        org.junit.Assert.assertNotNull(jsonFactory43);
        org.junit.Assert.assertNotNull(serializedString44);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(jsonParser56);
        org.junit.Assert.assertNotNull(writer63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test526");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        com.fasterxml.jackson.core.JsonLocation jsonLocation82 = readerBasedJsonParser77.getTokenLocation();
        java.lang.String str84 = readerBasedJsonParser77.getValueAsString("hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertNotNull(jsonLocation82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test527");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createJsonParser("JSON");
        double double35 = jsonParser34.getValueAsDouble();
        java.io.OutputStream outputStream36 = null;
        int int37 = jsonParser34.releaseBuffered(outputStream36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = jsonParser34.nextTextValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token 'JSON': was expecting ? at [Source: java.io.StringReader@2b70f8a1; line: 1, column: 9]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test528");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        int int80 = readerBasedJsonParser77.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation81 = readerBasedJsonParser77.getCurrentLocation();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(jsonLocation81);
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test529");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.TreeNode treeNode40 = null;
        jsonGenerator39.writeTree(treeNode40);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter42 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonGenerator39.setPrettyPrinter(prettyPrinter42);
        byte[] byteArray45 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator43.writeBinaryField("", byteArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(jsonGenerator43);
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test530");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeString("");
        jsonGenerator35.writeBoolean(false);
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator35);
        jsonGenerator35.writeNumberField("hi!", (float) ' ');
        jsonGenerator35.writeNumberField("[Source: false; line: 1, column: 0]", 0L);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature47 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean48 = feature47.enabledByDefault();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator49 = jsonGenerator35.enable(feature47);
        com.fasterxml.jackson.core.TreeNode treeNode50 = null;
        jsonGenerator49.writeTree(treeNode50);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + feature47 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature47.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jsonGenerator49);
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test531");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        java.io.Writer writer32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory1.createJsonGenerator(writer32);
        boolean boolean34 = jsonGenerator33.isClosed();
        jsonGenerator33.writeStartObject();
        boolean boolean36 = jsonGenerator33.isClosed();
        defaultPrettyPrinter0.writeEndObject(jsonGenerator33, (int) (byte) -1);
        jsonGenerator33.writeNull();
        jsonGenerator33.writeNumber((long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator33.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test532");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        java.io.Writer writer32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory1.createJsonGenerator(writer32);
        boolean boolean34 = jsonGenerator33.isClosed();
        jsonGenerator33.writeStartObject();
        boolean boolean36 = jsonGenerator33.isClosed();
        defaultPrettyPrinter0.writeEndObject(jsonGenerator33, (int) (byte) -1);
        int int39 = jsonGenerator33.getHighestEscapedChar();
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test533");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator22 = jsonFactory0.getInputDecorator();
        java.io.InputStream inputStream23 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory0.createParser(inputStream23);
        boolean boolean25 = jsonParser24.hasTextCharacters();
        com.fasterxml.jackson.core.JsonParser jsonParser27 = jsonParser24.setFeatureMask((int) (short) -1);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNull(inputDecorator22);
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jsonParser27);
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test534");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer85 = readerBasedJsonParser77._symbols;
        java.lang.String str86 = readerBasedJsonParser77.getValueAsString();
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder87 = readerBasedJsonParser77._getByteArrayBuilder();
        boolean boolean88 = readerBasedJsonParser77.isClosed();
        boolean boolean89 = readerBasedJsonParser77._tokenIncomplete;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(byteArrayBuilder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test535");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77._handleOddValue(734974343);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected character ('???' (code 734974343 / 0x2bced187)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test536");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        int[] intArray85 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test537");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        java.io.Writer writer32 = null;
        int int33 = jsonParser30.releaseBuffered(writer32);
        int int35 = jsonParser30.getValueAsInt(56319);
        com.fasterxml.jackson.core.FormatSchema formatSchema36 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonParser30.setSchema(formatSchema36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 56319 + "'", int35 == 56319);
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test538");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter3.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator9 = jsonFactory8.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray13 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream16 = new com.fasterxml.jackson.core.io.MergedStream(iOContext11, inputStream12, byteArray13, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext17 = null;
        java.io.InputStream inputStream18 = null;
        byte[] byteArray19 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream22 = new com.fasterxml.jackson.core.io.MergedStream(iOContext17, inputStream18, byteArray19, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader26 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext10, inputStream12, byteArray19, 0, 0, false);
        char[] charArray29 = new char[] { ' ', '#' };
        int int30 = uTF32Reader26.read(charArray29);
        char[] charArray34 = new char[] { ' ', '#', '4' };
        int int37 = uTF32Reader26.read(charArray34, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory8.createParser((java.io.Reader) uTF32Reader26);
        java.io.Writer writer39 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory8.createJsonGenerator(writer39);
        boolean boolean41 = jsonGenerator40.isClosed();
        defaultPrettyPrinter7.writeObjectFieldValueSeparator(jsonGenerator40);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonGenerator40.useDefaultPrettyPrinter();
        fixedSpaceIndenter1.writeIndentation(jsonGenerator40, 734974343);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator9);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jsonGenerator43);
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test539");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter2.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString5 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter2, serializableString5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = defaultPrettyPrinter2.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator9 = jsonFactory8.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray13 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream16 = new com.fasterxml.jackson.core.io.MergedStream(iOContext11, inputStream12, byteArray13, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext17 = null;
        java.io.InputStream inputStream18 = null;
        byte[] byteArray19 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream22 = new com.fasterxml.jackson.core.io.MergedStream(iOContext17, inputStream18, byteArray19, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader26 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext10, inputStream12, byteArray19, 0, 0, false);
        char[] charArray29 = new char[] { ' ', '#' };
        int int30 = uTF32Reader26.read(charArray29);
        char[] charArray34 = new char[] { ' ', '#', '4' };
        int int37 = uTF32Reader26.read(charArray34, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory8.createParser((java.io.Reader) uTF32Reader26);
        java.io.Writer writer39 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory8.createJsonGenerator(writer39);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext42 = null;
        java.io.InputStream inputStream43 = null;
        byte[] byteArray44 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream47 = new com.fasterxml.jackson.core.io.MergedStream(iOContext42, inputStream43, byteArray44, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray50 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream53 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray50, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader57 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext41, inputStream43, byteArray50, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser58 = jsonFactory8.createParser(byteArray50);
        java.io.Writer writer59 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator60 = jsonFactory8.createGenerator(writer59);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter61 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter62 = defaultPrettyPrinter61.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator63 = jsonGenerator60.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter62);
        com.fasterxml.jackson.core.io.SerializedString serializedString64 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int73 = serializedString64.appendQuotedUTF8(byteArray71, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = jsonGenerator60.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString64);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter75 = defaultPrettyPrinter7.withRootSeparator((com.fasterxml.jackson.core.SerializableString) serializedString64);
        byte[] byteArray77 = new byte[] { (byte) -1 };
        int int79 = serializedString64.appendQuotedUTF8(byteArray77, (int) 'a');
        char[] charArray80 = serializedString64.asQuotedChars();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter81 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1, (com.fasterxml.jackson.core.SerializableString) serializedString64);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter7);
        org.junit.Assert.assertNull(inputDecorator9);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(jsonParser58);
        org.junit.Assert.assertNotNull(jsonGenerator60);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter62);
        org.junit.Assert.assertNotNull(jsonGenerator63);
        org.junit.Assert.assertNotNull(serializedString64);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator74);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter75);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[ ]");
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test540");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        jsonParser30.close();
        long long33 = jsonParser30.nextLongValue(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal34 = jsonParser30.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@d85287a; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test541");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator3 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.JsonFactory.Feature feature4 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory0.enable(feature4);
        byte[] byteArray10 = new byte[] { (byte) -17, (byte) -65, (byte) 1, (byte) 1 };
        com.fasterxml.jackson.core.JsonParser jsonParser11 = jsonFactory5.createParser(byteArray10);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator3);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature4.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-17, -65, 1, 1]");
        org.junit.Assert.assertNotNull(jsonParser11);
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test542");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        jsonGenerator36.writeString("");
        jsonGenerator36.writeBoolean(false);
        defaultPrettyPrinter3.beforeArrayValues(jsonGenerator36);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter42 = defaultPrettyPrinter3.withoutSpacesInObjectEntries();
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter42);
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test543");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.Version version33 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory0.createParser(byteArray36);
        java.lang.String str41 = jsonParser40.getCurrentName();
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonParser40.skipChildren();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(jsonParser42);
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test544");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        com.fasterxml.jackson.core.ObjectCodec objectCodec85 = readerBasedJsonParser77._objectCodec;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken87 = readerBasedJsonParser77._handleOddValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected character ((CTRL-CHAR, code 10)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNull(objectCodec85);
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test545");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes73;
        java.io.OutputStream outputStream75 = uTF8JsonGenerator70._outputStream;
        java.io.OutputStream outputStream76 = uTF8JsonGenerator70._outputStream;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeRawValue("com.fasterxml.jackson.core.JsonParseException: ARRAY", 32, 55296);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 2032");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(outputStream75);
        org.junit.Assert.assertNull(outputStream76);
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test546");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.Version version33 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory0.createParser(byteArray36);
        com.fasterxml.jackson.core.JsonParser.Feature feature41 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonParser40.enable(feature41);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature41.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonParser42);
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test547");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        java.io.InputStream inputStream3 = null;
        byte[] byteArray4 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream7 = new com.fasterxml.jackson.core.io.MergedStream(iOContext2, inputStream3, byteArray4, 0, (int) (short) -1);
        int int8 = mergedStream7.available();
        boolean boolean9 = mergedStream7.markSupported();
        mergedStream7.mark(100);
        boolean boolean12 = mergedStream7.markSupported();
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer14 = com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.createRoot();
        int int15 = bytesToNameCanonicalizer14.maxCollisionLength();
        int int16 = bytesToNameCanonicalizer14.collisionCount();
        com.fasterxml.jackson.core.io.IOContext iOContext17 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray20 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream23 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, inputStream19, byteArray20, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext24 = null;
        java.io.InputStream inputStream25 = null;
        byte[] byteArray26 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream29 = new com.fasterxml.jackson.core.io.MergedStream(iOContext24, inputStream25, byteArray26, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader33 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext17, inputStream19, byteArray26, 0, 0, false);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser37 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext0, 1, (java.io.InputStream) mergedStream7, objectCodec13, bytesToNameCanonicalizer14, byteArray26, (-1270410141), (int) 'a', true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bytesToNameCanonicalizer14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test548");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        jsonGenerator32.writeObjectFieldStart("");
        jsonGenerator32.writeObjectFieldStart("hi!");
        jsonGenerator32.writeRaw(' ');
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test549");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser("");
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator24 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory0.copy();
        com.fasterxml.jackson.core.JsonParser.Feature feature26 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory25.enable(feature26);
        com.fasterxml.jackson.core.JsonLocation jsonLocation31 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) jsonFactory25, 1L, (-69), (int) '#');
        com.fasterxml.jackson.core.Version version32 = jsonFactory25.version();
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory25.setRootValueSeparator(" ");
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNull(inputDecorator24);
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature26.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertNotNull(jsonFactory34);
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test550");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        com.fasterxml.jackson.core.FormatSchema formatSchema32 = null;
        boolean boolean33 = jsonParser30.canUseSchema(formatSchema32);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonParser30.setFeatureMask((int) (short) 100);
        int int36 = jsonParser35.getTextOffset();
        com.fasterxml.jackson.core.FormatSchema formatSchema37 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonParser35.setSchema(formatSchema37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test551");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        java.io.Reader reader81 = readerBasedJsonParser77._reader;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken82 = readerBasedJsonParser77._handleApos();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(reader81);
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test552");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter5 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = defaultPrettyPrinter4.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter5);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler7 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation9 = null;
        java.lang.Throwable throwable10 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException11 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation9, throwable10);
        java.lang.String str12 = jsonParseException11.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext14 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler7, (java.lang.Object) jsonParseException11, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec16 = null;
        java.io.OutputStream outputStream17 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler18 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation20 = null;
        java.lang.Throwable throwable21 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException22 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation20, throwable21);
        java.lang.String str23 = jsonParseException22.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext25 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler18, (java.lang.Object) jsonParseException22, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer26 = iOContext25.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext27 = null;
        java.io.InputStream inputStream28 = null;
        byte[] byteArray29 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream32 = new com.fasterxml.jackson.core.io.MergedStream(iOContext27, inputStream28, byteArray29, 0, (int) (short) -1);
        int int33 = mergedStream32.available();
        boolean boolean34 = mergedStream32.markSupported();
        int int35 = mergedStream32.available();
        int int36 = mergedStream32.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version38 = jsonFactory37.version();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader55 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext39, inputStream41, byteArray48, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser56 = jsonFactory37.createParser((java.io.Reader) uTF32Reader55);
        com.fasterxml.jackson.core.JsonFactory jsonFactory58 = jsonFactory37.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString59 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int68 = serializedString59.appendQuotedUTF8(byteArray66, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser71 = jsonFactory37.createParser(byteArray66, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream74 = new com.fasterxml.jackson.core.io.MergedStream(iOContext25, (java.io.InputStream) mergedStream32, byteArray66, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator77 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext14, (int) (byte) 100, objectCodec16, outputStream17, byteArray66, (int) (byte) 10, true);
        boolean boolean78 = uTF8JsonGenerator77.isClosed();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes79 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator80 = uTF8JsonGenerator77.setCharacterEscapes(characterEscapes79);
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter6.beforeArrayValues((com.fasterxml.jackson.core.JsonGenerator) uTF8JsonGenerator77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fixedSpaceIndenter5);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(textBuffer26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(version38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(jsonParser56);
        org.junit.Assert.assertNotNull(jsonFactory58);
        org.junit.Assert.assertNotNull(serializedString59);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(jsonParser71);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jsonGenerator80);
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test553");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature53 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = jsonFactory0.enable(feature53);
        java.io.OutputStream outputStream55 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator56 = jsonFactory0.createGenerator(outputStream55);
        com.fasterxml.jackson.core.JsonFactory jsonFactory57 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator58 = jsonFactory57.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext59 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext60 = null;
        java.io.InputStream inputStream61 = null;
        byte[] byteArray62 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext60, inputStream61, byteArray62, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext66 = null;
        java.io.InputStream inputStream67 = null;
        byte[] byteArray68 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream71 = new com.fasterxml.jackson.core.io.MergedStream(iOContext66, inputStream67, byteArray68, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext59, inputStream61, byteArray68, 0, 0, false);
        char[] charArray78 = new char[] { ' ', '#' };
        int int79 = uTF32Reader75.read(charArray78);
        char[] charArray83 = new char[] { ' ', '#', '4' };
        int int86 = uTF32Reader75.read(charArray83, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser87 = jsonFactory57.createParser((java.io.Reader) uTF32Reader75);
        com.fasterxml.jackson.core.io.IOContext iOContext88 = null;
        java.io.InputStream inputStream89 = null;
        byte[] byteArray90 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream93 = new com.fasterxml.jackson.core.io.MergedStream(iOContext88, inputStream89, byteArray90, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser94 = jsonFactory57.createJsonParser(inputStream89);
        com.fasterxml.jackson.core.JsonFactory.Feature feature95 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean96 = jsonFactory57.isEnabled(feature95);
        com.fasterxml.jackson.core.JsonFactory jsonFactory97 = jsonFactory0.disable(feature95);
        com.fasterxml.jackson.core.ObjectCodec objectCodec98 = jsonFactory0.getCodec();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature53.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory54);
        org.junit.Assert.assertNotNull(jsonGenerator56);
        org.junit.Assert.assertNull(inputDecorator58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , #]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(jsonParser87);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(jsonParser94);
        org.junit.Assert.assertTrue("'" + feature95 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature95.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(jsonFactory97);
        org.junit.Assert.assertNull(objectCodec98);
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test554");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.overrideCurrentName("");
        int int80 = readerBasedJsonParser77.getTextLength();
        long long81 = readerBasedJsonParser77.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version82 = readerBasedJsonParser77.version();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray83 = readerBasedJsonParser77.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(version82);
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test555");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int65 = serializedString56.appendQuotedUTF8(byteArray63, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonGenerator52.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString56);
        byte[] byteArray68 = new byte[] { (byte) -1 };
        int int70 = serializedString56.appendQuotedUTF8(byteArray68, 100);
        char[] charArray71 = serializedString56.asQuotedChars();
        java.lang.String str72 = serializedString56.getValue();
        byte[] byteArray73 = serializedString56.asUnquotedUTF8();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(serializedString56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ ]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + " " + "'", str72, " ");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[32]");
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test556");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        jsonParser30.close();
        boolean boolean32 = jsonParser30.requiresCustomCodec();
        long long34 = jsonParser30.getValueAsLong((long) (-2097141335));
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-2097141335L) + "'", long34 == (-2097141335L));
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test557");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.SerializableString serializableString73 = uTF8JsonGenerator70._rootValueSeparator;
        int int74 = uTF8JsonGenerator70._outputEnd;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeFieldName("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(serializableString73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test558");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.overrideCurrentName("");
        int int80 = readerBasedJsonParser77.getTextLength();
        long long81 = readerBasedJsonParser77.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version82 = readerBasedJsonParser77.version();
        readerBasedJsonParser77._closeInput();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(version82);
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test559");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        com.fasterxml.jackson.core.Version version84 = uTF8JsonGenerator70.version();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber((-2097141335L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(version84);
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test560");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonParser jsonParser79 = readerBasedJsonParser77.skipChildren();
        java.lang.Object obj80 = readerBasedJsonParser77.getInputSource();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNotNull(jsonParser79);
        org.junit.Assert.assertNull(obj80);
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test561");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature38 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean39 = jsonGenerator35.isEnabled(feature38);
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(jsonGenerator35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter41.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter41);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter45 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter41);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator47 = jsonFactory46.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader64 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext48, inputStream50, byteArray57, 0, 0, false);
        char[] charArray67 = new char[] { ' ', '#' };
        int int68 = uTF32Reader64.read(charArray67);
        char[] charArray72 = new char[] { ' ', '#', '4' };
        int int75 = uTF32Reader64.read(charArray72, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser76 = jsonFactory46.createParser((java.io.Reader) uTF32Reader64);
        java.io.Writer writer77 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = jsonFactory46.createJsonGenerator(writer77);
        boolean boolean79 = jsonGenerator78.isClosed();
        defaultPrettyPrinter45.writeObjectFieldValueSeparator(jsonGenerator78);
        jsonGenerator78.writeNumberField("[Source: false; line: 1, column: 0]", (int) (short) 100);
        defaultPrettyPrinter0.writeStartArray(jsonGenerator78);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter0.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter85);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter87 = defaultPrettyPrinter0.createInstance();
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature38.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(inputDecorator47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(jsonParser76);
        org.junit.Assert.assertNotNull(jsonGenerator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter87);
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test562");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.setCodec(objectCodec3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        com.fasterxml.jackson.core.io.IOContext iOContext36 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray38 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream41 = new com.fasterxml.jackson.core.io.MergedStream(iOContext36, inputStream37, byteArray38, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory5.createJsonParser(inputStream37);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean44 = jsonFactory5.isEnabled(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory4.disable(feature43);
        int int46 = feature43.getMask();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(jsonParser42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test563");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        java.io.Writer writer32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory1.createJsonGenerator(writer32);
        boolean boolean34 = jsonGenerator33.isClosed();
        jsonGenerator33.writeStartObject();
        boolean boolean36 = jsonGenerator33.isClosed();
        defaultPrettyPrinter0.writeEndObject(jsonGenerator33, (int) (byte) -1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator40 = jsonFactory39.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext42 = null;
        java.io.InputStream inputStream43 = null;
        byte[] byteArray44 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream47 = new com.fasterxml.jackson.core.io.MergedStream(iOContext42, inputStream43, byteArray44, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray50 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream53 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray50, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader57 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext41, inputStream43, byteArray50, 0, 0, false);
        char[] charArray60 = new char[] { ' ', '#' };
        int int61 = uTF32Reader57.read(charArray60);
        char[] charArray65 = new char[] { ' ', '#', '4' };
        int int68 = uTF32Reader57.read(charArray65, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonFactory39.createParser((java.io.Reader) uTF32Reader57);
        java.io.Writer writer70 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator71 = jsonFactory39.createJsonGenerator(writer70);
        boolean boolean72 = jsonGenerator71.isClosed();
        jsonGenerator71.writeStartObject();
        boolean boolean74 = jsonGenerator71.isClosed();
        jsonGenerator71.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec77 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = jsonGenerator71.setCodec(objectCodec77);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter79 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter80 = defaultPrettyPrinter79.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator81 = jsonGenerator71.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter80);
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(jsonGenerator81);
        com.fasterxml.jackson.core.ObjectCodec objectCodec83 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = jsonGenerator81.setCodec(objectCodec83);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature85 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = jsonGenerator84.enable(feature85);
        java.lang.Object obj87 = jsonGenerator84.getOutputTarget();
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputDecorator40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , #]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertNotNull(jsonGenerator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jsonGenerator78);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter80);
        org.junit.Assert.assertNotNull(jsonGenerator81);
        org.junit.Assert.assertNotNull(jsonGenerator84);
        org.junit.Assert.assertTrue("'" + feature85 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature85.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertNotNull(jsonGenerator86);
        org.junit.Assert.assertNull(obj87);
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test564");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int65 = serializedString56.appendQuotedUTF8(byteArray63, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonGenerator52.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString56);
        byte[] byteArray68 = new byte[] { (byte) -1 };
        int int70 = serializedString56.appendQuotedUTF8(byteArray68, 100);
        java.nio.ByteBuffer byteBuffer71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int72 = serializedString56.putUnquotedUTF8(byteBuffer71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(serializedString56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test565");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        long long82 = readerBasedJsonParser77.getTokenCharacterOffset();
        double double84 = readerBasedJsonParser77.getValueAsDouble((double) 57343);
        java.lang.Object obj85 = readerBasedJsonParser77.getEmbeddedObject();
        readerBasedJsonParser77.close();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 57343.0d + "'", double84 == 57343.0d);
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test566");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.ObjectCodec objectCodec51 = jsonFactory0.getCodec();
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator52 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory53 = jsonFactory0.setOutputDecorator(outputDecorator52);
        java.io.Writer writer54 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonFactory53.createJsonGenerator(writer54);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter56 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter56.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString59 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int68 = serializedString59.appendQuotedUTF8(byteArray66, (int) ' ');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter69 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter56, (com.fasterxml.jackson.core.SerializableString) serializedString59);
        byte[] byteArray70 = serializedString59.asUnquotedUTF8();
        com.fasterxml.jackson.core.JsonParser jsonParser71 = jsonFactory53.createParser(byteArray70);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(objectCodec51);
        org.junit.Assert.assertNotNull(jsonFactory53);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(serializedString59);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[32]");
        org.junit.Assert.assertNotNull(jsonParser71);
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test567");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory38.setInputDecorator(inputDecorator39);
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = jsonFactory38.setCodec(objectCodec41);
        com.fasterxml.jackson.core.JsonParser.Feature feature43 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean44 = jsonFactory38.isEnabled(feature43);
        boolean boolean45 = jsonFactory38.requiresPropertyOrdering();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(jsonFactory42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature43.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test568");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        java.io.Writer writer32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory1.createJsonGenerator(writer32);
        boolean boolean34 = jsonGenerator33.isClosed();
        jsonGenerator33.writeStartObject();
        boolean boolean36 = jsonGenerator33.isClosed();
        defaultPrettyPrinter0.writeEndObject(jsonGenerator33, (int) (byte) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter40.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter40);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter40);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator46 = jsonFactory45.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray50 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream53 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray50, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext54 = null;
        java.io.InputStream inputStream55 = null;
        byte[] byteArray56 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream59 = new com.fasterxml.jackson.core.io.MergedStream(iOContext54, inputStream55, byteArray56, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader63 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext47, inputStream49, byteArray56, 0, 0, false);
        char[] charArray66 = new char[] { ' ', '#' };
        int int67 = uTF32Reader63.read(charArray66);
        char[] charArray71 = new char[] { ' ', '#', '4' };
        int int74 = uTF32Reader63.read(charArray71, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser75 = jsonFactory45.createParser((java.io.Reader) uTF32Reader63);
        java.io.Writer writer76 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator77 = jsonFactory45.createJsonGenerator(writer76);
        boolean boolean78 = jsonGenerator77.isClosed();
        defaultPrettyPrinter44.writeObjectFieldValueSeparator(jsonGenerator77);
        jsonGenerator77.writeNumberField("[Source: false; line: 1, column: 0]", (int) (short) 100);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature83 = com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = jsonGenerator77.enable(feature83);
        defaultPrettyPrinter39.writeObjectFieldValueSeparator(jsonGenerator84);
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputDecorator46);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , #]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(jsonParser75);
        org.junit.Assert.assertNotNull(jsonGenerator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + feature83 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII + "'", feature83.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII));
        org.junit.Assert.assertNotNull(jsonGenerator84);
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test569");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter();
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter6);
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator9 = jsonFactory8.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray13 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream16 = new com.fasterxml.jackson.core.io.MergedStream(iOContext11, inputStream12, byteArray13, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext17 = null;
        java.io.InputStream inputStream18 = null;
        byte[] byteArray19 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream22 = new com.fasterxml.jackson.core.io.MergedStream(iOContext17, inputStream18, byteArray19, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader26 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext10, inputStream12, byteArray19, 0, 0, false);
        char[] charArray29 = new char[] { ' ', '#' };
        int int30 = uTF32Reader26.read(charArray29);
        char[] charArray34 = new char[] { ' ', '#', '4' };
        int int37 = uTF32Reader26.read(charArray34, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory8.createParser((java.io.Reader) uTF32Reader26);
        java.io.Writer writer39 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory8.createJsonGenerator(writer39);
        boolean boolean41 = jsonGenerator40.isClosed();
        jsonGenerator40.writeStartObject();
        boolean boolean43 = jsonGenerator40.isClosed();
        jsonGenerator40.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec46 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = jsonGenerator40.setCodec(objectCodec46);
        com.fasterxml.jackson.core.TreeNode treeNode48 = null;
        jsonGenerator47.writeTree(treeNode48);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter50 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator51 = jsonGenerator47.setPrettyPrinter(prettyPrinter50);
        com.fasterxml.jackson.core.ObjectCodec objectCodec52 = jsonGenerator51.getCodec();
        jsonGenerator51.writeStringField("[Source: false; line: 1, column: 0]", "ARRAY");
        defaultPrettyPrinter0.writeRootValueSeparator(jsonGenerator51);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNull(inputDecorator9);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jsonGenerator47);
        org.junit.Assert.assertNotNull(jsonGenerator51);
        org.junit.Assert.assertNull(objectCodec52);
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test570");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("ARRAY");
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator3 = jsonFactory2.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        java.io.InputStream inputStream6 = null;
        byte[] byteArray7 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream10 = new com.fasterxml.jackson.core.io.MergedStream(iOContext5, inputStream6, byteArray7, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray13 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream16 = new com.fasterxml.jackson.core.io.MergedStream(iOContext11, inputStream12, byteArray13, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader20 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext4, inputStream6, byteArray13, 0, 0, false);
        char[] charArray23 = new char[] { ' ', '#' };
        int int24 = uTF32Reader20.read(charArray23);
        char[] charArray28 = new char[] { ' ', '#', '4' };
        int int31 = uTF32Reader20.read(charArray28, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonFactory2.createParser((java.io.Reader) uTF32Reader20);
        java.io.Writer writer33 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator34 = jsonFactory2.createJsonGenerator(writer33);
        com.fasterxml.jackson.core.ObjectCodec objectCodec35 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory36 = jsonFactory2.setCodec(objectCodec35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory36.createGenerator(writer37);
        java.io.Writer writer39 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory36.createGenerator(writer39);
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory36.createParser("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature43 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        boolean boolean44 = jsonFactory36.isEnabled(feature43);
        java.io.OutputStream outputStream45 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator46 = jsonFactory36.createGenerator(outputStream45);
        // The following exception was thrown during execution in test generation
        try {
            lf2SpacesIndenter1.writeIndentation(jsonGenerator46, 734974343);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , #]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(jsonParser32);
        org.junit.Assert.assertNotNull(jsonGenerator34);
        org.junit.Assert.assertNotNull(jsonFactory36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertNotNull(jsonParser42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonGenerator46);
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test571");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        jsonGenerator36.writeObjectFieldStart("");
        jsonGenerator36.writeObjectFieldStart("hi!");
        defaultPrettyPrinter0.beforeObjectEntries(jsonGenerator36);
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator43 = jsonFactory42.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray47 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream50 = new com.fasterxml.jackson.core.io.MergedStream(iOContext45, inputStream46, byteArray47, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext51 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray53 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext51, inputStream52, byteArray53, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader60 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext44, inputStream46, byteArray53, 0, 0, false);
        char[] charArray63 = new char[] { ' ', '#' };
        int int64 = uTF32Reader60.read(charArray63);
        char[] charArray68 = new char[] { ' ', '#', '4' };
        int int71 = uTF32Reader60.read(charArray68, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser72 = jsonFactory42.createParser((java.io.Reader) uTF32Reader60);
        java.io.Writer writer73 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = jsonFactory42.createJsonGenerator(writer73);
        defaultPrettyPrinter0.writeArrayValueSeparator(jsonGenerator74);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter76 = defaultPrettyPrinter0.withoutSpacesInObjectEntries();
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNull(inputDecorator43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , #]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(jsonParser72);
        org.junit.Assert.assertNotNull(jsonGenerator74);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter76);
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test572");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes72 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes72;
        java.lang.Object obj74 = uTF8JsonGenerator70.getOutputTarget();
        com.fasterxml.jackson.core.Version version75 = uTF8JsonGenerator70.version();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature76 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator77 = uTF8JsonGenerator70.disable(feature76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(version75);
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test573");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        boolean boolean79 = readerBasedJsonParser77.hasTextCharacters();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test574");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("[Source: false; line: 1, column: 0]");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler5 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation7 = null;
        java.lang.Throwable throwable8 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException9 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation7, throwable8);
        java.lang.String str10 = jsonParseException9.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler5, (java.lang.Object) jsonParseException9, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec14 = null;
        java.io.OutputStream outputStream15 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler16 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation18 = null;
        java.lang.Throwable throwable19 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException20 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation18, throwable19);
        java.lang.String str21 = jsonParseException20.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler16, (java.lang.Object) jsonParseException20, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer24 = iOContext23.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext25 = null;
        java.io.InputStream inputStream26 = null;
        byte[] byteArray27 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream30 = new com.fasterxml.jackson.core.io.MergedStream(iOContext25, inputStream26, byteArray27, 0, (int) (short) -1);
        int int31 = mergedStream30.available();
        boolean boolean32 = mergedStream30.markSupported();
        int int33 = mergedStream30.available();
        int int34 = mergedStream30.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version36 = jsonFactory35.version();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext38 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray40 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext38, inputStream39, byteArray40, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader53 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext37, inputStream39, byteArray46, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser54 = jsonFactory35.createParser((java.io.Reader) uTF32Reader53);
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = jsonFactory35.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int66 = serializedString57.appendQuotedUTF8(byteArray64, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonFactory35.createParser(byteArray64, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream72 = new com.fasterxml.jackson.core.io.MergedStream(iOContext23, (java.io.InputStream) mergedStream30, byteArray64, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator75 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext12, (int) (byte) 100, objectCodec14, outputStream15, byteArray64, (int) (byte) 10, true);
        java.io.Reader reader77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer79 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int80 = charsToNameCanonicalizer79.collisionCount();
        int int81 = charsToNameCanonicalizer79.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser82 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, (int) (byte) -65, reader77, objectCodec78, charsToNameCanonicalizer79);
        char[] charArray83 = readerBasedJsonParser82.getTextCharacters();
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder84 = readerBasedJsonParser82._getByteArrayBuilder();
        int int85 = serializedString4.writeUnquotedUTF8((java.io.OutputStream) byteArrayBuilder84);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator86 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext0, 56319, objectCodec2, (java.io.OutputStream) byteArrayBuilder84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(textBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(jsonParser54);
        org.junit.Assert.assertNotNull(jsonFactory56);
        org.junit.Assert.assertNotNull(serializedString57);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 64 + "'", int81 == 64);
        org.junit.Assert.assertNull(charArray83);
        org.junit.Assert.assertNotNull(byteArrayBuilder84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test575");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.overrideCurrentName("");
        long long81 = readerBasedJsonParser77.nextLongValue((long) (-1270445007));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1270445007L) + "'", long81 == (-1270445007L));
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test576");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator51 = jsonFactory0.getOutputDecorator();
        com.fasterxml.jackson.core.JsonFactory jsonFactory52 = jsonFactory0.copy();
        java.io.File file53 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser54 = jsonFactory0.createParser(file53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(outputDecorator51);
        org.junit.Assert.assertNotNull(jsonFactory52);
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test577");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = readerBasedJsonParser77.getCodec();
        char[] charArray80 = readerBasedJsonParser77.getTextCharacters();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(objectCodec79);
        org.junit.Assert.assertNull(charArray80);
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test578");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.OutputStream outputStream71 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer72 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext7, outputStream71);
        java.io.Writer writer74 = uTF8Writer72.append((java.lang.CharSequence) "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(writer74);
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test579");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes73;
        java.io.OutputStream outputStream75 = uTF8JsonGenerator70._outputStream;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes76 = uTF8JsonGenerator70._characterEscapes;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes77 = uTF8JsonGenerator70.getCharacterEscapes();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(outputStream75);
        org.junit.Assert.assertNull(characterEscapes76);
        org.junit.Assert.assertNull(characterEscapes77);
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test580");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        com.fasterxml.jackson.core.io.IOContext iOContext78 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext85 = null;
        java.io.InputStream inputStream86 = null;
        byte[] byteArray87 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream90 = new com.fasterxml.jackson.core.io.MergedStream(iOContext85, inputStream86, byteArray87, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader94 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext78, inputStream80, byteArray87, 0, 0, false);
        // The following exception was thrown during execution in test generation
        try {
            iOContext7.releaseWriteEncodingBuffer(byteArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test581");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray2 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray0, (-1270428087));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test582");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.Version version81 = readerBasedJsonParser77.version();
        com.fasterxml.jackson.core.JsonToken jsonToken82 = readerBasedJsonParser77.getLastClearedToken();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertNotNull(version81);
        org.junit.Assert.assertNull(jsonToken82);
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test583");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test584");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        java.lang.Object obj72 = uTF8JsonGenerator70.getOutputTarget();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeRaw('a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj72);
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test585");
        com.fasterxml.jackson.core.io.SerializedString serializedString0 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int9 = serializedString0.appendQuotedUTF8(byteArray7, (int) ' ');
        java.lang.String str10 = serializedString0.getValue();
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version12 = jsonFactory11.version();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader29 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext13, inputStream15, byteArray22, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory11.createParser((java.io.Reader) uTF32Reader29);
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = jsonFactory11.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int42 = serializedString33.appendQuotedUTF8(byteArray40, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser45 = jsonFactory11.createParser(byteArray40, 0, 56320);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = serializedString0.appendUnquotedUTF8(byteArray40, (-1270410141));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializedString0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " ");
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonFactory32);
        org.junit.Assert.assertNotNull(serializedString33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(jsonParser45);
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test586");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        java.math.BigDecimal bigDecimal73 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber(bigDecimal73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test587");
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer0 = com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.createRoot();
        int int1 = bytesToNameCanonicalizer0.maxCollisionLength();
        int int2 = bytesToNameCanonicalizer0.collisionCount();
        int int3 = bytesToNameCanonicalizer0.collisionCount();
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer6 = bytesToNameCanonicalizer0.makeChild(true, false);
        com.fasterxml.jackson.core.sym.Name name8 = bytesToNameCanonicalizer6.findName((int) (short) 10);
        int[] intArray10 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeUtf8JsNames();
        int[] intArray12 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray10, 16);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.sym.Name name14 = bytesToNameCanonicalizer6.addName("ARRAY", intArray12, (-1270474361));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bytesToNameCanonicalizer0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(bytesToNameCanonicalizer6);
        org.junit.Assert.assertNull(name8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test588");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter40.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator32.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter41);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter43 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        boolean boolean44 = nopIndenter43.isInline();
        boolean boolean45 = nopIndenter43.isInline();
        defaultPrettyPrinter41.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter43);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test589");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.InputStream inputStream37 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory34.createParser(inputStream37);
        java.io.File file39 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory34.createParser(file39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonParser38);
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test590");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.Version version81 = readerBasedJsonParser77.version();
        int int82 = readerBasedJsonParser77.getTextLength();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertNotNull(version81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test591");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        java.io.Writer writer32 = null;
        int int33 = jsonParser30.releaseBuffered(writer32);
        int int35 = jsonParser30.getValueAsInt(56319);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext36 = jsonParser30.getParsingContext();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler37 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation39 = null;
        java.lang.Throwable throwable40 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException41 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation39, throwable40);
        java.lang.String str42 = jsonParseException41.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext44 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler37, (java.lang.Object) jsonParseException41, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer45 = iOContext44.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        int int52 = mergedStream51.available();
        boolean boolean53 = mergedStream51.markSupported();
        int int54 = mergedStream51.available();
        int int55 = mergedStream51.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version57 = jsonFactory56.version();
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext59 = null;
        java.io.InputStream inputStream60 = null;
        byte[] byteArray61 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext59, inputStream60, byteArray61, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext65 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray67 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream70 = new com.fasterxml.jackson.core.io.MergedStream(iOContext65, inputStream66, byteArray67, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader74 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext58, inputStream60, byteArray67, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser75 = jsonFactory56.createParser((java.io.Reader) uTF32Reader74);
        com.fasterxml.jackson.core.JsonFactory jsonFactory77 = jsonFactory56.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString78 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int87 = serializedString78.appendQuotedUTF8(byteArray85, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser90 = jsonFactory56.createParser(byteArray85, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream93 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, (java.io.InputStream) mergedStream51, byteArray85, (int) (short) 10, 79);
        java.io.OutputStream outputStream94 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer95 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext44, outputStream94);
        int int96 = jsonParser30.releaseBuffered((java.io.Writer) uTF8Writer95);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 56319 + "'", int35 == 56319);
        org.junit.Assert.assertNotNull(jsonStreamContext36);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(textBuffer45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(version57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(jsonParser75);
        org.junit.Assert.assertNotNull(jsonFactory77);
        org.junit.Assert.assertNotNull(serializedString78);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test592");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.lang.String str79 = readerBasedJsonParser77.getCurrentName();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("a
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "astr81, "a
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test593");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        int int75 = uTF8JsonGenerator70.getFeatureMask();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeStartArray();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test594");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        int int75 = uTF8JsonGenerator70.getFeatureMask();
        com.fasterxml.jackson.core.SerializableString serializableString76 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeString(serializableString76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test595");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.SerializableString serializableString73 = uTF8JsonGenerator70._rootValueSeparator;
        int int74 = uTF8JsonGenerator70._outputEnd;
        com.fasterxml.jackson.core.ObjectCodec objectCodec75 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = uTF8JsonGenerator70.setCodec(objectCodec75);
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70._verifyPrettyValueWrite("a
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Internal error: this code path should never get executed");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(serializableString73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
        org.junit.Assert.assertNotNull(jsonGenerator76);
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test596");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        java.io.Writer writer32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory1.createJsonGenerator(writer32);
        boolean boolean34 = jsonGenerator33.isClosed();
        jsonGenerator33.writeStartObject();
        boolean boolean36 = jsonGenerator33.isClosed();
        defaultPrettyPrinter0.writeEndObject(jsonGenerator33, (int) (byte) -1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator40 = jsonFactory39.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext42 = null;
        java.io.InputStream inputStream43 = null;
        byte[] byteArray44 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream47 = new com.fasterxml.jackson.core.io.MergedStream(iOContext42, inputStream43, byteArray44, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray50 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream53 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray50, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader57 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext41, inputStream43, byteArray50, 0, 0, false);
        char[] charArray60 = new char[] { ' ', '#' };
        int int61 = uTF32Reader57.read(charArray60);
        char[] charArray65 = new char[] { ' ', '#', '4' };
        int int68 = uTF32Reader57.read(charArray65, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonFactory39.createParser((java.io.Reader) uTF32Reader57);
        java.io.Writer writer70 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator71 = jsonFactory39.createJsonGenerator(writer70);
        boolean boolean72 = jsonGenerator71.isClosed();
        jsonGenerator71.writeStartObject();
        boolean boolean74 = jsonGenerator71.isClosed();
        jsonGenerator71.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec77 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = jsonGenerator71.setCodec(objectCodec77);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter79 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter80 = defaultPrettyPrinter79.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator81 = jsonGenerator71.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter80);
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(jsonGenerator81);
        com.fasterxml.jackson.core.ObjectCodec objectCodec83 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = jsonGenerator81.setCodec(objectCodec83);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature85 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = jsonGenerator84.enable(feature85);
        com.fasterxml.jackson.core.FormatSchema formatSchema87 = null;
        boolean boolean88 = jsonGenerator86.canUseSchema(formatSchema87);
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputDecorator40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , #]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertNotNull(jsonGenerator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jsonGenerator78);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter80);
        org.junit.Assert.assertNotNull(jsonGenerator81);
        org.junit.Assert.assertNotNull(jsonGenerator84);
        org.junit.Assert.assertTrue("'" + feature85 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature85.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertNotNull(jsonGenerator86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test597");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator22 = jsonFactory0.getInputDecorator();
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory0.createJsonGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.ObjectCodec objectCodec26 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonGenerator25.setCodec(objectCodec26);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNull(inputDecorator22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertNotNull(jsonGenerator27);
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test598");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        java.io.Writer writer42 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonFactory41.createJsonGenerator(writer42);
        jsonGenerator43.writeRaw("JSON");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertNotNull(jsonGenerator43);
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test599");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        boolean boolean85 = uTF8JsonGenerator70.isClosed();
        uTF8JsonGenerator70.writeRawValue("UTF-16BE", (-69), (-1270527807));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(jsonGenerator84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test600");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation80 = readerBasedJsonParser77.getCurrentLocation();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertNotNull(jsonLocation80);
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test601");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = uTF8JsonGenerator70.getCharacterEscapes();
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int81 = serializedString72.appendQuotedUTF8(byteArray79, (int) ' ');
        int int82 = serializedString72.charLength();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator83 = uTF8JsonGenerator70.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString72);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator85 = jsonGenerator83.setFeatureMask((int) (byte) -69);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(characterEscapes71);
        org.junit.Assert.assertNotNull(serializedString72);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(jsonGenerator83);
        org.junit.Assert.assertNotNull(jsonGenerator85);
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test602");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser("");
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator24 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory0.copy();
        com.fasterxml.jackson.core.JsonToken jsonToken26 = com.fasterxml.jackson.core.JsonToken.START_OBJECT;
        boolean boolean27 = jsonToken26.isNumeric();
        boolean boolean28 = jsonToken26.isNumeric();
        byte[] byteArray29 = jsonToken26.asByteArray();
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonFactory25.createParser(byteArray29, 0, (-70702289));
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext33 = jsonParser32.getParsingContext();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNull(inputDecorator24);
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertTrue("'" + jsonToken26 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_OBJECT + "'", jsonToken26.equals(com.fasterxml.jackson.core.JsonToken.START_OBJECT));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[123]");
        org.junit.Assert.assertNotNull(jsonParser32);
        org.junit.Assert.assertNotNull(jsonStreamContext33);
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test603");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.overrideCurrentName("");
        int int80 = readerBasedJsonParser77.getTextLength();
        long long81 = readerBasedJsonParser77.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version82 = readerBasedJsonParser77.version();
        long long84 = readerBasedJsonParser77.getValueAsLong(100L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(version82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L + "'", long84 == 100L);
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test604");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.SerializableString serializableString73 = uTF8JsonGenerator70._rootValueSeparator;
        byte[] byteArray74 = uTF8JsonGenerator70._outputBuffer;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(serializableString73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, -65, 1, 0, 0]");
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test605");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.overrideCurrentName("");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext80 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str82 = readerBasedJsonParser77._handleOddName((int) (short) 100);
        readerBasedJsonParser77._tokenIncomplete = true;
        readerBasedJsonParser77.close();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNotNull(jsonReadContext80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test606");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = readerBasedJsonParser77.getCodec();
        int int80 = readerBasedJsonParser77._hashSeed;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(objectCodec79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1270339829) + "'", int80 == (-1270339829));
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test607");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeString("");
        jsonGenerator35.writeBoolean(false);
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator35);
        boolean boolean41 = jsonGenerator35.canWriteObjectId();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter42 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter42.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString45 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter46 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter42, serializableString45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = jsonGenerator35.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter42);
        jsonGenerator47.writeRaw("ARRAY");
        int int50 = jsonGenerator47.getFeatureMask();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jsonGenerator47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 79 + "'", int50 == 79);
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test608");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        java.io.OutputStream outputStream57 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer58 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext7, outputStream57);
        java.io.Writer writer60 = uTF8Writer58.append('#');
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler61 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType62 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.CONCAT_BUFFER;
        com.fasterxml.jackson.core.io.SerializedString serializedString63 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int72 = serializedString63.appendQuotedUTF8(byteArray70, (int) ' ');
        char[] charArray73 = serializedString63.asQuotedChars();
        bufferRecycler61.releaseCharBuffer(charBufferType62, charArray73);
        uTF8Writer58.write(charArray73);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertNotNull(writer60);
        org.junit.Assert.assertTrue("'" + charBufferType62 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.CONCAT_BUFFER + "'", charBufferType62.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.CONCAT_BUFFER));
        org.junit.Assert.assertNotNull(serializedString63);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[ ]");
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test609");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        boolean boolean81 = readerBasedJsonParser77.hasTextCharacters();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test610");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber("ROOT");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(jsonGenerator84);
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test611");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer85 = readerBasedJsonParser77._symbols;
        java.lang.String str86 = readerBasedJsonParser77.getValueAsString();
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder87 = readerBasedJsonParser77._getByteArrayBuilder();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77._finishString2();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(byteArrayBuilder87);
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test612");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        java.lang.Object obj35 = jsonParser30.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonLocation jsonLocation36 = jsonParser30.getCurrentLocation();
        long long37 = jsonLocation36.getByteOffset();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(jsonLocation36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test613");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        uTF8JsonGenerator70._verifyValueWrite("false");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(jsonGenerator84);
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test614");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes73;
        java.io.OutputStream outputStream75 = uTF8JsonGenerator70._outputStream;
        com.fasterxml.jackson.core.io.SerializedString serializedString76 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int85 = serializedString76.appendQuotedUTF8(byteArray83, (int) ' ');
        java.lang.String str86 = serializedString76.getValue();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = uTF8JsonGenerator70.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString76);
        uTF8JsonGenerator70._bufferRecyclable = true;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(outputStream75);
        org.junit.Assert.assertNotNull(serializedString76);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + " " + "'", str86, " ");
        org.junit.Assert.assertNotNull(jsonGenerator87);
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test615");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        com.fasterxml.jackson.core.io.SerializedString serializedString75 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int84 = serializedString75.appendQuotedUTF8(byteArray82, (int) ' ');
        uTF8JsonGenerator70._rootValueSeparator = serializedString75;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer86 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int87 = charsToNameCanonicalizer86.bucketCount();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler88 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer89 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler88);
        int int90 = textBuffer89.getCurrentSegmentSize();
        char[] charArray91 = textBuffer89.contentsAsArray();
        char[] charArray92 = textBuffer89.emptyAndGetCurrentSegment();
        char[] charArray93 = textBuffer89.getCurrentSegment();
        int int96 = charsToNameCanonicalizer86.calcHash(charArray93, (-1270527807), (-1270445007));
        // The following exception was thrown during execution in test generation
        try {
            int int98 = serializedString75.appendQuoted(charArray93, (-1270519895));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(serializedString75);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 64 + "'", int87 == 64);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[]");
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertNotNull(charArray93);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1270335275) + "'", int96 == (-1270335275));
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test616");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) (short) 100);
        boolean boolean33 = jsonParser30.requiresCustomCodec();
        com.fasterxml.jackson.core.ObjectCodec objectCodec34 = null;
        jsonParser30.setCodec(objectCodec34);
        com.fasterxml.jackson.core.JsonToken jsonToken36 = jsonParser30.nextToken();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jsonToken36);
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test617");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.JsonParser.Feature feature32 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonParser30.enable(feature32);
        com.fasterxml.jackson.core.JsonLocation jsonLocation34 = jsonParser30.getCurrentLocation();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext35 = jsonParser30.getParsingContext();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS + "'", feature32.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS));
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonLocation34);
        org.junit.Assert.assertNotNull(jsonStreamContext35);
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test618");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.JsonToken jsonToken71 = com.fasterxml.jackson.core.JsonToken.START_OBJECT;
        boolean boolean72 = jsonToken71.isNumeric();
        char[] charArray73 = jsonToken71.asCharArray();
        uTF8JsonGenerator70._charBuffer = charArray73;
        boolean boolean75 = uTF8JsonGenerator70.canWriteObjectId();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + jsonToken71 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_OBJECT + "'", jsonToken71.equals(com.fasterxml.jackson.core.JsonToken.START_OBJECT));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "{");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "{");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[{]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test619");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        boolean boolean42 = jsonFactory41.requiresPropertyOrdering();
        boolean boolean43 = jsonFactory41.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory.Feature feature44 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory41.enable(feature44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test620");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        boolean boolean42 = jsonFactory41.requiresPropertyOrdering();
        boolean boolean43 = jsonFactory41.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonParser jsonParser45 = jsonFactory41.createJsonParser("");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jsonParser45);
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test621");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator3 = jsonFactory2.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        java.io.InputStream inputStream6 = null;
        byte[] byteArray7 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream10 = new com.fasterxml.jackson.core.io.MergedStream(iOContext5, inputStream6, byteArray7, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray13 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream16 = new com.fasterxml.jackson.core.io.MergedStream(iOContext11, inputStream12, byteArray13, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader20 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext4, inputStream6, byteArray13, 0, 0, false);
        char[] charArray23 = new char[] { ' ', '#' };
        int int24 = uTF32Reader20.read(charArray23);
        char[] charArray28 = new char[] { ' ', '#', '4' };
        int int31 = uTF32Reader20.read(charArray28, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonFactory2.createParser((java.io.Reader) uTF32Reader20);
        java.io.Writer writer33 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator34 = jsonFactory2.createJsonGenerator(writer33);
        boolean boolean35 = jsonGenerator34.isClosed();
        jsonGenerator34.writeStartObject();
        boolean boolean37 = jsonGenerator34.isClosed();
        defaultPrettyPrinter1.writeEndObject(jsonGenerator34, (int) (byte) -1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator41 = jsonFactory40.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext42 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        java.io.InputStream inputStream44 = null;
        byte[] byteArray45 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream48 = new com.fasterxml.jackson.core.io.MergedStream(iOContext43, inputStream44, byteArray45, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader58 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext42, inputStream44, byteArray51, 0, 0, false);
        char[] charArray61 = new char[] { ' ', '#' };
        int int62 = uTF32Reader58.read(charArray61);
        char[] charArray66 = new char[] { ' ', '#', '4' };
        int int69 = uTF32Reader58.read(charArray66, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser70 = jsonFactory40.createParser((java.io.Reader) uTF32Reader58);
        java.io.Writer writer71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = jsonFactory40.createJsonGenerator(writer71);
        boolean boolean73 = jsonGenerator72.isClosed();
        jsonGenerator72.writeStartObject();
        boolean boolean75 = jsonGenerator72.isClosed();
        jsonGenerator72.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator79 = jsonGenerator72.setCodec(objectCodec78);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter80 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter81 = defaultPrettyPrinter80.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator82 = jsonGenerator72.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter81);
        defaultPrettyPrinter1.writeObjectFieldValueSeparator(jsonGenerator82);
        com.fasterxml.jackson.core.io.IOContext iOContext85 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonGenerator82, false);
        java.lang.Object obj86 = iOContext85.getSourceReference();
        org.junit.Assert.assertNull(inputDecorator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , #]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(jsonParser32);
        org.junit.Assert.assertNotNull(jsonGenerator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(inputDecorator41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(jsonParser70);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jsonGenerator79);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter81);
        org.junit.Assert.assertNotNull(jsonGenerator82);
        org.junit.Assert.assertNotNull(obj86);
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test622");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = readerBasedJsonParser77._parseAposName();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing ''' for name? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test623");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        com.fasterxml.jackson.core.JsonLocation jsonLocation82 = readerBasedJsonParser77.getTokenLocation();
        com.fasterxml.jackson.core.JsonLocation jsonLocation83 = readerBasedJsonParser77.getCurrentLocation();
        boolean boolean84 = readerBasedJsonParser77.hasTextCharacters();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertNotNull(jsonLocation82);
        org.junit.Assert.assertNotNull(jsonLocation83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test624");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory34.createParser("hi!");
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory34.createJsonParser("false");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertNotNull(jsonParser42);
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test625");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = defaultPrettyPrinter5.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter7.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString10 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter11 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter7, serializableString10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter12 = defaultPrettyPrinter7.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter13 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter();
        defaultPrettyPrinter7.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter13);
        boolean boolean15 = fixedSpaceIndenter13.isInline();
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator17 = jsonFactory16.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext19 = null;
        java.io.InputStream inputStream20 = null;
        byte[] byteArray21 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream24 = new com.fasterxml.jackson.core.io.MergedStream(iOContext19, inputStream20, byteArray21, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext25 = null;
        java.io.InputStream inputStream26 = null;
        byte[] byteArray27 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream30 = new com.fasterxml.jackson.core.io.MergedStream(iOContext25, inputStream26, byteArray27, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader34 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext18, inputStream20, byteArray27, 0, 0, false);
        char[] charArray37 = new char[] { ' ', '#' };
        int int38 = uTF32Reader34.read(charArray37);
        char[] charArray42 = new char[] { ' ', '#', '4' };
        int int45 = uTF32Reader34.read(charArray42, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser46 = jsonFactory16.createParser((java.io.Reader) uTF32Reader34);
        java.io.Writer writer47 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory16.createJsonGenerator(writer47);
        boolean boolean49 = jsonGenerator48.isClosed();
        jsonGenerator48.writeStartObject();
        boolean boolean51 = jsonGenerator48.isClosed();
        jsonGenerator48.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec54 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator48.setCodec(objectCodec54);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter56 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter57 = defaultPrettyPrinter56.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator58 = jsonGenerator48.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter57);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter59 = jsonGenerator58.getPrettyPrinter();
        jsonGenerator58.writeRaw("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature62 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator64 = jsonGenerator58.configure(feature62, false);
        fixedSpaceIndenter13.writeIndentation(jsonGenerator58, 2);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = defaultPrettyPrinter6.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter13);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter68 = defaultPrettyPrinter4.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter13);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter69 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter69.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int81 = serializedString72.appendQuotedUTF8(byteArray79, (int) ' ');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter82 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter69, (com.fasterxml.jackson.core.SerializableString) serializedString72);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter83 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        boolean boolean84 = nopIndenter83.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = defaultPrettyPrinter82.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter83);
        defaultPrettyPrinter4.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter83);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter6);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(inputDecorator17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , #]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(jsonParser46);
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter57);
        org.junit.Assert.assertNotNull(jsonGenerator58);
        org.junit.Assert.assertNotNull(prettyPrinter59);
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature62.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonGenerator64);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter67);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter68);
        org.junit.Assert.assertNotNull(serializedString72);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter85);
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test626");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long80 = readerBasedJsonParser77.getTokenCharacterOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean81 = readerBasedJsonParser77.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test627");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.ObjectCodec objectCodec51 = jsonFactory0.getCodec();
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator52 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory53 = jsonFactory0.setOutputDecorator(outputDecorator52);
        com.fasterxml.jackson.core.io.IOContext iOContext54 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext61 = null;
        java.io.InputStream inputStream62 = null;
        byte[] byteArray63 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream66 = new com.fasterxml.jackson.core.io.MergedStream(iOContext61, inputStream62, byteArray63, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader70 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext54, inputStream56, byteArray63, 0, 0, false);
        char[] charArray73 = new char[] { ' ', '#' };
        int int74 = uTF32Reader70.read(charArray73);
        boolean boolean75 = uTF32Reader70.markSupported();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler76 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType77 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
        char[] charArray78 = bufferRecycler76.allocCharBuffer(charBufferType77);
        int int79 = uTF32Reader70.read(charArray78);
        com.fasterxml.jackson.core.JsonParser jsonParser80 = jsonFactory53.createJsonParser((java.io.Reader) uTF32Reader70);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext81 = jsonParser80.getParsingContext();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(objectCodec51);
        org.junit.Assert.assertNotNull(jsonFactory53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[ , #]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + charBufferType77 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER + "'", charBufferType77.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(jsonParser80);
        org.junit.Assert.assertNotNull(jsonStreamContext81);
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test628");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        jsonGenerator32.writeObjectFieldStart("");
        jsonGenerator32.writeObjectFieldStart("hi!");
        jsonGenerator32.writeStringField("ARRAY", "JSON");
        java.lang.Object obj40 = jsonGenerator32.getOutputTarget();
        int int41 = jsonGenerator32.getFeatureMask();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator32.useDefaultPrettyPrinter();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 79 + "'", int41 == 79);
        org.junit.Assert.assertNotNull(jsonGenerator42);
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test629");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        jsonGenerator37.writeNumberField("[Source: false; line: 1, column: 0]", (int) (short) 100);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature43 = com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonGenerator37.enable(feature43);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter45 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter45.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter48 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter45);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter45);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter45.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter51 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        boolean boolean52 = fixedSpaceIndenter51.isInline();
        boolean boolean53 = fixedSpaceIndenter51.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter50.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter51);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator44.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter50);
        jsonGenerator44.writeRawValue("ARRAY");
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII + "'", feature43.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII));
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test630");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.Version version33 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory0.createParser(byteArray36);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler41 = jsonFactory0._getBufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler42 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType43 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
        char[] charArray44 = bufferRecycler42.allocCharBuffer(charBufferType43);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler45 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType46 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
        char[] charArray47 = bufferRecycler45.allocCharBuffer(charBufferType46);
        com.fasterxml.jackson.core.io.SerializedString serializedString48 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int57 = serializedString48.appendQuotedUTF8(byteArray55, (int) ' ');
        char[] charArray58 = serializedString48.asQuotedChars();
        bufferRecycler42.releaseCharBuffer(charBufferType46, charArray58);
        char[] charArray60 = bufferRecycler41.allocCharBuffer(charBufferType46);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertNotNull(bufferRecycler41);
        org.junit.Assert.assertTrue("'" + charBufferType43 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER + "'", charBufferType43.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + charBufferType46 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER + "'", charBufferType46.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER));
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(serializedString48);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ ]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test631");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        com.fasterxml.jackson.core.JsonLocation jsonLocation82 = readerBasedJsonParser77.getTokenLocation();
        java.lang.String str83 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.ObjectCodec objectCodec84 = null;
        readerBasedJsonParser77.setCodec(objectCodec84);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertNotNull(jsonLocation82);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test632");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber((short) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test633");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.ObjectCodec objectCodec32 = null;
        jsonParser30.setCodec(objectCodec32);
        com.fasterxml.jackson.core.FormatSchema formatSchema34 = jsonParser30.getSchema();
        com.fasterxml.jackson.core.ObjectCodec objectCodec35 = null;
        jsonParser30.setCodec(objectCodec35);
        java.lang.String str37 = jsonParser30.getCurrentName();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(formatSchema34);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test634");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer85 = readerBasedJsonParser77._symbols;
        java.lang.String str86 = readerBasedJsonParser77.getValueAsString();
        com.fasterxml.jackson.core.JsonToken jsonToken87 = readerBasedJsonParser77.nextToken();
        int int88 = readerBasedJsonParser77.getTextOffset();
        java.io.Reader reader89 = readerBasedJsonParser77._reader;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(jsonToken87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNull(reader89);
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test635");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createJsonParser("JSON");
        double double35 = jsonParser34.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser37 = jsonParser34.setFeatureMask((int) '#');
        boolean boolean38 = jsonParser37.getValueAsBoolean();
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonParser37.skipChildren();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jsonParser39);
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test636");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        com.fasterxml.jackson.core.Version version85 = readerBasedJsonParser77.version();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(version85);
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test637");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.SerializableString serializableString73 = uTF8JsonGenerator70._rootValueSeparator;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumberField("[Source: false; line: 1, column: 0]", 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(serializableString73);
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test638");
        com.fasterxml.jackson.core.sym.Name name0 = com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.getEmptyName();
        boolean boolean3 = name0.equals((int) (byte) -69, (int) (byte) 1);
        java.lang.String str4 = name0.toString();
        int[] intArray5 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeLatin1();
        int[] intArray7 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray5, 13);
        boolean boolean9 = name0.equals(intArray5, 1640492919);
        org.junit.Assert.assertNotNull(name0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test639");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77._reportInvalidToken("com.fasterxml.jackson.core.JsonParseException: ARRAY");
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token 'com.fasterxml.jackson.core.JsonParseException: ARRAY': was expecting ? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test640");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        int[] intArray90 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeComment();
        uTF8JsonGenerator70._outputEscapes = intArray90;
        byte[] byteArray92 = uTF8JsonGenerator70._outputBuffer;
        uTF8JsonGenerator70._verifyValueWrite("[Source: ALLOW_COMMENTS; line: 35, column: 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 1, -65, 1, 0, 0]");
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test641");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.SerializableString serializableString73 = uTF8JsonGenerator70._rootValueSeparator;
        int int74 = uTF8JsonGenerator70._outputEnd;
        com.fasterxml.jackson.core.ObjectCodec objectCodec75 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = uTF8JsonGenerator70.setCodec(objectCodec75);
        java.math.BigInteger bigInteger77 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber(bigInteger77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(serializableString73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
        org.junit.Assert.assertNotNull(jsonGenerator76);
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test642");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        com.fasterxml.jackson.core.JsonParser.Feature feature81 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        com.fasterxml.jackson.core.JsonParser jsonParser82 = readerBasedJsonParser77.enable(feature81);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + feature81 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature81.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertNotNull(jsonParser82);
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test643");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.Version version81 = readerBasedJsonParser77.version();
        int int82 = readerBasedJsonParser77.getTextLength();
        int int83 = readerBasedJsonParser77.getFeatureMask();
        readerBasedJsonParser77._skipCR();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertNotNull(version81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-65) + "'", int83 == (-65));
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test644");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        jsonGenerator32.writeObjectFieldStart("");
        jsonGenerator32.writeObjectFieldStart("hi!");
        jsonGenerator32.writeNumber((int) (byte) -1);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test645");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator3 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.JsonFactory.Feature feature4 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory0.enable(feature4);
        com.fasterxml.jackson.core.io.SerializedString serializedString6 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int15 = serializedString6.appendQuotedUTF8(byteArray13, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser18 = jsonFactory0.createParser(byteArray13, 404002377, (-70702289));
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator3);
        org.junit.Assert.assertTrue("'" + feature4 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature4.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertNotNull(serializedString6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(jsonParser18);
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test646");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter();
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter6);
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator9 = jsonFactory8.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray13 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream16 = new com.fasterxml.jackson.core.io.MergedStream(iOContext11, inputStream12, byteArray13, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext17 = null;
        java.io.InputStream inputStream18 = null;
        byte[] byteArray19 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream22 = new com.fasterxml.jackson.core.io.MergedStream(iOContext17, inputStream18, byteArray19, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader26 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext10, inputStream12, byteArray19, 0, 0, false);
        char[] charArray29 = new char[] { ' ', '#' };
        int int30 = uTF32Reader26.read(charArray29);
        char[] charArray34 = new char[] { ' ', '#', '4' };
        int int37 = uTF32Reader26.read(charArray34, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory8.createParser((java.io.Reader) uTF32Reader26);
        java.io.Writer writer39 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory8.createJsonGenerator(writer39);
        boolean boolean41 = jsonGenerator40.isClosed();
        jsonGenerator40.writeStartObject();
        boolean boolean43 = jsonGenerator40.isClosed();
        jsonGenerator40.writeNumber(100.0d);
        jsonGenerator40.writeNumber("com.fasterxml.jackson.core.JsonParseException: hi!");
        defaultPrettyPrinter0.writeEndObject(jsonGenerator40, (-1270517243));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNull(inputDecorator9);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test647");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.Version version74 = uTF8JsonGenerator70.version();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeObjectFieldStart("N/A");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(version74);
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test648");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes73;
        uTF8JsonGenerator70.writeRawValue("");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test649");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        java.io.OutputStream outputStream57 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer58 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext7, outputStream57);
        uTF8Writer58.flush();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test650");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes73;
        java.io.OutputStream outputStream75 = uTF8JsonGenerator70._outputStream;
        com.fasterxml.jackson.core.SerializableString serializableString76 = uTF8JsonGenerator70._rootValueSeparator;
        int int77 = uTF8JsonGenerator70.getHighestEscapedChar();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(outputStream75);
        org.junit.Assert.assertNotNull(serializableString76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test651");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.JsonLocation jsonLocation32 = jsonParser30.getTokenLocation();
        java.lang.String str33 = jsonParser30.nextTextValue();
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator35 = jsonFactory34.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext36 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        java.io.InputStream inputStream38 = null;
        byte[] byteArray39 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream42 = new com.fasterxml.jackson.core.io.MergedStream(iOContext37, inputStream38, byteArray39, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        java.io.InputStream inputStream44 = null;
        byte[] byteArray45 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream48 = new com.fasterxml.jackson.core.io.MergedStream(iOContext43, inputStream44, byteArray45, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader52 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext36, inputStream38, byteArray45, 0, 0, false);
        char[] charArray55 = new char[] { ' ', '#' };
        int int56 = uTF32Reader52.read(charArray55);
        char[] charArray60 = new char[] { ' ', '#', '4' };
        int int63 = uTF32Reader52.read(charArray60, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory34.createParser((java.io.Reader) uTF32Reader52);
        java.io.Writer writer65 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonFactory34.createJsonGenerator(writer65);
        com.fasterxml.jackson.core.ObjectCodec objectCodec67 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory68 = jsonFactory34.setCodec(objectCodec67);
        java.io.Writer writer69 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator70 = jsonFactory68.createGenerator(writer69);
        java.io.Writer writer71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = jsonFactory68.createGenerator(writer71);
        com.fasterxml.jackson.core.JsonParser jsonParser74 = jsonFactory68.createParser("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature75 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        boolean boolean76 = jsonFactory68.isEnabled(feature75);
        java.io.OutputStream outputStream77 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = jsonFactory68.createGenerator(outputStream77);
        com.fasterxml.jackson.core.JsonParser.Feature feature79 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        boolean boolean80 = feature79.enabledByDefault();
        boolean boolean81 = feature79.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory82 = jsonFactory68.enable(feature79);
        com.fasterxml.jackson.core.JsonParser jsonParser83 = jsonParser30.enable(feature79);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(jsonLocation32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(inputDecorator35);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ , #]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertNotNull(jsonFactory68);
        org.junit.Assert.assertNotNull(jsonGenerator70);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonParser74);
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature75.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(jsonGenerator78);
        org.junit.Assert.assertTrue("'" + feature79 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS + "'", feature79.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jsonFactory82);
        org.junit.Assert.assertNotNull(jsonParser83);
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test652");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        com.fasterxml.jackson.core.Version version90 = uTF8JsonGenerator70.version();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes91 = uTF8JsonGenerator70._characterEscapes;
        com.fasterxml.jackson.core.ObjectCodec objectCodec92 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator93 = uTF8JsonGenerator70.setCodec(objectCodec92);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(version90);
        org.junit.Assert.assertNull(characterEscapes91);
        org.junit.Assert.assertNotNull(jsonGenerator93);
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test653");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator22 = jsonFactory0.getInputDecorator();
        java.io.InputStream inputStream23 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory0.createParser(inputStream23);
        double double25 = jsonParser24.getValueAsDouble();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNull(inputDecorator22);
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test654");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        boolean boolean39 = jsonGenerator38.isClosed();
        jsonGenerator38.writeNumber((float) 55296);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test655");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.Version version81 = readerBasedJsonParser77.version();
        readerBasedJsonParser77._skipCR();
        readerBasedJsonParser77._skipCR();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertNotNull(version81);
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test656");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        int int81 = readerBasedJsonParser77.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation82 = readerBasedJsonParser77.getCurrentLocation();
        java.lang.String str83 = readerBasedJsonParser77.getText();
        boolean boolean84 = readerBasedJsonParser77.requiresCustomCodec();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(jsonLocation82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test657");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        com.fasterxml.jackson.core.FormatSchema formatSchema32 = null;
        boolean boolean33 = jsonParser30.canUseSchema(formatSchema32);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonParser30.setFeatureMask((int) (short) 100);
        java.io.OutputStream outputStream36 = null;
        int int37 = jsonParser35.releaseBuffered(outputStream36);
        jsonParser35.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: hi!");
        boolean boolean40 = jsonParser35.canReadObjectId();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test658");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = uTF8JsonGenerator70.getCharacterEscapes();
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int81 = serializedString72.appendQuotedUTF8(byteArray79, (int) ' ');
        int int82 = serializedString72.charLength();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator83 = uTF8JsonGenerator70.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString72);
        java.lang.String str84 = serializedString72.getValue();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(characterEscapes71);
        org.junit.Assert.assertNotNull(serializedString72);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(jsonGenerator83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + " " + "'", str84, " ");
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test659");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        com.fasterxml.jackson.core.JsonLocation jsonLocation82 = readerBasedJsonParser77.getTokenLocation();
        com.fasterxml.jackson.core.JsonLocation jsonLocation83 = readerBasedJsonParser77.getCurrentLocation();
        int int85 = readerBasedJsonParser77.getValueAsInt((-1482307515));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertNotNull(jsonLocation82);
        org.junit.Assert.assertNotNull(jsonLocation83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1482307515) + "'", int85 == (-1482307515));
    }
}
