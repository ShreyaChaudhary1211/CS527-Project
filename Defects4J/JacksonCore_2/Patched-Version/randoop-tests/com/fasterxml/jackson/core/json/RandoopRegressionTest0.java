package com.fasterxml.jackson.core.json;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test001");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long33 = jsonParser30.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@1a3761a; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test002");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeEndObject();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an object but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test003");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        // The following exception was thrown during execution in test generation
        try {
            uTF32Reader18.freeBuffers();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test004");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        jsonGenerator32.writeOmittedField("");
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator36 = jsonFactory35.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext38 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray40 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext38, inputStream39, byteArray40, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader53 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext37, inputStream39, byteArray46, 0, 0, false);
        char[] charArray56 = new char[] { ' ', '#' };
        int int57 = uTF32Reader53.read(charArray56);
        char[] charArray61 = new char[] { ' ', '#', '4' };
        int int64 = uTF32Reader53.read(charArray61, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser65 = jsonFactory35.createParser((java.io.Reader) uTF32Reader53);
        int int67 = jsonParser65.nextIntValue((int) 'a');
        jsonParser65.close();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.copyCurrentStructure(jsonParser65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNull(inputDecorator36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , #]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(jsonParser65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test005");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonFactory.Feature feature33 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.disable(feature33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test006");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        jsonGenerator32.writeObjectFieldStart("");
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator36 = jsonFactory35.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext38 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray40 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext38, inputStream39, byteArray40, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader53 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext37, inputStream39, byteArray46, 0, 0, false);
        char[] charArray56 = new char[] { ' ', '#' };
        int int57 = uTF32Reader53.read(charArray56);
        char[] charArray61 = new char[] { ' ', '#', '4' };
        int int64 = uTF32Reader53.read(charArray61, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser65 = jsonFactory35.createParser((java.io.Reader) uTF32Reader53);
        java.lang.Object obj66 = jsonParser65.getTypeId();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.copyCurrentStructure(jsonParser65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNull(inputDecorator36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , #]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(jsonParser65);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test007");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.io.IOContext iOContext31 = null;
        java.io.InputStream inputStream32 = null;
        byte[] byteArray33 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream36 = new com.fasterxml.jackson.core.io.MergedStream(iOContext31, inputStream32, byteArray33, 0, (int) (short) -1);
        int int37 = mergedStream36.available();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory0.createParser((java.io.InputStream) mergedStream36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test008");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType20 = jsonParser19.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@63c45d8e; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test009");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        char[] charArray42 = new char[] { 'a', 'a', 'a', '4' };
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeRaw(charArray42, (int) (byte) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "aaa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "aaa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a, a, a, 4]");
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test010");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        char[] charArray32 = jsonParser30.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean33 = jsonParser30.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(charArray32);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test011");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            long long51 = jsonParser50.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: [B@16e9da73; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test012");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.Base64Variant base64Variant32 = null;
        java.io.OutputStream outputStream33 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = jsonParser30.readBinaryValue(base64Variant32, outputStream33);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@54341e7e; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test013");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.io.IOContext iOContext51 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray53 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext51, inputStream52, byteArray53, 0, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser57 = jsonFactory0.createJsonParser((java.io.InputStream) mergedStream56);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test014");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.format.InputAccessor inputAccessor33 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.format.MatchStrength matchStrength34 = jsonFactory0.hasFormat(inputAccessor33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test015");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        java.io.File file22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser(file22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test016");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createJsonParser("JSON");
        java.io.File file35 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding36 = com.fasterxml.jackson.core.JsonEncoding.UTF32_LE;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory0.createJsonGenerator(file35, jsonEncoding36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertTrue("'" + jsonEncoding36 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_LE + "'", jsonEncoding36.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_LE));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test017");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        com.fasterxml.jackson.core.SerializableString serializableString40 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonGenerator37.setRootValueSeparator(serializableString40);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator41.writeEndArray();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an ARRAY but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jsonGenerator41);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test018");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        java.io.File file39 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding40 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonFactory34.createGenerator(file39, jsonEncoding40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test019");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext36 = jsonGenerator32.getOutputContext();
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator38 = jsonFactory37.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader55 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext39, inputStream41, byteArray48, 0, 0, false);
        char[] charArray58 = new char[] { ' ', '#' };
        int int59 = uTF32Reader55.read(charArray58);
        char[] charArray63 = new char[] { ' ', '#', '4' };
        int int66 = uTF32Reader55.read(charArray63, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser67 = jsonFactory37.createParser((java.io.Reader) uTF32Reader55);
        int int69 = jsonParser67.nextIntValue((int) 'a');
        int int70 = jsonParser67.getFeatureMask();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.copyCurrentEvent(jsonParser67);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No current event to copy");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonStreamContext36);
        org.junit.Assert.assertNull(inputDecorator38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ , #]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(jsonParser67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test020");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = jsonParser19.readBinaryValue(outputStream20);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@22c928f8; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test021");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        jsonGenerator36.writeArrayFieldStart("");
        jsonGenerator36.writeNumberField("hi!", (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator36.writeTypeId((java.lang.Object) 0);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Type Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test022");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.JsonLocation jsonLocation32 = jsonParser30.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            short short33 = jsonParser30.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@35710662; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(jsonLocation32);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test023");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.io.IOContext iOContext31 = null;
        java.io.InputStream inputStream32 = null;
        byte[] byteArray33 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream36 = new com.fasterxml.jackson.core.io.MergedStream(iOContext31, inputStream32, byteArray33, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser37 = jsonFactory0.createJsonParser(inputStream32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean38 = jsonParser37.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(jsonParser37);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test024");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        java.lang.Object obj35 = jsonParser30.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            short short36 = jsonParser30.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@105e3a0f; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test025");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.Version version33 = jsonFactory0.version();
        com.fasterxml.jackson.core.format.InputAccessor inputAccessor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.format.MatchStrength matchStrength35 = jsonFactory0.hasFormat(inputAccessor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(version33);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test026");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number32 = jsonParser30.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@4d536903; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test027");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        com.fasterxml.jackson.core.SerializableString serializableString40 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonGenerator37.setRootValueSeparator(serializableString40);
        jsonGenerator41.writeRawValue("JSON");
        jsonGenerator41.writeRaw('4');
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator41.writeRaw("hi!", (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jsonGenerator41);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test028");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeRaw("hi!", (-1), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test029");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        java.io.Writer writer32 = null;
        int int33 = jsonParser30.releaseBuffered(writer32);
        int int35 = jsonParser30.getValueAsInt(56319);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext36 = jsonParser30.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType37 = jsonParser30.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@43fd077f; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 56319 + "'", int35 == 56319);
        org.junit.Assert.assertNotNull(jsonStreamContext36);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test030");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer20 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int21 = charsToNameCanonicalizer20.collisionCount();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser22 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext0, (int) (byte) -17, (java.io.Reader) uTF32Reader18, objectCodec19, charsToNameCanonicalizer20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test031");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeString("");
        jsonGenerator35.writeBoolean(false);
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator35);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator35.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test032");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        com.fasterxml.jackson.core.Version version34 = jsonParser30.version();
        com.fasterxml.jackson.core.Base64Variant base64Variant35 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = jsonParser30.getBinaryValue(base64Variant35);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@5cef7bcf; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(version34);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test033");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        jsonGenerator36.writeArrayFieldStart("");
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        int int45 = mergedStream44.available();
        boolean boolean46 = mergedStream44.markSupported();
        int int47 = mergedStream44.available();
        // The following exception was thrown during execution in test generation
        try {
            int int49 = jsonGenerator36.writeBinary((java.io.InputStream) mergedStream44, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test034");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory0.setRootValueSeparator("");
        java.io.File file22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory21.createJsonParser(file22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertNotNull(jsonFactory21);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test035");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        boolean boolean32 = jsonParser30.isExpectedStartArrayToken();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test036");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.io.IOContext iOContext53 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext54 = null;
        java.io.InputStream inputStream55 = null;
        byte[] byteArray56 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream59 = new com.fasterxml.jackson.core.io.MergedStream(iOContext54, inputStream55, byteArray56, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext60 = null;
        java.io.InputStream inputStream61 = null;
        byte[] byteArray62 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext60, inputStream61, byteArray62, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader69 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext53, inputStream55, byteArray62, 0, 0, false);
        char[] charArray72 = new char[] { ' ', '#' };
        int int73 = uTF32Reader69.read(charArray72);
        char[] charArray77 = new char[] { ' ', '#', '4' };
        int int80 = uTF32Reader69.read(charArray77, (int) (short) 100, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator52.writeRaw(charArray77, (int) ' ', 56319);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , #]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test037");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator38 = jsonFactory37.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader55 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext39, inputStream41, byteArray48, 0, 0, false);
        char[] charArray58 = new char[] { ' ', '#' };
        int int59 = uTF32Reader55.read(charArray58);
        char[] charArray63 = new char[] { ' ', '#', '4' };
        int int66 = uTF32Reader55.read(charArray63, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser67 = jsonFactory37.createParser((java.io.Reader) uTF32Reader55);
        java.lang.Object obj68 = jsonParser67.getTypeId();
        com.fasterxml.jackson.core.JsonLocation jsonLocation69 = jsonParser67.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator36.writeObject((java.lang.Object) jsonParser67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.json.ReaderBasedJsonParser)");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNull(inputDecorator38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ , #]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(jsonParser67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(jsonLocation69);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test038");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createJsonParser("JSON");
        // The following exception was thrown during execution in test generation
        try {
            int int36 = jsonParser34.nextIntValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token 'JSON': was expecting ? at [Source: java.io.StringReader@2d14e714; line: 1, column: 9]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonParser34);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test039");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        java.lang.Object obj35 = jsonParser30.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature36 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean37 = jsonParser30.isEnabled(feature36);
        boolean boolean38 = feature36.enabledByDefault();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + feature36 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature36.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test040");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        long long31 = jsonParser30.getValueAsLong();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test041");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature53 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = jsonFactory0.enable(feature53);
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        int int61 = mergedStream60.available();
        boolean boolean62 = mergedStream60.markSupported();
        mergedStream60.mark(100);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser65 = jsonFactory0.createParser((java.io.InputStream) mergedStream60);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature53.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test042");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        com.fasterxml.jackson.core.JsonLocation jsonLocation34 = jsonParser30.getCurrentLocation();
        // The following exception was thrown during execution in test generation
        try {
            byte byte35 = jsonParser30.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@30630431; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(jsonLocation34);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test043");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.Version version33 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory0.createParser(byteArray36);
        java.lang.Object obj41 = jsonParser40.getInputSource();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test044");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        java.lang.Object obj35 = jsonParser30.getEmbeddedObject();
        // The following exception was thrown during execution in test generation
        try {
            byte byte36 = jsonParser30.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@6303315b; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test045");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        char[] charArray32 = jsonParser30.getTextCharacters();
        com.fasterxml.jackson.core.JsonParser.Feature feature33 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonParser30.disable(feature33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(charArray32);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test046");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number33 = jsonParser30.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@5e6ae5de; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test047");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = jsonFactory38.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray43 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream46 = new com.fasterxml.jackson.core.io.MergedStream(iOContext41, inputStream42, byteArray43, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        java.io.InputStream inputStream48 = null;
        byte[] byteArray49 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream52 = new com.fasterxml.jackson.core.io.MergedStream(iOContext47, inputStream48, byteArray49, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader56 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext40, inputStream42, byteArray49, 0, 0, false);
        char[] charArray59 = new char[] { ' ', '#' };
        int int60 = uTF32Reader56.read(charArray59);
        char[] charArray64 = new char[] { ' ', '#', '4' };
        int int67 = uTF32Reader56.read(charArray64, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser68 = jsonFactory38.createParser((java.io.Reader) uTF32Reader56);
        java.io.Writer writer69 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator70 = jsonFactory38.createJsonGenerator(writer69);
        com.fasterxml.jackson.core.io.IOContext iOContext71 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        java.io.InputStream inputStream73 = null;
        byte[] byteArray74 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream77 = new com.fasterxml.jackson.core.io.MergedStream(iOContext72, inputStream73, byteArray74, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext78 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray80 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream83 = new com.fasterxml.jackson.core.io.MergedStream(iOContext78, inputStream79, byteArray80, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader87 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext71, inputStream73, byteArray80, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser88 = jsonFactory38.createParser(byteArray80);
        jsonGenerator35.writeBinary(byteArray80);
        defaultPrettyPrinter0.writeStartArray(jsonGenerator35);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator91 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter0.writeEndArray(jsonGenerator91, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputDecorator39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ , #]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(jsonParser68);
        org.junit.Assert.assertNotNull(jsonGenerator70);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(jsonParser88);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test048");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int65 = serializedString56.appendQuotedUTF8(byteArray63, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonGenerator52.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString56);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator52.writeObjectRef((java.lang.Object) 0L);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Object Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(serializedString56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator66);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test049");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        com.fasterxml.jackson.core.FormatSchema formatSchema32 = null;
        boolean boolean33 = jsonParser30.canUseSchema(formatSchema32);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger34 = jsonParser30.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@5b09f18d; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test050");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createJsonParser("JSON");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature35 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonFactory jsonFactory36 = jsonFactory0.enable(feature35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonParser34);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test051");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createJsonParser("JSON");
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes35 = jsonFactory0.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonLocation jsonLocation39 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) characterEscapes35, (long) (short) 100, (int) '4', 2000);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNull(characterEscapes35);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test052");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        com.fasterxml.jackson.core.FormatSchema formatSchema32 = null;
        boolean boolean33 = jsonParser30.canUseSchema(formatSchema32);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonParser30.setFeatureMask((int) (short) 100);
        int int36 = jsonParser30.getFeatureMask();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test053");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator32 = jsonFactory31.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        char[] charArray52 = new char[] { ' ', '#' };
        int int53 = uTF32Reader49.read(charArray52);
        char[] charArray57 = new char[] { ' ', '#', '4' };
        int int60 = uTF32Reader49.read(charArray57, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonFactory31.createParser((java.io.Reader) uTF32Reader49);
        int int63 = jsonParser61.nextIntValue((int) 'a');
        int int64 = jsonParser61.getFeatureMask();
        double double65 = jsonParser61.getValueAsDouble();
        java.lang.Object obj66 = jsonParser61.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature67 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean68 = jsonParser61.isEnabled(feature67);
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonParser30.enable(feature67);
        int int71 = jsonParser69.getValueAsInt(55296);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(inputDecorator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , #]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature67.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 55296 + "'", int71 == 55296);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test054");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.TreeNode treeNode40 = null;
        jsonGenerator39.writeTree(treeNode40);
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray52 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream55 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray52, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader59 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext43, inputStream45, byteArray52, 0, 0, false);
        jsonGenerator39.writeBinaryField("", byteArray52);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test055");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature38 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean39 = jsonGenerator35.isEnabled(feature38);
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(jsonGenerator35);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator42 = jsonFactory41.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray52 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream55 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray52, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader59 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext43, inputStream45, byteArray52, 0, 0, false);
        char[] charArray62 = new char[] { ' ', '#' };
        int int63 = uTF32Reader59.read(charArray62);
        char[] charArray67 = new char[] { ' ', '#', '4' };
        int int70 = uTF32Reader59.read(charArray67, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser71 = jsonFactory41.createParser((java.io.Reader) uTF32Reader59);
        int int73 = jsonParser71.nextIntValue((int) 'a');
        jsonParser71.close();
        com.fasterxml.jackson.core.JsonLocation jsonLocation75 = jsonParser71.getCurrentLocation();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator35.copyCurrentEvent(jsonParser71);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No current event to copy");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature38.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(inputDecorator42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ , #]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(jsonParser71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
        org.junit.Assert.assertNotNull(jsonLocation75);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test056");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        java.io.Writer writer32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory1.createJsonGenerator(writer32);
        boolean boolean34 = jsonGenerator33.isClosed();
        jsonGenerator33.writeStartObject();
        boolean boolean36 = jsonGenerator33.isClosed();
        defaultPrettyPrinter0.writeEndObject(jsonGenerator33, (int) (byte) -1);
        com.fasterxml.jackson.core.FormatSchema formatSchema39 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator33.setSchema(formatSchema39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test057");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        java.io.InputStream inputStream22 = null;
        byte[] byteArray23 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream26 = new com.fasterxml.jackson.core.io.MergedStream(iOContext21, inputStream22, byteArray23, 0, (int) (short) -1);
        int int27 = mergedStream26.available();
        boolean boolean28 = mergedStream26.markSupported();
        int int29 = mergedStream26.available();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createJsonParser((java.io.InputStream) mergedStream26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test058");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int12 = serializedString3.appendQuotedUTF8(byteArray10, (int) ' ');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter13 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, (com.fasterxml.jackson.core.SerializableString) serializedString3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator15 = jsonFactory14.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext16 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext17 = null;
        java.io.InputStream inputStream18 = null;
        byte[] byteArray19 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream22 = new com.fasterxml.jackson.core.io.MergedStream(iOContext17, inputStream18, byteArray19, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext23 = null;
        java.io.InputStream inputStream24 = null;
        byte[] byteArray25 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream28 = new com.fasterxml.jackson.core.io.MergedStream(iOContext23, inputStream24, byteArray25, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader32 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext16, inputStream18, byteArray25, 0, 0, false);
        char[] charArray35 = new char[] { ' ', '#' };
        int int36 = uTF32Reader32.read(charArray35);
        char[] charArray40 = new char[] { ' ', '#', '4' };
        int int43 = uTF32Reader32.read(charArray40, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser44 = jsonFactory14.createParser((java.io.Reader) uTF32Reader32);
        java.io.Writer writer45 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator46 = jsonFactory14.createJsonGenerator(writer45);
        com.fasterxml.jackson.core.ObjectCodec objectCodec47 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory48 = jsonFactory14.setCodec(objectCodec47);
        java.io.Writer writer49 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = jsonFactory48.createGenerator(writer49);
        defaultPrettyPrinter0.writeRootValueSeparator(jsonGenerator50);
        org.junit.Assert.assertNotNull(serializedString3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(inputDecorator15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , #]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(jsonParser44);
        org.junit.Assert.assertNotNull(jsonGenerator46);
        org.junit.Assert.assertNotNull(jsonFactory48);
        org.junit.Assert.assertNotNull(jsonGenerator50);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test059");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean35 = jsonParser30.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test060");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.ObjectCodec objectCodec32 = null;
        jsonParser30.setCodec(objectCodec32);
        com.fasterxml.jackson.core.Version version34 = jsonParser30.version();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(version34);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test061");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        com.fasterxml.jackson.core.Version version34 = jsonParser30.version();
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonParser30.skipChildren();
        java.io.OutputStream outputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = jsonParser35.readBinaryValue(outputStream36);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@effd056; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNotNull(jsonParser35);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test062");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter40.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator32.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter41);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter41.writeEndArray(jsonGenerator43, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(jsonGenerator42);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test063");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        jsonGenerator32.writeOmittedField("");
        com.fasterxml.jackson.core.io.IOContext iOContext35 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray37 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream40 = new com.fasterxml.jackson.core.io.MergedStream(iOContext35, inputStream36, byteArray37, 0, (int) (short) -1);
        int int41 = mergedStream40.available();
        boolean boolean42 = mergedStream40.markSupported();
        mergedStream40.mark(100);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = jsonGenerator32.writeBinary((java.io.InputStream) mergedStream40, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test064");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        com.fasterxml.jackson.core.JsonFactory.Feature feature39 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = jsonFactory34.isEnabled(feature39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test065");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        jsonGenerator36.writeArrayFieldStart("");
        jsonGenerator36.writeNumberField("hi!", (double) '#');
        jsonGenerator36.writeArrayFieldStart("hi!");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test066");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory34.createParser("hi!");
        java.net.URL uRL41 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory34.createJsonParser(uRL41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNotNull(jsonParser40);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test067");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        boolean boolean38 = jsonGenerator35.isClosed();
        jsonGenerator35.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator35.setCodec(objectCodec41);
        fixedSpaceIndenter1.writeIndentation(jsonGenerator35, 55296);
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext52 = null;
        java.io.InputStream inputStream53 = null;
        byte[] byteArray54 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream57 = new com.fasterxml.jackson.core.io.MergedStream(iOContext52, inputStream53, byteArray54, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader61 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext45, inputStream47, byteArray54, 0, 0, false);
        char[] charArray64 = new char[] { ' ', '#' };
        int int65 = uTF32Reader61.read(charArray64);
        char[] charArray69 = new char[] { ' ', '#', '4' };
        int int72 = uTF32Reader61.read(charArray69, (int) (short) 100, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator35.writeRaw(charArray69, (int) (byte) -1, (-1270536137));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , #]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test068");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonParser30.setFeatureMask(64);
        com.fasterxml.jackson.core.Base64Variant base64Variant37 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray38 = jsonParser30.getBinaryValue(base64Variant37);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@48722a0a; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser36);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test069");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser("");
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator24 = jsonFactory0.getInputDecorator();
        java.io.File file25 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding26 = com.fasterxml.jackson.core.JsonEncoding.UTF32_LE;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator27 = jsonFactory0.createJsonGenerator(file25, jsonEncoding26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNull(inputDecorator24);
        org.junit.Assert.assertTrue("'" + jsonEncoding26 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_LE + "'", jsonEncoding26.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_LE));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test070");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.JsonFactory.Feature feature37 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.enable(feature37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test071");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory38.setInputDecorator(inputDecorator39);
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = jsonFactory38.setCodec(objectCodec41);
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        java.io.InputStream inputStream44 = null;
        byte[] byteArray45 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream48 = new com.fasterxml.jackson.core.io.MergedStream(iOContext43, inputStream44, byteArray45, 0, (int) (short) -1);
        int int49 = mergedStream48.available();
        boolean boolean50 = mergedStream48.markSupported();
        int int51 = mergedStream48.available();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser52 = jsonFactory38.createJsonParser((java.io.InputStream) mergedStream48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(jsonFactory42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test072");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        byte[] byteArray35 = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory34.createParser(byteArray35, 57343, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 57343");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test073");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter4);
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test074");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        boolean boolean37 = jsonGenerator36.isClosed();
        jsonGenerator36.writeStartObject();
        boolean boolean39 = jsonGenerator36.isClosed();
        jsonGenerator36.writeNumber(100.0d);
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator36);
        java.math.BigDecimal bigDecimal43 = null;
        jsonGenerator36.writeNumber(bigDecimal43);
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test075");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature35 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean36 = jsonGenerator32.isEnabled(feature35);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeEndArray();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an ARRAY but OBJECT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature35.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test076");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.ObjectCodec objectCodec32 = null;
        jsonParser30.setCodec(objectCodec32);
        com.fasterxml.jackson.core.FormatSchema formatSchema34 = jsonParser30.getSchema();
        int int36 = jsonParser30.getValueAsInt(0);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(formatSchema34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test077");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        com.fasterxml.jackson.core.Version version34 = jsonParser30.version();
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonParser30.skipChildren();
        com.fasterxml.jackson.core.FormatSchema formatSchema36 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonParser30.setSchema(formatSchema36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNotNull(jsonParser35);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test078");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        boolean boolean38 = jsonGenerator35.isClosed();
        jsonGenerator35.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator35.setCodec(objectCodec41);
        fixedSpaceIndenter1.writeIndentation(jsonGenerator35, 55296);
        boolean boolean45 = fixedSpaceIndenter1.isInline();
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test079");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.TreeNode treeNode40 = null;
        jsonGenerator39.writeTree(treeNode40);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter42 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonGenerator39.setPrettyPrinter(prettyPrinter42);
        com.fasterxml.jackson.core.ObjectCodec objectCodec44 = jsonGenerator43.getCodec();
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator46 = jsonFactory45.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray50 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream53 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray50, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext54 = null;
        java.io.InputStream inputStream55 = null;
        byte[] byteArray56 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream59 = new com.fasterxml.jackson.core.io.MergedStream(iOContext54, inputStream55, byteArray56, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader63 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext47, inputStream49, byteArray56, 0, 0, false);
        char[] charArray66 = new char[] { ' ', '#' };
        int int67 = uTF32Reader63.read(charArray66);
        char[] charArray71 = new char[] { ' ', '#', '4' };
        int int74 = uTF32Reader63.read(charArray71, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser75 = jsonFactory45.createParser((java.io.Reader) uTF32Reader63);
        int int77 = jsonParser75.nextIntValue((int) 'a');
        jsonParser75.close();
        boolean boolean79 = jsonParser75.canReadTypeId();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator43.copyCurrentEvent(jsonParser75);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No current event to copy");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertNull(objectCodec44);
        org.junit.Assert.assertNull(inputDecorator46);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , #]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(jsonParser75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test080");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int49 = serializedString40.appendQuotedUTF8(byteArray47, (int) ' ');
        char[] charArray50 = serializedString40.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeObjectId((java.lang.Object) serializedString40);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Object Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(serializedString40);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test081");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        boolean boolean37 = jsonGenerator36.isClosed();
        jsonGenerator36.writeStartObject();
        boolean boolean39 = jsonGenerator36.isClosed();
        jsonGenerator36.writeNumber(100.0d);
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator36);
        com.fasterxml.jackson.core.JsonFactory jsonFactory43 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator44 = jsonFactory43.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext52 = null;
        java.io.InputStream inputStream53 = null;
        byte[] byteArray54 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream57 = new com.fasterxml.jackson.core.io.MergedStream(iOContext52, inputStream53, byteArray54, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader61 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext45, inputStream47, byteArray54, 0, 0, false);
        char[] charArray64 = new char[] { ' ', '#' };
        int int65 = uTF32Reader61.read(charArray64);
        char[] charArray69 = new char[] { ' ', '#', '4' };
        int int72 = uTF32Reader61.read(charArray69, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser73 = jsonFactory43.createParser((java.io.Reader) uTF32Reader61);
        java.io.Writer writer74 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator75 = jsonFactory43.createJsonGenerator(writer74);
        boolean boolean76 = jsonGenerator75.isClosed();
        jsonGenerator75.writeStartObject();
        jsonGenerator75.writeObjectFieldStart("hi!");
        defaultPrettyPrinter3.beforeObjectEntries(jsonGenerator75);
        jsonGenerator75.writeOmittedField("JSON");
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator75.writeEndArray();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an ARRAY but OBJECT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(inputDecorator44);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , #]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(jsonParser73);
        org.junit.Assert.assertNotNull(jsonGenerator75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test082");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.ObjectCodec objectCodec51 = jsonFactory0.getCodec();
        com.fasterxml.jackson.core.ObjectCodec objectCodec52 = jsonFactory0.getCodec();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(objectCodec51);
        org.junit.Assert.assertNull(objectCodec52);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test083");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int65 = serializedString56.appendQuotedUTF8(byteArray63, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonGenerator52.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString56);
        byte[] byteArray68 = new byte[] { (byte) -1 };
        int int70 = serializedString56.appendQuotedUTF8(byteArray68, 100);
        java.nio.ByteBuffer byteBuffer71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int72 = serializedString56.putQuotedUTF8(byteBuffer71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(serializedString56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test084");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory38.setInputDecorator(inputDecorator39);
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = jsonFactory38.setCodec(objectCodec41);
        java.io.OutputStream outputStream43 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonFactory42.createJsonGenerator(outputStream43);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(jsonFactory42);
        org.junit.Assert.assertNotNull(jsonGenerator44);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test085");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.TreeNode treeNode40 = null;
        jsonGenerator39.writeTree(treeNode40);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter42 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonGenerator39.setPrettyPrinter(prettyPrinter42);
        com.fasterxml.jackson.core.ObjectCodec objectCodec44 = jsonGenerator43.getCodec();
        jsonGenerator43.writeString("hi!");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertNull(objectCodec44);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test086");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter40.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator32.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter41);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter43 = jsonGenerator42.getPrettyPrinter();
        jsonGenerator42.writeRaw("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature46 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonGenerator42.configure(feature46, false);
        jsonGenerator42.writeNull();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertNotNull(prettyPrinter43);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature46.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonGenerator48);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test087");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        jsonGenerator32.writeObjectFieldStart("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature37 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean38 = jsonGenerator32.isEnabled(feature37);
        com.fasterxml.jackson.core.io.SerializedString serializedString39 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int48 = serializedString39.appendQuotedUTF8(byteArray46, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeBinary(byteArray46, (int) (byte) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature37.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(serializedString39);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test088");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        jsonGenerator37.writeStartObject();
        boolean boolean40 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeEndObject(jsonGenerator37, (int) (short) 0);
        java.lang.Class<?> wildcardClass43 = defaultPrettyPrinter4.getClass();
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test089");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.InputStream inputStream37 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory34.createParser(inputStream37);
        com.fasterxml.jackson.core.Base64Variant base64Variant39 = null;
        java.io.OutputStream outputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int41 = jsonParser38.readBinaryValue(base64Variant39, outputStream40);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: UNKNOWN; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonParser38);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test090");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        boolean boolean37 = jsonGenerator36.isClosed();
        jsonGenerator36.writeStartObject();
        boolean boolean39 = jsonGenerator36.isClosed();
        jsonGenerator36.writeNumber(100.0d);
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator36);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonGenerator36.setFeatureMask((int) (short) 1);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature45 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        int int46 = feature45.getMask();
        boolean boolean47 = jsonGenerator36.isEnabled(feature45);
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertTrue("'" + feature45 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature45.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 16 + "'", int46 == 16);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test091");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int65 = serializedString56.appendQuotedUTF8(byteArray63, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonGenerator52.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString56);
        byte[] byteArray68 = new byte[] { (byte) -1 };
        int int70 = serializedString56.appendQuotedUTF8(byteArray68, 100);
        char[] charArray71 = serializedString56.asQuotedChars();
        char[] charArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int74 = serializedString56.appendQuoted(charArray72, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(serializedString56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ ]");
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test092");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = jsonFactory34.getInputDecorator();
        boolean boolean40 = jsonFactory34.canHandleBinaryNatively();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNull(inputDecorator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test093");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.ObjectCodec objectCodec31 = jsonFactory0.getCodec();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(objectCodec31);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test094");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser("");
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator24 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory0.copy();
        com.fasterxml.jackson.core.JsonParser.Feature feature26 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory25.enable(feature26);
        com.fasterxml.jackson.core.JsonFactory.Feature feature28 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonFactory jsonFactory30 = jsonFactory25.configure(feature28, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNull(inputDecorator24);
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature26.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertNotNull(jsonFactory27);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test095");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) (short) 100);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = jsonParser30.getCodec();
        jsonParser30.close();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray35 = jsonParser30.getBinaryValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@16e465dd; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNull(objectCodec33);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test096");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.ObjectCodec objectCodec51 = jsonFactory0.getCodec();
        com.fasterxml.jackson.core.JsonFactory jsonFactory52 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator53 = jsonFactory52.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext54 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext61 = null;
        java.io.InputStream inputStream62 = null;
        byte[] byteArray63 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream66 = new com.fasterxml.jackson.core.io.MergedStream(iOContext61, inputStream62, byteArray63, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader70 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext54, inputStream56, byteArray63, 0, 0, false);
        char[] charArray73 = new char[] { ' ', '#' };
        int int74 = uTF32Reader70.read(charArray73);
        char[] charArray78 = new char[] { ' ', '#', '4' };
        int int81 = uTF32Reader70.read(charArray78, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser82 = jsonFactory52.createParser((java.io.Reader) uTF32Reader70);
        java.io.Writer writer83 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = jsonFactory52.createJsonGenerator(writer83);
        com.fasterxml.jackson.core.ObjectCodec objectCodec85 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory86 = jsonFactory52.setCodec(objectCodec85);
        java.io.Writer writer87 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator88 = jsonFactory86.createGenerator(writer87);
        java.io.Writer writer89 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator90 = jsonFactory86.createGenerator(writer89);
        com.fasterxml.jackson.core.JsonParser.Feature feature91 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        com.fasterxml.jackson.core.JsonFactory jsonFactory92 = jsonFactory86.enable(feature91);
        com.fasterxml.jackson.core.JsonFactory jsonFactory93 = jsonFactory0.disable(feature91);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(objectCodec51);
        org.junit.Assert.assertNull(inputDecorator53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[ , #]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(jsonParser82);
        org.junit.Assert.assertNotNull(jsonGenerator84);
        org.junit.Assert.assertNotNull(jsonFactory86);
        org.junit.Assert.assertNotNull(jsonGenerator88);
        org.junit.Assert.assertNotNull(jsonGenerator90);
        org.junit.Assert.assertTrue("'" + feature91 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature91.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertNotNull(jsonFactory92);
        org.junit.Assert.assertNotNull(jsonFactory93);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test097");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        com.fasterxml.jackson.core.SerializableString serializableString40 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonGenerator37.setRootValueSeparator(serializableString40);
        jsonGenerator37.writeNumber((long) 56319);
        boolean boolean44 = jsonGenerator37.canWriteObjectId();
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jsonGenerator41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test098");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.TreeNode treeNode40 = null;
        jsonGenerator39.writeTree(treeNode40);
        jsonGenerator39.writeObjectFieldStart("JSON");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test099");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonParser30.setFeatureMask(64);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonParser30.setFeatureMask((-1));
        com.fasterxml.jackson.core.JsonToken jsonToken39 = jsonParser30.nextValue();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNull(jsonToken39);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test100");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.lang.Object obj38 = null;
        jsonGenerator36.writeObjectField("", obj38);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test101");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        boolean boolean42 = jsonFactory41.requiresPropertyOrdering();
        java.io.File file43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser44 = jsonFactory41.createJsonParser(file43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test102");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.close();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext35 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext38 = jsonReadContext35.createChildArrayContext((int) (short) -1, (int) (short) -1);
        boolean boolean39 = jsonReadContext38.inArray();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext40 = jsonReadContext38._parent;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeTypeId((java.lang.Object) jsonReadContext38);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Type Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jsonReadContext35);
        org.junit.Assert.assertNotNull(jsonReadContext38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(jsonReadContext40);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test103");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        boolean boolean37 = jsonGenerator36.isClosed();
        jsonGenerator36.writeStartObject();
        boolean boolean39 = jsonGenerator36.isClosed();
        jsonGenerator36.writeNumber(100.0d);
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator36);
        com.fasterxml.jackson.core.JsonFactory jsonFactory43 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator44 = jsonFactory43.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext52 = null;
        java.io.InputStream inputStream53 = null;
        byte[] byteArray54 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream57 = new com.fasterxml.jackson.core.io.MergedStream(iOContext52, inputStream53, byteArray54, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader61 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext45, inputStream47, byteArray54, 0, 0, false);
        char[] charArray64 = new char[] { ' ', '#' };
        int int65 = uTF32Reader61.read(charArray64);
        char[] charArray69 = new char[] { ' ', '#', '4' };
        int int72 = uTF32Reader61.read(charArray69, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser73 = jsonFactory43.createParser((java.io.Reader) uTF32Reader61);
        java.io.Writer writer74 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator75 = jsonFactory43.createJsonGenerator(writer74);
        boolean boolean76 = jsonGenerator75.isClosed();
        jsonGenerator75.writeStartObject();
        jsonGenerator75.writeObjectFieldStart("hi!");
        defaultPrettyPrinter3.beforeObjectEntries(jsonGenerator75);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter81 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        boolean boolean82 = nopIndenter81.isInline();
        boolean boolean83 = nopIndenter81.isInline();
        defaultPrettyPrinter3.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter81);
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(inputDecorator44);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , #]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(jsonParser73);
        org.junit.Assert.assertNotNull(jsonGenerator75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test104");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator22 = jsonFactory0.getInputDecorator();
        java.io.InputStream inputStream23 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory0.createParser(inputStream23);
        java.io.OutputStream outputStream25 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator26 = jsonFactory0.createJsonGenerator(outputStream25);
        java.io.File file27 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser28 = jsonFactory0.createParser(file27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNull(inputDecorator22);
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertNotNull(jsonGenerator26);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test105");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) (short) 100);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = jsonParser30.getCodec();
        com.fasterxml.jackson.core.JsonToken jsonToken34 = jsonParser30.getLastClearedToken();
        java.io.OutputStream outputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = jsonParser30.readBinaryValue(outputStream35);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@65963ce8; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNull(objectCodec33);
        org.junit.Assert.assertNull(jsonToken34);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test106");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter3.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator8 = jsonFactory7.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext16 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray18 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream21 = new com.fasterxml.jackson.core.io.MergedStream(iOContext16, inputStream17, byteArray18, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader25 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext9, inputStream11, byteArray18, 0, 0, false);
        char[] charArray28 = new char[] { ' ', '#' };
        int int29 = uTF32Reader25.read(charArray28);
        char[] charArray33 = new char[] { ' ', '#', '4' };
        int int36 = uTF32Reader25.read(charArray33, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser37 = jsonFactory7.createParser((java.io.Reader) uTF32Reader25);
        java.io.Writer writer38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonFactory7.createJsonGenerator(writer38);
        boolean boolean40 = jsonGenerator39.isClosed();
        jsonGenerator39.writeStartObject();
        boolean boolean42 = jsonGenerator39.isClosed();
        jsonGenerator39.writeNumber(100.0d);
        defaultPrettyPrinter6.writeObjectFieldValueSeparator(jsonGenerator39);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = jsonGenerator39.setFeatureMask((int) (short) 1);
        fixedSpaceIndenter1.writeIndentation(jsonGenerator47, (int) (byte) 10);
        jsonGenerator47.writeArrayFieldStart("hi!");
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator47.writeEndObject();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an object but ARRAY");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , #]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(jsonParser37);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jsonGenerator47);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test107");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        boolean boolean34 = jsonParser30.canReadTypeId();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger35 = jsonParser30.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@7f6b274b; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test108");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        java.lang.Object obj35 = jsonParser30.getEmbeddedObject();
        long long37 = jsonParser30.getValueAsLong((long) (short) 1);
        double double39 = jsonParser30.getValueAsDouble((double) '4');
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test109");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter5.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter8 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter5);
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator10 = jsonFactory9.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray20 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream23 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, inputStream19, byteArray20, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader27 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext11, inputStream13, byteArray20, 0, 0, false);
        char[] charArray30 = new char[] { ' ', '#' };
        int int31 = uTF32Reader27.read(charArray30);
        char[] charArray35 = new char[] { ' ', '#', '4' };
        int int38 = uTF32Reader27.read(charArray35, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonFactory9.createParser((java.io.Reader) uTF32Reader27);
        java.io.Writer writer40 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonFactory9.createJsonGenerator(writer40);
        boolean boolean42 = jsonGenerator41.isClosed();
        jsonGenerator41.writeStartObject();
        boolean boolean44 = jsonGenerator41.isClosed();
        jsonGenerator41.writeNumber(100.0d);
        defaultPrettyPrinter8.writeObjectFieldValueSeparator(jsonGenerator41);
        jsonGenerator41.writeBooleanField("JSON", true);
        defaultPrettyPrinter4.writeEndObject(jsonGenerator41, 1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        boolean boolean54 = nopIndenter53.isInline();
        defaultPrettyPrinter4.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter53);
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator57 = jsonFactory56.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext59 = null;
        java.io.InputStream inputStream60 = null;
        byte[] byteArray61 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext59, inputStream60, byteArray61, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext65 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray67 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream70 = new com.fasterxml.jackson.core.io.MergedStream(iOContext65, inputStream66, byteArray67, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader74 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext58, inputStream60, byteArray67, 0, 0, false);
        char[] charArray77 = new char[] { ' ', '#' };
        int int78 = uTF32Reader74.read(charArray77);
        char[] charArray82 = new char[] { ' ', '#', '4' };
        int int85 = uTF32Reader74.read(charArray82, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser86 = jsonFactory56.createParser((java.io.Reader) uTF32Reader74);
        java.io.Writer writer87 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator88 = jsonFactory56.createJsonGenerator(writer87);
        boolean boolean89 = jsonGenerator88.isClosed();
        jsonGenerator88.writeStartObject();
        boolean boolean91 = jsonGenerator88.isClosed();
        jsonGenerator88.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec94 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = jsonGenerator88.setCodec(objectCodec94);
        com.fasterxml.jackson.core.TreeNode treeNode96 = null;
        jsonGenerator95.writeTree(treeNode96);
        defaultPrettyPrinter4.writeEndArray(jsonGenerator95, 56320);
        org.junit.Assert.assertNull(inputDecorator10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertNotNull(jsonGenerator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(inputDecorator57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ , #]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonParser86);
        org.junit.Assert.assertNotNull(jsonGenerator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(jsonGenerator95);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test110");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler40 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer41 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler40);
        int int42 = textBuffer41.getCurrentSegmentSize();
        char[] charArray43 = textBuffer41.contentsAsArray();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeRaw(charArray43, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[]");
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test111");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter3.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator8 = jsonFactory7.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext16 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray18 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream21 = new com.fasterxml.jackson.core.io.MergedStream(iOContext16, inputStream17, byteArray18, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader25 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext9, inputStream11, byteArray18, 0, 0, false);
        char[] charArray28 = new char[] { ' ', '#' };
        int int29 = uTF32Reader25.read(charArray28);
        char[] charArray33 = new char[] { ' ', '#', '4' };
        int int36 = uTF32Reader25.read(charArray33, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser37 = jsonFactory7.createParser((java.io.Reader) uTF32Reader25);
        java.io.Writer writer38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonFactory7.createJsonGenerator(writer38);
        boolean boolean40 = jsonGenerator39.isClosed();
        jsonGenerator39.writeStartObject();
        boolean boolean42 = jsonGenerator39.isClosed();
        jsonGenerator39.writeNumber(100.0d);
        defaultPrettyPrinter6.writeObjectFieldValueSeparator(jsonGenerator39);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = jsonGenerator39.setFeatureMask((int) (short) 1);
        fixedSpaceIndenter1.writeIndentation(jsonGenerator47, (int) (byte) 10);
        jsonGenerator47.writeArrayFieldStart("hi!");
        com.fasterxml.jackson.core.TreeNode treeNode52 = null;
        jsonGenerator47.writeTree(treeNode52);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , #]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(jsonParser37);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jsonGenerator47);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test112");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        double double20 = jsonParser19.getValueAsDouble();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test113");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature39 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonGenerator38.enable(feature39);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter41.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter41);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter45 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter41);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator47 = jsonFactory46.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader64 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext48, inputStream50, byteArray57, 0, 0, false);
        char[] charArray67 = new char[] { ' ', '#' };
        int int68 = uTF32Reader64.read(charArray67);
        char[] charArray72 = new char[] { ' ', '#', '4' };
        int int75 = uTF32Reader64.read(charArray72, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser76 = jsonFactory46.createParser((java.io.Reader) uTF32Reader64);
        java.io.Writer writer77 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = jsonFactory46.createJsonGenerator(writer77);
        boolean boolean79 = jsonGenerator78.isClosed();
        defaultPrettyPrinter45.writeObjectFieldValueSeparator(jsonGenerator78);
        jsonGenerator78.writeNumberField("[Source: false; line: 1, column: 0]", (int) (short) 100);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature84 = com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator85 = jsonGenerator78.enable(feature84);
        boolean boolean86 = jsonGenerator38.isEnabled(feature84);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN + "'", feature39.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertNull(inputDecorator47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(jsonParser76);
        org.junit.Assert.assertNotNull(jsonGenerator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + feature84 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII + "'", feature84.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII));
        org.junit.Assert.assertNotNull(jsonGenerator85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test114");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.TreeNode treeNode40 = null;
        jsonGenerator39.writeTree(treeNode40);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter42 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonGenerator39.setPrettyPrinter(prettyPrinter42);
        com.fasterxml.jackson.core.ObjectCodec objectCodec44 = jsonGenerator43.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.Version version45 = objectCodec44.version();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertNull(objectCodec44);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test115");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        boolean boolean42 = jsonFactory41.requiresPropertyOrdering();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes43 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = jsonFactory41.setCharacterEscapes(characterEscapes43);
        com.fasterxml.jackson.core.JsonParser.Feature feature45 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory44.enable(feature45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jsonFactory44);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test116");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter3.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator8 = jsonFactory7.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext16 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray18 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream21 = new com.fasterxml.jackson.core.io.MergedStream(iOContext16, inputStream17, byteArray18, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader25 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext9, inputStream11, byteArray18, 0, 0, false);
        char[] charArray28 = new char[] { ' ', '#' };
        int int29 = uTF32Reader25.read(charArray28);
        char[] charArray33 = new char[] { ' ', '#', '4' };
        int int36 = uTF32Reader25.read(charArray33, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser37 = jsonFactory7.createParser((java.io.Reader) uTF32Reader25);
        java.io.Writer writer38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonFactory7.createJsonGenerator(writer38);
        boolean boolean40 = jsonGenerator39.isClosed();
        jsonGenerator39.writeStartObject();
        boolean boolean42 = jsonGenerator39.isClosed();
        jsonGenerator39.writeNumber(100.0d);
        defaultPrettyPrinter6.writeObjectFieldValueSeparator(jsonGenerator39);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = jsonGenerator39.setFeatureMask((int) (short) 1);
        fixedSpaceIndenter1.writeIndentation(jsonGenerator47, (int) (byte) 10);
        com.fasterxml.jackson.core.ObjectCodec objectCodec50 = jsonGenerator47.getCodec();
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , #]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(jsonParser37);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jsonGenerator47);
        org.junit.Assert.assertNull(objectCodec50);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test117");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int65 = serializedString56.appendQuotedUTF8(byteArray63, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonGenerator52.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString56);
        java.io.OutputStream outputStream67 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int68 = serializedString56.writeUnquotedUTF8(outputStream67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(serializedString56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator66);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test118");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.TreeNode treeNode40 = null;
        jsonGenerator39.writeTree(treeNode40);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter42 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonGenerator39.setPrettyPrinter(prettyPrinter42);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator45 = jsonGenerator39.setFeatureMask(64);
        char[] charArray46 = com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.HEX_CHARS;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator39.writeRawValue(charArray46, 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertNotNull(jsonGenerator45);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "0123456789ABCDEF");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "0123456789ABCDEF");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F]");
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test119");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory0.setRootValueSeparator("");
        com.fasterxml.jackson.core.format.InputAccessor inputAccessor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.format.MatchStrength matchStrength23 = jsonFactory21.hasFormat(inputAccessor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertNotNull(jsonFactory21);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test120");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        java.io.Writer writer32 = null;
        int int33 = jsonParser30.releaseBuffered(writer32);
        int int35 = jsonParser30.getValueAsInt(56319);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext36 = jsonParser30.getParsingContext();
        java.lang.String str37 = jsonParser30.getText();
        java.io.Writer writer38 = null;
        int int39 = jsonParser30.releaseBuffered(writer38);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 56319 + "'", int35 == 56319);
        org.junit.Assert.assertNotNull(jsonStreamContext36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test121");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory34.createParser("hi!");
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator42 = jsonFactory41.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray52 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream55 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray52, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader59 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext43, inputStream45, byteArray52, 0, 0, false);
        char[] charArray62 = new char[] { ' ', '#' };
        int int63 = uTF32Reader59.read(charArray62);
        char[] charArray67 = new char[] { ' ', '#', '4' };
        int int70 = uTF32Reader59.read(charArray67, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser71 = jsonFactory41.createParser((java.io.Reader) uTF32Reader59);
        java.io.Writer writer72 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = jsonFactory41.createJsonGenerator(writer72);
        com.fasterxml.jackson.core.ObjectCodec objectCodec74 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory75 = jsonFactory41.setCodec(objectCodec74);
        java.io.Writer writer76 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator77 = jsonFactory75.createGenerator(writer76);
        java.io.Writer writer78 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator79 = jsonFactory75.createGenerator(writer78);
        com.fasterxml.jackson.core.JsonParser.Feature feature80 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        com.fasterxml.jackson.core.JsonFactory jsonFactory81 = jsonFactory75.enable(feature80);
        com.fasterxml.jackson.core.JsonFactory jsonFactory82 = jsonFactory34.disable(feature80);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertNull(inputDecorator42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ , #]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(jsonParser71);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(jsonFactory75);
        org.junit.Assert.assertNotNull(jsonGenerator77);
        org.junit.Assert.assertNotNull(jsonGenerator79);
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature80.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertNotNull(jsonFactory81);
        org.junit.Assert.assertNotNull(jsonFactory82);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test122");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.lang.String str51 = jsonParser50.getText();
        boolean boolean52 = jsonParser50.canReadTypeId();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test123");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        java.io.InputStream inputStream56 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int58 = jsonGenerator52.writeBinary(inputStream56, (-1270543513));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test124");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        java.io.Writer writer32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory1.createJsonGenerator(writer32);
        boolean boolean34 = jsonGenerator33.isClosed();
        jsonGenerator33.writeStartObject();
        boolean boolean36 = jsonGenerator33.isClosed();
        defaultPrettyPrinter0.writeEndObject(jsonGenerator33, (int) (byte) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter40 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter39.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter40);
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator43 = jsonFactory42.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray47 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream50 = new com.fasterxml.jackson.core.io.MergedStream(iOContext45, inputStream46, byteArray47, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext51 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray53 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext51, inputStream52, byteArray53, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader60 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext44, inputStream46, byteArray53, 0, 0, false);
        char[] charArray63 = new char[] { ' ', '#' };
        int int64 = uTF32Reader60.read(charArray63);
        char[] charArray68 = new char[] { ' ', '#', '4' };
        int int71 = uTF32Reader60.read(charArray68, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser72 = jsonFactory42.createParser((java.io.Reader) uTF32Reader60);
        java.io.Writer writer73 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = jsonFactory42.createJsonGenerator(writer73);
        com.fasterxml.jackson.core.ObjectCodec objectCodec75 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory76 = jsonFactory42.setCodec(objectCodec75);
        java.io.Writer writer77 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = jsonFactory76.createGenerator(writer77);
        jsonGenerator78.writeArrayFieldStart("");
        fixedSpaceIndenter40.writeIndentation(jsonGenerator78, (int) (short) 0);
        jsonGenerator78.writeStringField("", "");
        jsonGenerator78.writeArrayFieldStart("");
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(jsonGenerator78);
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter40);
        org.junit.Assert.assertNull(inputDecorator43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , #]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(jsonParser72);
        org.junit.Assert.assertNotNull(jsonGenerator74);
        org.junit.Assert.assertNotNull(jsonFactory76);
        org.junit.Assert.assertNotNull(jsonGenerator78);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test125");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        jsonGenerator32.writeFieldName("hi!");
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test126");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser("");
        java.net.URL uRL24 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser25 = jsonFactory0.createParser(uRL24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonParser23);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test127");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter40.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter42 = defaultPrettyPrinter41.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory43 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator44 = jsonFactory43.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext52 = null;
        java.io.InputStream inputStream53 = null;
        byte[] byteArray54 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream57 = new com.fasterxml.jackson.core.io.MergedStream(iOContext52, inputStream53, byteArray54, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader61 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext45, inputStream47, byteArray54, 0, 0, false);
        char[] charArray64 = new char[] { ' ', '#' };
        int int65 = uTF32Reader61.read(charArray64);
        char[] charArray69 = new char[] { ' ', '#', '4' };
        int int72 = uTF32Reader61.read(charArray69, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser73 = jsonFactory43.createParser((java.io.Reader) uTF32Reader61);
        java.io.Writer writer74 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator75 = jsonFactory43.createJsonGenerator(writer74);
        jsonGenerator75.writeString("");
        jsonGenerator75.writeBoolean(false);
        defaultPrettyPrinter42.beforeObjectEntries(jsonGenerator75);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator37.writeObjectRef((java.lang.Object) defaultPrettyPrinter42);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Object Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter42);
        org.junit.Assert.assertNull(inputDecorator44);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , #]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(jsonParser73);
        org.junit.Assert.assertNotNull(jsonGenerator75);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test128");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory34.createParser("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature41 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        boolean boolean42 = jsonFactory34.isEnabled(feature41);
        java.io.File file43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser44 = jsonFactory34.createJsonParser(file43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature41.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test129");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.InputStream inputStream37 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory34.createParser(inputStream37);
        com.fasterxml.jackson.core.ObjectCodec objectCodec39 = jsonFactory34.getCodec();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNull(objectCodec39);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test130");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createJsonParser("JSON");
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes35 = jsonFactory0.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonFactory jsonFactory36 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = jsonFactory36.getInputDecorator();
        boolean boolean38 = jsonFactory36.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator40 = jsonFactory39.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext42 = null;
        java.io.InputStream inputStream43 = null;
        byte[] byteArray44 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream47 = new com.fasterxml.jackson.core.io.MergedStream(iOContext42, inputStream43, byteArray44, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray50 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream53 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray50, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader57 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext41, inputStream43, byteArray50, 0, 0, false);
        char[] charArray60 = new char[] { ' ', '#' };
        int int61 = uTF32Reader57.read(charArray60);
        char[] charArray65 = new char[] { ' ', '#', '4' };
        int int68 = uTF32Reader57.read(charArray65, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonFactory39.createParser((java.io.Reader) uTF32Reader57);
        int int71 = jsonParser69.nextIntValue((int) 'a');
        int int72 = jsonParser69.getFeatureMask();
        double double73 = jsonParser69.getValueAsDouble();
        java.lang.Object obj74 = jsonParser69.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature75 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean76 = jsonParser69.isEnabled(feature75);
        com.fasterxml.jackson.core.JsonFactory jsonFactory77 = jsonFactory36.disable(feature75);
        com.fasterxml.jackson.core.JsonFactory jsonFactory78 = jsonFactory0.disable(feature75);
        java.io.Writer writer79 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator80 = jsonFactory0.createJsonGenerator(writer79);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNull(characterEscapes35);
        org.junit.Assert.assertNull(inputDecorator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(inputDecorator40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , #]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature75.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jsonFactory77);
        org.junit.Assert.assertNotNull(jsonFactory78);
        org.junit.Assert.assertNotNull(jsonGenerator80);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test131");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        int int35 = jsonParser30.getValueAsInt(3);
        com.fasterxml.jackson.core.JsonToken jsonToken36 = jsonParser30.nextValue();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNull(jsonToken36);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test132");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter3 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter2.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        jsonGenerator37.writeObjectFieldStart("");
        defaultPrettyPrinter2.writeRootValueSeparator(jsonGenerator37);
        boolean boolean41 = jsonGenerator37.canWriteObjectId();
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator37);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter43.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter46 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter43);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter47 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter43);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter48 = defaultPrettyPrinter43.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory49 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version50 = jsonFactory49.version();
        com.fasterxml.jackson.core.io.IOContext iOContext51 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext52 = null;
        java.io.InputStream inputStream53 = null;
        byte[] byteArray54 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream57 = new com.fasterxml.jackson.core.io.MergedStream(iOContext52, inputStream53, byteArray54, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray60 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream63 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray60, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader67 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext51, inputStream53, byteArray60, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser68 = jsonFactory49.createParser((java.io.Reader) uTF32Reader67);
        boolean boolean69 = jsonFactory49.requiresPropertyOrdering();
        java.lang.String str70 = jsonFactory49.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator71 = jsonFactory49.getInputDecorator();
        java.io.InputStream inputStream72 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser73 = jsonFactory49.createParser(inputStream72);
        java.io.OutputStream outputStream74 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator75 = jsonFactory49.createJsonGenerator(outputStream74);
        defaultPrettyPrinter48.writeRootValueSeparator(jsonGenerator75);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator75);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter3);
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter48);
        org.junit.Assert.assertNotNull(version50);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(jsonParser68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "JSON" + "'", str70, "JSON");
        org.junit.Assert.assertNull(inputDecorator71);
        org.junit.Assert.assertNotNull(jsonParser73);
        org.junit.Assert.assertNotNull(jsonGenerator75);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test133");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.OutputStream outputStream31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createGenerator(outputStream31);
        boolean boolean33 = jsonGenerator32.canWriteBinaryNatively();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test134");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.JsonToken jsonToken31 = jsonParser30.getCurrentToken();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(jsonToken31);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test135");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeObjectFieldStart("");
        defaultPrettyPrinter0.writeRootValueSeparator(jsonGenerator35);
        boolean boolean39 = jsonGenerator35.canWriteObjectId();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext40 = jsonGenerator35.getOutputContext();
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jsonStreamContext40);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test136");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter3 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter2.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        jsonGenerator37.writeObjectFieldStart("");
        defaultPrettyPrinter2.writeRootValueSeparator(jsonGenerator37);
        boolean boolean41 = jsonGenerator37.canWriteObjectId();
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator37);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter44 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter43.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter44);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator47 = jsonFactory46.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader64 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext48, inputStream50, byteArray57, 0, 0, false);
        char[] charArray67 = new char[] { ' ', '#' };
        int int68 = uTF32Reader64.read(charArray67);
        char[] charArray72 = new char[] { ' ', '#', '4' };
        int int75 = uTF32Reader64.read(charArray72, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser76 = jsonFactory46.createParser((java.io.Reader) uTF32Reader64);
        java.io.Writer writer77 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = jsonFactory46.createJsonGenerator(writer77);
        jsonGenerator78.writeObjectFieldStart("");
        defaultPrettyPrinter43.writeRootValueSeparator(jsonGenerator78);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator78);
        jsonGenerator78.writeNumberField("ARRAY", 0.0f);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter3);
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter44);
        org.junit.Assert.assertNull(inputDecorator47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(jsonParser76);
        org.junit.Assert.assertNotNull(jsonGenerator78);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test137");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int42 = serializedString33.appendQuotedUTF8(byteArray40, (int) ' ');
        jsonGenerator32.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString33);
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator45 = jsonFactory44.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        java.io.InputStream inputStream48 = null;
        byte[] byteArray49 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream52 = new com.fasterxml.jackson.core.io.MergedStream(iOContext47, inputStream48, byteArray49, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext53 = null;
        java.io.InputStream inputStream54 = null;
        byte[] byteArray55 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream58 = new com.fasterxml.jackson.core.io.MergedStream(iOContext53, inputStream54, byteArray55, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader62 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext46, inputStream48, byteArray55, 0, 0, false);
        char[] charArray65 = new char[] { ' ', '#' };
        int int66 = uTF32Reader62.read(charArray65);
        char[] charArray70 = new char[] { ' ', '#', '4' };
        int int73 = uTF32Reader62.read(charArray70, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser74 = jsonFactory44.createParser((java.io.Reader) uTF32Reader62);
        java.io.Writer writer75 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = jsonFactory44.createJsonGenerator(writer75);
        com.fasterxml.jackson.core.Version version77 = jsonFactory44.version();
        com.fasterxml.jackson.core.io.IOContext iOContext78 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray80 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream83 = new com.fasterxml.jackson.core.io.MergedStream(iOContext78, inputStream79, byteArray80, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser84 = jsonFactory44.createParser(byteArray80);
        int int86 = serializedString33.appendUnquotedUTF8(byteArray80, (int) 'a');
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(serializedString33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(inputDecorator45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , #]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(jsonParser74);
        org.junit.Assert.assertNotNull(jsonGenerator76);
        org.junit.Assert.assertNotNull(version77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(jsonParser84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test138");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonParser30.setFeatureMask(64);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonParser30.setFeatureMask((-1));
        // The following exception was thrown during execution in test generation
        try {
            int int39 = jsonParser38.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@1200205; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertNotNull(jsonParser38);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test139");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        java.io.OutputStream outputStream39 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory38.createJsonGenerator(outputStream39);
        jsonGenerator40.writeNumberField("ARRAY", (float) (byte) 10);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonGenerator40);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test140");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        java.lang.Object obj35 = jsonParser30.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonToken jsonToken36 = jsonParser30.nextToken();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number37 = jsonParser30.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@5a56331; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(jsonToken36);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test141");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeString("");
        jsonGenerator35.writeBoolean(false);
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter2.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter42 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = defaultPrettyPrinter41.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter42);
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator45 = jsonFactory44.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        java.io.InputStream inputStream48 = null;
        byte[] byteArray49 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream52 = new com.fasterxml.jackson.core.io.MergedStream(iOContext47, inputStream48, byteArray49, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext53 = null;
        java.io.InputStream inputStream54 = null;
        byte[] byteArray55 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream58 = new com.fasterxml.jackson.core.io.MergedStream(iOContext53, inputStream54, byteArray55, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader62 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext46, inputStream48, byteArray55, 0, 0, false);
        char[] charArray65 = new char[] { ' ', '#' };
        int int66 = uTF32Reader62.read(charArray65);
        char[] charArray70 = new char[] { ' ', '#', '4' };
        int int73 = uTF32Reader62.read(charArray70, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser74 = jsonFactory44.createParser((java.io.Reader) uTF32Reader62);
        java.io.Writer writer75 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = jsonFactory44.createJsonGenerator(writer75);
        boolean boolean77 = jsonGenerator76.isClosed();
        jsonGenerator76.writeStartObject();
        boolean boolean79 = jsonGenerator76.isClosed();
        jsonGenerator76.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec82 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator83 = jsonGenerator76.setCodec(objectCodec82);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter84 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = defaultPrettyPrinter84.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = jsonGenerator76.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter85);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes87 = jsonGenerator76.getCharacterEscapes();
        java.lang.Object obj88 = null;
        jsonGenerator76.writeObject(obj88);
        defaultPrettyPrinter43.writeStartArray(jsonGenerator76);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter42);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter43);
        org.junit.Assert.assertNull(inputDecorator45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , #]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(jsonParser74);
        org.junit.Assert.assertNotNull(jsonGenerator76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jsonGenerator83);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter85);
        org.junit.Assert.assertNotNull(jsonGenerator86);
        org.junit.Assert.assertNull(characterEscapes87);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test142");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature53 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = jsonFactory0.enable(feature53);
        java.io.OutputStream outputStream55 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator56 = jsonFactory54.createJsonGenerator(outputStream55);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature53.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory54);
        org.junit.Assert.assertNotNull(jsonGenerator56);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test143");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.Version version51 = jsonParser50.version();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal52 = jsonParser50.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: [B@4c6327e3; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(version51);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test144");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) (short) 100);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = jsonParser30.getCodec();
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonParser30.setFeatureMask(55296);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = jsonParser35.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@1bcdd524; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNull(objectCodec33);
        org.junit.Assert.assertNotNull(jsonParser35);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test145");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.TreeNode treeNode40 = null;
        jsonGenerator39.writeTree(treeNode40);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes42 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonGenerator39.setCharacterEscapes(characterEscapes42);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(jsonGenerator43);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test146");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.InputStream inputStream37 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory34.createParser(inputStream37);
        com.fasterxml.jackson.core.FormatSchema formatSchema39 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonParser38.setSchema(formatSchema39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonParser38);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test147");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) (short) 100);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = jsonParser30.getCodec();
        jsonParser30.close();
        double double36 = jsonParser30.getValueAsDouble((double) (short) 10);
        double double37 = jsonParser30.getValueAsDouble();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNull(objectCodec33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test148");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.Version version33 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory0.createParser(byteArray36);
        int int41 = jsonParser40.getFeatureMask();
        java.io.Writer writer42 = null;
        int int43 = jsonParser40.releaseBuffered(writer42);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test149");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.JsonParser.Feature feature32 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonParser30.enable(feature32);
        com.fasterxml.jackson.core.FormatSchema formatSchema34 = jsonParser30.getSchema();
        com.fasterxml.jackson.core.JsonLocation jsonLocation35 = jsonParser30.getCurrentLocation();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS + "'", feature32.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS));
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNull(formatSchema34);
        org.junit.Assert.assertNotNull(jsonLocation35);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test150");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.JsonParser.Feature feature32 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonParser30.enable(feature32);
        com.fasterxml.jackson.core.FormatSchema formatSchema34 = jsonParser30.getSchema();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType35 = jsonParser30.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@86f2436; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS + "'", feature32.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS));
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNull(formatSchema34);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test151");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            short short33 = jsonParser30.getShortValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@202c4939; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test152");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        jsonGenerator37.writeStartObject();
        boolean boolean40 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeEndObject(jsonGenerator37, (int) (short) 0);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler43 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer44 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler43);
        boolean boolean45 = textBuffer44.hasTextAsCharacters();
        textBuffer44.append('a');
        char[] charArray48 = textBuffer44.finishCurrentSegment();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator37.writeRawValue(charArray48, 33, (int) (byte) -69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charArray48);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test153");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.Version version33 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory0.createParser(byteArray36);
        com.fasterxml.jackson.core.JsonToken jsonToken41 = jsonParser40.getCurrentToken();
        com.fasterxml.jackson.core.Version version42 = jsonParser40.version();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertNull(jsonToken41);
        org.junit.Assert.assertNotNull(version42);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test154");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        jsonGenerator32.writeNumber((long) (byte) 100);
        java.lang.Object obj40 = jsonGenerator32.getOutputTarget();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test155");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) (short) 100);
        boolean boolean33 = jsonParser30.requiresCustomCodec();
        com.fasterxml.jackson.core.ObjectCodec objectCodec34 = null;
        jsonParser30.setCodec(objectCodec34);
        java.lang.Object obj36 = jsonParser30.getObjectId();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test156");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        char[] charArray32 = jsonParser30.getTextCharacters();
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        jsonParser30.setCodec(objectCodec33);
        com.fasterxml.jackson.core.Base64Variant base64Variant35 = null;
        java.io.OutputStream outputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = jsonParser30.readBinaryValue(base64Variant35, outputStream36);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@3966cd4; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(charArray32);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test157");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = jsonFactory3.setCodec(objectCodec36);
        java.io.Writer writer38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonFactory37.createGenerator(writer38);
        jsonGenerator39.writeArrayFieldStart("");
        fixedSpaceIndenter1.writeIndentation(jsonGenerator39, (int) (short) 0);
        jsonGenerator39.writeStringField("", "");
        jsonGenerator39.writeArrayFieldStart("");
        jsonGenerator39.writeBooleanField("", false);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertNotNull(jsonFactory37);
        org.junit.Assert.assertNotNull(jsonGenerator39);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test158");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.Version version33 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory0.createParser(byteArray36);
        int int41 = jsonParser40.getFeatureMask();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean42 = jsonParser40.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test159");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeEndArray();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an ARRAY but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test160");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeObjectFieldStart("");
        defaultPrettyPrinter0.writeRootValueSeparator(jsonGenerator35);
        jsonGenerator35.writeObjectFieldStart("");
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test161");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70._writePPFieldName("ROOT", true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test162");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        boolean boolean40 = jsonGenerator32.isClosed();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test163");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        com.fasterxml.jackson.core.FormatSchema formatSchema34 = null;
        boolean boolean35 = jsonGenerator32.canUseSchema(formatSchema34);
        jsonGenerator32.writeNumber((short) 0);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test164");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature38 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean39 = jsonGenerator35.isEnabled(feature38);
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(jsonGenerator35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter41.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter41);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter45 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter41);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator47 = jsonFactory46.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader64 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext48, inputStream50, byteArray57, 0, 0, false);
        char[] charArray67 = new char[] { ' ', '#' };
        int int68 = uTF32Reader64.read(charArray67);
        char[] charArray72 = new char[] { ' ', '#', '4' };
        int int75 = uTF32Reader64.read(charArray72, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser76 = jsonFactory46.createParser((java.io.Reader) uTF32Reader64);
        java.io.Writer writer77 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = jsonFactory46.createJsonGenerator(writer77);
        boolean boolean79 = jsonGenerator78.isClosed();
        defaultPrettyPrinter45.writeObjectFieldValueSeparator(jsonGenerator78);
        jsonGenerator78.writeNumberField("[Source: false; line: 1, column: 0]", (int) (short) 100);
        defaultPrettyPrinter0.writeStartArray(jsonGenerator78);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter0.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter85);
        boolean boolean87 = fixedSpaceIndenter85.isInline();
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature38.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(inputDecorator47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(jsonParser76);
        org.junit.Assert.assertNotNull(jsonGenerator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test165");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) (short) 100);
        boolean boolean33 = jsonParser30.requiresCustomCodec();
        java.lang.String str34 = jsonParser30.nextTextValue();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = jsonParser30.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@411b575b; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test166");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator22 = jsonFactory0.getInputDecorator();
        java.io.InputStream inputStream23 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory0.createParser(inputStream23);
        java.net.URL uRL25 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser26 = jsonFactory0.createJsonParser(uRL25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNull(inputDecorator22);
        org.junit.Assert.assertNotNull(jsonParser24);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test167");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.JsonLocation jsonLocation32 = jsonParser30.getTokenLocation();
        java.lang.String str33 = jsonParser30.nextTextValue();
        long long35 = jsonParser30.nextLongValue(0L);
        com.fasterxml.jackson.core.FormatSchema formatSchema36 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonParser30.setSchema(formatSchema36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(jsonLocation32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test168");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        jsonGenerator36.writeObjectFieldStart("");
        jsonGenerator36.writeObjectFieldStart("hi!");
        defaultPrettyPrinter0.beforeObjectEntries(jsonGenerator36);
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator43 = jsonFactory42.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray47 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream50 = new com.fasterxml.jackson.core.io.MergedStream(iOContext45, inputStream46, byteArray47, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext51 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray53 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext51, inputStream52, byteArray53, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader60 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext44, inputStream46, byteArray53, 0, 0, false);
        char[] charArray63 = new char[] { ' ', '#' };
        int int64 = uTF32Reader60.read(charArray63);
        char[] charArray68 = new char[] { ' ', '#', '4' };
        int int71 = uTF32Reader60.read(charArray68, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser72 = jsonFactory42.createParser((java.io.Reader) uTF32Reader60);
        java.io.Writer writer73 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = jsonFactory42.createJsonGenerator(writer73);
        boolean boolean75 = jsonGenerator74.isClosed();
        jsonGenerator74.writeStartObject();
        boolean boolean77 = jsonGenerator74.isClosed();
        com.fasterxml.jackson.core.TreeNode treeNode78 = null;
        jsonGenerator74.writeTree(treeNode78);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature80 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        boolean boolean81 = jsonGenerator74.isEnabled(feature80);
        jsonGenerator74.writeNull();
        com.fasterxml.jackson.core.TreeNode treeNode83 = null;
        jsonGenerator74.writeTree(treeNode83);
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(jsonGenerator74);
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNull(inputDecorator43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , #]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(jsonParser72);
        org.junit.Assert.assertNotNull(jsonGenerator74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN + "'", feature80.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test169");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature38 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean39 = jsonGenerator35.isEnabled(feature38);
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(jsonGenerator35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter42 = defaultPrettyPrinter41.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = defaultPrettyPrinter42.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator45 = jsonFactory44.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        java.io.InputStream inputStream48 = null;
        byte[] byteArray49 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream52 = new com.fasterxml.jackson.core.io.MergedStream(iOContext47, inputStream48, byteArray49, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext53 = null;
        java.io.InputStream inputStream54 = null;
        byte[] byteArray55 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream58 = new com.fasterxml.jackson.core.io.MergedStream(iOContext53, inputStream54, byteArray55, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader62 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext46, inputStream48, byteArray55, 0, 0, false);
        char[] charArray65 = new char[] { ' ', '#' };
        int int66 = uTF32Reader62.read(charArray65);
        char[] charArray70 = new char[] { ' ', '#', '4' };
        int int73 = uTF32Reader62.read(charArray70, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser74 = jsonFactory44.createParser((java.io.Reader) uTF32Reader62);
        java.io.Writer writer75 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = jsonFactory44.createJsonGenerator(writer75);
        jsonGenerator76.writeString("");
        jsonGenerator76.writeBoolean(false);
        defaultPrettyPrinter43.beforeObjectEntries(jsonGenerator76);
        jsonGenerator76.writeNumberField("hi!", (float) ' ');
        jsonGenerator76.writeNumberField("[Source: false; line: 1, column: 0]", 0L);
        defaultPrettyPrinter0.writeArrayValueSeparator(jsonGenerator76);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature38.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter42);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter43);
        org.junit.Assert.assertNull(inputDecorator45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , #]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(jsonParser74);
        org.junit.Assert.assertNotNull(jsonGenerator76);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test170");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        com.fasterxml.jackson.core.Version version34 = jsonParser30.version();
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonParser30.skipChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType36 = jsonParser30.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@372cd5ba; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNotNull(jsonParser35);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test171");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter4 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter3.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter4);
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator7 = jsonFactory6.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext15 = null;
        java.io.InputStream inputStream16 = null;
        byte[] byteArray17 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream20 = new com.fasterxml.jackson.core.io.MergedStream(iOContext15, inputStream16, byteArray17, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader24 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext8, inputStream10, byteArray17, 0, 0, false);
        char[] charArray27 = new char[] { ' ', '#' };
        int int28 = uTF32Reader24.read(charArray27);
        char[] charArray32 = new char[] { ' ', '#', '4' };
        int int35 = uTF32Reader24.read(charArray32, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonFactory6.createParser((java.io.Reader) uTF32Reader24);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory6.createJsonGenerator(writer37);
        jsonGenerator38.writeObjectFieldStart("");
        defaultPrettyPrinter3.writeRootValueSeparator(jsonGenerator38);
        boolean boolean42 = jsonGenerator38.canWriteObjectId();
        defaultPrettyPrinter2.beforeArrayValues(jsonGenerator38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter45 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter44.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter45);
        com.fasterxml.jackson.core.JsonFactory jsonFactory47 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator48 = jsonFactory47.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray52 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream55 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray52, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext56 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray58 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext56, inputStream57, byteArray58, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader65 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext49, inputStream51, byteArray58, 0, 0, false);
        char[] charArray68 = new char[] { ' ', '#' };
        int int69 = uTF32Reader65.read(charArray68);
        char[] charArray73 = new char[] { ' ', '#', '4' };
        int int76 = uTF32Reader65.read(charArray73, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser77 = jsonFactory47.createParser((java.io.Reader) uTF32Reader65);
        java.io.Writer writer78 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator79 = jsonFactory47.createJsonGenerator(writer78);
        jsonGenerator79.writeObjectFieldStart("");
        defaultPrettyPrinter44.writeRootValueSeparator(jsonGenerator79);
        defaultPrettyPrinter2.beforeArrayValues(jsonGenerator79);
        nopIndenter0.writeIndentation(jsonGenerator79, 13);
        boolean boolean86 = nopIndenter0.isInline();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter4);
        org.junit.Assert.assertNull(inputDecorator7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter45);
        org.junit.Assert.assertNull(inputDecorator48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , #]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(jsonParser77);
        org.junit.Assert.assertNotNull(jsonGenerator79);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test172");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser("");
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator24 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory0.copy();
        com.fasterxml.jackson.core.JsonParser.Feature feature26 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory25.enable(feature26);
        java.lang.Class<?> wildcardClass28 = jsonFactory27.getClass();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNull(inputDecorator24);
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature26.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test173");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber((double) 57343);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test174");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        jsonGenerator55.writeNumber("ARRAY");
        com.fasterxml.jackson.core.ObjectCodec objectCodec58 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator59 = jsonGenerator55.setCodec(objectCodec58);
        com.fasterxml.jackson.core.io.SerializedString serializedString60 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int69 = serializedString60.appendQuotedUTF8(byteArray67, (int) ' ');
        char[] charArray70 = serializedString60.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator59.writeString(charArray70, (int) (byte) 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(jsonGenerator59);
        org.junit.Assert.assertNotNull(serializedString60);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[ ]");
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test175");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeEndObject();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an object but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test176");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter4 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter3.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter4);
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator7 = jsonFactory6.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext15 = null;
        java.io.InputStream inputStream16 = null;
        byte[] byteArray17 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream20 = new com.fasterxml.jackson.core.io.MergedStream(iOContext15, inputStream16, byteArray17, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader24 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext8, inputStream10, byteArray17, 0, 0, false);
        char[] charArray27 = new char[] { ' ', '#' };
        int int28 = uTF32Reader24.read(charArray27);
        char[] charArray32 = new char[] { ' ', '#', '4' };
        int int35 = uTF32Reader24.read(charArray32, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonFactory6.createParser((java.io.Reader) uTF32Reader24);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory6.createJsonGenerator(writer37);
        jsonGenerator38.writeObjectFieldStart("");
        defaultPrettyPrinter3.writeRootValueSeparator(jsonGenerator38);
        boolean boolean42 = jsonGenerator38.canWriteObjectId();
        defaultPrettyPrinter2.beforeArrayValues(jsonGenerator38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter45 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter44.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter45);
        com.fasterxml.jackson.core.JsonFactory jsonFactory47 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator48 = jsonFactory47.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray52 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream55 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray52, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext56 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray58 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext56, inputStream57, byteArray58, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader65 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext49, inputStream51, byteArray58, 0, 0, false);
        char[] charArray68 = new char[] { ' ', '#' };
        int int69 = uTF32Reader65.read(charArray68);
        char[] charArray73 = new char[] { ' ', '#', '4' };
        int int76 = uTF32Reader65.read(charArray73, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser77 = jsonFactory47.createParser((java.io.Reader) uTF32Reader65);
        java.io.Writer writer78 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator79 = jsonFactory47.createJsonGenerator(writer78);
        jsonGenerator79.writeObjectFieldStart("");
        defaultPrettyPrinter44.writeRootValueSeparator(jsonGenerator79);
        defaultPrettyPrinter2.beforeArrayValues(jsonGenerator79);
        nopIndenter0.writeIndentation(jsonGenerator79, 13);
        java.lang.Class<?> wildcardClass86 = nopIndenter0.getClass();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter4);
        org.junit.Assert.assertNull(inputDecorator7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter45);
        org.junit.Assert.assertNull(inputDecorator48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , #]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(jsonParser77);
        org.junit.Assert.assertNotNull(jsonGenerator79);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test177");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter5.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter8 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter5);
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator10 = jsonFactory9.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray20 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream23 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, inputStream19, byteArray20, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader27 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext11, inputStream13, byteArray20, 0, 0, false);
        char[] charArray30 = new char[] { ' ', '#' };
        int int31 = uTF32Reader27.read(charArray30);
        char[] charArray35 = new char[] { ' ', '#', '4' };
        int int38 = uTF32Reader27.read(charArray35, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonFactory9.createParser((java.io.Reader) uTF32Reader27);
        java.io.Writer writer40 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonFactory9.createJsonGenerator(writer40);
        boolean boolean42 = jsonGenerator41.isClosed();
        jsonGenerator41.writeStartObject();
        boolean boolean44 = jsonGenerator41.isClosed();
        jsonGenerator41.writeNumber(100.0d);
        defaultPrettyPrinter8.writeObjectFieldValueSeparator(jsonGenerator41);
        jsonGenerator41.writeBooleanField("JSON", true);
        defaultPrettyPrinter4.writeEndObject(jsonGenerator41, 1);
        com.fasterxml.jackson.core.Base64Variant base64Variant53 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext54 = null;
        java.io.InputStream inputStream55 = null;
        byte[] byteArray56 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream59 = new com.fasterxml.jackson.core.io.MergedStream(iOContext54, inputStream55, byteArray56, 0, (int) (short) -1);
        int int60 = mergedStream59.available();
        // The following exception was thrown during execution in test generation
        try {
            int int62 = jsonGenerator41.writeBinary(base64Variant53, (java.io.InputStream) mergedStream59, (-69));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertNotNull(jsonGenerator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test178");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.Base64Variant base64Variant79 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray80 = readerBasedJsonParser77.getBinaryValue(base64Variant79);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test179");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature39 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory38.disable(feature39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test180");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        java.lang.Object obj35 = jsonParser30.getEmbeddedObject();
        long long37 = jsonParser30.getValueAsLong((long) (short) 1);
        java.io.OutputStream outputStream38 = null;
        int int39 = jsonParser30.releaseBuffered(outputStream38);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test181");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int65 = serializedString56.appendQuotedUTF8(byteArray63, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonGenerator52.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString56);
        int int67 = serializedString56.charLength();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(serializedString56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test182");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.FormatSchema formatSchema74 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator73.setSchema(formatSchema74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test183");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        boolean boolean57 = iOContext7.isResourceManaged();
        boolean boolean58 = iOContext7.isResourceManaged();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test184");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory34.createParser("hi!");
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory34.createParser("");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertNotNull(jsonParser42);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test185");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator22 = jsonFactory0.getInputDecorator();
        java.io.InputStream inputStream23 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory0.createParser(inputStream23);
        boolean boolean25 = jsonParser24.isExpectedStartArrayToken();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNull(inputDecorator22);
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test186");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.Base64Variant base64Variant72 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken73 = com.fasterxml.jackson.core.JsonToken.START_OBJECT;
        boolean boolean74 = jsonToken73.isNumeric();
        boolean boolean75 = jsonToken73.isNumeric();
        byte[] byteArray76 = jsonToken73.asByteArray();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70._writeBinary(base64Variant72, byteArray76, (-1270517243), 16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + jsonToken73 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_OBJECT + "'", jsonToken73.equals(com.fasterxml.jackson.core.JsonToken.START_OBJECT));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[123]");
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test187");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeString("");
        jsonGenerator35.writeBoolean(false);
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator35);
        boolean boolean41 = jsonGenerator35.canWriteObjectId();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter42 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter42.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString45 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter46 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter42, serializableString45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = jsonGenerator35.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter42);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter48 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter49 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter48.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter49);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator52 = jsonFactory51.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext53 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext54 = null;
        java.io.InputStream inputStream55 = null;
        byte[] byteArray56 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream59 = new com.fasterxml.jackson.core.io.MergedStream(iOContext54, inputStream55, byteArray56, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext60 = null;
        java.io.InputStream inputStream61 = null;
        byte[] byteArray62 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext60, inputStream61, byteArray62, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader69 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext53, inputStream55, byteArray62, 0, 0, false);
        char[] charArray72 = new char[] { ' ', '#' };
        int int73 = uTF32Reader69.read(charArray72);
        char[] charArray77 = new char[] { ' ', '#', '4' };
        int int80 = uTF32Reader69.read(charArray77, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser81 = jsonFactory51.createParser((java.io.Reader) uTF32Reader69);
        java.io.Writer writer82 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator83 = jsonFactory51.createJsonGenerator(writer82);
        com.fasterxml.jackson.core.ObjectCodec objectCodec84 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory85 = jsonFactory51.setCodec(objectCodec84);
        java.io.Writer writer86 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = jsonFactory85.createGenerator(writer86);
        jsonGenerator87.writeArrayFieldStart("");
        fixedSpaceIndenter49.writeIndentation(jsonGenerator87, (int) (short) 0);
        defaultPrettyPrinter42.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter49);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jsonGenerator47);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter49);
        org.junit.Assert.assertNull(inputDecorator52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , #]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(jsonParser81);
        org.junit.Assert.assertNotNull(jsonGenerator83);
        org.junit.Assert.assertNotNull(jsonFactory85);
        org.junit.Assert.assertNotNull(jsonGenerator87);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test188");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator22 = jsonFactory0.getInputDecorator();
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory0.createJsonGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray28 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream31 = new com.fasterxml.jackson.core.io.MergedStream(iOContext26, inputStream27, byteArray28, 0, (int) (short) -1);
        boolean boolean32 = mergedStream31.markSupported();
        boolean boolean33 = mergedStream31.markSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = jsonGenerator25.writeBinary((java.io.InputStream) mergedStream31, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNull(inputDecorator22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test189");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeString("");
        jsonGenerator35.writeBoolean(false);
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator35);
        boolean boolean41 = jsonGenerator35.canWriteObjectId();
        jsonGenerator35.writeNumberField("JSON", 0);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test190");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory0.setRootValueSeparator("");
        boolean boolean22 = jsonFactory21.requiresCustomCodec();
        java.net.URL uRL23 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory21.createJsonParser(uRL23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test191");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        java.io.OutputStream outputStream80 = null;
        com.fasterxml.jackson.core.JsonToken jsonToken81 = com.fasterxml.jackson.core.JsonToken.START_OBJECT;
        boolean boolean82 = jsonToken81.isNumeric();
        boolean boolean83 = jsonToken81.isNumeric();
        byte[] byteArray84 = jsonToken81.asByteArray();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator87 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, 100, objectCodec79, outputStream80, byteArray84, 1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Trying to call same allocXxx() method second time");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + jsonToken81 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_OBJECT + "'", jsonToken81.equals(com.fasterxml.jackson.core.JsonToken.START_OBJECT));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[123]");
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test192");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber((-1270527807));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test193");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int80 = serializedString71.appendQuotedUTF8(byteArray78, (int) ' ');
        java.lang.String str81 = serializedString71.getValue();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70._writePPFieldName((com.fasterxml.jackson.core.SerializableString) serializedString71, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(serializedString71);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + " " + "'", str81, " ");
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test194");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter6 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        boolean boolean7 = fixedSpaceIndenter6.isInline();
        boolean boolean8 = fixedSpaceIndenter6.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter9 = defaultPrettyPrinter5.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter6);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter10 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter11 = defaultPrettyPrinter10.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter12 = defaultPrettyPrinter11.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator14 = jsonFactory13.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext15 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext16 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray18 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream21 = new com.fasterxml.jackson.core.io.MergedStream(iOContext16, inputStream17, byteArray18, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader31 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext15, inputStream17, byteArray24, 0, 0, false);
        char[] charArray34 = new char[] { ' ', '#' };
        int int35 = uTF32Reader31.read(charArray34);
        char[] charArray39 = new char[] { ' ', '#', '4' };
        int int42 = uTF32Reader31.read(charArray39, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser43 = jsonFactory13.createParser((java.io.Reader) uTF32Reader31);
        java.io.Writer writer44 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator45 = jsonFactory13.createJsonGenerator(writer44);
        boolean boolean46 = jsonGenerator45.isClosed();
        jsonGenerator45.writeStartObject();
        boolean boolean48 = jsonGenerator45.isClosed();
        jsonGenerator45.writeNumber(100.0d);
        defaultPrettyPrinter12.beforeArrayValues(jsonGenerator45);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter52 = defaultPrettyPrinter12.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonFactory jsonFactory53 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator54 = jsonFactory53.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext56 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray58 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext56, inputStream57, byteArray58, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext62 = null;
        java.io.InputStream inputStream63 = null;
        byte[] byteArray64 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext62, inputStream63, byteArray64, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader71 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext55, inputStream57, byteArray64, 0, 0, false);
        char[] charArray74 = new char[] { ' ', '#' };
        int int75 = uTF32Reader71.read(charArray74);
        char[] charArray79 = new char[] { ' ', '#', '4' };
        int int82 = uTF32Reader71.read(charArray79, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser83 = jsonFactory53.createParser((java.io.Reader) uTF32Reader71);
        java.io.Writer writer84 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator85 = jsonFactory53.createJsonGenerator(writer84);
        boolean boolean86 = jsonGenerator85.isClosed();
        jsonGenerator85.writeStartObject();
        boolean boolean88 = jsonGenerator85.isClosed();
        jsonGenerator85.writeNumber(100.0d);
        jsonGenerator85.writeFieldName("hi!");
        defaultPrettyPrinter52.writeRootValueSeparator(jsonGenerator85);
        fixedSpaceIndenter6.writeIndentation(jsonGenerator85, (-1270486837));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter9);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter11);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter12);
        org.junit.Assert.assertNull(inputDecorator14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ , #]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(jsonParser43);
        org.junit.Assert.assertNotNull(jsonGenerator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter52);
        org.junit.Assert.assertNull(inputDecorator54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[ , #]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(jsonParser83);
        org.junit.Assert.assertNotNull(jsonGenerator85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test195");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        jsonParser30.close();
        com.fasterxml.jackson.core.JsonParser.Feature feature32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonParser30.enable(feature32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test196");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.TreeNode treeNode40 = null;
        jsonGenerator39.writeTree(treeNode40);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter42 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonGenerator39.setPrettyPrinter(prettyPrinter42);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator45 = jsonGenerator39.setFeatureMask(64);
        com.fasterxml.jackson.core.Base64Variant base64Variant46 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray50 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream53 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray50, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext54 = null;
        java.io.InputStream inputStream55 = null;
        byte[] byteArray56 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream59 = new com.fasterxml.jackson.core.io.MergedStream(iOContext54, inputStream55, byteArray56, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader63 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext47, inputStream49, byteArray56, 0, 0, false);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator45.writeBinary(base64Variant46, byteArray56, (int) (byte) -65, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertNotNull(jsonGenerator45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test197");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber((short) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test198");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature53 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = jsonFactory0.enable(feature53);
        java.io.OutputStream outputStream55 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator56 = jsonFactory0.createGenerator(outputStream55);
        java.io.OutputStream outputStream57 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator58 = jsonFactory0.createJsonGenerator(outputStream57);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature53.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory54);
        org.junit.Assert.assertNotNull(jsonGenerator56);
        org.junit.Assert.assertNotNull(jsonGenerator58);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test199");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes72 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes72;
        com.fasterxml.jackson.core.Base64Variant base64Variant74 = null;
        java.io.InputStream inputStream75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int77 = uTF8JsonGenerator70.writeBinary(base64Variant74, inputStream75, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test200");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70._releaseBuffers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test201");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version7 = jsonFactory6.version();
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext15 = null;
        java.io.InputStream inputStream16 = null;
        byte[] byteArray17 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream20 = new com.fasterxml.jackson.core.io.MergedStream(iOContext15, inputStream16, byteArray17, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader24 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext8, inputStream10, byteArray17, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser25 = jsonFactory6.createParser((java.io.Reader) uTF32Reader24);
        boolean boolean26 = jsonFactory6.requiresPropertyOrdering();
        java.lang.String str27 = jsonFactory6.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator28 = jsonFactory6.getInputDecorator();
        java.io.InputStream inputStream29 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory6.createParser(inputStream29);
        java.io.OutputStream outputStream31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory6.createJsonGenerator(outputStream31);
        defaultPrettyPrinter5.writeRootValueSeparator(jsonGenerator32);
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator35 = jsonFactory34.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext36 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        java.io.InputStream inputStream38 = null;
        byte[] byteArray39 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream42 = new com.fasterxml.jackson.core.io.MergedStream(iOContext37, inputStream38, byteArray39, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        java.io.InputStream inputStream44 = null;
        byte[] byteArray45 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream48 = new com.fasterxml.jackson.core.io.MergedStream(iOContext43, inputStream44, byteArray45, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader52 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext36, inputStream38, byteArray45, 0, 0, false);
        char[] charArray55 = new char[] { ' ', '#' };
        int int56 = uTF32Reader52.read(charArray55);
        char[] charArray60 = new char[] { ' ', '#', '4' };
        int int63 = uTF32Reader52.read(charArray60, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory34.createParser((java.io.Reader) uTF32Reader52);
        java.io.Writer writer65 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonFactory34.createJsonGenerator(writer65);
        boolean boolean67 = jsonGenerator66.isClosed();
        jsonGenerator66.writeStartObject();
        boolean boolean69 = jsonGenerator66.isClosed();
        jsonGenerator66.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec72 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = jsonGenerator66.setCodec(objectCodec72);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter74 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter75 = defaultPrettyPrinter74.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = jsonGenerator66.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter75);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter77 = jsonGenerator76.getPrettyPrinter();
        jsonGenerator76.writeRaw("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature80 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator82 = jsonGenerator76.configure(feature80, false);
        defaultPrettyPrinter5.writeArrayValueSeparator(jsonGenerator76);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(jsonParser25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JSON" + "'", str27, "JSON");
        org.junit.Assert.assertNull(inputDecorator28);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNull(inputDecorator35);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ , #]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter75);
        org.junit.Assert.assertNotNull(jsonGenerator76);
        org.junit.Assert.assertNotNull(prettyPrinter77);
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature80.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonGenerator82);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test202");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int12 = serializedString3.appendQuotedUTF8(byteArray10, (int) ' ');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter13 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, (com.fasterxml.jackson.core.SerializableString) serializedString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter14 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        boolean boolean15 = nopIndenter14.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter16 = defaultPrettyPrinter13.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter14);
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator18 = jsonFactory17.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext19 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray28 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream31 = new com.fasterxml.jackson.core.io.MergedStream(iOContext26, inputStream27, byteArray28, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader35 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext19, inputStream21, byteArray28, 0, 0, false);
        char[] charArray38 = new char[] { ' ', '#' };
        int int39 = uTF32Reader35.read(charArray38);
        char[] charArray43 = new char[] { ' ', '#', '4' };
        int int46 = uTF32Reader35.read(charArray43, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser47 = jsonFactory17.createParser((java.io.Reader) uTF32Reader35);
        java.io.Writer writer48 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator49 = jsonFactory17.createJsonGenerator(writer48);
        com.fasterxml.jackson.core.ObjectCodec objectCodec50 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory17.setCodec(objectCodec50);
        java.io.Writer writer52 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator53 = jsonFactory51.createGenerator(writer52);
        java.io.Writer writer54 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonFactory51.createGenerator(writer54);
        defaultPrettyPrinter16.writeObjectFieldValueSeparator(jsonGenerator55);
        defaultPrettyPrinter16.spacesInObjectEntries(true);
        org.junit.Assert.assertNotNull(serializedString3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter16);
        org.junit.Assert.assertNull(inputDecorator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , #]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(jsonParser47);
        org.junit.Assert.assertNotNull(jsonGenerator49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(jsonGenerator53);
        org.junit.Assert.assertNotNull(jsonGenerator55);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test203");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        com.fasterxml.jackson.core.SerializableString serializableString40 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonGenerator37.setRootValueSeparator(serializableString40);
        jsonGenerator41.writeObjectFieldStart("ROOT");
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jsonGenerator41);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test204");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        jsonGenerator37.writeNumberField("[Source: false; line: 1, column: 0]", (int) (short) 100);
        jsonGenerator37.writeBoolean(true);
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test205");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        jsonGenerator36.writeObjectFieldStart("");
        jsonGenerator36.writeObjectFieldStart("hi!");
        defaultPrettyPrinter0.beforeObjectEntries(jsonGenerator36);
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator43 = jsonFactory42.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray47 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream50 = new com.fasterxml.jackson.core.io.MergedStream(iOContext45, inputStream46, byteArray47, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext51 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray53 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext51, inputStream52, byteArray53, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader60 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext44, inputStream46, byteArray53, 0, 0, false);
        char[] charArray63 = new char[] { ' ', '#' };
        int int64 = uTF32Reader60.read(charArray63);
        char[] charArray68 = new char[] { ' ', '#', '4' };
        int int71 = uTF32Reader60.read(charArray68, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser72 = jsonFactory42.createParser((java.io.Reader) uTF32Reader60);
        java.io.Writer writer73 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = jsonFactory42.createJsonGenerator(writer73);
        com.fasterxml.jackson.core.io.IOContext iOContext75 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext76 = null;
        java.io.InputStream inputStream77 = null;
        byte[] byteArray78 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream81 = new com.fasterxml.jackson.core.io.MergedStream(iOContext76, inputStream77, byteArray78, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext82 = null;
        java.io.InputStream inputStream83 = null;
        byte[] byteArray84 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext82, inputStream83, byteArray84, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader91 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext75, inputStream77, byteArray84, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser92 = jsonFactory42.createParser(byteArray84);
        jsonGenerator36.writeBinary(byteArray84);
        jsonGenerator36.writeNumberField("", (float) '#');
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNull(inputDecorator43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , #]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(jsonParser72);
        org.junit.Assert.assertNotNull(jsonGenerator74);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(jsonParser92);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test206");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        jsonGenerator37.writeStartObject();
        boolean boolean40 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeEndObject(jsonGenerator37, (int) (short) 0);
        jsonGenerator37.writeStartObject();
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test207");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        java.io.OutputStream outputStream39 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory38.createJsonGenerator(outputStream39);
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory38.createParser("ARRAY");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertNotNull(jsonParser42);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test208");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeRaw("ROOT");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test209");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeString("");
        jsonGenerator35.writeBoolean(false);
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator35);
        defaultPrettyPrinter2.spacesInObjectEntries(true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test210");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext36 = jsonGenerator32.getOutputContext();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes37 = jsonGenerator32.getCharacterEscapes();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonStreamContext36);
        org.junit.Assert.assertNull(characterEscapes37);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test211");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter40.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int52 = serializedString43.appendQuotedUTF8(byteArray50, (int) ' ');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter40, (com.fasterxml.jackson.core.SerializableString) serializedString43);
        byte[] byteArray54 = serializedString43.asUnquotedUTF8();
        jsonGenerator32.writeRaw((com.fasterxml.jackson.core.SerializableString) serializedString43);
        java.nio.ByteBuffer byteBuffer56 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int57 = serializedString43.putUnquotedUTF8(byteBuffer56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(serializedString43);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[32]");
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test212");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) (short) 100);
        boolean boolean33 = jsonParser30.requiresCustomCodec();
        java.lang.String str34 = jsonParser30.getText();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test213");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter5.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter8 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter5);
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator10 = jsonFactory9.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray20 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream23 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, inputStream19, byteArray20, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader27 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext11, inputStream13, byteArray20, 0, 0, false);
        char[] charArray30 = new char[] { ' ', '#' };
        int int31 = uTF32Reader27.read(charArray30);
        char[] charArray35 = new char[] { ' ', '#', '4' };
        int int38 = uTF32Reader27.read(charArray35, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonFactory9.createParser((java.io.Reader) uTF32Reader27);
        java.io.Writer writer40 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonFactory9.createJsonGenerator(writer40);
        boolean boolean42 = jsonGenerator41.isClosed();
        jsonGenerator41.writeStartObject();
        boolean boolean44 = jsonGenerator41.isClosed();
        jsonGenerator41.writeNumber(100.0d);
        defaultPrettyPrinter8.writeObjectFieldValueSeparator(jsonGenerator41);
        jsonGenerator41.writeBooleanField("JSON", true);
        defaultPrettyPrinter4.writeEndObject(jsonGenerator41, 1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        boolean boolean54 = nopIndenter53.isInline();
        defaultPrettyPrinter4.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter53);
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator57 = jsonFactory56.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext59 = null;
        java.io.InputStream inputStream60 = null;
        byte[] byteArray61 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext59, inputStream60, byteArray61, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext65 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray67 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream70 = new com.fasterxml.jackson.core.io.MergedStream(iOContext65, inputStream66, byteArray67, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader74 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext58, inputStream60, byteArray67, 0, 0, false);
        char[] charArray77 = new char[] { ' ', '#' };
        int int78 = uTF32Reader74.read(charArray77);
        char[] charArray82 = new char[] { ' ', '#', '4' };
        int int85 = uTF32Reader74.read(charArray82, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser86 = jsonFactory56.createParser((java.io.Reader) uTF32Reader74);
        java.io.Writer writer87 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator88 = jsonFactory56.createJsonGenerator(writer87);
        boolean boolean89 = jsonGenerator88.isClosed();
        jsonGenerator88.writeStartObject();
        boolean boolean91 = jsonGenerator88.isClosed();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext92 = jsonGenerator88.getOutputContext();
        defaultPrettyPrinter4.writeArrayValueSeparator(jsonGenerator88);
        org.junit.Assert.assertNull(inputDecorator10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertNotNull(jsonGenerator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(inputDecorator57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ , #]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(jsonParser86);
        org.junit.Assert.assertNotNull(jsonGenerator88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(jsonStreamContext92);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test214");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeRawValue("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test215");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        jsonGenerator35.writeObjectFieldStart("hi!");
        jsonGenerator35.writeNumberField("hi!", (long) (short) -1);
        defaultPrettyPrinter2.writeObjectFieldValueSeparator(jsonGenerator35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = defaultPrettyPrinter2.withoutSpacesInObjectEntries();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter44);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test216");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber((float) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test217");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        jsonGenerator37.writeNumberField("[Source: false; line: 1, column: 0]", (int) (short) 100);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonGenerator37.setHighestNonEscapedChar((-1270519895));
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray47 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream50 = new com.fasterxml.jackson.core.io.MergedStream(iOContext45, inputStream46, byteArray47, 0, (int) (short) -1);
        int int51 = mergedStream50.available();
        boolean boolean52 = mergedStream50.markSupported();
        mergedStream50.mark(100);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = jsonGenerator37.writeBinary((java.io.InputStream) mergedStream50, 16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test218");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int12 = serializedString3.appendQuotedUTF8(byteArray10, (int) ' ');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter13 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, (com.fasterxml.jackson.core.SerializableString) serializedString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter14 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter15 = defaultPrettyPrinter14.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter16 = defaultPrettyPrinter15.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory17 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator18 = jsonFactory17.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext19 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext26 = null;
        java.io.InputStream inputStream27 = null;
        byte[] byteArray28 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream31 = new com.fasterxml.jackson.core.io.MergedStream(iOContext26, inputStream27, byteArray28, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader35 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext19, inputStream21, byteArray28, 0, 0, false);
        char[] charArray38 = new char[] { ' ', '#' };
        int int39 = uTF32Reader35.read(charArray38);
        char[] charArray43 = new char[] { ' ', '#', '4' };
        int int46 = uTF32Reader35.read(charArray43, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser47 = jsonFactory17.createParser((java.io.Reader) uTF32Reader35);
        java.io.Writer writer48 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator49 = jsonFactory17.createJsonGenerator(writer48);
        jsonGenerator49.writeString("");
        jsonGenerator49.writeBoolean(false);
        defaultPrettyPrinter16.beforeObjectEntries(jsonGenerator49);
        jsonGenerator49.writeNumberField("hi!", (float) ' ');
        jsonGenerator49.writeNumberField("[Source: false; line: 1, column: 0]", 0L);
        defaultPrettyPrinter0.writeStartObject(jsonGenerator49);
        org.junit.Assert.assertNotNull(serializedString3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter15);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter16);
        org.junit.Assert.assertNull(inputDecorator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , #]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(jsonParser47);
        org.junit.Assert.assertNotNull(jsonGenerator49);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test219");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.Version version33 = jsonFactory0.version();
        com.fasterxml.jackson.core.ObjectCodec objectCodec34 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = jsonFactory0.setCodec(objectCodec34);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(jsonFactory35);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test220");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        // The following exception was thrown during execution in test generation
        try {
            long long79 = readerBasedJsonParser77.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test221");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        java.io.Writer writer32 = null;
        int int33 = jsonParser30.releaseBuffered(writer32);
        int int35 = jsonParser30.getValueAsInt(56319);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext36 = jsonParser30.getParsingContext();
        java.lang.String str37 = jsonParser30.getText();
        long long39 = jsonParser30.getValueAsLong(0L);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 56319 + "'", int35 == 56319);
        org.junit.Assert.assertNotNull(jsonStreamContext36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test222");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature38 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean39 = jsonGenerator35.isEnabled(feature38);
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(jsonGenerator35);
        com.fasterxml.jackson.core.JsonLocation jsonLocation44 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) jsonGenerator35, (long) 1, (int) (byte) -65, 0);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature38.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test223");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator75 = jsonGenerator73.setHighestNonEscapedChar(0);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator75.writeNullField(" ");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(jsonGenerator75);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test224");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer1 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler0);
        int int2 = textBuffer1.getCurrentSegmentSize();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = defaultPrettyPrinter3.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter4.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator7 = jsonFactory6.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext15 = null;
        java.io.InputStream inputStream16 = null;
        byte[] byteArray17 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream20 = new com.fasterxml.jackson.core.io.MergedStream(iOContext15, inputStream16, byteArray17, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader24 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext8, inputStream10, byteArray17, 0, 0, false);
        char[] charArray27 = new char[] { ' ', '#' };
        int int28 = uTF32Reader24.read(charArray27);
        char[] charArray32 = new char[] { ' ', '#', '4' };
        int int35 = uTF32Reader24.read(charArray32, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonFactory6.createParser((java.io.Reader) uTF32Reader24);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory6.createJsonGenerator(writer37);
        boolean boolean39 = jsonGenerator38.isClosed();
        jsonGenerator38.writeStartObject();
        boolean boolean41 = jsonGenerator38.isClosed();
        jsonGenerator38.writeNumber(100.0d);
        defaultPrettyPrinter5.beforeArrayValues(jsonGenerator38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter45 = defaultPrettyPrinter5.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator47 = jsonFactory46.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader64 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext48, inputStream50, byteArray57, 0, 0, false);
        char[] charArray67 = new char[] { ' ', '#' };
        int int68 = uTF32Reader64.read(charArray67);
        char[] charArray72 = new char[] { ' ', '#', '4' };
        int int75 = uTF32Reader64.read(charArray72, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser76 = jsonFactory46.createParser((java.io.Reader) uTF32Reader64);
        java.io.Writer writer77 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = jsonFactory46.createJsonGenerator(writer77);
        com.fasterxml.jackson.core.io.SerializedString serializedString79 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int88 = serializedString79.appendQuotedUTF8(byteArray86, (int) ' ');
        jsonGenerator78.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString79);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter90 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter5, (com.fasterxml.jackson.core.SerializableString) serializedString79);
        char[] charArray91 = serializedString79.asQuotedChars();
        textBuffer1.resetWithShared(charArray91, 0, (int) 'a');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter4);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNull(inputDecorator7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter45);
        org.junit.Assert.assertNull(inputDecorator47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(jsonParser76);
        org.junit.Assert.assertNotNull(jsonGenerator78);
        org.junit.Assert.assertNotNull(serializedString79);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[ ]");
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test225");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken81 = readerBasedJsonParser77._handleInvalidNumberStart(2, true);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected character ((CTRL-CHAR, code 2)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test226");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter4.withRootSeparator((com.fasterxml.jackson.core.SerializableString) serializedString40);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter4.writeEndArray(jsonGenerator42, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(serializedString40);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test227");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber((float) (byte) -69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test228");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number79 = readerBasedJsonParser77.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test229");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            int int79 = readerBasedJsonParser77.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test230");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        byte[] byteArray72 = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS;
        uTF8JsonGenerator70._entityBuffer = byteArray72;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeFieldName("a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test231");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        jsonGenerator32.writeString("");
        jsonGenerator32.writeBoolean(false);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeEndArray();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an ARRAY but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test232");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator36 = jsonFactory35.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext38 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray40 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext38, inputStream39, byteArray40, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader53 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext37, inputStream39, byteArray46, 0, 0, false);
        char[] charArray56 = new char[] { ' ', '#' };
        int int57 = uTF32Reader53.read(charArray56);
        char[] charArray61 = new char[] { ' ', '#', '4' };
        int int64 = uTF32Reader53.read(charArray61, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser65 = jsonFactory35.createParser((java.io.Reader) uTF32Reader53);
        com.fasterxml.jackson.core.JsonParser jsonParser66 = jsonFactory0.createJsonParser((java.io.Reader) uTF32Reader53);
        uTF32Reader53.close();
        java.nio.CharBuffer charBuffer68 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int69 = uTF32Reader53.read(charBuffer68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNull(inputDecorator36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , #]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(jsonParser65);
        org.junit.Assert.assertNotNull(jsonParser66);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test233");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        jsonParser30.close();
        com.fasterxml.jackson.core.JsonParser.Feature feature32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonParser30.configure(feature32, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test234");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        com.fasterxml.jackson.core.JsonLocation jsonLocation45 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) feature39, (long) (-1270536137), (int) '#', (int) (short) 1);
        int int46 = jsonLocation45.getLineNr();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test235");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        boolean boolean38 = jsonGenerator35.isClosed();
        jsonGenerator35.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator35.setCodec(objectCodec41);
        fixedSpaceIndenter1.writeIndentation(jsonGenerator35, 55296);
        jsonGenerator35.writeNumber((short) (byte) -69);
        jsonGenerator35.writeNumberField("", (-1));
        boolean boolean50 = jsonGenerator35.canWriteBinaryNatively();
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test236");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77._skipString();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test237");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        boolean boolean34 = jsonParser30.canReadTypeId();
        int int35 = jsonParser30.getTextLength();
        java.lang.Object obj36 = jsonParser30.getInputSource();
        java.lang.String str37 = jsonParser30.getCurrentName();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test238");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int42 = serializedString33.appendQuotedUTF8(byteArray40, (int) ' ');
        jsonGenerator32.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString33);
        char[] charArray44 = serializedString33.asQuotedChars();
        java.io.OutputStream outputStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int46 = serializedString33.writeQuotedUTF8(outputStream45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(serializedString33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ ]");
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test239");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonParser jsonParser79 = readerBasedJsonParser77.skipChildren();
        // The following exception was thrown during execution in test generation
        try {
            float float80 = readerBasedJsonParser77.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNotNull(jsonParser79);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test240");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber((short) (byte) -17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test241");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        com.fasterxml.jackson.core.Version version34 = jsonParser30.version();
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonParser30.setFeatureMask(56319);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean37 = jsonParser30.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNotNull(jsonParser36);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test242");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        com.fasterxml.jackson.core.JsonToken jsonToken80 = readerBasedJsonParser77.nextValue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number81 = readerBasedJsonParser77.getNumberValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertNull(jsonToken80);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test243");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter5.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter8 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter5);
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator10 = jsonFactory9.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray20 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream23 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, inputStream19, byteArray20, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader27 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext11, inputStream13, byteArray20, 0, 0, false);
        char[] charArray30 = new char[] { ' ', '#' };
        int int31 = uTF32Reader27.read(charArray30);
        char[] charArray35 = new char[] { ' ', '#', '4' };
        int int38 = uTF32Reader27.read(charArray35, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonFactory9.createParser((java.io.Reader) uTF32Reader27);
        java.io.Writer writer40 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonFactory9.createJsonGenerator(writer40);
        boolean boolean42 = jsonGenerator41.isClosed();
        jsonGenerator41.writeStartObject();
        boolean boolean44 = jsonGenerator41.isClosed();
        jsonGenerator41.writeNumber(100.0d);
        defaultPrettyPrinter8.writeObjectFieldValueSeparator(jsonGenerator41);
        jsonGenerator41.writeBooleanField("JSON", true);
        defaultPrettyPrinter4.writeEndObject(jsonGenerator41, 1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter54 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter53.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter54);
        defaultPrettyPrinter4.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter54);
        org.junit.Assert.assertNull(inputDecorator10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertNotNull(jsonGenerator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter54);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test244");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int49 = serializedString40.appendQuotedUTF8(byteArray47, (int) ' ');
        java.lang.String str50 = serializedString40.getValue();
        jsonGenerator32.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString40);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(serializedString40);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + " " + "'", str50, " ");
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test245");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        byte[] byteArray72 = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS;
        uTF8JsonGenerator70._entityBuffer = byteArray72;
        // The following exception was thrown during execution in test generation
        try {
            int int76 = uTF8JsonGenerator70._decodeSurrogate(57343, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Incomplete surrogate pair: first char 0xdfff, second 0xa");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test246");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        boolean boolean38 = jsonGenerator35.isClosed();
        jsonGenerator35.writeNumber(100.0d);
        defaultPrettyPrinter2.beforeArrayValues(jsonGenerator35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter42 = defaultPrettyPrinter2.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonFactory jsonFactory43 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator44 = jsonFactory43.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext52 = null;
        java.io.InputStream inputStream53 = null;
        byte[] byteArray54 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream57 = new com.fasterxml.jackson.core.io.MergedStream(iOContext52, inputStream53, byteArray54, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader61 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext45, inputStream47, byteArray54, 0, 0, false);
        char[] charArray64 = new char[] { ' ', '#' };
        int int65 = uTF32Reader61.read(charArray64);
        char[] charArray69 = new char[] { ' ', '#', '4' };
        int int72 = uTF32Reader61.read(charArray69, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser73 = jsonFactory43.createParser((java.io.Reader) uTF32Reader61);
        java.io.Writer writer74 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator75 = jsonFactory43.createJsonGenerator(writer74);
        com.fasterxml.jackson.core.io.SerializedString serializedString76 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int85 = serializedString76.appendQuotedUTF8(byteArray83, (int) ' ');
        jsonGenerator75.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString76);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter87 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter2, (com.fasterxml.jackson.core.SerializableString) serializedString76);
        java.io.OutputStream outputStream88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int89 = serializedString76.writeQuotedUTF8(outputStream88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter42);
        org.junit.Assert.assertNull(inputDecorator44);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , #]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(jsonParser73);
        org.junit.Assert.assertNotNull(jsonGenerator75);
        org.junit.Assert.assertNotNull(serializedString76);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test247");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        uTF8JsonGenerator70.writeRaw("");
        uTF8JsonGenerator70.writeRaw("com.fasterxml.jackson.core.JsonParseException: hi!", (-1270517243), (-1270542579));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test248");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        int int72 = uTF8JsonGenerator70.getHighestEscapedChar();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test249");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType1 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.CONCAT_BUFFER;
        com.fasterxml.jackson.core.io.SerializedString serializedString2 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray9 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int11 = serializedString2.appendQuotedUTF8(byteArray9, (int) ' ');
        char[] charArray12 = serializedString2.asQuotedChars();
        bufferRecycler0.releaseCharBuffer(charBufferType1, charArray12);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler14 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType15 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
        char[] charArray16 = bufferRecycler14.allocCharBuffer(charBufferType15);
        com.fasterxml.jackson.core.util.BufferRecycler.ByteBufferType byteBufferType17 = com.fasterxml.jackson.core.util.BufferRecycler.ByteBufferType.WRITE_CONCAT_BUFFER;
        com.fasterxml.jackson.core.JsonFactory jsonFactory18 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator19 = jsonFactory18.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        java.io.InputStream inputStream22 = null;
        byte[] byteArray23 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream26 = new com.fasterxml.jackson.core.io.MergedStream(iOContext21, inputStream22, byteArray23, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext27 = null;
        java.io.InputStream inputStream28 = null;
        byte[] byteArray29 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream32 = new com.fasterxml.jackson.core.io.MergedStream(iOContext27, inputStream28, byteArray29, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader36 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext20, inputStream22, byteArray29, 0, 0, false);
        char[] charArray39 = new char[] { ' ', '#' };
        int int40 = uTF32Reader36.read(charArray39);
        char[] charArray44 = new char[] { ' ', '#', '4' };
        int int47 = uTF32Reader36.read(charArray44, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser48 = jsonFactory18.createParser((java.io.Reader) uTF32Reader36);
        java.io.Writer writer49 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = jsonFactory18.createJsonGenerator(writer49);
        com.fasterxml.jackson.core.Version version51 = jsonFactory18.version();
        com.fasterxml.jackson.core.io.IOContext iOContext52 = null;
        java.io.InputStream inputStream53 = null;
        byte[] byteArray54 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream57 = new com.fasterxml.jackson.core.io.MergedStream(iOContext52, inputStream53, byteArray54, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser58 = jsonFactory18.createParser(byteArray54);
        bufferRecycler14.releaseByteBuffer(byteBufferType17, byteArray54);
        byte[] byteArray60 = bufferRecycler0.allocByteBuffer(byteBufferType17);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler61 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType62 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
        char[] charArray63 = bufferRecycler61.allocCharBuffer(charBufferType62);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler64 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType65 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
        char[] charArray66 = bufferRecycler64.allocCharBuffer(charBufferType65);
        com.fasterxml.jackson.core.io.SerializedString serializedString67 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int76 = serializedString67.appendQuotedUTF8(byteArray74, (int) ' ');
        char[] charArray77 = serializedString67.asQuotedChars();
        bufferRecycler61.releaseCharBuffer(charBufferType65, charArray77);
        char[] charArray79 = bufferRecycler0.allocCharBuffer(charBufferType65);
        org.junit.Assert.assertTrue("'" + charBufferType1 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.CONCAT_BUFFER + "'", charBufferType1.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.CONCAT_BUFFER));
        org.junit.Assert.assertNotNull(serializedString2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ ]");
        org.junit.Assert.assertTrue("'" + charBufferType15 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER + "'", charBufferType15.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + byteBufferType17 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.ByteBufferType.WRITE_CONCAT_BUFFER + "'", byteBufferType17.equals(com.fasterxml.jackson.core.util.BufferRecycler.ByteBufferType.WRITE_CONCAT_BUFFER));
        org.junit.Assert.assertNull(inputDecorator19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , #]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(jsonParser48);
        org.junit.Assert.assertNotNull(jsonGenerator50);
        org.junit.Assert.assertNotNull(version51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(jsonParser58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertTrue("'" + charBufferType62 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER + "'", charBufferType62.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER));
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + charBufferType65 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER + "'", charBufferType65.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(serializedString67);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ ]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test250");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeString("");
        jsonGenerator35.writeBoolean(false);
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter2.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter42 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = defaultPrettyPrinter41.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter42);
        boolean boolean44 = fixedSpaceIndenter42.isInline();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter42);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test251");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        boolean boolean34 = jsonParser30.canReadTypeId();
        int int35 = jsonParser30.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser.NumberType numberType36 = jsonParser30.getNumberType();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@34f57e63; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test252");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        com.fasterxml.jackson.core.Version version34 = jsonParser30.version();
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonParser30.setFeatureMask(56319);
        // The following exception was thrown during execution in test generation
        try {
            byte byte37 = jsonParser36.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@22d30458; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNotNull(jsonParser36);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test253");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator36 = jsonFactory35.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext38 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray40 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext38, inputStream39, byteArray40, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader53 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext37, inputStream39, byteArray46, 0, 0, false);
        char[] charArray56 = new char[] { ' ', '#' };
        int int57 = uTF32Reader53.read(charArray56);
        char[] charArray61 = new char[] { ' ', '#', '4' };
        int int64 = uTF32Reader53.read(charArray61, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser65 = jsonFactory35.createParser((java.io.Reader) uTF32Reader53);
        com.fasterxml.jackson.core.JsonParser jsonParser66 = jsonFactory0.createJsonParser((java.io.Reader) uTF32Reader53);
        // The following exception was thrown during execution in test generation
        try {
            uTF32Reader53.freeBuffers();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNull(inputDecorator36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , #]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(jsonParser65);
        org.junit.Assert.assertNotNull(jsonParser66);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test254");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        com.fasterxml.jackson.core.Base64Variant base64Variant79 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray80 = readerBasedJsonParser77.getBinaryValue(base64Variant79);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test255");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator22 = jsonFactory0.getInputDecorator();
        java.io.InputStream inputStream23 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser24 = jsonFactory0.createParser(inputStream23);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator25 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory0.setOutputDecorator(outputDecorator25);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNull(inputDecorator22);
        org.junit.Assert.assertNotNull(jsonParser24);
        org.junit.Assert.assertNotNull(jsonFactory26);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test256");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes72 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes72;
        java.lang.Object obj74 = uTF8JsonGenerator70.getOutputTarget();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeStartArray();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test257");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int65 = serializedString56.appendQuotedUTF8(byteArray63, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonGenerator52.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString56);
        byte[] byteArray68 = new byte[] { (byte) -1 };
        int int70 = serializedString56.appendQuotedUTF8(byteArray68, 100);
        char[] charArray71 = serializedString56.asQuotedChars();
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer72 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int73 = charsToNameCanonicalizer72.collisionCount();
        int int74 = charsToNameCanonicalizer72.bucketCount();
        int int75 = charsToNameCanonicalizer72.hashSeed();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler76 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType77 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
        char[] charArray78 = bufferRecycler76.allocCharBuffer(charBufferType77);
        int int81 = charsToNameCanonicalizer72.calcHash(charArray78, (int) (byte) -65, 64);
        int int83 = serializedString56.appendQuoted(charArray78, (int) (byte) 1);
        byte[] byteArray84 = serializedString56.asQuotedUTF8();
        java.nio.ByteBuffer byteBuffer85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int86 = serializedString56.putUnquotedUTF8(byteBuffer85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(serializedString56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ ]");
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 64 + "'", int74 == 64);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1270458011) + "'", int75 == (-1270458011));
        org.junit.Assert.assertTrue("'" + charBufferType77 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER + "'", charBufferType77.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 484376933 + "'", int81 == 484376933);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[32]");
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test258");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        uTF8JsonGenerator70.writeRaw("");
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70._releaseBuffers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Trying to release buffer not owned by the context");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test259");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        boolean boolean56 = jsonGenerator55.canWriteTypeId();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test260");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeObjectFieldStart("");
        defaultPrettyPrinter0.writeRootValueSeparator(jsonGenerator35);
        boolean boolean39 = jsonGenerator35.canWriteObjectId();
        jsonGenerator35.writeBooleanField("", true);
        jsonGenerator35.writeNumber((short) 0);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test261");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.Version version33 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory0.createParser(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            float float41 = jsonParser40.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: [B@52cd5e10; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(jsonParser40);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test262");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        com.fasterxml.jackson.core.SerializableString serializableString75 = uTF8JsonGenerator70._rootValueSeparator;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber(100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(serializableString75);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test263");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator7 = jsonFactory6.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext15 = null;
        java.io.InputStream inputStream16 = null;
        byte[] byteArray17 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream20 = new com.fasterxml.jackson.core.io.MergedStream(iOContext15, inputStream16, byteArray17, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader24 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext8, inputStream10, byteArray17, 0, 0, false);
        char[] charArray27 = new char[] { ' ', '#' };
        int int28 = uTF32Reader24.read(charArray27);
        char[] charArray32 = new char[] { ' ', '#', '4' };
        int int35 = uTF32Reader24.read(charArray32, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonFactory6.createParser((java.io.Reader) uTF32Reader24);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory6.createJsonGenerator(writer37);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader55 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext39, inputStream41, byteArray48, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser56 = jsonFactory6.createParser(byteArray48);
        java.io.Writer writer57 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator58 = jsonFactory6.createGenerator(writer57);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter59 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter60 = defaultPrettyPrinter59.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator61 = jsonGenerator58.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter60);
        com.fasterxml.jackson.core.io.SerializedString serializedString62 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int71 = serializedString62.appendQuotedUTF8(byteArray69, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = jsonGenerator58.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString62);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter73 = defaultPrettyPrinter5.withRootSeparator((com.fasterxml.jackson.core.SerializableString) serializedString62);
        byte[] byteArray75 = new byte[] { (byte) -1 };
        int int77 = serializedString62.appendQuotedUTF8(byteArray75, (int) 'a');
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler78 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer79 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler78);
        boolean boolean80 = textBuffer79.hasTextAsCharacters();
        textBuffer79.setCurrentLength((int) (byte) 10);
        char[] charArray83 = textBuffer79.getCurrentSegment();
        int int85 = serializedString62.appendUnquoted(charArray83, 3);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNull(inputDecorator7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(jsonParser56);
        org.junit.Assert.assertNotNull(jsonGenerator58);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter60);
        org.junit.Assert.assertNotNull(jsonGenerator61);
        org.junit.Assert.assertNotNull(serializedString62);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter73);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test264");
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        int int33 = jsonParser31.nextIntValue((int) 'a');
        jsonParser31.close();
        com.fasterxml.jackson.core.JsonLocation jsonLocation35 = jsonParser31.getCurrentLocation();
        long long36 = jsonLocation35.getByteOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation38 = com.fasterxml.jackson.core.JsonLocation.NA;
        com.fasterxml.jackson.core.JsonParseException jsonParseException39 = new com.fasterxml.jackson.core.JsonParseException("JSON", jsonLocation38);
        com.fasterxml.jackson.core.JsonParseException jsonParseException40 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation35, (java.lang.Throwable) jsonParseException39);
        java.lang.Object obj41 = jsonLocation35.getSourceRef();
        java.lang.Object obj42 = null;
        boolean boolean43 = jsonLocation35.equals(obj42);
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertNotNull(jsonLocation35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(jsonLocation38);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test265");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int20 = jsonParser19.getFeatureMask();
        java.lang.String str21 = jsonParser19.getCurrentName();
        boolean boolean22 = jsonParser19.isClosed();
        double double23 = jsonParser19.getValueAsDouble();
        jsonParser19.close();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test266");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonParser jsonParser79 = readerBasedJsonParser77.skipChildren();
        int int80 = readerBasedJsonParser77.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77._reportInvalidToken(" ");
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token ' ': was expecting ? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNotNull(jsonParser79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test267");
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        int int33 = jsonParser31.nextIntValue((int) 'a');
        jsonParser31.close();
        com.fasterxml.jackson.core.JsonLocation jsonLocation35 = jsonParser31.getCurrentLocation();
        long long36 = jsonLocation35.getByteOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation38 = com.fasterxml.jackson.core.JsonLocation.NA;
        com.fasterxml.jackson.core.JsonParseException jsonParseException39 = new com.fasterxml.jackson.core.JsonParseException("JSON", jsonLocation38);
        com.fasterxml.jackson.core.JsonParseException jsonParseException40 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation35, (java.lang.Throwable) jsonParseException39);
        int int41 = jsonLocation35.getLineNr();
        long long42 = jsonLocation35.getCharOffset();
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertNotNull(jsonLocation35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(jsonLocation38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test268");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator22 = jsonFactory0.getInputDecorator();
        java.io.OutputStream outputStream23 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding24 = com.fasterxml.jackson.core.JsonEncoding.UTF8;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator25 = jsonFactory0.createJsonGenerator(outputStream23, jsonEncoding24);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes26 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory0.setCharacterEscapes(characterEscapes26);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNull(inputDecorator22);
        org.junit.Assert.assertTrue("'" + jsonEncoding24 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF8 + "'", jsonEncoding24.equals(com.fasterxml.jackson.core.JsonEncoding.UTF8));
        org.junit.Assert.assertNotNull(jsonGenerator25);
        org.junit.Assert.assertNotNull(jsonFactory27);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test269");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser("");
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator24 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator25 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory0.setOutputDecorator(outputDecorator25);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator27 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory28 = jsonFactory0.setInputDecorator(inputDecorator27);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNull(inputDecorator24);
        org.junit.Assert.assertNotNull(jsonFactory26);
        org.junit.Assert.assertNotNull(jsonFactory28);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test270");
        int[] intArray0 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeComment();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray2 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray0, (-1270519895));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1]");
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test271");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int42 = serializedString33.appendQuotedUTF8(byteArray40, (int) ' ');
        jsonGenerator32.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString33);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeObjectField("ARRAY", (java.lang.Object) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed java.lang.Character)");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(serializedString33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test272");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator36 = jsonFactory35.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext38 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray40 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext38, inputStream39, byteArray40, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader53 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext37, inputStream39, byteArray46, 0, 0, false);
        char[] charArray56 = new char[] { ' ', '#' };
        int int57 = uTF32Reader53.read(charArray56);
        char[] charArray61 = new char[] { ' ', '#', '4' };
        int int64 = uTF32Reader53.read(charArray61, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser65 = jsonFactory35.createParser((java.io.Reader) uTF32Reader53);
        com.fasterxml.jackson.core.JsonParser jsonParser66 = jsonFactory0.createJsonParser((java.io.Reader) uTF32Reader53);
        boolean boolean67 = uTF32Reader53.ready();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNull(inputDecorator36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , #]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(jsonParser65);
        org.junit.Assert.assertNotNull(jsonParser66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test273");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        java.lang.Object obj72 = uTF8JsonGenerator70.getOutputTarget();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeString("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj72);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test274");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory38.setInputDecorator(inputDecorator39);
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = jsonFactory38.setCodec(objectCodec41);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory42.configure(feature43, true);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(jsonFactory42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory45);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test275");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes73;
        java.io.OutputStream outputStream75 = uTF8JsonGenerator70._outputStream;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber((long) (-1270536137));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(outputStream75);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test276");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = readerBasedJsonParser77._parseName((-1270498851));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1270498851");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test277");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        long long80 = readerBasedJsonParser77.nextLongValue((long) (-69));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = readerBasedJsonParser77._parseName((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected character ((CTRL-CHAR, code 10)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-69L) + "'", long80 == (-69L));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test278");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonParser30.setFeatureMask(64);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonParser30.setFeatureMask((-1));
        java.lang.String str39 = jsonParser38.nextTextValue();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test279");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        jsonGenerator37.writeNumberField("[Source: false; line: 1, column: 0]", (int) (short) 100);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature43 = com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonGenerator37.enable(feature43);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter45 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter45.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter48 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter45);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter45);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter45.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter51 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        boolean boolean52 = fixedSpaceIndenter51.isInline();
        boolean boolean53 = fixedSpaceIndenter51.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter50.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter51);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator44.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter50);
        jsonGenerator55.writeNumberField("ARRAY", 10.0f);
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII + "'", feature43.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII));
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test280");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        java.io.OutputStream outputStream39 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory38.createJsonGenerator(outputStream39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version42 = jsonFactory41.version();
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray52 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream55 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray52, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader59 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext43, inputStream45, byteArray52, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser60 = jsonFactory41.createParser((java.io.Reader) uTF32Reader59);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonFactory38.createJsonParser((java.io.Reader) uTF32Reader59);
        com.fasterxml.jackson.core.FormatSchema formatSchema62 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = jsonFactory38.canUseSchema(formatSchema62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(jsonParser60);
        org.junit.Assert.assertNotNull(jsonParser61);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test281");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        long long80 = readerBasedJsonParser77.nextLongValue((long) (-69));
        com.fasterxml.jackson.core.Base64Variant base64Variant81 = null;
        java.io.OutputStream outputStream82 = null;
        byte[] byteArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int84 = readerBasedJsonParser77._readBinary(base64Variant81, outputStream82, byteArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-69L) + "'", long80 == (-69L));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test282");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator32 = jsonFactory31.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        char[] charArray52 = new char[] { ' ', '#' };
        int int53 = uTF32Reader49.read(charArray52);
        char[] charArray57 = new char[] { ' ', '#', '4' };
        int int60 = uTF32Reader49.read(charArray57, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonFactory31.createParser((java.io.Reader) uTF32Reader49);
        int int63 = jsonParser61.nextIntValue((int) 'a');
        int int64 = jsonParser61.getFeatureMask();
        double double65 = jsonParser61.getValueAsDouble();
        java.lang.Object obj66 = jsonParser61.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature67 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean68 = jsonParser61.isEnabled(feature67);
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonParser30.enable(feature67);
        long long70 = jsonParser30.getValueAsLong();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(inputDecorator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , #]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature67.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test283");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeEndArray();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an ARRAY but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test284");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        jsonGenerator36.writeObjectFieldStart("");
        jsonGenerator36.writeObjectFieldStart("hi!");
        defaultPrettyPrinter0.beforeObjectEntries(jsonGenerator36);
        com.fasterxml.jackson.core.FormatSchema formatSchema42 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator36.setSchema(formatSchema42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test285");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        com.fasterxml.jackson.core.JsonLocation jsonLocation45 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) feature39, (long) (-1270536137), (int) '#', (int) (short) 1);
        java.lang.String str46 = jsonLocation45.toString();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[Source: ALLOW_COMMENTS; line: 35, column: 1]" + "'", str46, "[Source: ALLOW_COMMENTS; line: 35, column: 1]");
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test286");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        uTF8JsonGenerator70.writeRaw("");
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeRaw("ARRAY", (-69), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -69");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test287");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        jsonGenerator32.writeObjectFieldStart("");
        jsonGenerator32.writeObjectFieldStart("hi!");
        jsonGenerator32.writeStringField("ARRAY", "JSON");
        jsonGenerator32.writeNumberField(" ", 0.0f);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test288");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createJsonParser("JSON");
        double double35 = jsonParser34.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser37 = jsonParser34.setFeatureMask((int) '#');
        com.fasterxml.jackson.core.FormatSchema formatSchema38 = jsonParser34.getSchema();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser37);
        org.junit.Assert.assertNull(formatSchema38);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test289");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        com.fasterxml.jackson.core.TreeNode treeNode35 = null;
        jsonGenerator32.writeTree(treeNode35);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test290");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77._reportInvalidToken(" ", "a
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token ' ': was expecting ? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test291");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory38.setInputDecorator(inputDecorator39);
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = jsonFactory38.setCodec(objectCodec41);
        com.fasterxml.jackson.core.JsonParser jsonParser44 = jsonFactory38.createJsonParser("ROOT");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(jsonFactory42);
        org.junit.Assert.assertNotNull(jsonParser44);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test292");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        jsonGenerator36.writeObjectFieldStart("");
        jsonGenerator36.writeObjectFieldStart("hi!");
        defaultPrettyPrinter0.beforeObjectEntries(jsonGenerator36);
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator43 = jsonFactory42.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray47 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream50 = new com.fasterxml.jackson.core.io.MergedStream(iOContext45, inputStream46, byteArray47, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext51 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray53 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext51, inputStream52, byteArray53, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader60 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext44, inputStream46, byteArray53, 0, 0, false);
        char[] charArray63 = new char[] { ' ', '#' };
        int int64 = uTF32Reader60.read(charArray63);
        char[] charArray68 = new char[] { ' ', '#', '4' };
        int int71 = uTF32Reader60.read(charArray68, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser72 = jsonFactory42.createParser((java.io.Reader) uTF32Reader60);
        java.io.Writer writer73 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = jsonFactory42.createJsonGenerator(writer73);
        defaultPrettyPrinter0.writeArrayValueSeparator(jsonGenerator74);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator74.writeRaw("a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000", 97, (-1270498851));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1270498851");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNull(inputDecorator43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , #]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(jsonParser72);
        org.junit.Assert.assertNotNull(jsonGenerator74);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test293");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        char[] charArray57 = iOContext7.allocConcatBuffer();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertNotNull(charArray57);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test294");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes73;
        java.io.OutputStream outputStream75 = uTF8JsonGenerator70._outputStream;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70._writeFieldName("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(outputStream75);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test295");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        boolean boolean79 = readerBasedJsonParser77.hasTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken80 = com.fasterxml.jackson.core.JsonToken.VALUE_FALSE;
        boolean boolean81 = jsonToken80.isScalarValue();
        java.lang.String str82 = readerBasedJsonParser77._getText2(jsonToken80);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + jsonToken80 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_FALSE + "'", jsonToken80.equals(com.fasterxml.jackson.core.JsonToken.VALUE_FALSE));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "false" + "'", str82, "false");
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test296");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean31 = uTF32Reader18.markSupported();
        int int32 = uTF32Reader18.read();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test297");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.setCodec(objectCodec3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        com.fasterxml.jackson.core.io.IOContext iOContext36 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray38 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream41 = new com.fasterxml.jackson.core.io.MergedStream(iOContext36, inputStream37, byteArray38, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory5.createJsonParser(inputStream37);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean44 = jsonFactory5.isEnabled(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory4.disable(feature43);
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser54 = jsonFactory4.createJsonParser(byteArray48, (-1270472635), 734974343);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1270472635");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(jsonParser42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test298");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        boolean boolean42 = jsonFactory41.requiresPropertyOrdering();
        boolean boolean43 = jsonFactory41.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature44 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = jsonFactory41.configure(feature44, true);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + feature44 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN + "'", feature44.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));
        org.junit.Assert.assertNotNull(jsonFactory46);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test299");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        jsonGenerator32.writeObjectFieldStart("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature37 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean38 = jsonGenerator32.isEnabled(feature37);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter39 = jsonGenerator32.getPrettyPrinter();
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        jsonGenerator32.writeRaw((com.fasterxml.jackson.core.SerializableString) serializedString40);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature37.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(prettyPrinter39);
        org.junit.Assert.assertNotNull(serializedString40);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test300");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator36 = jsonFactory35.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext38 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray40 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext38, inputStream39, byteArray40, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader53 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext37, inputStream39, byteArray46, 0, 0, false);
        char[] charArray56 = new char[] { ' ', '#' };
        int int57 = uTF32Reader53.read(charArray56);
        char[] charArray61 = new char[] { ' ', '#', '4' };
        int int64 = uTF32Reader53.read(charArray61, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser65 = jsonFactory35.createParser((java.io.Reader) uTF32Reader53);
        com.fasterxml.jackson.core.JsonParser jsonParser66 = jsonFactory0.createJsonParser((java.io.Reader) uTF32Reader53);
        long long68 = jsonParser66.nextLongValue((long) (byte) -17);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNull(inputDecorator36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , #]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(jsonParser65);
        org.junit.Assert.assertNotNull(jsonParser66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-17L) + "'", long68 == (-17L));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test301");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77._reportInvalidToken("[Source: false; line: 1, column: 0]");
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token '[Source: false; line: 1, column: 0]': was expecting ? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test302");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes73;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test303");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        int int90 = uTF8JsonGenerator70._charBufferLength;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNull();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2000 + "'", int90 == 2000);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test304");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeEndObject();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an object but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test305");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer57 = iOContext7.constructTextBuffer();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertNotNull(textBuffer57);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test306");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        int int81 = readerBasedJsonParser77.getTextLength();
        com.fasterxml.jackson.core.ObjectCodec objectCodec82 = null;
        readerBasedJsonParser77.setCodec(objectCodec82);
        com.fasterxml.jackson.core.JsonToken jsonToken84 = readerBasedJsonParser77.nextValue();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNull(jsonToken84);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test307");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext0 = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext3 = jsonReadContext0.createChildArrayContext((int) (short) -1, (int) (short) -1);
        jsonReadContext3.reset(2000, 97, (int) (short) -1);
        boolean boolean8 = jsonReadContext3.expectComma();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter9 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter9.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter12 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter9);
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator14 = jsonFactory13.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext15 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext16 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray18 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream21 = new com.fasterxml.jackson.core.io.MergedStream(iOContext16, inputStream17, byteArray18, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader31 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext15, inputStream17, byteArray24, 0, 0, false);
        char[] charArray34 = new char[] { ' ', '#' };
        int int35 = uTF32Reader31.read(charArray34);
        char[] charArray39 = new char[] { ' ', '#', '4' };
        int int42 = uTF32Reader31.read(charArray39, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser43 = jsonFactory13.createParser((java.io.Reader) uTF32Reader31);
        java.io.Writer writer44 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator45 = jsonFactory13.createJsonGenerator(writer44);
        jsonGenerator45.writeString("");
        jsonGenerator45.writeBoolean(false);
        defaultPrettyPrinter12.beforeArrayValues(jsonGenerator45);
        com.fasterxml.jackson.core.JsonLocation jsonLocation51 = jsonReadContext3.getStartLocation((java.lang.Object) jsonGenerator45);
        org.junit.Assert.assertNotNull(jsonReadContext0);
        org.junit.Assert.assertNotNull(jsonReadContext3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(inputDecorator14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ , #]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(jsonParser43);
        org.junit.Assert.assertNotNull(jsonGenerator45);
        org.junit.Assert.assertNotNull(jsonLocation51);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test308");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.TreeNode treeNode72 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeTree(treeNode72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test309");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.lang.String str51 = jsonParser50.getText();
        int int52 = jsonParser50.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            double double53 = jsonParser50.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: [B@144b2cf5; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test310");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        int int80 = readerBasedJsonParser77.getValueAsInt((-69));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-69) + "'", int80 == (-69));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test311");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator36 = jsonFactory35.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext38 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray40 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext38, inputStream39, byteArray40, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader53 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext37, inputStream39, byteArray46, 0, 0, false);
        char[] charArray56 = new char[] { ' ', '#' };
        int int57 = uTF32Reader53.read(charArray56);
        char[] charArray61 = new char[] { ' ', '#', '4' };
        int int64 = uTF32Reader53.read(charArray61, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser65 = jsonFactory35.createParser((java.io.Reader) uTF32Reader53);
        com.fasterxml.jackson.core.JsonParser jsonParser66 = jsonFactory0.createJsonParser((java.io.Reader) uTF32Reader53);
        uTF32Reader53.close();
        // The following exception was thrown during execution in test generation
        try {
            uTF32Reader53.freeBuffers();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNull(inputDecorator36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , #]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(jsonParser65);
        org.junit.Assert.assertNotNull(jsonParser66);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test312");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        boolean boolean42 = jsonFactory41.requiresPropertyOrdering();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes43 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = jsonFactory41.setCharacterEscapes(characterEscapes43);
        java.io.File file45 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding46 = com.fasterxml.jackson.core.JsonEncoding.UTF32_LE;
        boolean boolean47 = jsonEncoding46.isBigEndian();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory41.createGenerator(file45, jsonEncoding46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jsonFactory44);
        org.junit.Assert.assertTrue("'" + jsonEncoding46 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_LE + "'", jsonEncoding46.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_LE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test313");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature38 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean39 = jsonGenerator35.isEnabled(feature38);
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(jsonGenerator35);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator42 = jsonFactory41.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray52 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream55 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray52, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader59 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext43, inputStream45, byteArray52, 0, 0, false);
        char[] charArray62 = new char[] { ' ', '#' };
        int int63 = uTF32Reader59.read(charArray62);
        char[] charArray67 = new char[] { ' ', '#', '4' };
        int int70 = uTF32Reader59.read(charArray67, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser71 = jsonFactory41.createParser((java.io.Reader) uTF32Reader59);
        java.io.Writer writer72 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = jsonFactory41.createJsonGenerator(writer72);
        boolean boolean74 = jsonGenerator73.isClosed();
        jsonGenerator73.writeStartObject();
        boolean boolean76 = jsonGenerator73.isClosed();
        jsonGenerator73.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator80 = jsonGenerator73.setCodec(objectCodec79);
        com.fasterxml.jackson.core.TreeNode treeNode81 = null;
        jsonGenerator80.writeTree(treeNode81);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter83 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = jsonGenerator80.setPrettyPrinter(prettyPrinter83);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = jsonGenerator80.setFeatureMask(64);
        int int87 = jsonGenerator86.getFeatureMask();
        defaultPrettyPrinter0.writeArrayValueSeparator(jsonGenerator86);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature38.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(inputDecorator42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ , #]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(jsonParser71);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jsonGenerator80);
        org.junit.Assert.assertNotNull(jsonGenerator84);
        org.junit.Assert.assertNotNull(jsonGenerator86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 64 + "'", int87 == 64);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test314");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        uTF8JsonGenerator70.writeRaw("");
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeString("a
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test315");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeObjectFieldStart("");
        defaultPrettyPrinter0.writeRootValueSeparator(jsonGenerator35);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler39 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType40 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.CONCAT_BUFFER;
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        char[] charArray51 = serializedString41.asQuotedChars();
        bufferRecycler39.releaseCharBuffer(charBufferType40, charArray51);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator35.writeRawValue(charArray51, (-1), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + charBufferType40 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.CONCAT_BUFFER + "'", charBufferType40.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.CONCAT_BUFFER));
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[ ]");
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test316");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        uTF8JsonGenerator70.writeRaw("");
        com.fasterxml.jackson.core.ObjectCodec objectCodec93 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator94 = uTF8JsonGenerator70.setCodec(objectCodec93);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNotNull(jsonGenerator94);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test317");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.ObjectCodec objectCodec51 = jsonFactory0.getCodec();
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator52 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory53 = jsonFactory0.setOutputDecorator(outputDecorator52);
        com.fasterxml.jackson.core.ObjectCodec objectCodec54 = jsonFactory0.getCodec();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(objectCodec51);
        org.junit.Assert.assertNotNull(jsonFactory53);
        org.junit.Assert.assertNull(objectCodec54);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test318");
        com.fasterxml.jackson.core.JsonLocation jsonLocation1 = null;
        com.fasterxml.jackson.core.JsonLocation jsonLocation3 = null;
        java.lang.Throwable throwable4 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException5 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation3, throwable4);
        com.fasterxml.jackson.core.JsonParseException jsonParseException6 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation1, throwable4);
        java.lang.Throwable[] throwableArray7 = jsonParseException6.getSuppressed();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator10 = jsonFactory9.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray20 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream23 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, inputStream19, byteArray20, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader27 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext11, inputStream13, byteArray20, 0, 0, false);
        char[] charArray30 = new char[] { ' ', '#' };
        int int31 = uTF32Reader27.read(charArray30);
        char[] charArray35 = new char[] { ' ', '#', '4' };
        int int38 = uTF32Reader27.read(charArray35, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonFactory9.createParser((java.io.Reader) uTF32Reader27);
        int int41 = jsonParser39.nextIntValue((int) 'a');
        jsonParser39.close();
        com.fasterxml.jackson.core.JsonLocation jsonLocation43 = jsonParser39.getCurrentLocation();
        long long44 = jsonLocation43.getByteOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation46 = com.fasterxml.jackson.core.JsonLocation.NA;
        com.fasterxml.jackson.core.JsonParseException jsonParseException47 = new com.fasterxml.jackson.core.JsonParseException("JSON", jsonLocation46);
        com.fasterxml.jackson.core.JsonParseException jsonParseException48 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation43, (java.lang.Throwable) jsonParseException47);
        jsonParseException6.addSuppressed((java.lang.Throwable) jsonParseException47);
        com.fasterxml.jackson.core.JsonLocation jsonLocation50 = jsonParseException47.getLocation();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNull(inputDecorator10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(jsonLocation43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(jsonLocation46);
        org.junit.Assert.assertNotNull(jsonLocation50);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test319");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes73;
        java.io.OutputStream outputStream75 = uTF8JsonGenerator70._outputStream;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(outputStream75);
        org.junit.Assert.assertNotNull(jsonGenerator76);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test320");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = readerBasedJsonParser77._handleOddName((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test321");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.Version version81 = readerBasedJsonParser77.version();
        readerBasedJsonParser77._skipCR();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext83 = readerBasedJsonParser77.getParsingContext();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertNotNull(version81);
        org.junit.Assert.assertNotNull(jsonStreamContext83);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test322");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        com.fasterxml.jackson.core.io.SerializedString serializedString75 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int84 = serializedString75.appendQuotedUTF8(byteArray82, (int) ' ');
        uTF8JsonGenerator70._rootValueSeparator = serializedString75;
        java.lang.String str86 = serializedString75.getValue();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(serializedString75);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + " " + "'", str86, " ");
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test323");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator51 = jsonFactory0.getOutputDecorator();
        com.fasterxml.jackson.core.JsonFactory jsonFactory52 = jsonFactory0.copy();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator53 = jsonFactory52.getInputDecorator();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(outputDecorator51);
        org.junit.Assert.assertNotNull(jsonFactory52);
        org.junit.Assert.assertNull(inputDecorator53);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test324");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        com.fasterxml.jackson.core.TreeNode treeNode36 = null;
        jsonGenerator32.writeTree(treeNode36);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonGenerator32.useDefaultPrettyPrinter();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator38);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test325");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes72 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes72;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test326");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        jsonGenerator36.writeString("");
        jsonGenerator36.writeBoolean(false);
        defaultPrettyPrinter3.beforeArrayValues(jsonGenerator36);
        int int42 = jsonGenerator36.getFeatureMask();
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 79 + "'", int42 == 79);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test327");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        java.lang.Object obj35 = jsonParser30.getEmbeddedObject();
        int int36 = jsonParser30.getFeatureMask();
        int int38 = jsonParser30.nextIntValue((-1270542579));
        int int39 = jsonParser30.getFeatureMask();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1270542579) + "'", int38 == (-1270542579));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test328");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        int int81 = readerBasedJsonParser77.getTextLength();
        boolean boolean82 = readerBasedJsonParser77.hasTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken83 = readerBasedJsonParser77._handleApos();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test329");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = iOContext7.isResourceManaged();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray79 = iOContext7.allocTokenBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Trying to call same allocXxx() method second time");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test330");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter40.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator32.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter41);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes43 = jsonGenerator32.getCharacterEscapes();
        java.lang.Object obj44 = null;
        jsonGenerator32.writeObject(obj44);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes46 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = jsonGenerator32.setCharacterEscapes(characterEscapes46);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertNull(characterEscapes43);
        org.junit.Assert.assertNotNull(jsonGenerator47);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test331");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        com.fasterxml.jackson.core.JsonLocation jsonLocation34 = jsonParser30.getCurrentLocation();
        jsonParser30.close();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(jsonLocation34);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test332");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        int int35 = jsonParser30.getValueAsInt(3);
        int int36 = jsonParser30.getTextOffset();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test333");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter4.withRootSeparator((com.fasterxml.jackson.core.SerializableString) serializedString40);
        java.io.OutputStream outputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int43 = serializedString40.writeUnquotedUTF8(outputStream42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(serializedString40);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test334");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory0.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString22 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int31 = serializedString22.appendQuotedUTF8(byteArray29, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createParser(byteArray29, 0, 56320);
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator36 = jsonFactory35.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext38 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray40 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext38, inputStream39, byteArray40, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader53 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext37, inputStream39, byteArray46, 0, 0, false);
        char[] charArray56 = new char[] { ' ', '#' };
        int int57 = uTF32Reader53.read(charArray56);
        char[] charArray61 = new char[] { ' ', '#', '4' };
        int int64 = uTF32Reader53.read(charArray61, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser65 = jsonFactory35.createParser((java.io.Reader) uTF32Reader53);
        java.io.Writer writer66 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator67 = jsonFactory35.createJsonGenerator(writer66);
        boolean boolean68 = jsonGenerator67.isClosed();
        jsonGenerator67.writeStartObject();
        boolean boolean70 = jsonGenerator67.isClosed();
        jsonGenerator67.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = jsonGenerator67.setCodec(objectCodec73);
        com.fasterxml.jackson.core.TreeNode treeNode75 = null;
        jsonGenerator74.writeTree(treeNode75);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature77 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        boolean boolean78 = jsonGenerator74.isEnabled(feature77);
        com.fasterxml.jackson.core.JsonFactory jsonFactory79 = jsonFactory0.enable(feature77);
        java.io.File file80 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding81 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator82 = jsonFactory0.createGenerator(file80, jsonEncoding81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertNotNull(serializedString22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNull(inputDecorator36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , #]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(jsonParser65);
        org.junit.Assert.assertNotNull(jsonGenerator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jsonGenerator74);
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT + "'", feature77.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(jsonFactory79);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test335");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator75 = jsonGenerator73.setHighestNonEscapedChar(0);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator73.writeNumber((short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(jsonGenerator75);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test336");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature38 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean39 = jsonGenerator35.isEnabled(feature38);
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(jsonGenerator35);
        jsonGenerator35.writeNumberField("[Source: ALLOW_COMMENTS; line: 35, column: 1]", (long) 97);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature38.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test337");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler33 = jsonFactory0._getBufferRecycler();
        java.io.File file34 = null;
        com.fasterxml.jackson.core.JsonEncoding jsonEncoding35 = com.fasterxml.jackson.core.JsonEncoding.UTF32_BE;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory0.createJsonGenerator(file34, jsonEncoding35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(bufferRecycler33);
        org.junit.Assert.assertTrue("'" + jsonEncoding35 + "' != '" + com.fasterxml.jackson.core.JsonEncoding.UTF32_BE + "'", jsonEncoding35.equals(com.fasterxml.jackson.core.JsonEncoding.UTF32_BE));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test338");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.ObjectCodec objectCodec32 = null;
        jsonParser30.setCodec(objectCodec32);
        com.fasterxml.jackson.core.FormatSchema formatSchema34 = jsonParser30.getSchema();
        long long35 = jsonParser30.getValueAsLong();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(formatSchema34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test339");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createJsonParser("JSON");
        double double35 = jsonParser34.getValueAsDouble();
        // The following exception was thrown during execution in test generation
        try {
            byte byte36 = jsonParser34.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: java.io.StringReader@4222ed7e; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test340");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString3 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int12 = serializedString3.appendQuotedUTF8(byteArray10, (int) ' ');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter13 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, (com.fasterxml.jackson.core.SerializableString) serializedString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter14 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        boolean boolean15 = nopIndenter14.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter16 = defaultPrettyPrinter13.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter14);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter17 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter17.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter20 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter17);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter21 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter17);
        com.fasterxml.jackson.core.JsonFactory jsonFactory22 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator23 = jsonFactory22.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext24 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext25 = null;
        java.io.InputStream inputStream26 = null;
        byte[] byteArray27 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream30 = new com.fasterxml.jackson.core.io.MergedStream(iOContext25, inputStream26, byteArray27, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext31 = null;
        java.io.InputStream inputStream32 = null;
        byte[] byteArray33 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream36 = new com.fasterxml.jackson.core.io.MergedStream(iOContext31, inputStream32, byteArray33, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader40 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext24, inputStream26, byteArray33, 0, 0, false);
        char[] charArray43 = new char[] { ' ', '#' };
        int int44 = uTF32Reader40.read(charArray43);
        char[] charArray48 = new char[] { ' ', '#', '4' };
        int int51 = uTF32Reader40.read(charArray48, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser52 = jsonFactory22.createParser((java.io.Reader) uTF32Reader40);
        java.io.Writer writer53 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator54 = jsonFactory22.createJsonGenerator(writer53);
        boolean boolean55 = jsonGenerator54.isClosed();
        defaultPrettyPrinter21.writeObjectFieldValueSeparator(jsonGenerator54);
        jsonGenerator54.writeNumberField("[Source: false; line: 1, column: 0]", (int) (short) 100);
        nopIndenter14.writeIndentation(jsonGenerator54, (-1270517243));
        org.junit.Assert.assertNotNull(serializedString3);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter16);
        org.junit.Assert.assertNull(inputDecorator23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , #]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(jsonParser52);
        org.junit.Assert.assertNotNull(jsonGenerator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test341");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator32 = jsonFactory31.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        char[] charArray52 = new char[] { ' ', '#' };
        int int53 = uTF32Reader49.read(charArray52);
        char[] charArray57 = new char[] { ' ', '#', '4' };
        int int60 = uTF32Reader49.read(charArray57, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonFactory31.createParser((java.io.Reader) uTF32Reader49);
        int int63 = jsonParser61.nextIntValue((int) 'a');
        int int64 = jsonParser61.getFeatureMask();
        double double65 = jsonParser61.getValueAsDouble();
        java.lang.Object obj66 = jsonParser61.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature67 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean68 = jsonParser61.isEnabled(feature67);
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonParser30.enable(feature67);
        // The following exception was thrown during execution in test generation
        try {
            float float70 = jsonParser69.getFloatValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@8e31fce; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(inputDecorator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , #]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature67.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jsonParser69);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test342");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        char[] charArray51 = jsonParser50.getTextCharacters();
        int int52 = jsonParser50.getTextOffset();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(charArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test343");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int20 = jsonParser19.getFeatureMask();
        com.fasterxml.jackson.core.JsonParser jsonParser21 = jsonParser19.skipChildren();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(jsonParser21);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test344");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature35 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean36 = jsonGenerator32.isEnabled(feature35);
        boolean boolean37 = jsonGenerator32.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeRawValue(" ", (int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature35.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test345");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77._reportInvalidToken("false");
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token 'false': was expecting ? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test346");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        com.fasterxml.jackson.core.TreeNode treeNode36 = null;
        jsonGenerator32.writeTree(treeNode36);
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = jsonFactory38.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray43 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream46 = new com.fasterxml.jackson.core.io.MergedStream(iOContext41, inputStream42, byteArray43, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        java.io.InputStream inputStream48 = null;
        byte[] byteArray49 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream52 = new com.fasterxml.jackson.core.io.MergedStream(iOContext47, inputStream48, byteArray49, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader56 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext40, inputStream42, byteArray49, 0, 0, false);
        char[] charArray59 = new char[] { ' ', '#' };
        int int60 = uTF32Reader56.read(charArray59);
        char[] charArray64 = new char[] { ' ', '#', '4' };
        int int67 = uTF32Reader56.read(charArray64, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser68 = jsonFactory38.createParser((java.io.Reader) uTF32Reader56);
        java.io.Writer writer69 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator70 = jsonFactory38.createJsonGenerator(writer69);
        com.fasterxml.jackson.core.io.SerializedString serializedString71 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int80 = serializedString71.appendQuotedUTF8(byteArray78, (int) ' ');
        jsonGenerator70.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString71);
        char[] charArray82 = serializedString71.asQuotedChars();
        jsonGenerator32.writeRaw((com.fasterxml.jackson.core.SerializableString) serializedString71);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(inputDecorator39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ , #]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(jsonParser68);
        org.junit.Assert.assertNotNull(jsonGenerator70);
        org.junit.Assert.assertNotNull(serializedString71);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[ ]");
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test347");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator3 = jsonFactory2.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        java.io.InputStream inputStream6 = null;
        byte[] byteArray7 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream10 = new com.fasterxml.jackson.core.io.MergedStream(iOContext5, inputStream6, byteArray7, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray13 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream16 = new com.fasterxml.jackson.core.io.MergedStream(iOContext11, inputStream12, byteArray13, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader20 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext4, inputStream6, byteArray13, 0, 0, false);
        char[] charArray23 = new char[] { ' ', '#' };
        int int24 = uTF32Reader20.read(charArray23);
        char[] charArray28 = new char[] { ' ', '#', '4' };
        int int31 = uTF32Reader20.read(charArray28, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonFactory2.createParser((java.io.Reader) uTF32Reader20);
        java.io.Writer writer33 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator34 = jsonFactory2.createJsonGenerator(writer33);
        boolean boolean35 = jsonGenerator34.isClosed();
        jsonGenerator34.writeStartObject();
        jsonGenerator34.writeObjectFieldStart("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature39 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean40 = jsonGenerator34.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonGenerator34.useDefaultPrettyPrinter();
        jsonGenerator34.writeNumberField(" ", (float) (-1));
        defaultPrettyPrinter1.writeEndArray(jsonGenerator34, (-1270527807));
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNull(inputDecorator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , #]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(jsonParser32);
        org.junit.Assert.assertNotNull(jsonGenerator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature39.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonGenerator41);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test348");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        com.fasterxml.jackson.core.Version version84 = uTF8JsonGenerator70.version();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature85 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = uTF8JsonGenerator70.configure(feature85, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(version84);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test349");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        uTF8JsonGenerator70.writeRaw("");
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70._writePPFieldName("[Source: ALLOW_COMMENTS; line: 35, column: 1]", true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test350");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        java.io.Writer writer32 = null;
        int int33 = jsonParser30.releaseBuffered(writer32);
        int int35 = jsonParser30.getValueAsInt(56319);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext36 = jsonParser30.getParsingContext();
        java.io.OutputStream outputStream37 = null;
        int int38 = jsonParser30.releaseBuffered(outputStream37);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 56319 + "'", int35 == 56319);
        org.junit.Assert.assertNotNull(jsonStreamContext36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test351");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext36 = jsonGenerator32.getOutputContext();
        int int37 = jsonStreamContext36.getCurrentIndex();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonStreamContext36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test352");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        com.fasterxml.jackson.core.JsonLocation jsonLocation82 = readerBasedJsonParser77.getTokenLocation();
        // The following exception was thrown during execution in test generation
        try {
            char char84 = readerBasedJsonParser77.getNextChar("JSON");
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-inputJSON? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertNotNull(jsonLocation82);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test353");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser("");
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator24 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory0.copy();
        com.fasterxml.jackson.core.JsonParser.Feature feature26 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory25.enable(feature26);
        com.fasterxml.jackson.core.JsonLocation jsonLocation31 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) jsonFactory25, 1L, (-69), (int) '#');
        com.fasterxml.jackson.core.Version version32 = jsonFactory25.version();
        java.lang.String str33 = jsonFactory25.getFormatName();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNull(inputDecorator24);
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature26.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JSON" + "'", str33, "JSON");
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test354");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        int int91 = uTF8JsonGenerator70._outputTail;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test355");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature53 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = jsonFactory0.enable(feature53);
        java.io.OutputStream outputStream55 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator56 = jsonFactory0.createGenerator(outputStream55);
        com.fasterxml.jackson.core.JsonFactory jsonFactory57 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator58 = jsonFactory57.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext59 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext60 = null;
        java.io.InputStream inputStream61 = null;
        byte[] byteArray62 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext60, inputStream61, byteArray62, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext66 = null;
        java.io.InputStream inputStream67 = null;
        byte[] byteArray68 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream71 = new com.fasterxml.jackson.core.io.MergedStream(iOContext66, inputStream67, byteArray68, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext59, inputStream61, byteArray68, 0, 0, false);
        char[] charArray78 = new char[] { ' ', '#' };
        int int79 = uTF32Reader75.read(charArray78);
        char[] charArray83 = new char[] { ' ', '#', '4' };
        int int86 = uTF32Reader75.read(charArray83, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser87 = jsonFactory57.createParser((java.io.Reader) uTF32Reader75);
        com.fasterxml.jackson.core.io.IOContext iOContext88 = null;
        java.io.InputStream inputStream89 = null;
        byte[] byteArray90 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream93 = new com.fasterxml.jackson.core.io.MergedStream(iOContext88, inputStream89, byteArray90, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser94 = jsonFactory57.createJsonParser(inputStream89);
        com.fasterxml.jackson.core.JsonFactory.Feature feature95 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean96 = jsonFactory57.isEnabled(feature95);
        com.fasterxml.jackson.core.JsonFactory jsonFactory97 = jsonFactory0.disable(feature95);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes98 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory99 = jsonFactory0.setCharacterEscapes(characterEscapes98);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature53.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory54);
        org.junit.Assert.assertNotNull(jsonGenerator56);
        org.junit.Assert.assertNull(inputDecorator58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , #]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(jsonParser87);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(jsonParser94);
        org.junit.Assert.assertTrue("'" + feature95 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature95.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(jsonFactory97);
        org.junit.Assert.assertNotNull(jsonFactory99);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test356");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        long long82 = readerBasedJsonParser77.getTokenCharacterOffset();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken83 = readerBasedJsonParser77._handleApos();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test357");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        long long21 = uTF32Reader18.skip((long) 35);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test358");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.Version version74 = uTF8JsonGenerator70.version();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70._writePPFieldName("", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(version74);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test359");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        com.fasterxml.jackson.core.Version version34 = jsonParser30.version();
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonParser30.setFeatureMask(56319);
        int int37 = jsonParser30.getFeatureMask();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 56319 + "'", int37 == 56319);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test360");
        com.fasterxml.jackson.core.io.SerializedString serializedString1 = new com.fasterxml.jackson.core.io.SerializedString(" ");
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator3 = jsonFactory2.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        java.io.InputStream inputStream6 = null;
        byte[] byteArray7 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream10 = new com.fasterxml.jackson.core.io.MergedStream(iOContext5, inputStream6, byteArray7, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray13 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream16 = new com.fasterxml.jackson.core.io.MergedStream(iOContext11, inputStream12, byteArray13, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader20 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext4, inputStream6, byteArray13, 0, 0, false);
        char[] charArray23 = new char[] { ' ', '#' };
        int int24 = uTF32Reader20.read(charArray23);
        char[] charArray28 = new char[] { ' ', '#', '4' };
        int int31 = uTF32Reader20.read(charArray28, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonFactory2.createParser((java.io.Reader) uTF32Reader20);
        java.io.Writer writer33 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator34 = jsonFactory2.createJsonGenerator(writer33);
        com.fasterxml.jackson.core.Version version35 = jsonFactory2.version();
        com.fasterxml.jackson.core.io.IOContext iOContext36 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray38 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream41 = new com.fasterxml.jackson.core.io.MergedStream(iOContext36, inputStream37, byteArray38, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory2.createParser(byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = serializedString1.appendQuotedUTF8(byteArray38, (-1270536137));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , #]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(jsonParser32);
        org.junit.Assert.assertNotNull(jsonGenerator34);
        org.junit.Assert.assertNotNull(version35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(jsonParser42);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test361");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version7 = jsonFactory6.version();
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext15 = null;
        java.io.InputStream inputStream16 = null;
        byte[] byteArray17 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream20 = new com.fasterxml.jackson.core.io.MergedStream(iOContext15, inputStream16, byteArray17, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader24 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext8, inputStream10, byteArray17, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser25 = jsonFactory6.createParser((java.io.Reader) uTF32Reader24);
        boolean boolean26 = jsonFactory6.requiresPropertyOrdering();
        java.lang.String str27 = jsonFactory6.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator28 = jsonFactory6.getInputDecorator();
        java.io.InputStream inputStream29 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory6.createParser(inputStream29);
        java.io.OutputStream outputStream31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory6.createJsonGenerator(outputStream31);
        defaultPrettyPrinter5.writeRootValueSeparator(jsonGenerator32);
        com.fasterxml.jackson.core.FormatSchema formatSchema34 = jsonGenerator32.getSchema();
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator36 = jsonFactory35.getInputDecorator();
        com.fasterxml.jackson.core.JsonLocation jsonLocation41 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) jsonFactory35, (long) (-1270543513), 0L, (int) (byte) 1, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeTypeId((java.lang.Object) (-1270543513));
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Type Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(jsonParser25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JSON" + "'", str27, "JSON");
        org.junit.Assert.assertNull(inputDecorator28);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNull(formatSchema34);
        org.junit.Assert.assertNull(inputDecorator36);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test362");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        boolean boolean79 = readerBasedJsonParser77.hasTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean80 = readerBasedJsonParser77.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test363");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.setCodec(objectCodec3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        com.fasterxml.jackson.core.io.IOContext iOContext36 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray38 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream41 = new com.fasterxml.jackson.core.io.MergedStream(iOContext36, inputStream37, byteArray38, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory5.createJsonParser(inputStream37);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean44 = jsonFactory5.isEnabled(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory4.disable(feature43);
        boolean boolean46 = jsonFactory45.requiresCustomCodec();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(jsonParser42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test364");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        com.fasterxml.jackson.core.SerializableString serializableString75 = uTF8JsonGenerator70._rootValueSeparator;
        java.lang.Object obj76 = uTF8JsonGenerator70.getOutputTarget();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(serializableString75);
        org.junit.Assert.assertNull(obj76);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test365");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        int int81 = readerBasedJsonParser77.getTextLength();
        com.fasterxml.jackson.core.ObjectCodec objectCodec82 = null;
        readerBasedJsonParser77.setCodec(objectCodec82);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken85 = readerBasedJsonParser77._parseNumber(3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test366");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        com.fasterxml.jackson.core.io.SerializedString serializedString40 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter4.withRootSeparator((com.fasterxml.jackson.core.SerializableString) serializedString40);
        int int42 = serializedString40.charLength();
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(serializedString40);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test367");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes74 = uTF8JsonGenerator70.getCharacterEscapes();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNull(characterEscapes74);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test368");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        int[] intArray90 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeComment();
        uTF8JsonGenerator70._outputEscapes = intArray90;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1]");
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test369");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        java.io.Reader reader81 = readerBasedJsonParser77._reader;
        // The following exception was thrown during execution in test generation
        try {
            byte byte82 = readerBasedJsonParser77.getByteValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(reader81);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test370");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        boolean boolean37 = jsonGenerator36.canWriteBinaryNatively();
        jsonGenerator36.writeNumber((short) 0);
        java.lang.Object obj40 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator36.writeTypeId(obj40);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Type Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test371");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator32 = jsonFactory31.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        char[] charArray52 = new char[] { ' ', '#' };
        int int53 = uTF32Reader49.read(charArray52);
        char[] charArray57 = new char[] { ' ', '#', '4' };
        int int60 = uTF32Reader49.read(charArray57, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonFactory31.createParser((java.io.Reader) uTF32Reader49);
        int int63 = jsonParser61.nextIntValue((int) 'a');
        int int64 = jsonParser61.getFeatureMask();
        double double65 = jsonParser61.getValueAsDouble();
        java.lang.Object obj66 = jsonParser61.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature67 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean68 = jsonParser61.isEnabled(feature67);
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonParser30.enable(feature67);
        boolean boolean70 = jsonParser69.hasTextCharacters();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(inputDecorator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , #]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature67.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test372");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        java.lang.Object obj81 = readerBasedJsonParser77.getInputSource();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(obj81);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test373");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer85 = readerBasedJsonParser77._symbols;
        readerBasedJsonParser77._tokenIncomplete = false;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer85);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test374");
        com.fasterxml.jackson.core.io.SerializedString serializedString0 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int9 = serializedString0.appendQuotedUTF8(byteArray7, (int) ' ');
        char[] charArray10 = serializedString0.asQuotedChars();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter11 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter11.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter14 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter11);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter15 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter11);
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator17 = jsonFactory16.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext19 = null;
        java.io.InputStream inputStream20 = null;
        byte[] byteArray21 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream24 = new com.fasterxml.jackson.core.io.MergedStream(iOContext19, inputStream20, byteArray21, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext25 = null;
        java.io.InputStream inputStream26 = null;
        byte[] byteArray27 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream30 = new com.fasterxml.jackson.core.io.MergedStream(iOContext25, inputStream26, byteArray27, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader34 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext18, inputStream20, byteArray27, 0, 0, false);
        char[] charArray37 = new char[] { ' ', '#' };
        int int38 = uTF32Reader34.read(charArray37);
        char[] charArray42 = new char[] { ' ', '#', '4' };
        int int45 = uTF32Reader34.read(charArray42, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser46 = jsonFactory16.createParser((java.io.Reader) uTF32Reader34);
        java.io.Writer writer47 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory16.createJsonGenerator(writer47);
        boolean boolean49 = jsonGenerator48.isClosed();
        defaultPrettyPrinter15.writeObjectFieldValueSeparator(jsonGenerator48);
        jsonGenerator48.writeNumberField("[Source: false; line: 1, column: 0]", (int) (short) 100);
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator55 = jsonFactory54.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext56 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray59 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream62 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray59, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext63 = null;
        java.io.InputStream inputStream64 = null;
        byte[] byteArray65 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream68 = new com.fasterxml.jackson.core.io.MergedStream(iOContext63, inputStream64, byteArray65, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader72 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext56, inputStream58, byteArray65, 0, 0, false);
        char[] charArray75 = new char[] { ' ', '#' };
        int int76 = uTF32Reader72.read(charArray75);
        char[] charArray80 = new char[] { ' ', '#', '4' };
        int int83 = uTF32Reader72.read(charArray80, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser84 = jsonFactory54.createParser((java.io.Reader) uTF32Reader72);
        java.io.Writer writer85 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = jsonFactory54.createJsonGenerator(writer85);
        com.fasterxml.jackson.core.Version version87 = jsonFactory54.version();
        com.fasterxml.jackson.core.io.IOContext iOContext88 = null;
        java.io.InputStream inputStream89 = null;
        byte[] byteArray90 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream93 = new com.fasterxml.jackson.core.io.MergedStream(iOContext88, inputStream89, byteArray90, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser94 = jsonFactory54.createParser(byteArray90);
        jsonGenerator48.writeBinary(byteArray90);
        int int97 = serializedString0.appendQuotedUTF8(byteArray90, 33);
        org.junit.Assert.assertNotNull(serializedString0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[ ]");
        org.junit.Assert.assertNull(inputDecorator17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , #]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(jsonParser46);
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(inputDecorator55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[ , #]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(jsonParser84);
        org.junit.Assert.assertNotNull(jsonGenerator86);
        org.junit.Assert.assertNotNull(version87);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(jsonParser94);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test375");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        java.io.Writer writer22 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = jsonFactory0.createJsonGenerator(writer22);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator24 = jsonFactory0.getOutputDecorator();
        com.fasterxml.jackson.core.JsonFactory.Feature feature25 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean26 = jsonFactory0.isEnabled(feature25);
        java.net.URL uRL27 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser28 = jsonFactory0.createJsonParser(uRL27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonGenerator23);
        org.junit.Assert.assertNull(outputDecorator24);
        org.junit.Assert.assertTrue("'" + feature25 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature25.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test376");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.OutputStream outputStream31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createGenerator(outputStream31);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature33 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        int int34 = feature33.getMask();
        boolean boolean35 = jsonFactory0.isEnabled(feature33);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + feature33 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature33.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test377");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeString("com.fasterxml.jackson.core.JsonParseException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test378");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        boolean boolean79 = readerBasedJsonParser77.hasTextCharacters();
        com.fasterxml.jackson.core.ObjectCodec objectCodec80 = readerBasedJsonParser77._objectCodec;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(objectCodec80);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test379");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory43 = jsonFactory41.setRootValueSeparator("UTF-16BE");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertNotNull(jsonFactory43);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test380");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        com.fasterxml.jackson.core.Version version34 = jsonParser30.version();
        com.fasterxml.jackson.core.JsonParser.Feature feature35 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonParser30.disable(feature35);
        int int37 = feature35.getMask();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertTrue("'" + feature35 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature35.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test381");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter40.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int52 = serializedString43.appendQuotedUTF8(byteArray50, (int) ' ');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter40, (com.fasterxml.jackson.core.SerializableString) serializedString43);
        byte[] byteArray54 = serializedString43.asUnquotedUTF8();
        jsonGenerator32.writeRaw((com.fasterxml.jackson.core.SerializableString) serializedString43);
        jsonGenerator32.writeString("ARRAY");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(serializedString43);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[32]");
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test382");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes72 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes72;
        java.lang.Object obj74 = uTF8JsonGenerator70.getOutputTarget();
        uTF8JsonGenerator70.writeNumber("");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test383");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        boolean boolean42 = jsonFactory41.requiresPropertyOrdering();
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray52 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream55 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray52, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader59 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext43, inputStream45, byteArray52, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser62 = jsonFactory41.createParser(byteArray52, 0, (int) (byte) 0);
        java.io.OutputStream outputStream63 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator64 = jsonFactory41.createGenerator(outputStream63);
        jsonGenerator64.writeNumberField("ROOT", (float) 734974343);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(jsonParser62);
        org.junit.Assert.assertNotNull(jsonGenerator64);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test384");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        int int85 = readerBasedJsonParser77.getTokenLineNr();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test385");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createJsonParser("JSON");
        java.lang.String str35 = jsonFactory0.getFormatName();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JSON" + "'", str35, "JSON");
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test386");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) (short) 100);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonParser30.getTokenLocation();
        com.fasterxml.jackson.core.JsonParser.Feature feature34 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        boolean boolean35 = jsonParser30.isEnabled(feature34);
        java.lang.Object obj36 = jsonParser30.getObjectId();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature34.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test387");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonParser jsonParser79 = readerBasedJsonParser77.skipChildren();
        int int80 = readerBasedJsonParser77.getTokenLineNr();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNotNull(jsonParser79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test388");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        int int75 = uTF8JsonGenerator70.getFeatureMask();
        com.fasterxml.jackson.core.io.IOContext iOContext76 = uTF8JsonGenerator70._ioContext;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
        org.junit.Assert.assertNotNull(iOContext76);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test389");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77._finishString();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test390");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        java.lang.String str80 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext81 = readerBasedJsonParser77.getParsingContext();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(jsonStreamContext81);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test391");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77._finishString();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test392");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        com.fasterxml.jackson.core.FormatSchema formatSchema32 = jsonParser30.getSchema();
        boolean boolean33 = jsonParser30.getValueAsBoolean();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(formatSchema32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test393");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        java.io.OutputStream outputStream57 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer58 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext7, outputStream57);
        char[] charArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8Writer58.write(charArray59, 404002377, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test394");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        int int79 = readerBasedJsonParser77.getTokenColumnNr();
        boolean boolean81 = readerBasedJsonParser77.getValueAsBoolean(true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test395");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator75 = jsonGenerator73.setHighestNonEscapedChar(0);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes76 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator77 = jsonGenerator73.setCharacterEscapes(characterEscapes76);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(jsonGenerator75);
        org.junit.Assert.assertNotNull(jsonGenerator77);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test396");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        int int90 = uTF8JsonGenerator70._outputMaxContiguous;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator92 = uTF8JsonGenerator70.setHighestNonEscapedChar(57343);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(jsonGenerator92);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test397");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        com.fasterxml.jackson.core.SerializableString serializableString75 = uTF8JsonGenerator70._rootValueSeparator;
        com.fasterxml.jackson.core.io.SerializedString serializedString76 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int85 = serializedString76.appendQuotedUTF8(byteArray83, (int) ' ');
        char[] charArray86 = serializedString76.asQuotedChars();
        char[] charArray87 = serializedString76.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(serializableString75);
        org.junit.Assert.assertNotNull(serializedString76);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[ ]");
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[ ]");
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test398");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext36 = jsonGenerator32.getOutputContext();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonStreamContext36);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test399");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77._reportInvalidToken("a
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token 'awas expecting ? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test400");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int20 = jsonParser19.getFeatureMask();
        java.lang.String str21 = jsonParser19.getCurrentName();
        boolean boolean22 = jsonParser19.isClosed();
        double double23 = jsonParser19.getValueAsDouble();
        boolean boolean24 = jsonParser19.hasTextCharacters();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test401");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter40.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator32.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter41);
        jsonGenerator32.writeFieldName("UTF-16LE");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(jsonGenerator42);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test402");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean79 = readerBasedJsonParser77.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test403");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("UTF-16BE");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler2 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation4 = null;
        java.lang.Throwable throwable5 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException6 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation4, throwable5);
        java.lang.String str7 = jsonParseException6.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler2, (java.lang.Object) jsonParseException6, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec11 = null;
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler13 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation15 = null;
        java.lang.Throwable throwable16 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException17 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation15, throwable16);
        java.lang.String str18 = jsonParseException17.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler13, (java.lang.Object) jsonParseException17, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer21 = iOContext20.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        int int28 = mergedStream27.available();
        boolean boolean29 = mergedStream27.markSupported();
        int int30 = mergedStream27.available();
        int int31 = mergedStream27.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version33 = jsonFactory32.version();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext35 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray37 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream40 = new com.fasterxml.jackson.core.io.MergedStream(iOContext35, inputStream36, byteArray37, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray43 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream46 = new com.fasterxml.jackson.core.io.MergedStream(iOContext41, inputStream42, byteArray43, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader50 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext34, inputStream36, byteArray43, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser51 = jsonFactory32.createParser((java.io.Reader) uTF32Reader50);
        com.fasterxml.jackson.core.JsonFactory jsonFactory53 = jsonFactory32.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString54 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int63 = serializedString54.appendQuotedUTF8(byteArray61, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser66 = jsonFactory32.createParser(byteArray61, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream69 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, (java.io.InputStream) mergedStream27, byteArray61, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator72 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext9, (int) (byte) 100, objectCodec11, outputStream12, byteArray61, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = uTF8JsonGenerator72.setCharacterEscapes(characterEscapes73);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator75 = uTF8JsonGenerator72.useDefaultPrettyPrinter();
        int[] intArray80 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, (int) '#');
        int[] intArray84 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray82, 100);
        uTF8JsonGenerator72._outputEscapes = intArray82;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = uTF8JsonGenerator72.useDefaultPrettyPrinter();
        // The following exception was thrown during execution in test generation
        try {
            lf2SpacesIndenter1.writeIndentation(jsonGenerator86, 56319);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(textBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(jsonParser51);
        org.junit.Assert.assertNotNull(jsonFactory53);
        org.junit.Assert.assertNotNull(serializedString54);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(jsonParser66);
        org.junit.Assert.assertNotNull(jsonGenerator74);
        org.junit.Assert.assertNotNull(jsonGenerator75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(jsonGenerator86);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test404");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = jsonFactory38.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray43 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream46 = new com.fasterxml.jackson.core.io.MergedStream(iOContext41, inputStream42, byteArray43, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        java.io.InputStream inputStream48 = null;
        byte[] byteArray49 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream52 = new com.fasterxml.jackson.core.io.MergedStream(iOContext47, inputStream48, byteArray49, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader56 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext40, inputStream42, byteArray49, 0, 0, false);
        char[] charArray59 = new char[] { ' ', '#' };
        int int60 = uTF32Reader56.read(charArray59);
        char[] charArray64 = new char[] { ' ', '#', '4' };
        int int67 = uTF32Reader56.read(charArray64, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser68 = jsonFactory38.createParser((java.io.Reader) uTF32Reader56);
        java.io.Writer writer69 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator70 = jsonFactory38.createJsonGenerator(writer69);
        com.fasterxml.jackson.core.io.IOContext iOContext71 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        java.io.InputStream inputStream73 = null;
        byte[] byteArray74 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream77 = new com.fasterxml.jackson.core.io.MergedStream(iOContext72, inputStream73, byteArray74, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext78 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray80 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream83 = new com.fasterxml.jackson.core.io.MergedStream(iOContext78, inputStream79, byteArray80, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader87 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext71, inputStream73, byteArray80, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser88 = jsonFactory38.createParser(byteArray80);
        jsonGenerator35.writeBinary(byteArray80);
        defaultPrettyPrinter0.writeStartArray(jsonGenerator35);
        jsonGenerator35.writeNumber(" ");
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputDecorator39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ , #]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(jsonParser68);
        org.junit.Assert.assertNotNull(jsonGenerator70);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(jsonParser88);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test405");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        boolean boolean57 = iOContext7.isResourceManaged();
        com.fasterxml.jackson.core.ObjectCodec objectCodec59 = null;
        java.io.OutputStream outputStream60 = null;
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator61 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 1, objectCodec59, outputStream60);
        boolean boolean62 = uTF8JsonGenerator61.isClosed();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test406");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.setCodec(objectCodec3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        com.fasterxml.jackson.core.io.IOContext iOContext36 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray38 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream41 = new com.fasterxml.jackson.core.io.MergedStream(iOContext36, inputStream37, byteArray38, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory5.createJsonParser(inputStream37);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean44 = jsonFactory5.isEnabled(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory4.disable(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator47 = jsonFactory46.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader64 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext48, inputStream50, byteArray57, 0, 0, false);
        char[] charArray67 = new char[] { ' ', '#' };
        int int68 = uTF32Reader64.read(charArray67);
        char[] charArray72 = new char[] { ' ', '#', '4' };
        int int75 = uTF32Reader64.read(charArray72, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser76 = jsonFactory46.createParser((java.io.Reader) uTF32Reader64);
        int int78 = jsonParser76.nextIntValue((int) 'a');
        int int79 = jsonParser76.getFeatureMask();
        double double80 = jsonParser76.getValueAsDouble();
        java.lang.Object obj81 = jsonParser76.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonToken jsonToken82 = jsonParser76.nextToken();
        com.fasterxml.jackson.core.JsonParser.Feature feature83 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        com.fasterxml.jackson.core.JsonParser jsonParser85 = jsonParser76.configure(feature83, false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory86 = jsonFactory4.enable(feature83);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(jsonParser42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertNull(inputDecorator47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(jsonParser76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNull(jsonToken82);
        org.junit.Assert.assertTrue("'" + feature83 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS + "'", feature83.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS));
        org.junit.Assert.assertNotNull(jsonParser85);
        org.junit.Assert.assertNotNull(jsonFactory86);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test407");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory34.createParser("hi!");
        int int41 = jsonParser40.getFeatureMask();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test408");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        java.io.OutputStream outputStream39 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory38.createJsonGenerator(outputStream39);
        jsonGenerator40.writeString("ARRAY");
        jsonGenerator40.writeStringField("", "");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonGenerator40);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test409");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter40.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator32.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter41);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter43 = jsonGenerator42.getPrettyPrinter();
        jsonGenerator42.writeRaw("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature46 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonGenerator42.configure(feature46, false);
        jsonGenerator48.writeNumberField("hi!", (-1270472635));
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertNotNull(prettyPrinter43);
        org.junit.Assert.assertTrue("'" + feature46 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature46.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonGenerator48);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test410");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator32 = jsonFactory31.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        char[] charArray52 = new char[] { ' ', '#' };
        int int53 = uTF32Reader49.read(charArray52);
        char[] charArray57 = new char[] { ' ', '#', '4' };
        int int60 = uTF32Reader49.read(charArray57, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonFactory31.createParser((java.io.Reader) uTF32Reader49);
        int int63 = jsonParser61.nextIntValue((int) 'a');
        int int64 = jsonParser61.getFeatureMask();
        double double65 = jsonParser61.getValueAsDouble();
        java.lang.Object obj66 = jsonParser61.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature67 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean68 = jsonParser61.isEnabled(feature67);
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonParser30.enable(feature67);
        boolean boolean70 = jsonParser69.canReadObjectId();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(inputDecorator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , #]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature67.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test411");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.getValueAsBoolean();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test412");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        boolean boolean37 = jsonGenerator36.isClosed();
        jsonGenerator36.writeStartObject();
        boolean boolean39 = jsonGenerator36.isClosed();
        jsonGenerator36.writeNumber(100.0d);
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator36);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonGenerator36.setFeatureMask((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator36.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jsonGenerator44);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test413");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory34.createParser("hi!");
        java.lang.Object obj41 = jsonParser40.getEmbeddedObject();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test414");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser("");
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator24 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory0.copy();
        com.fasterxml.jackson.core.JsonParser.Feature feature26 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory25.enable(feature26);
        boolean boolean28 = feature26.enabledByDefault();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNull(inputDecorator24);
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature26.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test415");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        boolean boolean79 = readerBasedJsonParser77.hasTextCharacters();
        boolean boolean80 = readerBasedJsonParser77.isClosed();
        java.lang.String str81 = readerBasedJsonParser77.getText();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test416");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        boolean boolean42 = jsonFactory41.requiresPropertyOrdering();
        boolean boolean43 = jsonFactory41.requiresPropertyOrdering();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler44 = jsonFactory41._getBufferRecycler();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter45 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter46 = defaultPrettyPrinter45.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter47 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter46);
        com.fasterxml.jackson.core.io.IOContext iOContext49 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler44, (java.lang.Object) defaultPrettyPrinter46, true);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator50 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter46.writeObjectEntrySeparator(jsonGenerator50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(bufferRecycler44);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter46);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test417");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter();
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter6);
        boolean boolean8 = fixedSpaceIndenter6.isInline();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator10 = jsonFactory9.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray20 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream23 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, inputStream19, byteArray20, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader27 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext11, inputStream13, byteArray20, 0, 0, false);
        char[] charArray30 = new char[] { ' ', '#' };
        int int31 = uTF32Reader27.read(charArray30);
        char[] charArray35 = new char[] { ' ', '#', '4' };
        int int38 = uTF32Reader27.read(charArray35, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonFactory9.createParser((java.io.Reader) uTF32Reader27);
        java.io.Writer writer40 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonFactory9.createJsonGenerator(writer40);
        boolean boolean42 = jsonGenerator41.isClosed();
        jsonGenerator41.writeStartObject();
        boolean boolean44 = jsonGenerator41.isClosed();
        jsonGenerator41.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec47 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonGenerator41.setCodec(objectCodec47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter49.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator51 = jsonGenerator41.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter50);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter52 = jsonGenerator51.getPrettyPrinter();
        jsonGenerator51.writeRaw("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature55 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator57 = jsonGenerator51.configure(feature55, false);
        fixedSpaceIndenter6.writeIndentation(jsonGenerator51, 2);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator51.writeBooleanField("afalse);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(inputDecorator10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertNotNull(jsonGenerator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
        org.junit.Assert.assertNotNull(jsonGenerator51);
        org.junit.Assert.assertNotNull(prettyPrinter52);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature55.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonGenerator57);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test418");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        com.fasterxml.jackson.core.ObjectCodec objectCodec85 = readerBasedJsonParser77._objectCodec;
        // The following exception was thrown during execution in test generation
        try {
            int int86 = readerBasedJsonParser77.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNull(objectCodec85);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test419");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        java.lang.String str81 = readerBasedJsonParser77.getText();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77._finishString();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test420");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        boolean boolean37 = jsonGenerator36.isClosed();
        jsonGenerator36.writeStartObject();
        boolean boolean39 = jsonGenerator36.isClosed();
        jsonGenerator36.writeNumber(100.0d);
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator36);
        jsonGenerator36.writeBooleanField("JSON", true);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator46 = jsonGenerator36.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory47 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator48 = jsonFactory47.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray52 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream55 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray52, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext56 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray58 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext56, inputStream57, byteArray58, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader65 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext49, inputStream51, byteArray58, 0, 0, false);
        char[] charArray68 = new char[] { ' ', '#' };
        int int69 = uTF32Reader65.read(charArray68);
        char[] charArray73 = new char[] { ' ', '#', '4' };
        int int76 = uTF32Reader65.read(charArray73, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser77 = jsonFactory47.createParser((java.io.Reader) uTF32Reader65);
        java.io.Writer writer78 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator79 = jsonFactory47.createJsonGenerator(writer78);
        com.fasterxml.jackson.core.io.SerializedString serializedString80 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int89 = serializedString80.appendQuotedUTF8(byteArray87, (int) ' ');
        jsonGenerator79.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString80);
        jsonGenerator46.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString80);
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jsonGenerator46);
        org.junit.Assert.assertNull(inputDecorator48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , #]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(jsonParser77);
        org.junit.Assert.assertNotNull(jsonGenerator79);
        org.junit.Assert.assertNotNull(serializedString80);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test421");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.SerializableString serializableString73 = uTF8JsonGenerator70._rootValueSeparator;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber("false");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(serializableString73);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test422");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.Version version74 = uTF8JsonGenerator70.version();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70._flushBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(version74);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test423");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        com.fasterxml.jackson.core.TreeNode treeNode36 = null;
        jsonGenerator32.writeTree(treeNode36);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature38 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        boolean boolean39 = jsonGenerator32.isEnabled(feature38);
        jsonGenerator32.writeNull();
        jsonGenerator32.writeNumber("a
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN + "'", feature38.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test424");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        char[] charArray32 = jsonParser30.getTextCharacters();
        char[] charArray33 = jsonParser30.getTextCharacters();
        double double35 = jsonParser30.getValueAsDouble((double) 64);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(charArray32);
        org.junit.Assert.assertNull(charArray33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 64.0d + "'", double35 == 64.0d);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test425");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.Version version74 = uTF8JsonGenerator70.version();
        java.math.BigInteger bigInteger75 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber(bigInteger75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(version74);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test426");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        java.io.Writer writer32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory1.createJsonGenerator(writer32);
        boolean boolean34 = jsonGenerator33.isClosed();
        jsonGenerator33.writeStartObject();
        boolean boolean36 = jsonGenerator33.isClosed();
        defaultPrettyPrinter0.writeEndObject(jsonGenerator33, (int) (byte) -1);
        boolean boolean39 = jsonGenerator33.canWriteBinaryNatively();
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test427");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int65 = serializedString56.appendQuotedUTF8(byteArray63, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonGenerator52.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString56);
        byte[] byteArray68 = new byte[] { (byte) -1 };
        int int70 = serializedString56.appendQuotedUTF8(byteArray68, 100);
        char[] charArray71 = serializedString56.asQuotedChars();
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer72 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int73 = charsToNameCanonicalizer72.collisionCount();
        int int74 = charsToNameCanonicalizer72.bucketCount();
        int int75 = charsToNameCanonicalizer72.hashSeed();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler76 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType77 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
        char[] charArray78 = bufferRecycler76.allocCharBuffer(charBufferType77);
        int int81 = charsToNameCanonicalizer72.calcHash(charArray78, (int) (byte) -65, 64);
        int int83 = serializedString56.appendQuoted(charArray78, (int) (byte) 1);
        byte[] byteArray84 = serializedString56.asQuotedUTF8();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter((com.fasterxml.jackson.core.SerializableString) serializedString56);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(serializedString56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ ]");
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 64 + "'", int74 == 64);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1270402257) + "'", int75 == (-1270402257));
        org.junit.Assert.assertTrue("'" + charBufferType77 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER + "'", charBufferType77.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-70702289) + "'", int81 == (-70702289));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[32]");
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test428");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter40.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator32.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter41);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext43 = jsonGenerator32.getOutputContext();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertNotNull(jsonStreamContext43);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test429");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        java.math.BigDecimal bigDecimal40 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator38.writeNumberField("abigDecimal40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test430");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        com.fasterxml.jackson.core.io.SerializedString serializedString75 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int84 = serializedString75.appendQuotedUTF8(byteArray82, (int) ' ');
        uTF8JsonGenerator70._rootValueSeparator = serializedString75;
        java.lang.String str86 = serializedString75.getValue();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(serializedString75);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + " " + "'", str86, " ");
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test431");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        // The following exception was thrown during execution in test generation
        try {
            char char80 = readerBasedJsonParser77.getNextChar("");
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test432");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.Version version33 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory0.createParser(byteArray36);
        boolean boolean41 = jsonParser40.canReadObjectId();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean42 = jsonParser40.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test433");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test434");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        boolean boolean32 = jsonParser30.canReadObjectId();
        int int34 = jsonParser30.nextIntValue(97);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test435");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.JsonParser.Feature feature32 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonParser30.enable(feature32);
        com.fasterxml.jackson.core.Base64Variant base64Variant34 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray35 = jsonParser30.getBinaryValue(base64Variant34);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@54462003; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + feature32 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS + "'", feature32.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS));
        org.junit.Assert.assertNotNull(jsonParser33);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test436");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        com.fasterxml.jackson.core.Base64Variant base64Variant79 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray80 = readerBasedJsonParser77.getBinaryValue(base64Variant79);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test437");
        int[] intArray4 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray6 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray4, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray8 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray4, (-1270445007));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test438");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        com.fasterxml.jackson.core.JsonToken jsonToken80 = readerBasedJsonParser77.nextValue();
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder81 = readerBasedJsonParser77._getByteArrayBuilder();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertNull(jsonToken80);
        org.junit.Assert.assertNotNull(byteArrayBuilder81);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test439");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        boolean boolean42 = jsonFactory41.requiresPropertyOrdering();
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray52 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream55 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray52, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader59 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext43, inputStream45, byteArray52, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser62 = jsonFactory41.createParser(byteArray52, 0, (int) (byte) 0);
        boolean boolean63 = jsonFactory41.requiresCustomCodec();
        java.io.OutputStream outputStream64 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator65 = jsonFactory41.createJsonGenerator(outputStream64);
        com.fasterxml.jackson.core.JsonFactory jsonFactory67 = jsonFactory41.setRootValueSeparator("ROOT");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(jsonParser62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jsonGenerator65);
        org.junit.Assert.assertNotNull(jsonFactory67);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test440");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        com.fasterxml.jackson.core.Version version34 = jsonParser30.version();
        jsonParser30.clearCurrentToken();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(version34);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test441");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        byte[] byteArray72 = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS;
        uTF8JsonGenerator70._entityBuffer = byteArray72;
        com.fasterxml.jackson.core.io.SerializedString serializedString74 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int83 = serializedString74.appendQuotedUTF8(byteArray81, (int) ' ');
        char[] charArray84 = serializedString74.asQuotedChars();
        char[] charArray85 = serializedString74.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeString((com.fasterxml.jackson.core.SerializableString) serializedString74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
        org.junit.Assert.assertNotNull(serializedString74);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[ ]");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[ ]");
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test442");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        char[] charArray58 = iOContext7.allocNameCopyBuffer((-1270536137));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test443");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70._outputSurrogates((int) ' ', 3);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Incomplete surrogate pair: first char 0x20, second 0x3");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jsonGenerator72);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test444");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer85 = readerBasedJsonParser77._symbols;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler86 = null;
        com.fasterxml.jackson.core.util.TextBuffer textBuffer87 = new com.fasterxml.jackson.core.util.TextBuffer(bufferRecycler86);
        boolean boolean88 = textBuffer87.hasTextAsCharacters();
        textBuffer87.append('a');
        char[] charArray91 = textBuffer87.finishCurrentSegment();
        java.lang.String str95 = charsToNameCanonicalizer85.findSymbol(charArray91, (-1482307515), 0, (int) (byte) 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test445");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        char[] charArray81 = readerBasedJsonParser77._inputBuffer;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray81);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test446");
        int[] intArray4 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray6 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray4, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray8 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray4, (-1270542579));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test447");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.JsonLocation jsonLocation32 = jsonParser30.getTokenLocation();
        int int33 = jsonLocation32.getLineNr();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(jsonLocation32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test448");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        java.io.Writer writer32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory1.createJsonGenerator(writer32);
        com.fasterxml.jackson.core.ObjectCodec objectCodec34 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = jsonFactory1.setCodec(objectCodec34);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory35.createGenerator(writer36);
        java.io.Writer writer38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonFactory35.createGenerator(writer38);
        com.fasterxml.jackson.core.JsonParser.Feature feature40 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory35.enable(feature40);
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = jsonFactory0.disable(feature40);
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertNotNull(jsonFactory35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertTrue("'" + feature40 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature40.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertNotNull(jsonFactory42);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test449");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory34.createParser("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature41 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        boolean boolean42 = jsonFactory34.isEnabled(feature41);
        java.io.OutputStream outputStream43 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonFactory34.createGenerator(outputStream43);
        com.fasterxml.jackson.core.JsonParser jsonParser46 = jsonFactory34.createJsonParser("com.fasterxml.jackson.core.JsonParseException: hi!");
        boolean boolean47 = jsonParser46.canReadTypeId();
        java.lang.Object obj48 = jsonParser46.getTypeId();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature41.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertNotNull(jsonParser46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj48);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test450");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.TreeNode treeNode40 = null;
        jsonGenerator39.writeTree(treeNode40);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter42 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonGenerator39.setPrettyPrinter(prettyPrinter42);
        com.fasterxml.jackson.core.ObjectCodec objectCodec44 = jsonGenerator43.getCodec();
        com.fasterxml.jackson.core.FormatSchema formatSchema45 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator43.setSchema(formatSchema45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertNull(objectCodec44);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test451");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter40.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int52 = serializedString43.appendQuotedUTF8(byteArray50, (int) ' ');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter40, (com.fasterxml.jackson.core.SerializableString) serializedString43);
        byte[] byteArray54 = serializedString43.asUnquotedUTF8();
        jsonGenerator32.writeRaw((com.fasterxml.jackson.core.SerializableString) serializedString43);
        byte[] byteArray56 = serializedString43.asQuotedUTF8();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(serializedString43);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[32]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[32]");
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test452");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser("");
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator24 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory0.copy();
        com.fasterxml.jackson.core.JsonParser.Feature feature26 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory25.enable(feature26);
        com.fasterxml.jackson.core.JsonLocation jsonLocation31 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) jsonFactory25, 1L, (-69), (int) '#');
        java.lang.Object obj32 = jsonLocation31.getSourceRef();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNull(inputDecorator24);
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature26.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertNotNull(obj32);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test453");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter40.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator32.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter41);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes43 = jsonGenerator32.getCharacterEscapes();
        java.lang.Object obj44 = null;
        jsonGenerator32.writeObject(obj44);
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = jsonGenerator32.writeBinary(inputStream47, 64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertNull(characterEscapes43);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test454");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = jsonFactory38.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray43 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream46 = new com.fasterxml.jackson.core.io.MergedStream(iOContext41, inputStream42, byteArray43, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        java.io.InputStream inputStream48 = null;
        byte[] byteArray49 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream52 = new com.fasterxml.jackson.core.io.MergedStream(iOContext47, inputStream48, byteArray49, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader56 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext40, inputStream42, byteArray49, 0, 0, false);
        char[] charArray59 = new char[] { ' ', '#' };
        int int60 = uTF32Reader56.read(charArray59);
        char[] charArray64 = new char[] { ' ', '#', '4' };
        int int67 = uTF32Reader56.read(charArray64, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser68 = jsonFactory38.createParser((java.io.Reader) uTF32Reader56);
        java.io.Writer writer69 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator70 = jsonFactory38.createJsonGenerator(writer69);
        com.fasterxml.jackson.core.io.IOContext iOContext71 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        java.io.InputStream inputStream73 = null;
        byte[] byteArray74 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream77 = new com.fasterxml.jackson.core.io.MergedStream(iOContext72, inputStream73, byteArray74, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext78 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray80 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream83 = new com.fasterxml.jackson.core.io.MergedStream(iOContext78, inputStream79, byteArray80, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader87 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext71, inputStream73, byteArray80, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser88 = jsonFactory38.createParser(byteArray80);
        jsonGenerator35.writeBinary(byteArray80);
        defaultPrettyPrinter0.writeStartArray(jsonGenerator35);
        jsonGenerator35.writeNumber((float) (byte) -17);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature93 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = jsonGenerator35.configure(feature93, true);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputDecorator39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ , #]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(jsonParser68);
        org.junit.Assert.assertNotNull(jsonGenerator70);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(jsonParser88);
        org.junit.Assert.assertTrue("'" + feature93 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature93.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonGenerator95);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test455");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        long long82 = readerBasedJsonParser77.getTokenCharacterOffset();
        double double84 = readerBasedJsonParser77.getValueAsDouble((double) 57343);
        char[] charArray85 = readerBasedJsonParser77.getTextCharacters();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 57343.0d + "'", double84 == 57343.0d);
        org.junit.Assert.assertNull(charArray85);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test456");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = mergedStream14.skip(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test457");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes73;
        com.fasterxml.jackson.core.Version version75 = uTF8JsonGenerator70.version();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(version75);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test458");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter40.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator32.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter41);
        jsonGenerator42.writeNumber((long) (byte) 1);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter45 = jsonGenerator42.getPrettyPrinter();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertNotNull(prettyPrinter45);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test459");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer85 = readerBasedJsonParser77._symbols;
        int int86 = charsToNameCanonicalizer85.bucketCount();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 64 + "'", int86 == 64);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test460");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter3.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory7 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator8 = jsonFactory7.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext16 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray18 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream21 = new com.fasterxml.jackson.core.io.MergedStream(iOContext16, inputStream17, byteArray18, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader25 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext9, inputStream11, byteArray18, 0, 0, false);
        char[] charArray28 = new char[] { ' ', '#' };
        int int29 = uTF32Reader25.read(charArray28);
        char[] charArray33 = new char[] { ' ', '#', '4' };
        int int36 = uTF32Reader25.read(charArray33, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser37 = jsonFactory7.createParser((java.io.Reader) uTF32Reader25);
        java.io.Writer writer38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonFactory7.createJsonGenerator(writer38);
        boolean boolean40 = jsonGenerator39.isClosed();
        jsonGenerator39.writeStartObject();
        boolean boolean42 = jsonGenerator39.isClosed();
        jsonGenerator39.writeNumber(100.0d);
        defaultPrettyPrinter6.writeObjectFieldValueSeparator(jsonGenerator39);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = jsonGenerator39.setFeatureMask((int) (short) 1);
        fixedSpaceIndenter1.writeIndentation(jsonGenerator47, (int) (byte) 10);
        com.fasterxml.jackson.core.JsonFactory jsonFactory50 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator51 = jsonFactory50.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext52 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext53 = null;
        java.io.InputStream inputStream54 = null;
        byte[] byteArray55 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream58 = new com.fasterxml.jackson.core.io.MergedStream(iOContext53, inputStream54, byteArray55, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext59 = null;
        java.io.InputStream inputStream60 = null;
        byte[] byteArray61 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext59, inputStream60, byteArray61, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader68 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext52, inputStream54, byteArray61, 0, 0, false);
        char[] charArray71 = new char[] { ' ', '#' };
        int int72 = uTF32Reader68.read(charArray71);
        char[] charArray76 = new char[] { ' ', '#', '4' };
        int int79 = uTF32Reader68.read(charArray76, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser80 = jsonFactory50.createParser((java.io.Reader) uTF32Reader68);
        java.io.Writer writer81 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator82 = jsonFactory50.createJsonGenerator(writer81);
        boolean boolean83 = jsonGenerator82.isClosed();
        jsonGenerator82.writeStartObject();
        boolean boolean85 = jsonGenerator82.isClosed();
        com.fasterxml.jackson.core.TreeNode treeNode86 = null;
        jsonGenerator82.writeTree(treeNode86);
        fixedSpaceIndenter1.writeIndentation(jsonGenerator82, (int) (byte) 100);
        jsonGenerator82.writeNumberField("com.fasterxml.jackson.core.JsonParseException: ARRAY", (double) ' ');
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , #]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(jsonParser37);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jsonGenerator47);
        org.junit.Assert.assertNull(inputDecorator51);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ , #]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(jsonParser80);
        org.junit.Assert.assertNotNull(jsonGenerator82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test461");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) (short) 100);
        boolean boolean33 = jsonParser30.requiresCustomCodec();
        int int35 = jsonParser30.nextIntValue(0);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test462");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature53 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = jsonFactory0.enable(feature53);
        java.io.OutputStream outputStream55 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator56 = jsonFactory0.createGenerator(outputStream55);
        com.fasterxml.jackson.core.JsonFactory jsonFactory57 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator58 = jsonFactory57.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext59 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext60 = null;
        java.io.InputStream inputStream61 = null;
        byte[] byteArray62 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext60, inputStream61, byteArray62, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext66 = null;
        java.io.InputStream inputStream67 = null;
        byte[] byteArray68 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream71 = new com.fasterxml.jackson.core.io.MergedStream(iOContext66, inputStream67, byteArray68, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext59, inputStream61, byteArray68, 0, 0, false);
        char[] charArray78 = new char[] { ' ', '#' };
        int int79 = uTF32Reader75.read(charArray78);
        char[] charArray83 = new char[] { ' ', '#', '4' };
        int int86 = uTF32Reader75.read(charArray83, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser87 = jsonFactory57.createParser((java.io.Reader) uTF32Reader75);
        com.fasterxml.jackson.core.io.IOContext iOContext88 = null;
        java.io.InputStream inputStream89 = null;
        byte[] byteArray90 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream93 = new com.fasterxml.jackson.core.io.MergedStream(iOContext88, inputStream89, byteArray90, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser94 = jsonFactory57.createJsonParser(inputStream89);
        com.fasterxml.jackson.core.JsonFactory.Feature feature95 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean96 = jsonFactory57.isEnabled(feature95);
        com.fasterxml.jackson.core.JsonFactory jsonFactory97 = jsonFactory0.disable(feature95);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes98 = jsonFactory97.getCharacterEscapes();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature53.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory54);
        org.junit.Assert.assertNotNull(jsonGenerator56);
        org.junit.Assert.assertNull(inputDecorator58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , #]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(jsonParser87);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(jsonParser94);
        org.junit.Assert.assertTrue("'" + feature95 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature95.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(jsonFactory97);
        org.junit.Assert.assertNull(characterEscapes98);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test463");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = uTF8JsonGenerator70.getCharacterEscapes();
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int81 = serializedString72.appendQuotedUTF8(byteArray79, (int) ' ');
        int int82 = serializedString72.charLength();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator83 = uTF8JsonGenerator70.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString72);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = uTF8JsonGenerator70._decodeSurrogate((int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Incomplete surrogate pair: first char 0x64, second 0x0");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(characterEscapes71);
        org.junit.Assert.assertNotNull(serializedString72);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(jsonGenerator83);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test464");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.ObjectCodec objectCodec32 = null;
        jsonParser30.setCodec(objectCodec32);
        com.fasterxml.jackson.core.FormatSchema formatSchema34 = jsonParser30.getSchema();
        com.fasterxml.jackson.core.ObjectCodec objectCodec35 = null;
        jsonParser30.setCodec(objectCodec35);
        com.fasterxml.jackson.core.ObjectCodec objectCodec37 = jsonParser30.getCodec();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(formatSchema34);
        org.junit.Assert.assertNull(objectCodec37);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test465");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        java.lang.String str81 = readerBasedJsonParser77.getText();
        int int82 = readerBasedJsonParser77.getTokenLineNr();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test466");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        java.lang.Object obj35 = jsonParser30.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonLocation jsonLocation36 = jsonParser30.getCurrentLocation();
        com.fasterxml.jackson.core.JsonLocation jsonLocation37 = jsonParser30.getTokenLocation();
        long long38 = jsonLocation37.getByteOffset();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(jsonLocation36);
        org.junit.Assert.assertNotNull(jsonLocation37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test467");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        com.fasterxml.jackson.core.Version version34 = jsonParser30.version();
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonParser30.setFeatureMask(56319);
        com.fasterxml.jackson.core.ObjectCodec objectCodec37 = jsonParser36.getCodec();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext38 = jsonParser36.getParsingContext();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertNull(objectCodec37);
        org.junit.Assert.assertNotNull(jsonStreamContext38);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test468");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        int int80 = readerBasedJsonParser77.getTextLength();
        char[] charArray81 = readerBasedJsonParser77.getTextCharacters();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNull(charArray81);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test469");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        long long80 = readerBasedJsonParser77.nextLongValue((long) (-69));
        com.fasterxml.jackson.core.Base64Variant base64Variant81 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray82 = readerBasedJsonParser77.getBinaryValue(base64Variant81);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-69L) + "'", long80 == (-69L));
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test470");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature53 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = jsonFactory0.enable(feature53);
        java.io.OutputStream outputStream55 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator56 = jsonFactory0.createGenerator(outputStream55);
        com.fasterxml.jackson.core.JsonFactory jsonFactory57 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator58 = jsonFactory57.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext59 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext60 = null;
        java.io.InputStream inputStream61 = null;
        byte[] byteArray62 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream65 = new com.fasterxml.jackson.core.io.MergedStream(iOContext60, inputStream61, byteArray62, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext66 = null;
        java.io.InputStream inputStream67 = null;
        byte[] byteArray68 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream71 = new com.fasterxml.jackson.core.io.MergedStream(iOContext66, inputStream67, byteArray68, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader75 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext59, inputStream61, byteArray68, 0, 0, false);
        char[] charArray78 = new char[] { ' ', '#' };
        int int79 = uTF32Reader75.read(charArray78);
        char[] charArray83 = new char[] { ' ', '#', '4' };
        int int86 = uTF32Reader75.read(charArray83, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser87 = jsonFactory57.createParser((java.io.Reader) uTF32Reader75);
        com.fasterxml.jackson.core.io.IOContext iOContext88 = null;
        java.io.InputStream inputStream89 = null;
        byte[] byteArray90 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream93 = new com.fasterxml.jackson.core.io.MergedStream(iOContext88, inputStream89, byteArray90, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser94 = jsonFactory57.createJsonParser(inputStream89);
        com.fasterxml.jackson.core.JsonFactory.Feature feature95 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean96 = jsonFactory57.isEnabled(feature95);
        com.fasterxml.jackson.core.JsonFactory jsonFactory97 = jsonFactory0.disable(feature95);
        boolean boolean99 = feature95.enabledIn((-1270543513));
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertTrue("'" + feature53 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature53.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonFactory54);
        org.junit.Assert.assertNotNull(jsonGenerator56);
        org.junit.Assert.assertNull(inputDecorator58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , #]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(jsonParser87);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(jsonParser94);
        org.junit.Assert.assertTrue("'" + feature95 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature95.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(jsonFactory97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test471");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        boolean boolean37 = jsonGenerator36.canWriteBinaryNatively();
        jsonGenerator36.writeNumberField("false", (double) (-1270410141));
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test472");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        jsonGenerator36.writeObjectFieldStart("");
        jsonGenerator36.writeObjectFieldStart("hi!");
        defaultPrettyPrinter0.beforeObjectEntries(jsonGenerator36);
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator43 = jsonFactory42.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray47 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream50 = new com.fasterxml.jackson.core.io.MergedStream(iOContext45, inputStream46, byteArray47, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext51 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray53 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext51, inputStream52, byteArray53, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader60 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext44, inputStream46, byteArray53, 0, 0, false);
        char[] charArray63 = new char[] { ' ', '#' };
        int int64 = uTF32Reader60.read(charArray63);
        char[] charArray68 = new char[] { ' ', '#', '4' };
        int int71 = uTF32Reader60.read(charArray68, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser72 = jsonFactory42.createParser((java.io.Reader) uTF32Reader60);
        java.io.Writer writer73 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = jsonFactory42.createJsonGenerator(writer73);
        defaultPrettyPrinter0.writeArrayValueSeparator(jsonGenerator74);
        jsonGenerator74.writeNumber((int) (byte) -65);
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNull(inputDecorator43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , #]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(jsonParser72);
        org.junit.Assert.assertNotNull(jsonGenerator74);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test473");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        java.io.Writer writer32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory1.createJsonGenerator(writer32);
        boolean boolean34 = jsonGenerator33.isClosed();
        jsonGenerator33.writeStartObject();
        boolean boolean36 = jsonGenerator33.isClosed();
        defaultPrettyPrinter0.writeEndObject(jsonGenerator33, (int) (byte) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator41 = jsonFactory40.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext42 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        java.io.InputStream inputStream44 = null;
        byte[] byteArray45 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream48 = new com.fasterxml.jackson.core.io.MergedStream(iOContext43, inputStream44, byteArray45, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader58 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext42, inputStream44, byteArray51, 0, 0, false);
        char[] charArray61 = new char[] { ' ', '#' };
        int int62 = uTF32Reader58.read(charArray61);
        char[] charArray66 = new char[] { ' ', '#', '4' };
        int int69 = uTF32Reader58.read(charArray66, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser70 = jsonFactory40.createParser((java.io.Reader) uTF32Reader58);
        java.io.Writer writer71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = jsonFactory40.createJsonGenerator(writer71);
        boolean boolean73 = jsonGenerator72.isClosed();
        jsonGenerator72.writeStartObject();
        boolean boolean75 = jsonGenerator72.isClosed();
        jsonGenerator72.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator79 = jsonGenerator72.setCodec(objectCodec78);
        com.fasterxml.jackson.core.TreeNode treeNode80 = null;
        jsonGenerator79.writeTree(treeNode80);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter82 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator83 = jsonGenerator79.setPrettyPrinter(prettyPrinter82);
        com.fasterxml.jackson.core.ObjectCodec objectCodec84 = jsonGenerator83.getCodec();
        jsonGenerator83.writeStringField("[Source: false; line: 1, column: 0]", "ARRAY");
        defaultPrettyPrinter0.writeObjectEntrySeparator(jsonGenerator83);
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputDecorator41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(jsonParser70);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(jsonGenerator79);
        org.junit.Assert.assertNotNull(jsonGenerator83);
        org.junit.Assert.assertNull(objectCodec84);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test474");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        java.io.InputStream inputStream1 = null;
        byte[] byteArray2 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream5 = new com.fasterxml.jackson.core.io.MergedStream(iOContext0, inputStream1, byteArray2, 0, (int) (short) -1);
        boolean boolean6 = mergedStream5.markSupported();
        boolean boolean7 = mergedStream5.markSupported();
        com.fasterxml.jackson.core.JsonFactory jsonFactory8 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator9 = jsonFactory8.getInputDecorator();
        boolean boolean10 = jsonFactory8.requiresPropertyOrdering();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter11 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter12 = defaultPrettyPrinter11.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter13 = defaultPrettyPrinter12.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory14 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator15 = jsonFactory14.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext16 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext17 = null;
        java.io.InputStream inputStream18 = null;
        byte[] byteArray19 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream22 = new com.fasterxml.jackson.core.io.MergedStream(iOContext17, inputStream18, byteArray19, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext23 = null;
        java.io.InputStream inputStream24 = null;
        byte[] byteArray25 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream28 = new com.fasterxml.jackson.core.io.MergedStream(iOContext23, inputStream24, byteArray25, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader32 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext16, inputStream18, byteArray25, 0, 0, false);
        char[] charArray35 = new char[] { ' ', '#' };
        int int36 = uTF32Reader32.read(charArray35);
        char[] charArray40 = new char[] { ' ', '#', '4' };
        int int43 = uTF32Reader32.read(charArray40, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser44 = jsonFactory14.createParser((java.io.Reader) uTF32Reader32);
        java.io.Writer writer45 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator46 = jsonFactory14.createJsonGenerator(writer45);
        jsonGenerator46.writeString("");
        jsonGenerator46.writeBoolean(false);
        defaultPrettyPrinter13.beforeObjectEntries(jsonGenerator46);
        boolean boolean52 = jsonGenerator46.canWriteObjectId();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter53.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString56 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter57 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter53, serializableString56);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator58 = jsonGenerator46.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter53);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) 1, (byte) -1 };
        jsonGenerator46.writeBinaryField("false", byteArray65);
        com.fasterxml.jackson.core.JsonParser jsonParser67 = jsonFactory8.createJsonParser(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = mergedStream5.read(byteArray65, (-2140754090), 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(inputDecorator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter12);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter13);
        org.junit.Assert.assertNull(inputDecorator15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , #]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(jsonParser44);
        org.junit.Assert.assertNotNull(jsonGenerator46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jsonGenerator58);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, 1, -1]");
        org.junit.Assert.assertNotNull(jsonParser67);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test475");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        java.io.Writer writer32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory1.createJsonGenerator(writer32);
        boolean boolean34 = jsonGenerator33.isClosed();
        jsonGenerator33.writeStartObject();
        boolean boolean36 = jsonGenerator33.isClosed();
        defaultPrettyPrinter0.writeEndObject(jsonGenerator33, (int) (byte) -1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator40 = jsonFactory39.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext42 = null;
        java.io.InputStream inputStream43 = null;
        byte[] byteArray44 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream47 = new com.fasterxml.jackson.core.io.MergedStream(iOContext42, inputStream43, byteArray44, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray50 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream53 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray50, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader57 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext41, inputStream43, byteArray50, 0, 0, false);
        char[] charArray60 = new char[] { ' ', '#' };
        int int61 = uTF32Reader57.read(charArray60);
        char[] charArray65 = new char[] { ' ', '#', '4' };
        int int68 = uTF32Reader57.read(charArray65, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonFactory39.createParser((java.io.Reader) uTF32Reader57);
        java.io.Writer writer70 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator71 = jsonFactory39.createJsonGenerator(writer70);
        boolean boolean72 = jsonGenerator71.isClosed();
        jsonGenerator71.writeStartObject();
        boolean boolean74 = jsonGenerator71.isClosed();
        jsonGenerator71.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec77 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = jsonGenerator71.setCodec(objectCodec77);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter79 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter80 = defaultPrettyPrinter79.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator81 = jsonGenerator71.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter80);
        defaultPrettyPrinter0.writeObjectFieldValueSeparator(jsonGenerator81);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator83 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter0.writeStartArray(jsonGenerator83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputDecorator40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , #]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertNotNull(jsonGenerator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jsonGenerator78);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter80);
        org.junit.Assert.assertNotNull(jsonGenerator81);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test476");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory38.setInputDecorator(inputDecorator39);
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory40.createParser("[Source: ALLOW_COMMENTS; line: 35, column: 1]");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(jsonParser42);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test477");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext36 = jsonGenerator32.getOutputContext();
        com.fasterxml.jackson.core.FormatSchema formatSchema37 = jsonGenerator32.getSchema();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeRawValue("UTF-16BE", (-1270536137), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1270536137");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonStreamContext36);
        org.junit.Assert.assertNull(formatSchema37);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test478");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.OutputStream outputStream31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createGenerator(outputStream31);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator34 = jsonGenerator32.setFeatureMask((-1270542579));
        com.fasterxml.jackson.core.io.SerializedString serializedString36 = new com.fasterxml.jackson.core.io.SerializedString("[Source: false; line: 1, column: 0]");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler37 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation39 = null;
        java.lang.Throwable throwable40 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException41 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation39, throwable40);
        java.lang.String str42 = jsonParseException41.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext44 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler37, (java.lang.Object) jsonParseException41, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer45 = iOContext44.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        int int52 = mergedStream51.available();
        boolean boolean53 = mergedStream51.markSupported();
        int int54 = mergedStream51.available();
        int int55 = mergedStream51.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version57 = jsonFactory56.version();
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext59 = null;
        java.io.InputStream inputStream60 = null;
        byte[] byteArray61 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext59, inputStream60, byteArray61, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext65 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray67 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream70 = new com.fasterxml.jackson.core.io.MergedStream(iOContext65, inputStream66, byteArray67, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader74 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext58, inputStream60, byteArray67, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser75 = jsonFactory56.createParser((java.io.Reader) uTF32Reader74);
        com.fasterxml.jackson.core.JsonFactory jsonFactory77 = jsonFactory56.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString78 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int87 = serializedString78.appendQuotedUTF8(byteArray85, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser90 = jsonFactory56.createParser(byteArray85, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream93 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, (java.io.InputStream) mergedStream51, byteArray85, (int) (short) 10, 79);
        int int95 = serializedString36.appendQuotedUTF8(byteArray85, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator32.writeTypeId((java.lang.Object) serializedString36);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Type Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonGenerator34);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(textBuffer45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(version57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(jsonParser75);
        org.junit.Assert.assertNotNull(jsonFactory77);
        org.junit.Assert.assertNotNull(serializedString78);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test479");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        int int86 = readerBasedJsonParser77.getValueAsInt(35);
        com.fasterxml.jackson.core.JsonToken jsonToken87 = readerBasedJsonParser77.nextToken();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNull(jsonToken87);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test480");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.ObjectCodec objectCodec51 = jsonFactory0.getCodec();
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator52 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory53 = jsonFactory0.setOutputDecorator(outputDecorator52);
        com.fasterxml.jackson.core.io.IOContext iOContext54 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext61 = null;
        java.io.InputStream inputStream62 = null;
        byte[] byteArray63 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream66 = new com.fasterxml.jackson.core.io.MergedStream(iOContext61, inputStream62, byteArray63, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader70 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext54, inputStream56, byteArray63, 0, 0, false);
        char[] charArray73 = new char[] { ' ', '#' };
        int int74 = uTF32Reader70.read(charArray73);
        boolean boolean75 = uTF32Reader70.markSupported();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler76 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType77 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
        char[] charArray78 = bufferRecycler76.allocCharBuffer(charBufferType77);
        int int79 = uTF32Reader70.read(charArray78);
        com.fasterxml.jackson.core.JsonParser jsonParser80 = jsonFactory53.createJsonParser((java.io.Reader) uTF32Reader70);
        boolean boolean81 = uTF32Reader70.ready();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(objectCodec51);
        org.junit.Assert.assertNotNull(jsonFactory53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[ , #]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + charBufferType77 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER + "'", charBufferType77.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(jsonParser80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test481");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator51 = jsonFactory0.getOutputDecorator();
        com.fasterxml.jackson.core.JsonFactory jsonFactory53 = jsonFactory0.setRootValueSeparator("[Source: ALLOW_COMMENTS; line: 35, column: 1]");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(outputDecorator51);
        org.junit.Assert.assertNotNull(jsonFactory53);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test482");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        byte[] byteArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int58 = mergedStream56.read(byteArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test483");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes73;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70._verifyPrettyValueWrite("false", (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: Internal error: this code path should never get executed");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test484");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        jsonGenerator37.writeNumberField("[Source: false; line: 1, column: 0]", (int) (short) 100);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature43 = com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonGenerator37.enable(feature43);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter45 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter45.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter48 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter45);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter45);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter45.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter51 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        boolean boolean52 = fixedSpaceIndenter51.isInline();
        boolean boolean53 = fixedSpaceIndenter51.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter50.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter51);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator44.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter50);
        boolean boolean56 = jsonGenerator55.canWriteBinaryNatively();
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII + "'", feature43.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII));
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test485");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            char char79 = readerBasedJsonParser77._decodeEscaped();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input in character escape sequence? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test486");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        readerBasedJsonParser77._releaseBuffers();
        java.lang.String str82 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: hi!" + "'", str82, "com.fasterxml.jackson.core.JsonParseException: hi!");
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test487");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        int int75 = uTF8JsonGenerator70.getFeatureMask();
        com.fasterxml.jackson.core.Base64Variant base64Variant76 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext77 = null;
        java.io.InputStream inputStream78 = null;
        byte[] byteArray79 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream82 = new com.fasterxml.jackson.core.io.MergedStream(iOContext77, inputStream78, byteArray79, 0, (int) (short) -1);
        int int83 = mergedStream82.available();
        mergedStream82.reset();
        // The following exception was thrown during execution in test generation
        try {
            int int86 = uTF8JsonGenerator70.writeBinary(base64Variant76, (java.io.InputStream) mergedStream82, (-70702289));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test488");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createJsonParser("JSON");
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes35 = jsonFactory0.getCharacterEscapes();
        com.fasterxml.jackson.core.JsonFactory jsonFactory36 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = jsonFactory36.getInputDecorator();
        boolean boolean38 = jsonFactory36.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory39 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator40 = jsonFactory39.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext42 = null;
        java.io.InputStream inputStream43 = null;
        byte[] byteArray44 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream47 = new com.fasterxml.jackson.core.io.MergedStream(iOContext42, inputStream43, byteArray44, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray50 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream53 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray50, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader57 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext41, inputStream43, byteArray50, 0, 0, false);
        char[] charArray60 = new char[] { ' ', '#' };
        int int61 = uTF32Reader57.read(charArray60);
        char[] charArray65 = new char[] { ' ', '#', '4' };
        int int68 = uTF32Reader57.read(charArray65, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonFactory39.createParser((java.io.Reader) uTF32Reader57);
        int int71 = jsonParser69.nextIntValue((int) 'a');
        int int72 = jsonParser69.getFeatureMask();
        double double73 = jsonParser69.getValueAsDouble();
        java.lang.Object obj74 = jsonParser69.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature75 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean76 = jsonParser69.isEnabled(feature75);
        com.fasterxml.jackson.core.JsonFactory jsonFactory77 = jsonFactory36.disable(feature75);
        com.fasterxml.jackson.core.JsonFactory jsonFactory78 = jsonFactory0.disable(feature75);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator79 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory80 = jsonFactory0.setOutputDecorator(outputDecorator79);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNull(characterEscapes35);
        org.junit.Assert.assertNull(inputDecorator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(inputDecorator40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , #]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + feature75 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature75.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jsonFactory77);
        org.junit.Assert.assertNotNull(jsonFactory78);
        org.junit.Assert.assertNotNull(jsonFactory80);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test489");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        long long33 = jsonParser30.nextLongValue((long) (short) 1);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test490");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        int int81 = readerBasedJsonParser77.getTextLength();
        boolean boolean82 = readerBasedJsonParser77.hasTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken83 = readerBasedJsonParser77.nextToken();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(jsonToken83);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test491");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        char[] charArray32 = jsonParser30.getTextCharacters();
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        jsonParser30.setCodec(objectCodec33);
        java.lang.String str35 = jsonParser30.getText();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(charArray32);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test492");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        com.fasterxml.jackson.core.JsonLocation jsonLocation82 = readerBasedJsonParser77.getTokenLocation();
        java.lang.String str83 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext84 = readerBasedJsonParser77.getParsingContext();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertNotNull(jsonLocation82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(jsonStreamContext84);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test493");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeString("");
        jsonGenerator35.writeBoolean(false);
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter2.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter42 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = defaultPrettyPrinter41.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter42);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPrettyPrinter41.writeArrayValueSeparator(jsonGenerator44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter42);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter43);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test494");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        boolean boolean91 = uTF8JsonGenerator70._bufferRecyclable;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test495");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.OutputStream outputStream71 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer72 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext7, outputStream71);
        uTF8Writer72.write("com.fasterxml.jackson.core.JsonParseException: ARRAY", 705487640, (-1270519895));
        com.fasterxml.jackson.core.io.IOContext iOContext77 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext78 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray80 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream83 = new com.fasterxml.jackson.core.io.MergedStream(iOContext78, inputStream79, byteArray80, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext84 = null;
        java.io.InputStream inputStream85 = null;
        byte[] byteArray86 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream89 = new com.fasterxml.jackson.core.io.MergedStream(iOContext84, inputStream85, byteArray86, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader93 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext77, inputStream79, byteArray86, 0, 0, false);
        char[] charArray96 = new char[] { ' ', '#' };
        int int97 = uTF32Reader93.read(charArray96);
        uTF8Writer72.write(charArray96);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray96), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray96), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray96), "[ , #]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test496");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeBoolean(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test497");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        int int79 = readerBasedJsonParser77.getTokenColumnNr();
        boolean boolean80 = readerBasedJsonParser77.hasTextCharacters();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test498");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = com.fasterxml.jackson.core.JsonToken.START_ARRAY;
        java.lang.String str80 = readerBasedJsonParser77._getText2(jsonToken79);
        com.fasterxml.jackson.core.JsonToken jsonToken81 = readerBasedJsonParser77.nextToken();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertTrue("'" + jsonToken79 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_ARRAY + "'", jsonToken79.equals(com.fasterxml.jackson.core.JsonToken.START_ARRAY));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[" + "'", str80, "[");
        org.junit.Assert.assertNull(jsonToken81);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test499");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        java.lang.Object obj35 = jsonParser30.getEmbeddedObject();
        char[] charArray36 = jsonParser30.getTextCharacters();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(charArray36);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test500");
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer0 = com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.createRoot();
        int int1 = bytesToNameCanonicalizer0.maxCollisionLength();
        int int2 = bytesToNameCanonicalizer0.collisionCount();
        int int3 = bytesToNameCanonicalizer0.collisionCount();
        int[] intArray4 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeUtf8JsNames();
        int[] intArray6 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray4, 16);
        int int8 = bytesToNameCanonicalizer0.calcHash(intArray6, (int) ' ');
        bytesToNameCanonicalizer0.release();
        bytesToNameCanonicalizer0.release();
        org.junit.Assert.assertNotNull(bytesToNameCanonicalizer0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-186155456) + "'", int8 == (-186155456));
    }
}
