package com.fasterxml.jackson.core.json;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test501");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        java.io.OutputStream outputStream39 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonFactory38.createJsonGenerator(outputStream39);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext42 = null;
        java.io.InputStream inputStream43 = null;
        byte[] byteArray44 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream47 = new com.fasterxml.jackson.core.io.MergedStream(iOContext42, inputStream43, byteArray44, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray50 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream53 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray50, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader57 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext41, inputStream43, byteArray50, 0, 0, false);
        char[] charArray60 = new char[] { ' ', '#' };
        int int61 = uTF32Reader57.read(charArray60);
        char[] charArray65 = new char[] { ' ', '#', '4' };
        int int68 = uTF32Reader57.read(charArray65, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonFactory38.createParser((java.io.Reader) uTF32Reader57);
        int int70 = uTF32Reader57.read();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonGenerator40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , #]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test502");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        long long80 = readerBasedJsonParser77.nextLongValue((long) (-69));
        // The following exception was thrown during execution in test generation
        try {
            double double81 = readerBasedJsonParser77.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-69L) + "'", long80 == (-69L));
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test503");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = defaultPrettyPrinter5.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter7.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString10 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter11 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter7, serializableString10);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter12 = defaultPrettyPrinter7.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter13 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter();
        defaultPrettyPrinter7.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter13);
        boolean boolean15 = fixedSpaceIndenter13.isInline();
        com.fasterxml.jackson.core.JsonFactory jsonFactory16 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator17 = jsonFactory16.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext19 = null;
        java.io.InputStream inputStream20 = null;
        byte[] byteArray21 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream24 = new com.fasterxml.jackson.core.io.MergedStream(iOContext19, inputStream20, byteArray21, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext25 = null;
        java.io.InputStream inputStream26 = null;
        byte[] byteArray27 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream30 = new com.fasterxml.jackson.core.io.MergedStream(iOContext25, inputStream26, byteArray27, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader34 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext18, inputStream20, byteArray27, 0, 0, false);
        char[] charArray37 = new char[] { ' ', '#' };
        int int38 = uTF32Reader34.read(charArray37);
        char[] charArray42 = new char[] { ' ', '#', '4' };
        int int45 = uTF32Reader34.read(charArray42, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser46 = jsonFactory16.createParser((java.io.Reader) uTF32Reader34);
        java.io.Writer writer47 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonFactory16.createJsonGenerator(writer47);
        boolean boolean49 = jsonGenerator48.isClosed();
        jsonGenerator48.writeStartObject();
        boolean boolean51 = jsonGenerator48.isClosed();
        jsonGenerator48.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec54 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator48.setCodec(objectCodec54);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter56 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter57 = defaultPrettyPrinter56.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator58 = jsonGenerator48.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter57);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter59 = jsonGenerator58.getPrettyPrinter();
        jsonGenerator58.writeRaw("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature62 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator64 = jsonGenerator58.configure(feature62, false);
        fixedSpaceIndenter13.writeIndentation(jsonGenerator58, 2);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = defaultPrettyPrinter6.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter13);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter68 = defaultPrettyPrinter4.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter13);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter6);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(inputDecorator17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , #]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(jsonParser46);
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter57);
        org.junit.Assert.assertNotNull(jsonGenerator58);
        org.junit.Assert.assertNotNull(prettyPrinter59);
        org.junit.Assert.assertTrue("'" + feature62 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature62.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonGenerator64);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter67);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter68);
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test504");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger80 = readerBasedJsonParser77.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test505");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.io.IOContext iOContext31 = null;
        java.io.InputStream inputStream32 = null;
        byte[] byteArray33 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream36 = new com.fasterxml.jackson.core.io.MergedStream(iOContext31, inputStream32, byteArray33, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser37 = jsonFactory0.createJsonParser(inputStream32);
        com.fasterxml.jackson.core.JsonFactory.Feature feature38 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean39 = jsonFactory0.isEnabled(feature38);
        java.io.File file40 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser41 = jsonFactory0.createParser(file40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(jsonParser37);
        org.junit.Assert.assertTrue("'" + feature38 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature38.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test506");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int65 = serializedString56.appendQuotedUTF8(byteArray63, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonGenerator52.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString56);
        byte[] byteArray68 = new byte[] { (byte) -1 };
        int int70 = serializedString56.appendQuotedUTF8(byteArray68, 100);
        char[] charArray71 = serializedString56.asQuotedChars();
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer72 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int73 = charsToNameCanonicalizer72.collisionCount();
        int int74 = charsToNameCanonicalizer72.bucketCount();
        int int75 = charsToNameCanonicalizer72.hashSeed();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler76 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType77 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
        char[] charArray78 = bufferRecycler76.allocCharBuffer(charBufferType77);
        int int81 = charsToNameCanonicalizer72.calcHash(charArray78, (int) (byte) -65, 64);
        int int83 = serializedString56.appendQuoted(charArray78, (int) (byte) 1);
        byte[] byteArray84 = serializedString56.asQuotedUTF8();
        char[] charArray85 = serializedString56.asQuotedChars();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(serializedString56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ ]");
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 64 + "'", int74 == 64);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1779133819) + "'", int75 == (-1779133819));
        org.junit.Assert.assertTrue("'" + charBufferType77 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER + "'", charBufferType77.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-473548155) + "'", int81 == (-473548155));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[32]");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[ ]");
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test507");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setInputDecorator(inputDecorator33);
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator36 = jsonFactory35.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext38 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray40 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext38, inputStream39, byteArray40, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader53 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext37, inputStream39, byteArray46, 0, 0, false);
        char[] charArray56 = new char[] { ' ', '#' };
        int int57 = uTF32Reader53.read(charArray56);
        char[] charArray61 = new char[] { ' ', '#', '4' };
        int int64 = uTF32Reader53.read(charArray61, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser65 = jsonFactory35.createParser((java.io.Reader) uTF32Reader53);
        int int67 = jsonParser65.nextIntValue((int) 'a');
        int int68 = jsonParser65.getFeatureMask();
        double double69 = jsonParser65.getValueAsDouble();
        java.lang.Object obj70 = jsonParser65.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature71 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean72 = jsonParser65.isEnabled(feature71);
        com.fasterxml.jackson.core.JsonFactory jsonFactory74 = jsonFactory34.configure(feature71, false);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNull(inputDecorator36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ , #]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(jsonParser65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + feature71 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature71.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(jsonFactory74);
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test508");
        com.fasterxml.jackson.core.JsonLocation jsonLocation1 = com.fasterxml.jackson.core.JsonLocation.NA;
        com.fasterxml.jackson.core.JsonParseException jsonParseException2 = new com.fasterxml.jackson.core.JsonParseException("JSON", jsonLocation1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        boolean boolean37 = jsonGenerator36.isClosed();
        jsonGenerator36.writeStartObject();
        boolean boolean39 = jsonGenerator36.isClosed();
        defaultPrettyPrinter3.writeEndObject(jsonGenerator36, (int) (byte) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter42 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter43 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter42.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator46 = jsonFactory45.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray50 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream53 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray50, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext54 = null;
        java.io.InputStream inputStream55 = null;
        byte[] byteArray56 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream59 = new com.fasterxml.jackson.core.io.MergedStream(iOContext54, inputStream55, byteArray56, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader63 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext47, inputStream49, byteArray56, 0, 0, false);
        char[] charArray66 = new char[] { ' ', '#' };
        int int67 = uTF32Reader63.read(charArray66);
        char[] charArray71 = new char[] { ' ', '#', '4' };
        int int74 = uTF32Reader63.read(charArray71, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser75 = jsonFactory45.createParser((java.io.Reader) uTF32Reader63);
        java.io.Writer writer76 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator77 = jsonFactory45.createJsonGenerator(writer76);
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory79 = jsonFactory45.setCodec(objectCodec78);
        java.io.Writer writer80 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator81 = jsonFactory79.createGenerator(writer80);
        jsonGenerator81.writeArrayFieldStart("");
        fixedSpaceIndenter43.writeIndentation(jsonGenerator81, (int) (short) 0);
        jsonGenerator81.writeStringField("", "");
        jsonGenerator81.writeArrayFieldStart("");
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator81);
        boolean boolean92 = jsonLocation1.equals((java.lang.Object) jsonGenerator81);
        org.junit.Assert.assertNotNull(jsonLocation1);
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter43);
        org.junit.Assert.assertNull(inputDecorator46);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , #]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(jsonParser75);
        org.junit.Assert.assertNotNull(jsonGenerator77);
        org.junit.Assert.assertNotNull(jsonFactory79);
        org.junit.Assert.assertNotNull(jsonGenerator81);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test509");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory0.createJsonParser("JSON");
        double double35 = jsonParser34.getValueAsDouble();
        java.io.OutputStream outputStream36 = null;
        int int37 = jsonParser34.releaseBuffered(outputStream36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = jsonParser34.nextTextValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token 'JSON': was expecting ? at [Source: java.io.StringReader@76122acf; line: 1, column: 9]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test510");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        int int80 = readerBasedJsonParser77.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation81 = readerBasedJsonParser77.getCurrentLocation();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(jsonLocation81);
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test511");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = jsonFactory38.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray43 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream46 = new com.fasterxml.jackson.core.io.MergedStream(iOContext41, inputStream42, byteArray43, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        java.io.InputStream inputStream48 = null;
        byte[] byteArray49 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream52 = new com.fasterxml.jackson.core.io.MergedStream(iOContext47, inputStream48, byteArray49, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader56 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext40, inputStream42, byteArray49, 0, 0, false);
        char[] charArray59 = new char[] { ' ', '#' };
        int int60 = uTF32Reader56.read(charArray59);
        char[] charArray64 = new char[] { ' ', '#', '4' };
        int int67 = uTF32Reader56.read(charArray64, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser68 = jsonFactory38.createParser((java.io.Reader) uTF32Reader56);
        java.io.Writer writer69 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator70 = jsonFactory38.createJsonGenerator(writer69);
        com.fasterxml.jackson.core.io.IOContext iOContext71 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        java.io.InputStream inputStream73 = null;
        byte[] byteArray74 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream77 = new com.fasterxml.jackson.core.io.MergedStream(iOContext72, inputStream73, byteArray74, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext78 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray80 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream83 = new com.fasterxml.jackson.core.io.MergedStream(iOContext78, inputStream79, byteArray80, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader87 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext71, inputStream73, byteArray80, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser88 = jsonFactory38.createParser(byteArray80);
        jsonGenerator35.writeBinary(byteArray80);
        defaultPrettyPrinter0.writeStartArray(jsonGenerator35);
        jsonGenerator35.writeNumber((float) (byte) -17);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature93 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = jsonGenerator35.configure(feature93, true);
        byte[] byteArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator95.writeBinaryField("", byteArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputDecorator39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ , #]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(jsonParser68);
        org.junit.Assert.assertNotNull(jsonGenerator70);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(jsonParser88);
        org.junit.Assert.assertTrue("'" + feature93 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature93.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonGenerator95);
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test512");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        long long21 = uTF32Reader18.skip((long) 35);
        java.nio.CharBuffer charBuffer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int23 = uTF32Reader18.read(charBuffer22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test513");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        uTF8JsonGenerator70.writeRaw("");
        uTF8JsonGenerator70._bufferRecyclable = true;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test514");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.SerializableString serializableString73 = uTF8JsonGenerator70._rootValueSeparator;
        int int74 = uTF8JsonGenerator70._outputEnd;
        byte[] byteArray75 = uTF8JsonGenerator70._outputBuffer;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(serializableString73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, -65, 1, 0, 0]");
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test515");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer57 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.SerializedString serializedString58 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int67 = serializedString58.appendQuotedUTF8(byteArray65, (int) ' ');
        char[] charArray68 = serializedString58.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            textBuffer57.append(charArray68, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertNotNull(textBuffer57);
        org.junit.Assert.assertNotNull(serializedString58);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ ]");
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test516");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        com.fasterxml.jackson.core.io.SerializedString serializedString56 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int65 = serializedString56.appendQuotedUTF8(byteArray63, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator66 = jsonGenerator52.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString56);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter67 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter67.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString70 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int79 = serializedString70.appendQuotedUTF8(byteArray77, (int) ' ');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter80 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter67, (com.fasterxml.jackson.core.SerializableString) serializedString70);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter nopIndenter81 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter();
        boolean boolean82 = nopIndenter81.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter83 = defaultPrettyPrinter80.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) nopIndenter81);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = null;
        defaultPrettyPrinter83.beforeObjectEntries(jsonGenerator84);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter86 = defaultPrettyPrinter83.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter83);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(serializedString56);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator66);
        org.junit.Assert.assertNotNull(serializedString70);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter83);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter86);
        org.junit.Assert.assertNotNull(jsonGenerator87);
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test517");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        uTF8JsonGenerator70._bufferRecyclable = false;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeEndObject();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an object but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test518");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        boolean boolean37 = jsonGenerator36.isClosed();
        jsonGenerator36.writeStartObject();
        boolean boolean39 = jsonGenerator36.isClosed();
        defaultPrettyPrinter3.writeEndObject(jsonGenerator36, (int) (byte) -1);
        jsonGenerator36.writeNull();
        fixedSpaceIndenter1.writeIndentation(jsonGenerator36, (-69));
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test519");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.Version version33 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory0.createParser(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal41 = jsonParser40.getDecimalValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: [B@7bcfeb2d; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(jsonParser40);
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test520");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator7 = jsonFactory6.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext15 = null;
        java.io.InputStream inputStream16 = null;
        byte[] byteArray17 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream20 = new com.fasterxml.jackson.core.io.MergedStream(iOContext15, inputStream16, byteArray17, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader24 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext8, inputStream10, byteArray17, 0, 0, false);
        char[] charArray27 = new char[] { ' ', '#' };
        int int28 = uTF32Reader24.read(charArray27);
        char[] charArray32 = new char[] { ' ', '#', '4' };
        int int35 = uTF32Reader24.read(charArray32, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonFactory6.createParser((java.io.Reader) uTF32Reader24);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory6.createJsonGenerator(writer37);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        java.io.InputStream inputStream47 = null;
        byte[] byteArray48 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream51 = new com.fasterxml.jackson.core.io.MergedStream(iOContext46, inputStream47, byteArray48, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader55 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext39, inputStream41, byteArray48, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser56 = jsonFactory6.createParser(byteArray48);
        java.io.Writer writer57 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator58 = jsonFactory6.createGenerator(writer57);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter59 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter60 = defaultPrettyPrinter59.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator61 = jsonGenerator58.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter60);
        com.fasterxml.jackson.core.io.SerializedString serializedString62 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int71 = serializedString62.appendQuotedUTF8(byteArray69, (int) ' ');
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = jsonGenerator58.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString62);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter73 = defaultPrettyPrinter5.withRootSeparator((com.fasterxml.jackson.core.SerializableString) serializedString62);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter74 = defaultPrettyPrinter5.withoutSpacesInObjectEntries();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNull(inputDecorator7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(jsonParser56);
        org.junit.Assert.assertNotNull(jsonGenerator58);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter60);
        org.junit.Assert.assertNotNull(jsonGenerator61);
        org.junit.Assert.assertNotNull(serializedString62);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter73);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter74);
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test521");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = readerBasedJsonParser77.getCodec();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken81 = readerBasedJsonParser77._handleOddValue((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected character ((CTRL-CHAR, code 0)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(objectCodec79);
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test522");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        uTF8JsonGenerator70._bufferRecyclable = false;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeRawValue("com.fasterxml.jackson.core.JsonParseException: ARRAY", 594317735, 1549195267);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 594319735");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test523");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        com.fasterxml.jackson.core.JsonParser.Feature feature79 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonParser jsonParser80 = readerBasedJsonParser77.enable(feature79);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + feature79 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES + "'", feature79.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonParser80);
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test524");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        java.io.InputStream inputStream3 = null;
        byte[] byteArray4 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream7 = new com.fasterxml.jackson.core.io.MergedStream(iOContext2, inputStream3, byteArray4, 0, (int) (short) -1);
        int int8 = mergedStream7.available();
        boolean boolean9 = mergedStream7.markSupported();
        mergedStream7.mark(100);
        boolean boolean12 = mergedStream7.markSupported();
        com.fasterxml.jackson.core.ObjectCodec objectCodec13 = null;
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer14 = com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.createRoot();
        int int15 = bytesToNameCanonicalizer14.maxCollisionLength();
        int int16 = bytesToNameCanonicalizer14.collisionCount();
        int int17 = bytesToNameCanonicalizer14.collisionCount();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext19 = null;
        java.io.InputStream inputStream20 = null;
        byte[] byteArray21 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream24 = new com.fasterxml.jackson.core.io.MergedStream(iOContext19, inputStream20, byteArray21, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext25 = null;
        java.io.InputStream inputStream26 = null;
        byte[] byteArray27 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream30 = new com.fasterxml.jackson.core.io.MergedStream(iOContext25, inputStream26, byteArray27, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader34 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext18, inputStream20, byteArray27, 0, 0, false);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser38 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext0, 56320, (java.io.InputStream) mergedStream7, objectCodec13, bytesToNameCanonicalizer14, byteArray27, (-1779258745), (-1779204963), true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(bytesToNameCanonicalizer14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test525");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.TreeNode treeNode40 = null;
        jsonGenerator39.writeTree(treeNode40);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature42 = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        boolean boolean43 = jsonGenerator39.isEnabled(feature42);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext44 = jsonGenerator39.getOutputContext();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertTrue("'" + feature42 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT + "'", feature42.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jsonStreamContext44);
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test526");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70._writeFieldName("ROOT");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test527");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeObjectFieldStart("");
        defaultPrettyPrinter0.writeRootValueSeparator(jsonGenerator35);
        jsonGenerator35.writeObjectFieldStart("");
        jsonGenerator35.writeRaw(' ');
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test528");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonFactory jsonFactory23 = jsonFactory0.setRootValueSeparator(" ");
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonFactory23);
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test529");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        boolean boolean79 = readerBasedJsonParser77.hasTextCharacters();
        boolean boolean80 = readerBasedJsonParser77.isClosed();
        com.fasterxml.jackson.core.FormatSchema formatSchema81 = null;
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77.setSchema(formatSchema81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test530");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.overrideCurrentName("");
        int int80 = readerBasedJsonParser77.getTextLength();
        long long81 = readerBasedJsonParser77.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version82 = readerBasedJsonParser77.version();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken83 = readerBasedJsonParser77._handleApos();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(version82);
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test531");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        java.io.Writer writer32 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory1.createJsonGenerator(writer32);
        boolean boolean34 = jsonGenerator33.isClosed();
        jsonGenerator33.writeStartObject();
        boolean boolean36 = jsonGenerator33.isClosed();
        defaultPrettyPrinter0.writeEndObject(jsonGenerator33, (int) (byte) -1);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter39 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator41 = jsonFactory40.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext42 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        java.io.InputStream inputStream44 = null;
        byte[] byteArray45 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream48 = new com.fasterxml.jackson.core.io.MergedStream(iOContext43, inputStream44, byteArray45, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader58 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext42, inputStream44, byteArray51, 0, 0, false);
        char[] charArray61 = new char[] { ' ', '#' };
        int int62 = uTF32Reader58.read(charArray61);
        char[] charArray66 = new char[] { ' ', '#', '4' };
        int int69 = uTF32Reader58.read(charArray66, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser70 = jsonFactory40.createParser((java.io.Reader) uTF32Reader58);
        java.io.Writer writer71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = jsonFactory40.createJsonGenerator(writer71);
        boolean boolean73 = jsonGenerator72.isClosed();
        jsonGenerator72.writeStartObject();
        boolean boolean75 = jsonGenerator72.isClosed();
        com.fasterxml.jackson.core.TreeNode treeNode76 = null;
        jsonGenerator72.writeTree(treeNode76);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature78 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
        boolean boolean79 = jsonGenerator72.isEnabled(feature78);
        jsonGenerator72.writeNull();
        jsonGenerator72.writeNumber("a
        defaultPrettyPrinter39.beforeArrayValues(jsonGenerator72);
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertNotNull(jsonGenerator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputDecorator41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(jsonParser70);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + feature78 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN + "'", feature78.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test532");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.ObjectCodec objectCodec51 = jsonFactory0.getCodec();
        java.io.File file52 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory0.createJsonParser(file52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(objectCodec51);
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test533");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        int int90 = uTF8JsonGenerator70._charBufferLength;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeEndArray();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an ARRAY but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2000 + "'", int90 == 2000);
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test534");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.IOContext iOContext71 = uTF8JsonGenerator70._ioContext;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(iOContext71);
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test535");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger82 = readerBasedJsonParser77.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test536");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        jsonGenerator36.writeObjectFieldStart("");
        jsonGenerator36.writeObjectFieldStart("hi!");
        defaultPrettyPrinter0.beforeObjectEntries(jsonGenerator36);
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator43 = jsonFactory42.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext45 = null;
        java.io.InputStream inputStream46 = null;
        byte[] byteArray47 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream50 = new com.fasterxml.jackson.core.io.MergedStream(iOContext45, inputStream46, byteArray47, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext51 = null;
        java.io.InputStream inputStream52 = null;
        byte[] byteArray53 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext51, inputStream52, byteArray53, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader60 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext44, inputStream46, byteArray53, 0, 0, false);
        char[] charArray63 = new char[] { ' ', '#' };
        int int64 = uTF32Reader60.read(charArray63);
        char[] charArray68 = new char[] { ' ', '#', '4' };
        int int71 = uTF32Reader60.read(charArray68, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser72 = jsonFactory42.createParser((java.io.Reader) uTF32Reader60);
        java.io.Writer writer73 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator74 = jsonFactory42.createJsonGenerator(writer73);
        com.fasterxml.jackson.core.io.IOContext iOContext75 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext76 = null;
        java.io.InputStream inputStream77 = null;
        byte[] byteArray78 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream81 = new com.fasterxml.jackson.core.io.MergedStream(iOContext76, inputStream77, byteArray78, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext82 = null;
        java.io.InputStream inputStream83 = null;
        byte[] byteArray84 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext82, inputStream83, byteArray84, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader91 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext75, inputStream77, byteArray84, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser92 = jsonFactory42.createParser(byteArray84);
        jsonGenerator36.writeBinary(byteArray84);
        jsonGenerator36.writeNumber(" ");
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNull(inputDecorator43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , #]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(jsonParser72);
        org.junit.Assert.assertNotNull(jsonGenerator74);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(jsonParser92);
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test537");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        int int81 = readerBasedJsonParser77.getTextLength();
        com.fasterxml.jackson.core.ObjectCodec objectCodec82 = null;
        readerBasedJsonParser77.setCodec(objectCodec82);
        com.fasterxml.jackson.core.JsonToken jsonToken84 = readerBasedJsonParser77.nextValue();
        readerBasedJsonParser77.close();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNull(jsonToken84);
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test538");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter40.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator32.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter41);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = defaultPrettyPrinter43.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter45 = defaultPrettyPrinter44.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator47 = jsonFactory46.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader64 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext48, inputStream50, byteArray57, 0, 0, false);
        char[] charArray67 = new char[] { ' ', '#' };
        int int68 = uTF32Reader64.read(charArray67);
        char[] charArray72 = new char[] { ' ', '#', '4' };
        int int75 = uTF32Reader64.read(charArray72, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser76 = jsonFactory46.createParser((java.io.Reader) uTF32Reader64);
        java.io.Writer writer77 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = jsonFactory46.createJsonGenerator(writer77);
        jsonGenerator78.writeString("");
        jsonGenerator78.writeBoolean(false);
        defaultPrettyPrinter45.beforeObjectEntries(jsonGenerator78);
        boolean boolean84 = jsonGenerator78.canWriteObjectId();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter85 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter85.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString88 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter89 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter85, serializableString88);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator90 = jsonGenerator78.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter85);
        defaultPrettyPrinter41.writeEndObject(jsonGenerator90, 57343);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter44);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter45);
        org.junit.Assert.assertNull(inputDecorator47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(jsonParser76);
        org.junit.Assert.assertNotNull(jsonGenerator78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jsonGenerator90);
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test539");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        java.io.Writer writer42 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator43 = jsonFactory41.createJsonGenerator(writer42);
        java.lang.Object obj44 = jsonGenerator43.getOutputTarget();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertNotNull(jsonGenerator43);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test540");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = com.fasterxml.jackson.core.JsonToken.START_ARRAY;
        java.lang.String str80 = readerBasedJsonParser77._getText2(jsonToken79);
        com.fasterxml.jackson.core.JsonToken jsonToken81 = readerBasedJsonParser77.nextToken();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger82 = readerBasedJsonParser77.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertTrue("'" + jsonToken79 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_ARRAY + "'", jsonToken79.equals(com.fasterxml.jackson.core.JsonToken.START_ARRAY));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[" + "'", str80, "[");
        org.junit.Assert.assertNull(jsonToken81);
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test541");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonParser jsonParser79 = readerBasedJsonParser77.skipChildren();
        int int80 = readerBasedJsonParser77.getTokenLineNr();
        boolean boolean82 = readerBasedJsonParser77.getValueAsBoolean(false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNotNull(jsonParser79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test542");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter5 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter6 = defaultPrettyPrinter4.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter5);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter7 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter7.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter10 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter7);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter11 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter7);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter12 = defaultPrettyPrinter7.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version14 = jsonFactory13.version();
        com.fasterxml.jackson.core.io.IOContext iOContext15 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext16 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray18 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream21 = new com.fasterxml.jackson.core.io.MergedStream(iOContext16, inputStream17, byteArray18, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader31 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext15, inputStream17, byteArray24, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonFactory13.createParser((java.io.Reader) uTF32Reader31);
        boolean boolean33 = jsonFactory13.requiresPropertyOrdering();
        java.lang.String str34 = jsonFactory13.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator35 = jsonFactory13.getInputDecorator();
        java.io.InputStream inputStream36 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser37 = jsonFactory13.createParser(inputStream36);
        java.io.OutputStream outputStream38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonFactory13.createJsonGenerator(outputStream38);
        defaultPrettyPrinter12.writeRootValueSeparator(jsonGenerator39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator42 = jsonFactory41.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray52 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream55 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray52, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader59 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext43, inputStream45, byteArray52, 0, 0, false);
        char[] charArray62 = new char[] { ' ', '#' };
        int int63 = uTF32Reader59.read(charArray62);
        char[] charArray67 = new char[] { ' ', '#', '4' };
        int int70 = uTF32Reader59.read(charArray67, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser71 = jsonFactory41.createParser((java.io.Reader) uTF32Reader59);
        java.io.Writer writer72 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = jsonFactory41.createJsonGenerator(writer72);
        boolean boolean74 = jsonGenerator73.isClosed();
        jsonGenerator73.writeStartObject();
        boolean boolean76 = jsonGenerator73.isClosed();
        jsonGenerator73.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator80 = jsonGenerator73.setCodec(objectCodec79);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter81 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter82 = defaultPrettyPrinter81.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator83 = jsonGenerator73.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter82);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter84 = jsonGenerator83.getPrettyPrinter();
        jsonGenerator83.writeRaw("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature87 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator89 = jsonGenerator83.configure(feature87, false);
        defaultPrettyPrinter12.writeArrayValueSeparator(jsonGenerator83);
        defaultPrettyPrinter6.writeObjectFieldValueSeparator(jsonGenerator83);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter5);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter6);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter12);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(jsonParser32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JSON" + "'", str34, "JSON");
        org.junit.Assert.assertNull(inputDecorator35);
        org.junit.Assert.assertNotNull(jsonParser37);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNull(inputDecorator42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ , #]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(jsonParser71);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jsonGenerator80);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter82);
        org.junit.Assert.assertNotNull(jsonGenerator83);
        org.junit.Assert.assertNotNull(prettyPrinter84);
        org.junit.Assert.assertTrue("'" + feature87 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature87.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonGenerator89);
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test543");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        boolean boolean85 = uTF8JsonGenerator70.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeString("[Source: false; line: 1, column: 0]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(jsonGenerator84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test544");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = jsonFactory38.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray43 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream46 = new com.fasterxml.jackson.core.io.MergedStream(iOContext41, inputStream42, byteArray43, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        java.io.InputStream inputStream48 = null;
        byte[] byteArray49 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream52 = new com.fasterxml.jackson.core.io.MergedStream(iOContext47, inputStream48, byteArray49, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader56 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext40, inputStream42, byteArray49, 0, 0, false);
        char[] charArray59 = new char[] { ' ', '#' };
        int int60 = uTF32Reader56.read(charArray59);
        char[] charArray64 = new char[] { ' ', '#', '4' };
        int int67 = uTF32Reader56.read(charArray64, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser68 = jsonFactory38.createParser((java.io.Reader) uTF32Reader56);
        java.io.Writer writer69 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator70 = jsonFactory38.createJsonGenerator(writer69);
        com.fasterxml.jackson.core.io.IOContext iOContext71 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        java.io.InputStream inputStream73 = null;
        byte[] byteArray74 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream77 = new com.fasterxml.jackson.core.io.MergedStream(iOContext72, inputStream73, byteArray74, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext78 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray80 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream83 = new com.fasterxml.jackson.core.io.MergedStream(iOContext78, inputStream79, byteArray80, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader87 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext71, inputStream73, byteArray80, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser88 = jsonFactory38.createParser(byteArray80);
        jsonGenerator35.writeBinary(byteArray80);
        defaultPrettyPrinter0.writeStartArray(jsonGenerator35);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter91 = jsonGenerator35.getPrettyPrinter();
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputDecorator39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ , #]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(jsonParser68);
        org.junit.Assert.assertNotNull(jsonGenerator70);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(jsonParser88);
        org.junit.Assert.assertNull(prettyPrinter91);
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test545");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter lf2SpacesIndenter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Lf2SpacesIndenter("ARRAY");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler2 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation4 = null;
        java.lang.Throwable throwable5 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException6 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation4, throwable5);
        java.lang.String str7 = jsonParseException6.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler2, (java.lang.Object) jsonParseException6, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec11 = null;
        java.io.OutputStream outputStream12 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler13 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation15 = null;
        java.lang.Throwable throwable16 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException17 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation15, throwable16);
        java.lang.String str18 = jsonParseException17.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler13, (java.lang.Object) jsonParseException17, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer21 = iOContext20.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        int int28 = mergedStream27.available();
        boolean boolean29 = mergedStream27.markSupported();
        int int30 = mergedStream27.available();
        int int31 = mergedStream27.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version33 = jsonFactory32.version();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext35 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray37 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream40 = new com.fasterxml.jackson.core.io.MergedStream(iOContext35, inputStream36, byteArray37, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray43 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream46 = new com.fasterxml.jackson.core.io.MergedStream(iOContext41, inputStream42, byteArray43, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader50 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext34, inputStream36, byteArray43, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser51 = jsonFactory32.createParser((java.io.Reader) uTF32Reader50);
        com.fasterxml.jackson.core.JsonFactory jsonFactory53 = jsonFactory32.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString54 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int63 = serializedString54.appendQuotedUTF8(byteArray61, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser66 = jsonFactory32.createParser(byteArray61, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream69 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, (java.io.InputStream) mergedStream27, byteArray61, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator72 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext9, (int) (byte) 100, objectCodec11, outputStream12, byteArray61, (int) (byte) 10, true);
        boolean boolean73 = uTF8JsonGenerator72.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext74 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext75 = null;
        java.io.InputStream inputStream76 = null;
        byte[] byteArray77 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream80 = new com.fasterxml.jackson.core.io.MergedStream(iOContext75, inputStream76, byteArray77, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext81 = null;
        java.io.InputStream inputStream82 = null;
        byte[] byteArray83 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream86 = new com.fasterxml.jackson.core.io.MergedStream(iOContext81, inputStream82, byteArray83, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader90 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext74, inputStream76, byteArray83, 0, 0, false);
        uTF8JsonGenerator72._entityBuffer = byteArray83;
        java.lang.Object obj92 = uTF8JsonGenerator72.getOutputTarget();
        uTF8JsonGenerator72.writeRaw("");
        com.fasterxml.jackson.core.ObjectCodec objectCodec95 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator96 = uTF8JsonGenerator72.setCodec(objectCodec95);
        // The following exception was thrown during execution in test generation
        try {
            lf2SpacesIndenter1.writeIndentation((com.fasterxml.jackson.core.JsonGenerator) uTF8JsonGenerator72, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(textBuffer21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(jsonParser51);
        org.junit.Assert.assertNotNull(jsonFactory53);
        org.junit.Assert.assertNotNull(serializedString54);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(jsonParser66);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNotNull(jsonGenerator96);
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test546");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        int int81 = readerBasedJsonParser77.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            long long82 = readerBasedJsonParser77.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test547");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        jsonGenerator35.writeObjectFieldStart("hi!");
        jsonGenerator35.writeNumberField("hi!", (long) (short) -1);
        defaultPrettyPrinter2.writeObjectFieldValueSeparator(jsonGenerator35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter44 = defaultPrettyPrinter2.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter45 = defaultPrettyPrinter2.withoutSpacesInObjectEntries();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter44);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter45);
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test548");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        readerBasedJsonParser77._releaseBuffers();
        com.fasterxml.jackson.core.JsonLocation jsonLocation81 = readerBasedJsonParser77.getCurrentLocation();
        char[] charArray82 = readerBasedJsonParser77.getTextCharacters();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertNotNull(jsonLocation81);
        org.junit.Assert.assertNull(charArray82);
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test549");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeString("");
        jsonGenerator35.writeBoolean(false);
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator35);
        boolean boolean41 = jsonGenerator35.canWriteObjectId();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter42 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter42.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString45 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter46 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter42, serializableString45);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator47 = jsonGenerator35.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter42);
        jsonGenerator47.writeRaw("ARRAY");
        boolean boolean50 = jsonGenerator47.canWriteObjectId();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jsonGenerator47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test550");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.setCodec(objectCodec3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = jsonFactory4.copy();
        com.fasterxml.jackson.core.JsonFactory jsonFactory6 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator7 = jsonFactory6.getInputDecorator();
        boolean boolean8 = jsonFactory6.requiresPropertyOrdering();
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory10 = jsonFactory6.setCodec(objectCodec9);
        com.fasterxml.jackson.core.JsonFactory jsonFactory11 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator12 = jsonFactory11.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader29 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext13, inputStream15, byteArray22, 0, 0, false);
        char[] charArray32 = new char[] { ' ', '#' };
        int int33 = uTF32Reader29.read(charArray32);
        char[] charArray37 = new char[] { ' ', '#', '4' };
        int int40 = uTF32Reader29.read(charArray37, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser41 = jsonFactory11.createParser((java.io.Reader) uTF32Reader29);
        com.fasterxml.jackson.core.io.IOContext iOContext42 = null;
        java.io.InputStream inputStream43 = null;
        byte[] byteArray44 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream47 = new com.fasterxml.jackson.core.io.MergedStream(iOContext42, inputStream43, byteArray44, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser48 = jsonFactory11.createJsonParser(inputStream43);
        com.fasterxml.jackson.core.JsonFactory.Feature feature49 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean50 = jsonFactory11.isEnabled(feature49);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory10.disable(feature49);
        boolean boolean52 = jsonFactory4.isEnabled(feature49);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNotNull(jsonFactory5);
        org.junit.Assert.assertNull(inputDecorator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jsonFactory10);
        org.junit.Assert.assertNull(inputDecorator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , #]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(jsonParser41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(jsonParser48);
        org.junit.Assert.assertTrue("'" + feature49 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature49.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test551");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null;
        com.fasterxml.jackson.core.io.SerializedString serializedString4 = new com.fasterxml.jackson.core.io.SerializedString("[Source: false; line: 1, column: 0]");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler5 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation7 = null;
        java.lang.Throwable throwable8 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException9 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation7, throwable8);
        java.lang.String str10 = jsonParseException9.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext12 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler5, (java.lang.Object) jsonParseException9, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec14 = null;
        java.io.OutputStream outputStream15 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler16 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation18 = null;
        java.lang.Throwable throwable19 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException20 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation18, throwable19);
        java.lang.String str21 = jsonParseException20.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext23 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler16, (java.lang.Object) jsonParseException20, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer24 = iOContext23.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext25 = null;
        java.io.InputStream inputStream26 = null;
        byte[] byteArray27 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream30 = new com.fasterxml.jackson.core.io.MergedStream(iOContext25, inputStream26, byteArray27, 0, (int) (short) -1);
        int int31 = mergedStream30.available();
        boolean boolean32 = mergedStream30.markSupported();
        int int33 = mergedStream30.available();
        int int34 = mergedStream30.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory35 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version36 = jsonFactory35.version();
        com.fasterxml.jackson.core.io.IOContext iOContext37 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext38 = null;
        java.io.InputStream inputStream39 = null;
        byte[] byteArray40 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream43 = new com.fasterxml.jackson.core.io.MergedStream(iOContext38, inputStream39, byteArray40, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader53 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext37, inputStream39, byteArray46, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser54 = jsonFactory35.createParser((java.io.Reader) uTF32Reader53);
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = jsonFactory35.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString57 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int66 = serializedString57.appendQuotedUTF8(byteArray64, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonFactory35.createParser(byteArray64, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream72 = new com.fasterxml.jackson.core.io.MergedStream(iOContext23, (java.io.InputStream) mergedStream30, byteArray64, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator75 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext12, (int) (byte) 100, objectCodec14, outputStream15, byteArray64, (int) (byte) 10, true);
        java.io.Reader reader77 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec78 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer79 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int80 = charsToNameCanonicalizer79.collisionCount();
        int int81 = charsToNameCanonicalizer79.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser82 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext12, (int) (byte) -65, reader77, objectCodec78, charsToNameCanonicalizer79);
        char[] charArray83 = readerBasedJsonParser82.getTextCharacters();
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder84 = readerBasedJsonParser82._getByteArrayBuilder();
        int int85 = serializedString4.writeUnquotedUTF8((java.io.OutputStream) byteArrayBuilder84);
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator86 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext0, (-1779164753), objectCodec2, (java.io.OutputStream) byteArrayBuilder84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(textBuffer24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(jsonParser54);
        org.junit.Assert.assertNotNull(jsonFactory56);
        org.junit.Assert.assertNotNull(serializedString57);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 64 + "'", int81 == 64);
        org.junit.Assert.assertNull(charArray83);
        org.junit.Assert.assertNotNull(byteArrayBuilder84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test552");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator51 = jsonFactory0.getOutputDecorator();
        com.fasterxml.jackson.core.JsonFactory jsonFactory52 = jsonFactory0.copy();
        java.io.File file53 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser54 = jsonFactory0.createParser(file53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(outputDecorator51);
        org.junit.Assert.assertNotNull(jsonFactory52);
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test553");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.overrideCurrentName("");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext80 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str82 = readerBasedJsonParser77._handleOddName((int) (short) 100);
        readerBasedJsonParser77._tokenIncomplete = true;
        char[] charArray85 = readerBasedJsonParser77.getTextCharacters();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNotNull(jsonReadContext80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNull(charArray85);
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test554");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        com.fasterxml.jackson.core.FormatSchema formatSchema32 = null;
        boolean boolean33 = jsonParser30.canUseSchema(formatSchema32);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonParser30.setFeatureMask((int) (short) 100);
        java.io.OutputStream outputStream36 = null;
        int int37 = jsonParser35.releaseBuffered(outputStream36);
        jsonParser35.overrideCurrentName("com.fasterxml.jackson.core.JsonParseException: hi!");
        int int41 = jsonParser35.nextIntValue((-1779300469));
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1779300469) + "'", int41 == (-1779300469));
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test555");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray2 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray0, (-1779186763));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test556");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        com.fasterxml.jackson.core.JsonToken jsonToken82 = readerBasedJsonParser77.getLastClearedToken();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertNull(jsonToken82);
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test557");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        com.fasterxml.jackson.core.Version version75 = uTF8JsonGenerator70.version();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(version75);
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test558");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.setCodec(objectCodec3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        com.fasterxml.jackson.core.io.IOContext iOContext36 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray38 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream41 = new com.fasterxml.jackson.core.io.MergedStream(iOContext36, inputStream37, byteArray38, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory5.createJsonParser(inputStream37);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean44 = jsonFactory5.isEnabled(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory4.disable(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator47 = jsonFactory46.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader64 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext48, inputStream50, byteArray57, 0, 0, false);
        char[] charArray67 = new char[] { ' ', '#' };
        int int68 = uTF32Reader64.read(charArray67);
        char[] charArray72 = new char[] { ' ', '#', '4' };
        int int75 = uTF32Reader64.read(charArray72, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser76 = jsonFactory46.createParser((java.io.Reader) uTF32Reader64);
        int int78 = jsonParser76.nextIntValue((int) 'a');
        int int79 = jsonParser76.getFeatureMask();
        double double80 = jsonParser76.getValueAsDouble();
        java.lang.Object obj81 = jsonParser76.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonToken jsonToken82 = jsonParser76.nextToken();
        com.fasterxml.jackson.core.JsonParser.Feature feature83 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        com.fasterxml.jackson.core.JsonParser jsonParser85 = jsonParser76.configure(feature83, false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory86 = jsonFactory4.enable(feature83);
        com.fasterxml.jackson.core.io.IOContext iOContext87 = null;
        java.io.InputStream inputStream88 = null;
        byte[] byteArray89 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream92 = new com.fasterxml.jackson.core.io.MergedStream(iOContext87, inputStream88, byteArray89, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser93 = jsonFactory4.createParser(inputStream88);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(jsonParser42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertNull(inputDecorator47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(jsonParser76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNull(jsonToken82);
        org.junit.Assert.assertTrue("'" + feature83 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS + "'", feature83.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS));
        org.junit.Assert.assertNotNull(jsonParser85);
        org.junit.Assert.assertNotNull(jsonFactory86);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertNotNull(jsonParser93);
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test559");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        com.fasterxml.jackson.core.io.SerializedString serializedString75 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int84 = serializedString75.appendQuotedUTF8(byteArray82, (int) ' ');
        uTF8JsonGenerator70._rootValueSeparator = serializedString75;
        java.lang.String str86 = serializedString75.getValue();
        com.fasterxml.jackson.core.io.SerializedString serializedString87 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int96 = serializedString87.appendQuotedUTF8(byteArray94, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int98 = serializedString75.appendUnquotedUTF8(byteArray94, (-1779186763));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(serializedString75);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + " " + "'", str86, " ");
        org.junit.Assert.assertNotNull(serializedString87);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test560");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes72 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes72;
        java.lang.Object obj74 = uTF8JsonGenerator70.getOutputTarget();
        com.fasterxml.jackson.core.Version version75 = uTF8JsonGenerator70.version();
        java.math.BigDecimal bigDecimal76 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber(bigDecimal76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(version75);
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test561");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.setCodec(objectCodec3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        com.fasterxml.jackson.core.io.IOContext iOContext36 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray38 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream41 = new com.fasterxml.jackson.core.io.MergedStream(iOContext36, inputStream37, byteArray38, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory5.createJsonParser(inputStream37);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean44 = jsonFactory5.isEnabled(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory4.disable(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator47 = jsonFactory46.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader64 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext48, inputStream50, byteArray57, 0, 0, false);
        char[] charArray67 = new char[] { ' ', '#' };
        int int68 = uTF32Reader64.read(charArray67);
        char[] charArray72 = new char[] { ' ', '#', '4' };
        int int75 = uTF32Reader64.read(charArray72, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser76 = jsonFactory46.createParser((java.io.Reader) uTF32Reader64);
        int int78 = jsonParser76.nextIntValue((int) 'a');
        int int79 = jsonParser76.getFeatureMask();
        double double80 = jsonParser76.getValueAsDouble();
        java.lang.Object obj81 = jsonParser76.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonToken jsonToken82 = jsonParser76.nextToken();
        com.fasterxml.jackson.core.JsonParser.Feature feature83 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        com.fasterxml.jackson.core.JsonParser jsonParser85 = jsonParser76.configure(feature83, false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory86 = jsonFactory4.enable(feature83);
        java.io.File file87 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser88 = jsonFactory4.createParser(file87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(jsonParser42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertNull(inputDecorator47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(jsonParser76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNull(jsonToken82);
        org.junit.Assert.assertTrue("'" + feature83 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS + "'", feature83.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS));
        org.junit.Assert.assertNotNull(jsonParser85);
        org.junit.Assert.assertNotNull(jsonFactory86);
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test562");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        com.fasterxml.jackson.core.JsonLocation jsonLocation82 = readerBasedJsonParser77.getTokenLocation();
        java.lang.String str83 = readerBasedJsonParser77.getCurrentName();
        java.lang.String str85 = readerBasedJsonParser77.getValueAsString("a
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertNotNull(jsonLocation82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "astr85, "a
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test563");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        boolean boolean37 = jsonGenerator36.isClosed();
        jsonGenerator36.writeStartObject();
        boolean boolean39 = jsonGenerator36.isClosed();
        jsonGenerator36.writeNumber(100.0d);
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator36);
        java.math.BigDecimal bigDecimal43 = null;
        jsonGenerator36.writeNumber(bigDecimal43);
        jsonGenerator36.writeStartArray();
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test564");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        int int90 = uTF8JsonGenerator70._charBufferLength;
        com.fasterxml.jackson.core.SerializableString serializableString91 = null;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeString(serializableString91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2000 + "'", int90 == 2000);
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test565");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        boolean boolean38 = jsonGenerator35.isClosed();
        jsonGenerator35.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator42 = jsonGenerator35.setCodec(objectCodec41);
        fixedSpaceIndenter1.writeIndentation(jsonGenerator35, 55296);
        jsonGenerator35.writeNumber((short) (byte) -69);
        jsonGenerator35.writeNumberField("", (-1));
        boolean boolean50 = jsonGenerator35.canWriteBinaryNatively();
        com.fasterxml.jackson.core.TreeNode treeNode51 = null;
        jsonGenerator35.writeTree(treeNode51);
        com.fasterxml.jackson.core.FormatSchema formatSchema53 = null;
        boolean boolean54 = jsonGenerator35.canUseSchema(formatSchema53);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jsonGenerator42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test566");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeRaw("[");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test567");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        jsonGenerator32.writeRaw("");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test568");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        boolean boolean91 = uTF8JsonGenerator70._bufferRecyclable;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeRawValue("UTF-16BE", (-1779153595), 16);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1779153595");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test569");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes72 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes72;
        java.lang.Object obj74 = uTF8JsonGenerator70.getOutputTarget();
        com.fasterxml.jackson.core.JsonLocation jsonLocation76 = com.fasterxml.jackson.core.JsonLocation.NA;
        com.fasterxml.jackson.core.JsonParseException jsonParseException77 = new com.fasterxml.jackson.core.JsonParseException("JSON", jsonLocation76);
        long long78 = jsonLocation76.getCharOffset();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeObjectRef((java.lang.Object) jsonLocation76);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Object Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(jsonLocation76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test570");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = com.fasterxml.jackson.core.JsonToken.START_ARRAY;
        java.lang.String str80 = readerBasedJsonParser77._getText2(jsonToken79);
        com.fasterxml.jackson.core.JsonToken jsonToken81 = readerBasedJsonParser77.nextToken();
        com.fasterxml.jackson.core.JsonLocation jsonLocation82 = readerBasedJsonParser77.getCurrentLocation();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertTrue("'" + jsonToken79 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_ARRAY + "'", jsonToken79.equals(com.fasterxml.jackson.core.JsonToken.START_ARRAY));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[" + "'", str80, "[");
        org.junit.Assert.assertNull(jsonToken81);
        org.junit.Assert.assertNotNull(jsonLocation82);
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test571");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = jsonFactory38.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray43 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream46 = new com.fasterxml.jackson.core.io.MergedStream(iOContext41, inputStream42, byteArray43, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        java.io.InputStream inputStream48 = null;
        byte[] byteArray49 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream52 = new com.fasterxml.jackson.core.io.MergedStream(iOContext47, inputStream48, byteArray49, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader56 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext40, inputStream42, byteArray49, 0, 0, false);
        char[] charArray59 = new char[] { ' ', '#' };
        int int60 = uTF32Reader56.read(charArray59);
        char[] charArray64 = new char[] { ' ', '#', '4' };
        int int67 = uTF32Reader56.read(charArray64, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser68 = jsonFactory38.createParser((java.io.Reader) uTF32Reader56);
        java.io.Writer writer69 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator70 = jsonFactory38.createJsonGenerator(writer69);
        com.fasterxml.jackson.core.io.IOContext iOContext71 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        java.io.InputStream inputStream73 = null;
        byte[] byteArray74 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream77 = new com.fasterxml.jackson.core.io.MergedStream(iOContext72, inputStream73, byteArray74, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext78 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray80 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream83 = new com.fasterxml.jackson.core.io.MergedStream(iOContext78, inputStream79, byteArray80, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader87 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext71, inputStream73, byteArray80, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser88 = jsonFactory38.createParser(byteArray80);
        jsonGenerator35.writeBinary(byteArray80);
        defaultPrettyPrinter0.writeStartArray(jsonGenerator35);
        jsonGenerator35.writeNumber((float) (byte) -17);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature93 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = jsonGenerator35.configure(feature93, true);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator97 = jsonGenerator95.setFeatureMask((-1779153595));
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputDecorator39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ , #]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(jsonParser68);
        org.junit.Assert.assertNotNull(jsonGenerator70);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(jsonParser88);
        org.junit.Assert.assertTrue("'" + feature93 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature93.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonGenerator95);
        org.junit.Assert.assertNotNull(jsonGenerator97);
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test572");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser("");
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator24 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory0.copy();
        com.fasterxml.jackson.core.JsonParser.Feature feature26 = com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE;
        com.fasterxml.jackson.core.JsonFactory jsonFactory27 = jsonFactory25.enable(feature26);
        com.fasterxml.jackson.core.JsonLocation jsonLocation31 = new com.fasterxml.jackson.core.JsonLocation((java.lang.Object) jsonFactory25, 1L, (-69), (int) '#');
        com.fasterxml.jackson.core.Version version32 = jsonFactory25.version();
        java.lang.String str33 = jsonFactory25.getFormatName();
        java.lang.String str34 = jsonFactory25.getFormatName();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNull(inputDecorator24);
        org.junit.Assert.assertNotNull(jsonFactory25);
        org.junit.Assert.assertTrue("'" + feature26 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE + "'", feature26.equals(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE));
        org.junit.Assert.assertNotNull(jsonFactory27);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "JSON" + "'", str33, "JSON");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "JSON" + "'", str34, "JSON");
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test573");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) (short) 100);
        com.fasterxml.jackson.core.JsonLocation jsonLocation33 = jsonParser30.getTokenLocation();
        com.fasterxml.jackson.core.JsonParser.Feature feature34 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        boolean boolean35 = jsonParser30.isEnabled(feature34);
        java.lang.Object obj36 = jsonParser30.getObjectId();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext37 = jsonParser30.getParsingContext();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(jsonLocation33);
        org.junit.Assert.assertTrue("'" + feature34 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES + "'", feature34.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(jsonStreamContext37);
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test574");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        boolean boolean79 = readerBasedJsonParser77.hasTextCharacters();
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 2031967483);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 2031967483L + "'", long81 == 2031967483L);
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test575");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        uTF8JsonGenerator70._bufferRecyclable = false;
        uTF8JsonGenerator70._outputTail = 0;
        byte[] byteArray88 = uTF8JsonGenerator70._outputBuffer;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, 1, -65, 1, 0, 0]");
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test576");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        java.io.Writer writer37 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator38 = jsonFactory34.createGenerator(writer37);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory34.createParser("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature41 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        boolean boolean42 = jsonFactory34.isEnabled(feature41);
        java.io.OutputStream outputStream43 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonFactory34.createGenerator(outputStream43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator46 = jsonFactory45.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        java.io.InputStream inputStream49 = null;
        byte[] byteArray50 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream53 = new com.fasterxml.jackson.core.io.MergedStream(iOContext48, inputStream49, byteArray50, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext54 = null;
        java.io.InputStream inputStream55 = null;
        byte[] byteArray56 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream59 = new com.fasterxml.jackson.core.io.MergedStream(iOContext54, inputStream55, byteArray56, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader63 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext47, inputStream49, byteArray56, 0, 0, false);
        char[] charArray66 = new char[] { ' ', '#' };
        int int67 = uTF32Reader63.read(charArray66);
        char[] charArray71 = new char[] { ' ', '#', '4' };
        int int74 = uTF32Reader63.read(charArray71, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser75 = jsonFactory45.createParser((java.io.Reader) uTF32Reader63);
        java.io.Writer writer76 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator77 = jsonFactory45.createJsonGenerator(writer76);
        boolean boolean78 = jsonGenerator77.isClosed();
        jsonGenerator77.writeStartObject();
        com.fasterxml.jackson.core.JsonGenerator.Feature feature80 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean81 = jsonGenerator77.isEnabled(feature80);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator82 = jsonGenerator44.disable(feature80);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonGenerator38);
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature41.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertNull(inputDecorator46);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , #]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(jsonParser75);
        org.junit.Assert.assertNotNull(jsonGenerator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + feature80 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature80.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jsonGenerator82);
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test577");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        com.fasterxml.jackson.core.io.SerializedString serializedString85 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int94 = serializedString85.appendQuotedUTF8(byteArray92, (int) ' ');
        char[] charArray95 = serializedString85.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(jsonGenerator84);
        org.junit.Assert.assertNotNull(serializedString85);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(charArray95);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray95), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray95), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray95), "[ ]");
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test578");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        int int85 = readerBasedJsonParser77.getTokenLineNr();
        readerBasedJsonParser77.overrideCurrentName("JSON");
        int int88 = readerBasedJsonParser77._hashSeed;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1779107741) + "'", int88 == (-1779107741));
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test579");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int73 = jsonGenerator72.getFeatureMask();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test580");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        uTF8JsonGenerator70._verifyPrettyValueWrite("aint) (byte) 0);
        int int76 = uTF8JsonGenerator70.getHighestEscapedChar();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test581");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        boolean boolean37 = jsonGenerator36.isClosed();
        jsonGenerator36.writeStartObject();
        jsonGenerator36.writeObjectFieldStart("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature41 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean42 = jsonGenerator36.isEnabled(feature41);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter43 = jsonGenerator36.getPrettyPrinter();
        com.fasterxml.jackson.core.io.SerializedString serializedString44 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        jsonGenerator36.writeRaw((com.fasterxml.jackson.core.SerializableString) serializedString44);
        defaultPrettyPrinter3.writeRootValueSeparator(jsonGenerator36);
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + feature41 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature41.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(prettyPrinter43);
        org.junit.Assert.assertNotNull(serializedString44);
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test582");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        com.fasterxml.jackson.core.JsonLocation jsonLocation82 = readerBasedJsonParser77.getTokenLocation();
        java.lang.String str83 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext84 = readerBasedJsonParser77.getParsingContext();
        long long86 = readerBasedJsonParser77.getValueAsLong((long) 33);
        int int87 = readerBasedJsonParser77.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77._finishString2();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing quote for a string value? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertNotNull(jsonLocation82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(jsonStreamContext84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 33L + "'", long86 == 33L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test583");
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        int int33 = jsonParser31.nextIntValue((int) 'a');
        jsonParser31.close();
        com.fasterxml.jackson.core.JsonLocation jsonLocation35 = jsonParser31.getCurrentLocation();
        long long36 = jsonLocation35.getByteOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation38 = com.fasterxml.jackson.core.JsonLocation.NA;
        com.fasterxml.jackson.core.JsonParseException jsonParseException39 = new com.fasterxml.jackson.core.JsonParseException("JSON", jsonLocation38);
        com.fasterxml.jackson.core.JsonParseException jsonParseException40 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation35, (java.lang.Throwable) jsonParseException39);
        java.lang.Object obj41 = jsonLocation35.getSourceRef();
        java.lang.Object obj42 = null;
        boolean boolean43 = jsonLocation35.equals(obj42);
        long long44 = jsonLocation35.getByteOffset();
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertNotNull(jsonLocation35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(jsonLocation38);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test584");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        int[] intArray90 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeComment();
        uTF8JsonGenerator70._outputEscapes = intArray90;
        byte[] byteArray92 = uTF8JsonGenerator70._outputBuffer;
        uTF8JsonGenerator70._verifyValueWrite("false");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 1, -65, 1, 0, 0]");
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test585");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        uTF8JsonGenerator70._bufferRecyclable = true;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test586");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        java.lang.String str80 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonToken jsonToken81 = readerBasedJsonParser77.nextToken();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(jsonToken81);
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test587");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long80 = readerBasedJsonParser77.getTokenCharacterOffset();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext81 = readerBasedJsonParser77.getParsingContext();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(jsonStreamContext81);
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test588");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = jsonFactory38.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray43 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream46 = new com.fasterxml.jackson.core.io.MergedStream(iOContext41, inputStream42, byteArray43, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        java.io.InputStream inputStream48 = null;
        byte[] byteArray49 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream52 = new com.fasterxml.jackson.core.io.MergedStream(iOContext47, inputStream48, byteArray49, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader56 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext40, inputStream42, byteArray49, 0, 0, false);
        char[] charArray59 = new char[] { ' ', '#' };
        int int60 = uTF32Reader56.read(charArray59);
        char[] charArray64 = new char[] { ' ', '#', '4' };
        int int67 = uTF32Reader56.read(charArray64, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser68 = jsonFactory38.createParser((java.io.Reader) uTF32Reader56);
        java.io.Writer writer69 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator70 = jsonFactory38.createJsonGenerator(writer69);
        com.fasterxml.jackson.core.io.IOContext iOContext71 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        java.io.InputStream inputStream73 = null;
        byte[] byteArray74 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream77 = new com.fasterxml.jackson.core.io.MergedStream(iOContext72, inputStream73, byteArray74, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext78 = null;
        java.io.InputStream inputStream79 = null;
        byte[] byteArray80 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream83 = new com.fasterxml.jackson.core.io.MergedStream(iOContext78, inputStream79, byteArray80, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader87 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext71, inputStream73, byteArray80, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser88 = jsonFactory38.createParser(byteArray80);
        jsonGenerator35.writeBinary(byteArray80);
        defaultPrettyPrinter0.writeStartArray(jsonGenerator35);
        jsonGenerator35.writeNumber((float) (byte) -17);
        boolean boolean93 = jsonGenerator35.canWriteObjectId();
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputDecorator39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ , #]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(jsonParser68);
        org.junit.Assert.assertNotNull(jsonGenerator70);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(jsonParser88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test589");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.Version version81 = readerBasedJsonParser77.version();
        int int82 = readerBasedJsonParser77.getTextLength();
        int int83 = readerBasedJsonParser77.getFeatureMask();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken86 = readerBasedJsonParser77._handleInvalidNumberStart((int) (byte) -1, true);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected character ('?' (code -1)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertNotNull(version81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-65) + "'", int83 == (-65));
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test590");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int20 = jsonParser19.getFeatureMask();
        boolean boolean21 = jsonParser19.hasTextCharacters();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test591");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        com.fasterxml.jackson.core.FormatSchema formatSchema32 = null;
        boolean boolean33 = jsonParser30.canUseSchema(formatSchema32);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonParser30.setFeatureMask((int) (short) 100);
        int int36 = jsonParser35.getTextOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean37 = jsonParser35.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test592");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = com.fasterxml.jackson.core.JsonToken.START_ARRAY;
        java.lang.String str80 = readerBasedJsonParser77._getText2(jsonToken79);
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext81 = readerBasedJsonParser77.getParsingContext();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertTrue("'" + jsonToken79 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_ARRAY + "'", jsonToken79.equals(com.fasterxml.jackson.core.JsonToken.START_ARRAY));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[" + "'", str80, "[");
        org.junit.Assert.assertNotNull(jsonStreamContext81);
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test593");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator40 = jsonGenerator39.useDefaultPrettyPrinter();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(jsonGenerator40);
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test594");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.Version version33 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser40 = jsonFactory0.createParser(byteArray36);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler41 = jsonFactory0._getBufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler42 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType43 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
        char[] charArray44 = bufferRecycler42.allocCharBuffer(charBufferType43);
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler45 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType charBufferType46 = com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
        char[] charArray47 = bufferRecycler45.allocCharBuffer(charBufferType46);
        com.fasterxml.jackson.core.io.SerializedString serializedString48 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int57 = serializedString48.appendQuotedUTF8(byteArray55, (int) ' ');
        char[] charArray58 = serializedString48.asQuotedChars();
        bufferRecycler42.releaseCharBuffer(charBufferType46, charArray58);
        char[] charArray60 = bufferRecycler41.allocCharBuffer(charBufferType46);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(jsonParser40);
        org.junit.Assert.assertNotNull(bufferRecycler41);
        org.junit.Assert.assertTrue("'" + charBufferType43 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER + "'", charBufferType43.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + charBufferType46 + "' != '" + com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER + "'", charBufferType46.equals(com.fasterxml.jackson.core.util.BufferRecycler.CharBufferType.NAME_COPY_BUFFER));
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
        org.junit.Assert.assertNotNull(serializedString48);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ ]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test595");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        com.fasterxml.jackson.core.io.SerializedString serializedString75 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int84 = serializedString75.appendQuotedUTF8(byteArray82, (int) ' ');
        uTF8JsonGenerator70._rootValueSeparator = serializedString75;
        com.fasterxml.jackson.core.io.SerializedString serializedString86 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int95 = serializedString86.appendQuotedUTF8(byteArray93, (int) ' ');
        char[] charArray96 = serializedString86.asQuotedChars();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeObjectRef((java.lang.Object) charArray96);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Object Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(serializedString75);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(serializedString86);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray96), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray96), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray96), "[ ]");
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test596");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        com.fasterxml.jackson.core.JsonLocation jsonLocation82 = readerBasedJsonParser77.getTokenLocation();
        java.lang.String str84 = readerBasedJsonParser77.getValueAsString("hi!");
        com.fasterxml.jackson.core.ObjectCodec objectCodec85 = null;
        readerBasedJsonParser77.setCodec(objectCodec85);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertNotNull(jsonLocation82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test597");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        int int75 = uTF8JsonGenerator70.getFeatureMask();
        com.fasterxml.jackson.core.io.IOContext iOContext76 = uTF8JsonGenerator70._ioContext;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeNumber((short) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
        org.junit.Assert.assertNotNull(iOContext76);
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test598");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.lang.String str79 = readerBasedJsonParser77.getCurrentName();
        java.lang.String str80 = readerBasedJsonParser77.getCurrentName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test599");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.JsonToken jsonToken31 = jsonParser30.getCurrentToken();
        com.fasterxml.jackson.core.JsonFactory jsonFactory32 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator33 = jsonFactory32.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext35 = null;
        java.io.InputStream inputStream36 = null;
        byte[] byteArray37 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream40 = new com.fasterxml.jackson.core.io.MergedStream(iOContext35, inputStream36, byteArray37, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext41 = null;
        java.io.InputStream inputStream42 = null;
        byte[] byteArray43 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream46 = new com.fasterxml.jackson.core.io.MergedStream(iOContext41, inputStream42, byteArray43, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader50 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext34, inputStream36, byteArray43, 0, 0, false);
        char[] charArray53 = new char[] { ' ', '#' };
        int int54 = uTF32Reader50.read(charArray53);
        char[] charArray58 = new char[] { ' ', '#', '4' };
        int int61 = uTF32Reader50.read(charArray58, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser62 = jsonFactory32.createParser((java.io.Reader) uTF32Reader50);
        java.io.Writer writer63 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator64 = jsonFactory32.createJsonGenerator(writer63);
        com.fasterxml.jackson.core.ObjectCodec objectCodec65 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory66 = jsonFactory32.setCodec(objectCodec65);
        java.io.Writer writer67 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator68 = jsonFactory66.createGenerator(writer67);
        java.io.Writer writer69 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator70 = jsonFactory66.createGenerator(writer69);
        com.fasterxml.jackson.core.JsonParser jsonParser72 = jsonFactory66.createParser("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature73 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        boolean boolean74 = jsonFactory66.isEnabled(feature73);
        java.io.OutputStream outputStream75 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = jsonFactory66.createGenerator(outputStream75);
        com.fasterxml.jackson.core.JsonParser.Feature feature77 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
        boolean boolean78 = feature77.enabledByDefault();
        boolean boolean79 = feature77.enabledByDefault();
        com.fasterxml.jackson.core.JsonFactory jsonFactory80 = jsonFactory66.enable(feature77);
        com.fasterxml.jackson.core.JsonParser jsonParser81 = jsonParser30.disable(feature77);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(jsonToken31);
        org.junit.Assert.assertNull(inputDecorator33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[ , #]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(jsonParser62);
        org.junit.Assert.assertNotNull(jsonGenerator64);
        org.junit.Assert.assertNotNull(jsonFactory66);
        org.junit.Assert.assertNotNull(jsonGenerator68);
        org.junit.Assert.assertNotNull(jsonGenerator70);
        org.junit.Assert.assertNotNull(jsonParser72);
        org.junit.Assert.assertTrue("'" + feature73 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature73.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jsonGenerator76);
        org.junit.Assert.assertTrue("'" + feature77 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS + "'", feature77.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jsonFactory80);
        org.junit.Assert.assertNotNull(jsonParser81);
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test600");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter1 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter1);
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        com.fasterxml.jackson.core.ObjectCodec objectCodec36 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory37 = jsonFactory3.setCodec(objectCodec36);
        java.io.Writer writer38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonFactory37.createGenerator(writer38);
        jsonGenerator39.writeArrayFieldStart("");
        fixedSpaceIndenter1.writeIndentation(jsonGenerator39, (int) (short) 0);
        jsonGenerator39.writeStringField("", "");
        jsonGenerator39.writeEndArray();
        jsonGenerator39.writeNumberField("[Source: false; line: 1, column: 0]", (long) (-1779204963));
        org.junit.Assert.assertNotNull(fixedSpaceIndenter1);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertNotNull(jsonFactory37);
        org.junit.Assert.assertNotNull(jsonGenerator39);
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test601");
        com.fasterxml.jackson.core.sym.Name name0 = com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.getEmptyName();
        boolean boolean3 = name0.equals((int) (byte) -69, (int) (byte) 1);
        java.lang.String str4 = name0.toString();
        int[] intArray9 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray11 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray9, (int) '#');
        int[] intArray13 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray11, 100);
        boolean boolean15 = name0.equals(intArray11, (-1779289601));
        org.junit.Assert.assertNotNull(name0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test602");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        boolean boolean36 = jsonGenerator35.isClosed();
        jsonGenerator35.writeStartObject();
        boolean boolean38 = jsonGenerator35.isClosed();
        jsonGenerator35.writeNumber(100.0d);
        defaultPrettyPrinter2.beforeArrayValues(jsonGenerator35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter42 = defaultPrettyPrinter2.withoutSpacesInObjectEntries();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter43.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString46 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter47 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter43, serializableString46);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter48 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = defaultPrettyPrinter47.withObjectIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter48);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter51 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter50.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter51);
        com.fasterxml.jackson.core.JsonFactory jsonFactory53 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator54 = jsonFactory53.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext56 = null;
        java.io.InputStream inputStream57 = null;
        byte[] byteArray58 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream61 = new com.fasterxml.jackson.core.io.MergedStream(iOContext56, inputStream57, byteArray58, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext62 = null;
        java.io.InputStream inputStream63 = null;
        byte[] byteArray64 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext62, inputStream63, byteArray64, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader71 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext55, inputStream57, byteArray64, 0, 0, false);
        char[] charArray74 = new char[] { ' ', '#' };
        int int75 = uTF32Reader71.read(charArray74);
        char[] charArray79 = new char[] { ' ', '#', '4' };
        int int82 = uTF32Reader71.read(charArray79, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser83 = jsonFactory53.createParser((java.io.Reader) uTF32Reader71);
        java.io.Writer writer84 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator85 = jsonFactory53.createJsonGenerator(writer84);
        boolean boolean86 = jsonGenerator85.isClosed();
        jsonGenerator85.writeStartObject();
        boolean boolean88 = jsonGenerator85.isClosed();
        jsonGenerator85.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec91 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator92 = jsonGenerator85.setCodec(objectCodec91);
        fixedSpaceIndenter51.writeIndentation(jsonGenerator85, 55296);
        defaultPrettyPrinter47.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter96 = defaultPrettyPrinter42.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter51);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter42);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter48);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter49);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter51);
        org.junit.Assert.assertNull(inputDecorator54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[ , #]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(jsonParser83);
        org.junit.Assert.assertNotNull(jsonGenerator85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(jsonGenerator92);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter96);
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test603");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        // The following exception was thrown during execution in test generation
        try {
            readerBasedJsonParser77._reportInvalidToken("com.fasterxml.jackson.core.JsonParseException: ARRAY");
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unrecognized token 'com.fasterxml.jackson.core.JsonParseException: ARRAY': was expecting ? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test604");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = uTF8JsonGenerator70.getCharacterEscapes();
        com.fasterxml.jackson.core.io.SerializedString serializedString72 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int81 = serializedString72.appendQuotedUTF8(byteArray79, (int) ' ');
        int int82 = serializedString72.charLength();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator83 = uTF8JsonGenerator70.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString72);
        uTF8JsonGenerator70._verifyValueWrite("[Source: ALLOW_COMMENTS; line: 35, column: 1]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(characterEscapes71);
        org.junit.Assert.assertNotNull(serializedString72);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(jsonGenerator83);
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test605");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        boolean boolean57 = iOContext7.isResourceManaged();
        com.fasterxml.jackson.core.ObjectCodec objectCodec59 = null;
        java.io.OutputStream outputStream60 = null;
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator61 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 1, objectCodec59, outputStream60);
        boolean boolean62 = uTF8JsonGenerator61.isClosed();
        java.math.BigInteger bigInteger63 = null;
        uTF8JsonGenerator61.writeNumber(bigInteger63);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test606");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.overrideCurrentName("");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext80 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str82 = readerBasedJsonParser77._handleOddName((int) (short) 100);
        readerBasedJsonParser77._tokenIncomplete = true;
        readerBasedJsonParser77._skipCR();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNotNull(jsonReadContext80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test607");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        int int81 = readerBasedJsonParser77.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation82 = readerBasedJsonParser77.getCurrentLocation();
        java.lang.String str83 = readerBasedJsonParser77.getText();
        int int84 = readerBasedJsonParser77.getTextOffset();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(jsonLocation82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test608");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        boolean boolean35 = jsonGenerator32.isClosed();
        jsonGenerator32.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator39 = jsonGenerator32.setCodec(objectCodec38);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter40 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter40.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.io.SerializedString serializedString43 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int52 = serializedString43.appendQuotedUTF8(byteArray50, (int) ' ');
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter40, (com.fasterxml.jackson.core.SerializableString) serializedString43);
        byte[] byteArray54 = serializedString43.asUnquotedUTF8();
        jsonGenerator32.writeRaw((com.fasterxml.jackson.core.SerializableString) serializedString43);
        byte[] byteArray56 = serializedString43.asQuotedUTF8();
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        java.io.InputStream inputStream59 = null;
        byte[] byteArray60 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream63 = new com.fasterxml.jackson.core.io.MergedStream(iOContext58, inputStream59, byteArray60, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext64 = null;
        java.io.InputStream inputStream65 = null;
        byte[] byteArray66 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream69 = new com.fasterxml.jackson.core.io.MergedStream(iOContext64, inputStream65, byteArray66, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader73 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext57, inputStream59, byteArray66, 0, 0, false);
        boolean boolean74 = uTF32Reader73.markSupported();
        com.fasterxml.jackson.core.io.IOContext iOContext75 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext76 = null;
        java.io.InputStream inputStream77 = null;
        byte[] byteArray78 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream81 = new com.fasterxml.jackson.core.io.MergedStream(iOContext76, inputStream77, byteArray78, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext82 = null;
        java.io.InputStream inputStream83 = null;
        byte[] byteArray84 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream87 = new com.fasterxml.jackson.core.io.MergedStream(iOContext82, inputStream83, byteArray84, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader91 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext75, inputStream77, byteArray84, 0, 0, false);
        char[] charArray94 = new char[] { ' ', '#' };
        int int95 = uTF32Reader91.read(charArray94);
        int int96 = uTF32Reader73.read(charArray94);
        int int98 = serializedString43.appendUnquoted(charArray94, 0);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jsonGenerator39);
        org.junit.Assert.assertNotNull(serializedString43);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[32]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[32]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(charArray94);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray94), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray94), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray94), "[ , #]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test609");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter();
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter6);
        boolean boolean8 = fixedSpaceIndenter6.isInline();
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator10 = jsonFactory9.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray20 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream23 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, inputStream19, byteArray20, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader27 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext11, inputStream13, byteArray20, 0, 0, false);
        char[] charArray30 = new char[] { ' ', '#' };
        int int31 = uTF32Reader27.read(charArray30);
        char[] charArray35 = new char[] { ' ', '#', '4' };
        int int38 = uTF32Reader27.read(charArray35, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonFactory9.createParser((java.io.Reader) uTF32Reader27);
        java.io.Writer writer40 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonFactory9.createJsonGenerator(writer40);
        boolean boolean42 = jsonGenerator41.isClosed();
        jsonGenerator41.writeStartObject();
        boolean boolean44 = jsonGenerator41.isClosed();
        jsonGenerator41.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec47 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator48 = jsonGenerator41.setCodec(objectCodec47);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter49.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator51 = jsonGenerator41.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter50);
        com.fasterxml.jackson.core.PrettyPrinter prettyPrinter52 = jsonGenerator51.getPrettyPrinter();
        jsonGenerator51.writeRaw("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature55 = com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator57 = jsonGenerator51.configure(feature55, false);
        fixedSpaceIndenter6.writeIndentation(jsonGenerator51, 2);
        boolean boolean60 = jsonGenerator51.canOmitFields();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(inputDecorator10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertNotNull(jsonGenerator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jsonGenerator48);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
        org.junit.Assert.assertNotNull(jsonGenerator51);
        org.junit.Assert.assertNotNull(prettyPrinter52);
        org.junit.Assert.assertTrue("'" + feature55 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES + "'", feature55.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES));
        org.junit.Assert.assertNotNull(jsonGenerator57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test610");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        double double20 = jsonParser19.getValueAsDouble();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean21 = jsonParser19.nextBooleanValue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test611");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        int[] intArray90 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeComment();
        uTF8JsonGenerator70._outputEscapes = intArray90;
        byte[] byteArray92 = uTF8JsonGenerator70._outputBuffer;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeEndArray();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: Current context not an ARRAY but ROOT");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 1, -65, 1, 0, 0]");
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test612");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes73;
        java.io.OutputStream outputStream75 = uTF8JsonGenerator70._outputStream;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator76.writeObjectFieldStart("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(outputStream75);
        org.junit.Assert.assertNotNull(jsonGenerator76);
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test613");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        java.io.OutputStream outputStream57 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer58 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext7, outputStream57);
        uTF8Writer58.flush();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test614");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        int int90 = uTF8JsonGenerator70.getHighestEscapedChar();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test615");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        int int75 = uTF8JsonGenerator70._outputMaxContiguous;
        com.fasterxml.jackson.core.ObjectCodec objectCodec76 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator77 = uTF8JsonGenerator70.setCodec(objectCodec76);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(jsonGenerator77);
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test616");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        jsonParser30.close();
        com.fasterxml.jackson.core.Version version34 = jsonParser30.version();
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonParser30.setFeatureMask(56319);
        com.fasterxml.jackson.core.ObjectCodec objectCodec37 = jsonParser36.getCodec();
        double double38 = jsonParser36.getValueAsDouble();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertNull(objectCodec37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test617");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator5 = jsonFactory4.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream12 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, inputStream8, byteArray9, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext13 = null;
        java.io.InputStream inputStream14 = null;
        byte[] byteArray15 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream18 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream14, byteArray15, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader22 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext6, inputStream8, byteArray15, 0, 0, false);
        char[] charArray25 = new char[] { ' ', '#' };
        int int26 = uTF32Reader22.read(charArray25);
        char[] charArray30 = new char[] { ' ', '#', '4' };
        int int33 = uTF32Reader22.read(charArray30, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser34 = jsonFactory4.createParser((java.io.Reader) uTF32Reader22);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory4.createJsonGenerator(writer35);
        boolean boolean37 = jsonGenerator36.isClosed();
        jsonGenerator36.writeStartObject();
        boolean boolean39 = jsonGenerator36.isClosed();
        jsonGenerator36.writeNumber(100.0d);
        defaultPrettyPrinter3.writeObjectFieldValueSeparator(jsonGenerator36);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonGenerator36.setFeatureMask((int) (short) 1);
        jsonGenerator44.writeNumber((float) (-1779133819));
        org.junit.Assert.assertNull(inputDecorator5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , #]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(jsonParser34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jsonGenerator44);
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test618");
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator3 = jsonFactory2.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        java.io.InputStream inputStream6 = null;
        byte[] byteArray7 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream10 = new com.fasterxml.jackson.core.io.MergedStream(iOContext5, inputStream6, byteArray7, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray13 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream16 = new com.fasterxml.jackson.core.io.MergedStream(iOContext11, inputStream12, byteArray13, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader20 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext4, inputStream6, byteArray13, 0, 0, false);
        char[] charArray23 = new char[] { ' ', '#' };
        int int24 = uTF32Reader20.read(charArray23);
        char[] charArray28 = new char[] { ' ', '#', '4' };
        int int31 = uTF32Reader20.read(charArray28, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonFactory2.createParser((java.io.Reader) uTF32Reader20);
        int int34 = jsonParser32.nextIntValue((int) 'a');
        jsonParser32.close();
        com.fasterxml.jackson.core.JsonLocation jsonLocation36 = jsonParser32.getCurrentLocation();
        long long37 = jsonLocation36.getByteOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation39 = com.fasterxml.jackson.core.JsonLocation.NA;
        com.fasterxml.jackson.core.JsonParseException jsonParseException40 = new com.fasterxml.jackson.core.JsonParseException("JSON", jsonLocation39);
        com.fasterxml.jackson.core.JsonParseException jsonParseException41 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation36, (java.lang.Throwable) jsonParseException40);
        java.lang.Object obj42 = jsonLocation36.getSourceRef();
        java.lang.Object obj43 = null;
        boolean boolean44 = jsonLocation36.equals(obj43);
        com.fasterxml.jackson.core.JsonParseException jsonParseException45 = new com.fasterxml.jackson.core.JsonParseException("ARRAY", jsonLocation36);
        org.junit.Assert.assertNull(inputDecorator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , #]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(jsonParser32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertNotNull(jsonLocation36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(jsonLocation39);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test619");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator41 = jsonFactory40.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext42 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        java.io.InputStream inputStream44 = null;
        byte[] byteArray45 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream48 = new com.fasterxml.jackson.core.io.MergedStream(iOContext43, inputStream44, byteArray45, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader58 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext42, inputStream44, byteArray51, 0, 0, false);
        char[] charArray61 = new char[] { ' ', '#' };
        int int62 = uTF32Reader58.read(charArray61);
        char[] charArray66 = new char[] { ' ', '#', '4' };
        int int69 = uTF32Reader58.read(charArray66, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser70 = jsonFactory40.createParser((java.io.Reader) uTF32Reader58);
        java.io.Writer writer71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = jsonFactory40.createJsonGenerator(writer71);
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext74 = null;
        java.io.InputStream inputStream75 = null;
        byte[] byteArray76 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream79 = new com.fasterxml.jackson.core.io.MergedStream(iOContext74, inputStream75, byteArray76, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext80 = null;
        java.io.InputStream inputStream81 = null;
        byte[] byteArray82 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream85 = new com.fasterxml.jackson.core.io.MergedStream(iOContext80, inputStream81, byteArray82, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader89 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext73, inputStream75, byteArray82, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser90 = jsonFactory40.createParser(byteArray82);
        java.io.Writer writer91 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator92 = jsonFactory40.createGenerator(writer91);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter93 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter94 = defaultPrettyPrinter93.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator95 = jsonGenerator92.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter94);
        defaultPrettyPrinter4.writeEndObject(jsonGenerator92, (-1779285129));
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(inputDecorator41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(jsonParser70);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(jsonParser90);
        org.junit.Assert.assertNotNull(jsonGenerator92);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter94);
        org.junit.Assert.assertNotNull(jsonGenerator95);
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test620");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer85 = readerBasedJsonParser77._symbols;
        java.lang.String str86 = readerBasedJsonParser77.getValueAsString();
        com.fasterxml.jackson.core.Base64Variant base64Variant87 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray88 = readerBasedJsonParser77.getBinaryValue(base64Variant87);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer85);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test621");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        boolean boolean57 = iOContext7.isResourceManaged();
        com.fasterxml.jackson.core.ObjectCodec objectCodec59 = null;
        java.io.OutputStream outputStream60 = null;
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator61 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 1, objectCodec59, outputStream60);
        java.io.InputStream inputStream62 = null;
        byte[] byteArray63 = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS;
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader67 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream62, byteArray63, (-1091898419), (-1779099165), true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]");
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test622");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.withSpacesInObjectEntries();
        com.fasterxml.jackson.core.JsonFactory jsonFactory2 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator3 = jsonFactory2.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        java.io.InputStream inputStream6 = null;
        byte[] byteArray7 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream10 = new com.fasterxml.jackson.core.io.MergedStream(iOContext5, inputStream6, byteArray7, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        java.io.InputStream inputStream12 = null;
        byte[] byteArray13 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream16 = new com.fasterxml.jackson.core.io.MergedStream(iOContext11, inputStream12, byteArray13, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader20 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext4, inputStream6, byteArray13, 0, 0, false);
        char[] charArray23 = new char[] { ' ', '#' };
        int int24 = uTF32Reader20.read(charArray23);
        char[] charArray28 = new char[] { ' ', '#', '4' };
        int int31 = uTF32Reader20.read(charArray28, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser32 = jsonFactory2.createParser((java.io.Reader) uTF32Reader20);
        java.io.Writer writer33 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator34 = jsonFactory2.createJsonGenerator(writer33);
        boolean boolean35 = jsonGenerator34.isClosed();
        jsonGenerator34.writeStartObject();
        jsonGenerator34.writeObjectFieldStart("hi!");
        com.fasterxml.jackson.core.JsonGenerator.Feature feature39 = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        boolean boolean40 = jsonGenerator34.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonGenerator34.useDefaultPrettyPrinter();
        jsonGenerator34.writeNumberField(" ", (float) (-1));
        defaultPrettyPrinter1.writeEndArray(jsonGenerator34, (-1779285129));
        com.fasterxml.jackson.core.TreeNode treeNode47 = null;
        jsonGenerator34.writeTree(treeNode47);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNull(inputDecorator3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , #]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(jsonParser32);
        org.junit.Assert.assertNotNull(jsonGenerator34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS + "'", feature39.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonGenerator41);
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test623");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = jsonParser30.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@43192c6; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test624");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.io.OutputDecorator outputDecorator51 = jsonFactory0.getOutputDecorator();
        com.fasterxml.jackson.core.JsonFactory jsonFactory52 = jsonFactory0.copy();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator53 = jsonFactory52.getInputDecorator();
        com.fasterxml.jackson.core.JsonFactory.Feature feature54 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean56 = feature54.enabledIn((int) '4');
        com.fasterxml.jackson.core.JsonFactory jsonFactory57 = jsonFactory52.disable(feature54);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(outputDecorator51);
        org.junit.Assert.assertNotNull(jsonFactory52);
        org.junit.Assert.assertNull(inputDecorator53);
        org.junit.Assert.assertTrue("'" + feature54 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature54.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jsonFactory57);
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test625");
        com.fasterxml.jackson.core.io.IOContext iOContext0 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        boolean boolean19 = uTF32Reader18.markSupported();
        boolean boolean20 = uTF32Reader18.ready();
        com.fasterxml.jackson.core.ObjectCodec objectCodec21 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer22 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int23 = charsToNameCanonicalizer22.size();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser24 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext0, 13, (java.io.Reader) uTF32Reader18, objectCodec21, charsToNameCanonicalizer22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test626");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        boolean boolean79 = readerBasedJsonParser77.hasTextCharacters();
        com.fasterxml.jackson.core.Version version80 = readerBasedJsonParser77.version();
        readerBasedJsonParser77._releaseBuffers();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(version80);
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test627");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.JsonToken jsonToken71 = com.fasterxml.jackson.core.JsonToken.START_OBJECT;
        boolean boolean72 = jsonToken71.isNumeric();
        char[] charArray73 = jsonToken71.asCharArray();
        uTF8JsonGenerator70._charBuffer = charArray73;
        com.fasterxml.jackson.core.io.SerializedString serializedString76 = new com.fasterxml.jackson.core.io.SerializedString(" ");
        char[] charArray77 = serializedString76.asQuotedChars();
        byte[] byteArray78 = serializedString76.asUnquotedUTF8();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator79 = uTF8JsonGenerator70.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString76);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + jsonToken71 + "' != '" + com.fasterxml.jackson.core.JsonToken.START_OBJECT + "'", jsonToken71.equals(com.fasterxml.jackson.core.JsonToken.START_OBJECT));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "{");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "{");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[{]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ ]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[32]");
        org.junit.Assert.assertNotNull(jsonGenerator79);
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test628");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        java.lang.String str78 = readerBasedJsonParser77.getCurrentName();
        com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext79 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str81 = readerBasedJsonParser77.getValueAsString("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        long long82 = readerBasedJsonParser77.getTokenCharacterOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int83 = readerBasedJsonParser77.getIntValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jsonStreamContext79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "com.fasterxml.jackson.core.JsonParseException: ARRAY" + "'", str81, "com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test629");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        java.io.Writer writer32 = null;
        int int33 = jsonParser30.releaseBuffered(writer32);
        int int35 = jsonParser30.getValueAsInt(56319);
        java.lang.String str37 = jsonParser30.getValueAsString("ARRAY");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 56319 + "'", int35 == 56319);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ARRAY" + "'", str37, "ARRAY");
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test630");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer85 = readerBasedJsonParser77._symbols;
        java.lang.String str86 = readerBasedJsonParser77.getValueAsString();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext87 = readerBasedJsonParser77.getParsingContext();
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext88 = readerBasedJsonParser77.getParsingContext();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(jsonReadContext87);
        org.junit.Assert.assertNotNull(jsonReadContext88);
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test631");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = readerBasedJsonParser77.getCodec();
        long long81 = readerBasedJsonParser77.nextLongValue((long) (-1779204963));
        char[] charArray82 = readerBasedJsonParser77.getTextCharacters();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(objectCodec79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1779204963L) + "'", long81 == (-1779204963L));
        org.junit.Assert.assertNull(charArray82);
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test632");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.Version version81 = readerBasedJsonParser77.version();
        int int82 = readerBasedJsonParser77.getTextLength();
        int int83 = readerBasedJsonParser77._hashSeed;
        boolean boolean84 = readerBasedJsonParser77.hasTextCharacters();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertNotNull(version81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1779087843) + "'", int83 == (-1779087843));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test633");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        java.lang.Object obj35 = jsonParser30.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonToken jsonToken36 = jsonParser30.nextToken();
        com.fasterxml.jackson.core.JsonParser.Feature feature37 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonParser30.configure(feature37, false);
        long long41 = jsonParser39.getValueAsLong((long) 1744563525);
        com.fasterxml.jackson.core.FormatSchema formatSchema42 = null;
        boolean boolean43 = jsonParser39.canUseSchema(formatSchema42);
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(jsonToken36);
        org.junit.Assert.assertTrue("'" + feature37 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS + "'", feature37.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS));
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1744563525L + "'", long41 == 1744563525L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test634");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        com.fasterxml.jackson.core.io.SerializedString serializedString75 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int84 = serializedString75.appendQuotedUTF8(byteArray82, (int) ' ');
        uTF8JsonGenerator70._rootValueSeparator = serializedString75;
        boolean boolean86 = uTF8JsonGenerator70.isClosed();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(serializedString75);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test635");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter5.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter8 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter5);
        com.fasterxml.jackson.core.JsonFactory jsonFactory9 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator10 = jsonFactory9.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext11 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext18 = null;
        java.io.InputStream inputStream19 = null;
        byte[] byteArray20 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream23 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, inputStream19, byteArray20, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader27 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext11, inputStream13, byteArray20, 0, 0, false);
        char[] charArray30 = new char[] { ' ', '#' };
        int int31 = uTF32Reader27.read(charArray30);
        char[] charArray35 = new char[] { ' ', '#', '4' };
        int int38 = uTF32Reader27.read(charArray35, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser39 = jsonFactory9.createParser((java.io.Reader) uTF32Reader27);
        java.io.Writer writer40 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator41 = jsonFactory9.createJsonGenerator(writer40);
        boolean boolean42 = jsonGenerator41.isClosed();
        jsonGenerator41.writeStartObject();
        boolean boolean44 = jsonGenerator41.isClosed();
        jsonGenerator41.writeNumber(100.0d);
        defaultPrettyPrinter8.writeObjectFieldValueSeparator(jsonGenerator41);
        jsonGenerator41.writeBooleanField("JSON", true);
        defaultPrettyPrinter4.writeEndObject(jsonGenerator41, 1);
        jsonGenerator41.writeRaw("[Source: ALLOW_COMMENTS; line: 35, column: 1]", 13, 0);
        org.junit.Assert.assertNull(inputDecorator10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , #]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(jsonParser39);
        org.junit.Assert.assertNotNull(jsonGenerator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test636");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonParser30.setFeatureMask(64);
        com.fasterxml.jackson.core.JsonToken jsonToken37 = jsonParser36.nextValue();
        boolean boolean38 = jsonParser36.isClosed();
        com.fasterxml.jackson.core.Version version39 = jsonParser36.version();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertNull(jsonToken37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(version39);
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test637");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        boolean boolean57 = iOContext7.isResourceManaged();
        com.fasterxml.jackson.core.ObjectCodec objectCodec59 = null;
        java.io.OutputStream outputStream60 = null;
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator61 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 1, objectCodec59, outputStream60);
        com.fasterxml.jackson.core.io.IOContext iOContext62 = null;
        java.io.InputStream inputStream63 = null;
        byte[] byteArray64 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext62, inputStream63, byteArray64, 0, (int) (short) -1);
        boolean boolean68 = mergedStream67.markSupported();
        int int69 = mergedStream67.available();
        int int70 = mergedStream67.available();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper71 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext7, (java.io.InputStream) mergedStream67);
        boolean boolean72 = byteSourceJsonBootstrapper71._bigEndian;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test638");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.lang.String str51 = jsonParser50.getText();
        boolean boolean52 = jsonParser50.canReadTypeId();
        java.lang.Object obj53 = jsonParser50.getTypeId();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj53);
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test639");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.OutputStream outputStream71 = null;
        com.fasterxml.jackson.core.io.UTF8Writer uTF8Writer72 = new com.fasterxml.jackson.core.io.UTF8Writer(iOContext7, outputStream71);
        byte[] byteArray73 = iOContext7.allocBase64Buffer();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(byteArray73);
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test640");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeRaw('a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test641");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory4 = jsonFactory0.setCodec(objectCodec3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        com.fasterxml.jackson.core.io.IOContext iOContext36 = null;
        java.io.InputStream inputStream37 = null;
        byte[] byteArray38 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream41 = new com.fasterxml.jackson.core.io.MergedStream(iOContext36, inputStream37, byteArray38, 0, (int) (short) -1);
        com.fasterxml.jackson.core.JsonParser jsonParser42 = jsonFactory5.createJsonParser(inputStream37);
        com.fasterxml.jackson.core.JsonFactory.Feature feature43 = com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean44 = jsonFactory5.isEnabled(feature43);
        com.fasterxml.jackson.core.JsonFactory jsonFactory45 = jsonFactory4.disable(feature43);
        java.lang.String str46 = jsonFactory45.getFormatName();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jsonFactory4);
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(jsonParser42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES + "'", feature43.equals(com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jsonFactory45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "JSON" + "'", str46, "JSON");
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test642");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes71;
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes73 = null;
        uTF8JsonGenerator70._characterEscapes = characterEscapes73;
        java.io.OutputStream outputStream75 = uTF8JsonGenerator70._outputStream;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeRaw('4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNull(outputStream75);
        org.junit.Assert.assertNotNull(jsonGenerator76);
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test643");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        long long33 = jsonParser30.nextLongValue((long) (short) 1);
        com.fasterxml.jackson.core.JsonToken jsonToken34 = jsonParser30.nextValue();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNull(jsonToken34);
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test644");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.SerializedString serializedString33 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int42 = serializedString33.appendQuotedUTF8(byteArray40, (int) ' ');
        jsonGenerator32.writeFieldName((com.fasterxml.jackson.core.SerializableString) serializedString33);
        boolean boolean44 = jsonGenerator32.canWriteBinaryNatively();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(serializedString33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test645");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        uTF8JsonGenerator70._bufferRecyclable = false;
        uTF8JsonGenerator70._outputTail = 0;
        uTF8JsonGenerator70._releaseBuffers();
        uTF8JsonGenerator70.writeStartObject();
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[123, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test646");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        boolean boolean57 = iOContext7.isResourceManaged();
        com.fasterxml.jackson.core.ObjectCodec objectCodec59 = null;
        java.io.OutputStream outputStream60 = null;
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator61 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 1, objectCodec59, outputStream60);
        com.fasterxml.jackson.core.io.IOContext iOContext62 = null;
        java.io.InputStream inputStream63 = null;
        byte[] byteArray64 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext62, inputStream63, byteArray64, 0, (int) (short) -1);
        boolean boolean68 = mergedStream67.markSupported();
        int int69 = mergedStream67.available();
        int int70 = mergedStream67.available();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper71 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext7, (java.io.InputStream) mergedStream67);
        byteSourceJsonBootstrapper71._bigEndian = true;
        byteSourceJsonBootstrapper71._inputProcessed = 1549195267;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test647");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonParser jsonParser79 = readerBasedJsonParser77.skipChildren();
        int int80 = readerBasedJsonParser77.getTextOffset();
        java.lang.String str82 = readerBasedJsonParser77.getValueAsString("ROOT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNotNull(jsonParser79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ROOT" + "'", str82, "ROOT");
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test648");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        com.fasterxml.jackson.core.ObjectCodec objectCodec51 = jsonFactory0.getCodec();
        com.fasterxml.jackson.core.JsonFactory jsonFactory52 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator53 = jsonFactory52.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext54 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext61 = null;
        java.io.InputStream inputStream62 = null;
        byte[] byteArray63 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream66 = new com.fasterxml.jackson.core.io.MergedStream(iOContext61, inputStream62, byteArray63, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader70 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext54, inputStream56, byteArray63, 0, 0, false);
        char[] charArray73 = new char[] { ' ', '#' };
        int int74 = uTF32Reader70.read(charArray73);
        char[] charArray78 = new char[] { ' ', '#', '4' };
        int int81 = uTF32Reader70.read(charArray78, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser82 = jsonFactory52.createParser((java.io.Reader) uTF32Reader70);
        java.io.Writer writer83 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = jsonFactory52.createJsonGenerator(writer83);
        com.fasterxml.jackson.core.ObjectCodec objectCodec85 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory86 = jsonFactory52.setCodec(objectCodec85);
        java.io.Writer writer87 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator88 = jsonFactory86.createGenerator(writer87);
        java.io.Writer writer89 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator90 = jsonFactory86.createGenerator(writer89);
        com.fasterxml.jackson.core.JsonParser.Feature feature91 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        com.fasterxml.jackson.core.JsonFactory jsonFactory92 = jsonFactory86.enable(feature91);
        com.fasterxml.jackson.core.JsonFactory jsonFactory93 = jsonFactory0.disable(feature91);
        int int94 = feature91.getMask();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(objectCodec51);
        org.junit.Assert.assertNull(inputDecorator53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[ , #]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(jsonParser82);
        org.junit.Assert.assertNotNull(jsonGenerator84);
        org.junit.Assert.assertNotNull(jsonFactory86);
        org.junit.Assert.assertNotNull(jsonGenerator88);
        org.junit.Assert.assertNotNull(jsonGenerator90);
        org.junit.Assert.assertTrue("'" + feature91 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature91.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertNotNull(jsonFactory92);
        org.junit.Assert.assertNotNull(jsonFactory93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test649");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory31 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator32 = jsonFactory31.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        char[] charArray52 = new char[] { ' ', '#' };
        int int53 = uTF32Reader49.read(charArray52);
        char[] charArray57 = new char[] { ' ', '#', '4' };
        int int60 = uTF32Reader49.read(charArray57, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser61 = jsonFactory31.createParser((java.io.Reader) uTF32Reader49);
        int int63 = jsonParser61.nextIntValue((int) 'a');
        int int64 = jsonParser61.getFeatureMask();
        double double65 = jsonParser61.getValueAsDouble();
        java.lang.Object obj66 = jsonParser61.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature67 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean68 = jsonParser61.isEnabled(feature67);
        com.fasterxml.jackson.core.JsonParser jsonParser69 = jsonParser30.enable(feature67);
        boolean boolean70 = jsonParser69.canReadObjectId();
        int int71 = jsonParser69.getTextOffset();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(inputDecorator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , #]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(jsonParser61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + feature67 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature67.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jsonParser69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test650");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer85 = readerBasedJsonParser77._symbols;
        java.lang.String str86 = readerBasedJsonParser77.getValueAsString();
        com.fasterxml.jackson.core.JsonToken jsonToken87 = readerBasedJsonParser77.nextToken();
        int int88 = readerBasedJsonParser77.getTextOffset();
        boolean boolean89 = readerBasedJsonParser77.hasTextCharacters();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(jsonToken87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test651");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        int int79 = readerBasedJsonParser77.getTokenColumnNr();
        int int81 = readerBasedJsonParser77.nextIntValue((int) (short) 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test652");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        java.lang.String str81 = readerBasedJsonParser77.getText();
        readerBasedJsonParser77.close();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test653");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        int int75 = uTF8JsonGenerator70.getFeatureMask();
        uTF8JsonGenerator70.writeRawValue("");
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test654");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        jsonParser30.close();
        boolean boolean32 = jsonParser30.requiresCustomCodec();
        com.fasterxml.jackson.core.FormatSchema formatSchema33 = jsonParser30.getSchema();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(formatSchema33);
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test655");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        boolean boolean57 = iOContext7.isResourceManaged();
        com.fasterxml.jackson.core.ObjectCodec objectCodec59 = null;
        java.io.OutputStream outputStream60 = null;
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator61 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 1, objectCodec59, outputStream60);
        com.fasterxml.jackson.core.io.IOContext iOContext62 = null;
        java.io.InputStream inputStream63 = null;
        byte[] byteArray64 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext62, inputStream63, byteArray64, 0, (int) (short) -1);
        boolean boolean68 = mergedStream67.markSupported();
        int int69 = mergedStream67.available();
        int int70 = mergedStream67.available();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper71 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext7, (java.io.InputStream) mergedStream67);
        byteSourceJsonBootstrapper71._bigEndian = true;
        int int74 = byteSourceJsonBootstrapper71._inputProcessed;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test656");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        com.fasterxml.jackson.core.JsonFactory jsonFactory21 = jsonFactory0.setRootValueSeparator("");
        java.lang.String str22 = jsonFactory21.getRootValueSeparator();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertNotNull(jsonFactory21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test657");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        int int84 = readerBasedJsonParser77.getValueAsInt((int) (short) 0);
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer85 = readerBasedJsonParser77._symbols;
        java.lang.String str86 = readerBasedJsonParser77.getValueAsString();
        com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder87 = readerBasedJsonParser77._getByteArrayBuilder();
        com.fasterxml.jackson.core.Base64Variant base64Variant88 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray89 = readerBasedJsonParser77._decodeBase64(base64Variant88);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input in null? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(byteArrayBuilder87);
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test658");
        com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer0 = com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.createRoot();
        int int1 = bytesToNameCanonicalizer0.maxCollisionLength();
        int int2 = bytesToNameCanonicalizer0.collisionCount();
        int int3 = bytesToNameCanonicalizer0.collisionCount();
        int[] intArray4 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeUtf8JsNames();
        int[] intArray6 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray4, 16);
        int int8 = bytesToNameCanonicalizer0.calcHash(intArray6, (int) ' ');
        int int10 = bytesToNameCanonicalizer0.calcHash(56320);
        org.junit.Assert.assertNotNull(bytesToNameCanonicalizer0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 609421016 + "'", int8 == 609421016);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1782822775) + "'", int10 == (-1782822775));
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test659");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.overrideCurrentName("");
        int int80 = readerBasedJsonParser77.getTextLength();
        long long81 = readerBasedJsonParser77.getTokenCharacterOffset();
        com.fasterxml.jackson.core.Version version82 = readerBasedJsonParser77.version();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = readerBasedJsonParser77._parseAposName();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected end-of-input: was expecting closing ''' for name? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(version82);
    }

    @Test
    public void test660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test660");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        boolean boolean33 = jsonGenerator32.isClosed();
        jsonGenerator32.writeStartObject();
        com.fasterxml.jackson.core.TreeNode treeNode35 = null;
        jsonGenerator32.writeTree(treeNode35);
        jsonGenerator32.writeNumber("com.fasterxml.jackson.core.JsonParseException: ARRAY");
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test661");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.Version version81 = readerBasedJsonParser77.version();
        com.fasterxml.jackson.core.JsonToken jsonToken82 = readerBasedJsonParser77.nextToken();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = readerBasedJsonParser77._handleOddName(0);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected character ((CTRL-CHAR, code 0)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertNotNull(version81);
        org.junit.Assert.assertNull(jsonToken82);
    }

    @Test
    public void test662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test662");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter3 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter2.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter3);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        jsonGenerator37.writeObjectFieldStart("");
        defaultPrettyPrinter2.writeRootValueSeparator(jsonGenerator37);
        boolean boolean41 = jsonGenerator37.canWriteObjectId();
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator37);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter44 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        defaultPrettyPrinter43.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter44);
        com.fasterxml.jackson.core.JsonFactory jsonFactory46 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator47 = jsonFactory46.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext48 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext49 = null;
        java.io.InputStream inputStream50 = null;
        byte[] byteArray51 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream54 = new com.fasterxml.jackson.core.io.MergedStream(iOContext49, inputStream50, byteArray51, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext55 = null;
        java.io.InputStream inputStream56 = null;
        byte[] byteArray57 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream60 = new com.fasterxml.jackson.core.io.MergedStream(iOContext55, inputStream56, byteArray57, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader64 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext48, inputStream50, byteArray57, 0, 0, false);
        char[] charArray67 = new char[] { ' ', '#' };
        int int68 = uTF32Reader64.read(charArray67);
        char[] charArray72 = new char[] { ' ', '#', '4' };
        int int75 = uTF32Reader64.read(charArray72, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser76 = jsonFactory46.createParser((java.io.Reader) uTF32Reader64);
        java.io.Writer writer77 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator78 = jsonFactory46.createJsonGenerator(writer77);
        jsonGenerator78.writeObjectFieldStart("");
        defaultPrettyPrinter43.writeRootValueSeparator(jsonGenerator78);
        defaultPrettyPrinter1.beforeArrayValues(jsonGenerator78);
        jsonGenerator78.writeNumberField("ARRAY", 0.0f);
        jsonGenerator78.writeStartObject();
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter3);
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter44);
        org.junit.Assert.assertNull(inputDecorator47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , #]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(jsonParser76);
        org.junit.Assert.assertNotNull(jsonGenerator78);
    }

    @Test
    public void test663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test663");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.ObjectCodec objectCodec33 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory34 = jsonFactory0.setCodec(objectCodec33);
        java.io.Writer writer35 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator36 = jsonFactory34.createGenerator(writer35);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator37 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory38 = jsonFactory34.setInputDecorator(inputDecorator37);
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator39 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory38.setInputDecorator(inputDecorator39);
        com.fasterxml.jackson.core.ObjectCodec objectCodec41 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory42 = jsonFactory38.setCodec(objectCodec41);
        com.fasterxml.jackson.core.JsonParser.Feature feature43 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean44 = jsonFactory38.isEnabled(feature43);
        java.net.URL uRL45 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonParser jsonParser46 = jsonFactory38.createJsonParser(uRL45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(jsonFactory34);
        org.junit.Assert.assertNotNull(jsonGenerator36);
        org.junit.Assert.assertNotNull(jsonFactory38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(jsonFactory42);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature43.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test664");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter2 = defaultPrettyPrinter1.createInstance();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        java.io.Writer writer34 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator35 = jsonFactory3.createJsonGenerator(writer34);
        jsonGenerator35.writeString("");
        jsonGenerator35.writeBoolean(false);
        defaultPrettyPrinter2.beforeObjectEntries(jsonGenerator35);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter41 = defaultPrettyPrinter2.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter42 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter43 = defaultPrettyPrinter41.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter42);
        com.fasterxml.jackson.core.JsonFactory jsonFactory44 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator45 = jsonFactory44.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext46 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext47 = null;
        java.io.InputStream inputStream48 = null;
        byte[] byteArray49 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream52 = new com.fasterxml.jackson.core.io.MergedStream(iOContext47, inputStream48, byteArray49, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext53 = null;
        java.io.InputStream inputStream54 = null;
        byte[] byteArray55 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream58 = new com.fasterxml.jackson.core.io.MergedStream(iOContext53, inputStream54, byteArray55, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader62 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext46, inputStream48, byteArray55, 0, 0, false);
        char[] charArray65 = new char[] { ' ', '#' };
        int int66 = uTF32Reader62.read(charArray65);
        char[] charArray70 = new char[] { ' ', '#', '4' };
        int int73 = uTF32Reader62.read(charArray70, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser74 = jsonFactory44.createParser((java.io.Reader) uTF32Reader62);
        java.io.Writer writer75 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator76 = jsonFactory44.createJsonGenerator(writer75);
        boolean boolean77 = jsonGenerator76.isClosed();
        jsonGenerator76.writeStartObject();
        boolean boolean79 = jsonGenerator76.isClosed();
        jsonGenerator76.writeNumber(100.0d);
        com.fasterxml.jackson.core.ObjectCodec objectCodec82 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator83 = jsonGenerator76.setCodec(objectCodec82);
        com.fasterxml.jackson.core.TreeNode treeNode84 = null;
        jsonGenerator83.writeTree(treeNode84);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes86 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator87 = jsonGenerator83.setCharacterEscapes(characterEscapes86);
        defaultPrettyPrinter41.writeStartObject(jsonGenerator87);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter1);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter2);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertNotNull(jsonGenerator35);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter41);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter42);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter43);
        org.junit.Assert.assertNull(inputDecorator45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , #]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(jsonParser74);
        org.junit.Assert.assertNotNull(jsonGenerator76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jsonGenerator83);
        org.junit.Assert.assertNotNull(jsonGenerator87);
    }

    @Test
    public void test665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test665");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.overrideCurrentName("");
        boolean boolean80 = readerBasedJsonParser77._tokenIncomplete;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test666");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        java.io.Reader reader79 = readerBasedJsonParser77._reader;
        long long81 = readerBasedJsonParser77.getValueAsLong((long) 3);
        boolean boolean82 = readerBasedJsonParser77.isClosed();
        // The following exception was thrown during execution in test generation
        try {
            com.fasterxml.jackson.core.JsonToken jsonToken85 = readerBasedJsonParser77._handleInvalidNumberStart(6, true);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Unexpected character ((CTRL-CHAR, code 6)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(reader79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test667");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        java.io.Writer writer51 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator52 = jsonFactory0.createGenerator(writer51);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter53 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter53.createInstance();
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator52.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter54);
        com.fasterxml.jackson.core.JsonFactory jsonFactory56 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version57 = jsonFactory56.version();
        com.fasterxml.jackson.core.io.IOContext iOContext58 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext59 = null;
        java.io.InputStream inputStream60 = null;
        byte[] byteArray61 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream64 = new com.fasterxml.jackson.core.io.MergedStream(iOContext59, inputStream60, byteArray61, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext65 = null;
        java.io.InputStream inputStream66 = null;
        byte[] byteArray67 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream70 = new com.fasterxml.jackson.core.io.MergedStream(iOContext65, inputStream66, byteArray67, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader74 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext58, inputStream60, byteArray67, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser75 = jsonFactory56.createParser((java.io.Reader) uTF32Reader74);
        boolean boolean76 = jsonFactory56.requiresPropertyOrdering();
        java.lang.String str77 = jsonFactory56.getFormatName();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator78 = jsonFactory56.getInputDecorator();
        java.io.InputStream inputStream79 = null;
        com.fasterxml.jackson.core.JsonParser jsonParser80 = jsonFactory56.createParser(inputStream79);
        java.io.OutputStream outputStream81 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator82 = jsonFactory56.createJsonGenerator(outputStream81);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator55.writeObjectId((java.lang.Object) jsonFactory56);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Object Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNotNull(jsonGenerator52);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNotNull(version57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(jsonParser75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "JSON" + "'", str77, "JSON");
        org.junit.Assert.assertNull(inputDecorator78);
        org.junit.Assert.assertNotNull(jsonParser80);
        org.junit.Assert.assertNotNull(jsonGenerator82);
    }

    @Test
    public void test668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test668");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        double double20 = jsonParser19.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser22 = jsonParser19.setFeatureMask(609421016);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser22);
    }

    @Test
    public void test669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test669");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        boolean boolean71 = uTF8JsonGenerator70.isClosed();
        com.fasterxml.jackson.core.io.IOContext iOContext72 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext73 = null;
        java.io.InputStream inputStream74 = null;
        byte[] byteArray75 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream78 = new com.fasterxml.jackson.core.io.MergedStream(iOContext73, inputStream74, byteArray75, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext79 = null;
        java.io.InputStream inputStream80 = null;
        byte[] byteArray81 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream84 = new com.fasterxml.jackson.core.io.MergedStream(iOContext79, inputStream80, byteArray81, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader88 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext72, inputStream74, byteArray81, 0, 0, false);
        uTF8JsonGenerator70._entityBuffer = byteArray81;
        java.lang.Object obj90 = uTF8JsonGenerator70.getOutputTarget();
        uTF8JsonGenerator70.writeRaw("");
        com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext93 = uTF8JsonGenerator70.getOutputContext();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNotNull(jsonWriteContext93);
    }

    @Test
    public void test670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test670");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        boolean boolean78 = readerBasedJsonParser77.isClosed();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        java.lang.String str81 = readerBasedJsonParser77.getText();
        boolean boolean82 = readerBasedJsonParser77.hasTextCharacters();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test671");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        double double20 = jsonParser19.getValueAsDouble();
        boolean boolean21 = jsonParser19.getValueAsBoolean();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test672");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        int int32 = jsonParser30.nextIntValue((int) 'a');
        int int33 = jsonParser30.getFeatureMask();
        double double34 = jsonParser30.getValueAsDouble();
        com.fasterxml.jackson.core.JsonParser jsonParser36 = jsonParser30.setFeatureMask(64);
        com.fasterxml.jackson.core.JsonToken jsonToken37 = jsonParser36.nextValue();
        java.lang.String str38 = jsonParser36.getText();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(jsonParser36);
        org.junit.Assert.assertNull(jsonToken37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test673");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.io.Writer writer31 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator32 = jsonFactory0.createJsonGenerator(writer31);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext34 = null;
        java.io.InputStream inputStream35 = null;
        byte[] byteArray36 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream39 = new com.fasterxml.jackson.core.io.MergedStream(iOContext34, inputStream35, byteArray36, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext40 = null;
        java.io.InputStream inputStream41 = null;
        byte[] byteArray42 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream45 = new com.fasterxml.jackson.core.io.MergedStream(iOContext40, inputStream41, byteArray42, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader49 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext33, inputStream35, byteArray42, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser50 = jsonFactory0.createParser(byteArray42);
        char[] charArray51 = jsonParser50.getTextCharacters();
        int int52 = jsonParser50.getTextOffset();
        java.lang.Object obj53 = jsonParser50.getTypeId();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNotNull(jsonGenerator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(jsonParser50);
        org.junit.Assert.assertNull(charArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(obj53);
    }

    @Test
    public void test674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test674");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        int int81 = readerBasedJsonParser77.getTextLength();
        com.fasterxml.jackson.core.JsonLocation jsonLocation82 = readerBasedJsonParser77.getCurrentLocation();
        java.lang.String str83 = readerBasedJsonParser77.getText();
        boolean boolean84 = readerBasedJsonParser77.hasTextCharacters();
        int int85 = readerBasedJsonParser77._hashSeed;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(jsonLocation82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1779078149) + "'", int85 == (-1779078149));
    }

    @Test
    public void test675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test675");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray78 = new int[] { ' ', 56319, (short) 10, (byte) -1 };
        int[] intArray80 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray78, (int) '#');
        int[] intArray82 = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(intArray80, 100);
        uTF8JsonGenerator70._outputEscapes = intArray80;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator84 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int[] intArray85 = uTF8JsonGenerator70._outputEscapes;
        // The following exception was thrown during execution in test generation
        try {
            uTF8JsonGenerator70.writeBooleanField("", true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[32, 56319, 10, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(jsonGenerator84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[32, 56319, 10, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test676");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.Object obj31 = jsonParser30.getTypeId();
        com.fasterxml.jackson.core.JsonLocation jsonLocation32 = jsonParser30.getTokenLocation();
        long long33 = jsonLocation32.getCharOffset();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(jsonLocation32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test677");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        char[] charArray21 = new char[] { ' ', '#' };
        int int22 = uTF32Reader18.read(charArray21);
        char[] charArray26 = new char[] { ' ', '#', '4' };
        int int29 = uTF32Reader18.read(charArray26, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser30 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        java.lang.String str31 = jsonParser30.nextTextValue();
        com.fasterxml.jackson.core.FormatSchema formatSchema32 = null;
        boolean boolean33 = jsonParser30.canUseSchema(formatSchema32);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = jsonParser30.getLongValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.io.UTF32Reader@646c827d; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(jsonParser30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test678");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        char[] charArray81 = readerBasedJsonParser77._inputBuffer;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger82 = readerBasedJsonParser77.getBigIntegerValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray81);
    }

    @Test
    public void test679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test679");
        com.fasterxml.jackson.core.JsonFactory jsonFactory1 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator2 = jsonFactory1.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext4 = null;
        java.io.InputStream inputStream5 = null;
        byte[] byteArray6 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream9 = new com.fasterxml.jackson.core.io.MergedStream(iOContext4, inputStream5, byteArray6, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext10 = null;
        java.io.InputStream inputStream11 = null;
        byte[] byteArray12 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream15 = new com.fasterxml.jackson.core.io.MergedStream(iOContext10, inputStream11, byteArray12, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader19 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext3, inputStream5, byteArray12, 0, 0, false);
        char[] charArray22 = new char[] { ' ', '#' };
        int int23 = uTF32Reader19.read(charArray22);
        char[] charArray27 = new char[] { ' ', '#', '4' };
        int int30 = uTF32Reader19.read(charArray27, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser31 = jsonFactory1.createParser((java.io.Reader) uTF32Reader19);
        int int33 = jsonParser31.nextIntValue((int) 'a');
        jsonParser31.close();
        com.fasterxml.jackson.core.JsonLocation jsonLocation35 = jsonParser31.getCurrentLocation();
        long long36 = jsonLocation35.getByteOffset();
        com.fasterxml.jackson.core.JsonLocation jsonLocation38 = com.fasterxml.jackson.core.JsonLocation.NA;
        com.fasterxml.jackson.core.JsonParseException jsonParseException39 = new com.fasterxml.jackson.core.JsonParseException("JSON", jsonLocation38);
        com.fasterxml.jackson.core.JsonParseException jsonParseException40 = new com.fasterxml.jackson.core.JsonParseException("", jsonLocation35, (java.lang.Throwable) jsonParseException39);
        java.lang.Object obj41 = jsonLocation35.getSourceRef();
        java.lang.String str42 = jsonLocation35.toString();
        org.junit.Assert.assertNull(inputDecorator2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , #]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(jsonParser31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertNotNull(jsonLocation35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(jsonLocation38);
        org.junit.Assert.assertNotNull(obj41);
    }

    @Test
    public void test680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test680");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.overrideCurrentName("");
        com.fasterxml.jackson.core.JsonToken jsonToken80 = com.fasterxml.jackson.core.JsonToken.VALUE_STRING;
        boolean boolean81 = jsonToken80.isScalarValue();
        byte[] byteArray82 = jsonToken80.asByteArray();
        java.lang.String str83 = readerBasedJsonParser77._getText2(jsonToken80);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertTrue("'" + jsonToken80 + "' != '" + com.fasterxml.jackson.core.JsonToken.VALUE_STRING + "'", jsonToken80.equals(com.fasterxml.jackson.core.JsonToken.VALUE_STRING));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(byteArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test681");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter3 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = jsonFactory5.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext8 = null;
        java.io.InputStream inputStream9 = null;
        byte[] byteArray10 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream13 = new com.fasterxml.jackson.core.io.MergedStream(iOContext8, inputStream9, byteArray10, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext14 = null;
        java.io.InputStream inputStream15 = null;
        byte[] byteArray16 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext14, inputStream15, byteArray16, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader23 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext7, inputStream9, byteArray16, 0, 0, false);
        char[] charArray26 = new char[] { ' ', '#' };
        int int27 = uTF32Reader23.read(charArray26);
        char[] charArray31 = new char[] { ' ', '#', '4' };
        int int34 = uTF32Reader23.read(charArray31, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser35 = jsonFactory5.createParser((java.io.Reader) uTF32Reader23);
        java.io.Writer writer36 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = jsonFactory5.createJsonGenerator(writer36);
        boolean boolean38 = jsonGenerator37.isClosed();
        defaultPrettyPrinter4.writeObjectFieldValueSeparator(jsonGenerator37);
        jsonGenerator37.writeNumberField("[Source: false; line: 1, column: 0]", (int) (short) 100);
        com.fasterxml.jackson.core.JsonGenerator.Feature feature43 = com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator44 = jsonGenerator37.enable(feature43);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter45 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter45.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter48 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter45);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter49 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter45);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter50 = defaultPrettyPrinter45.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter51 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance;
        boolean boolean52 = fixedSpaceIndenter51.isInline();
        boolean boolean53 = fixedSpaceIndenter51.isInline();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter54 = defaultPrettyPrinter50.withArrayIndenter((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter51);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator55 = jsonGenerator44.setPrettyPrinter((com.fasterxml.jackson.core.PrettyPrinter) defaultPrettyPrinter50);
        jsonGenerator44.writeNumber((short) 0);
        com.fasterxml.jackson.core.JsonFactory jsonFactory58 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator59 = jsonFactory58.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext60 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext61 = null;
        java.io.InputStream inputStream62 = null;
        byte[] byteArray63 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream66 = new com.fasterxml.jackson.core.io.MergedStream(iOContext61, inputStream62, byteArray63, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext67 = null;
        java.io.InputStream inputStream68 = null;
        byte[] byteArray69 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream72 = new com.fasterxml.jackson.core.io.MergedStream(iOContext67, inputStream68, byteArray69, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader76 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext60, inputStream62, byteArray69, 0, 0, false);
        char[] charArray79 = new char[] { ' ', '#' };
        int int80 = uTF32Reader76.read(charArray79);
        char[] charArray84 = new char[] { ' ', '#', '4' };
        int int87 = uTF32Reader76.read(charArray84, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser88 = jsonFactory58.createParser((java.io.Reader) uTF32Reader76);
        java.io.Writer writer89 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator90 = jsonFactory58.createJsonGenerator(writer89);
        com.fasterxml.jackson.core.JsonParser jsonParser92 = jsonFactory58.createJsonParser("JSON");
        double double93 = jsonParser92.getValueAsDouble();
        java.io.OutputStream outputStream94 = null;
        int int95 = jsonParser92.releaseBuffered(outputStream94);
        // The following exception was thrown during execution in test generation
        try {
            jsonGenerator44.writeTypeId((java.lang.Object) int95);
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonGenerationException; message: No native support for writing Type Ids");
        } catch (com.fasterxml.jackson.core.JsonGenerationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inputDecorator6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , #]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(jsonParser35);
        org.junit.Assert.assertNotNull(jsonGenerator37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + feature43 + "' != '" + com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII + "'", feature43.equals(com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII));
        org.junit.Assert.assertNotNull(jsonGenerator44);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter50);
        org.junit.Assert.assertNotNull(fixedSpaceIndenter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter54);
        org.junit.Assert.assertNotNull(jsonGenerator55);
        org.junit.Assert.assertNull(inputDecorator59);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[ , #]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(jsonParser88);
        org.junit.Assert.assertNotNull(jsonGenerator90);
        org.junit.Assert.assertNotNull(jsonParser92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test682");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator21 = jsonFactory0.getInputDecorator();
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(inputDecorator21);
    }

    @Test
    public void test683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test683");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        com.fasterxml.jackson.core.io.CharacterEscapes characterEscapes71 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator72 = uTF8JsonGenerator70.setCharacterEscapes(characterEscapes71);
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator73 = uTF8JsonGenerator70.useDefaultPrettyPrinter();
        int int74 = uTF8JsonGenerator70._outputTail;
        com.fasterxml.jackson.core.SerializableString serializableString75 = uTF8JsonGenerator70._rootValueSeparator;
        int int76 = uTF8JsonGenerator70.getFeatureMask();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(jsonGenerator72);
        org.junit.Assert.assertNotNull(jsonGenerator73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(serializableString75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
    }

    @Test
    public void test684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test684");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        char[] charArray78 = readerBasedJsonParser77.getTextCharacters();
        com.fasterxml.jackson.core.JsonToken jsonToken79 = readerBasedJsonParser77.nextToken();
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.Version version81 = readerBasedJsonParser77.version();
        int int82 = readerBasedJsonParser77.getTextLength();
        // The following exception was thrown during execution in test generation
        try {
            double double83 = readerBasedJsonParser77.getDoubleValue();
            org.junit.Assert.fail("Expected exception of type com.fasterxml.jackson.core.JsonParseException; message: Current token (null) not numeric, can not use numeric value accessors? at [Source: com.fasterxml.jackson.core.JsonParseException: hi!; line: 1, column: 1]");
        } catch (com.fasterxml.jackson.core.JsonParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(charArray78);
        org.junit.Assert.assertNull(jsonToken79);
        org.junit.Assert.assertNotNull(version81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test685");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.overrideCurrentName("");
        com.fasterxml.jackson.core.json.JsonReadContext jsonReadContext80 = readerBasedJsonParser77.getParsingContext();
        java.lang.String str82 = readerBasedJsonParser77._handleOddName((int) (short) 100);
        readerBasedJsonParser77.close();
        readerBasedJsonParser77.close();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNotNull(jsonReadContext80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test686");
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter0 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.SerializableString serializableString3 = null;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter4 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter0, serializableString3);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter5 = defaultPrettyPrinter0.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter6 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter();
        defaultPrettyPrinter0.indentArraysWith((com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter) fixedSpaceIndenter6);
        defaultPrettyPrinter0.spacesInObjectEntries(false);
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter10 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter11 = defaultPrettyPrinter10.createInstance();
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter12 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter(defaultPrettyPrinter11);
        com.fasterxml.jackson.core.JsonFactory jsonFactory13 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator14 = jsonFactory13.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext15 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext16 = null;
        java.io.InputStream inputStream17 = null;
        byte[] byteArray18 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream21 = new com.fasterxml.jackson.core.io.MergedStream(iOContext16, inputStream17, byteArray18, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader31 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext15, inputStream17, byteArray24, 0, 0, false);
        char[] charArray34 = new char[] { ' ', '#' };
        int int35 = uTF32Reader31.read(charArray34);
        char[] charArray39 = new char[] { ' ', '#', '4' };
        int int42 = uTF32Reader31.read(charArray39, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser43 = jsonFactory13.createParser((java.io.Reader) uTF32Reader31);
        java.io.Writer writer44 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator45 = jsonFactory13.createJsonGenerator(writer44);
        boolean boolean46 = jsonGenerator45.isClosed();
        jsonGenerator45.writeStartObject();
        jsonGenerator45.writeObjectFieldStart("hi!");
        jsonGenerator45.writeNumberField("hi!", (long) (short) -1);
        defaultPrettyPrinter12.writeObjectFieldValueSeparator(jsonGenerator45);
        com.fasterxml.jackson.core.JsonFactory jsonFactory54 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator55 = jsonFactory54.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext56 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext57 = null;
        java.io.InputStream inputStream58 = null;
        byte[] byteArray59 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream62 = new com.fasterxml.jackson.core.io.MergedStream(iOContext57, inputStream58, byteArray59, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext63 = null;
        java.io.InputStream inputStream64 = null;
        byte[] byteArray65 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream68 = new com.fasterxml.jackson.core.io.MergedStream(iOContext63, inputStream64, byteArray65, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader72 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext56, inputStream58, byteArray65, 0, 0, false);
        char[] charArray75 = new char[] { ' ', '#' };
        int int76 = uTF32Reader72.read(charArray75);
        char[] charArray80 = new char[] { ' ', '#', '4' };
        int int83 = uTF32Reader72.read(charArray80, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser84 = jsonFactory54.createParser((java.io.Reader) uTF32Reader72);
        java.io.Writer writer85 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator86 = jsonFactory54.createJsonGenerator(writer85);
        com.fasterxml.jackson.core.ObjectCodec objectCodec87 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory88 = jsonFactory54.setCodec(objectCodec87);
        java.io.Writer writer89 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator90 = jsonFactory88.createGenerator(writer89);
        defaultPrettyPrinter12.writeEndObject(jsonGenerator90, (-1779289601));
        defaultPrettyPrinter0.writeStartObject(jsonGenerator90);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter5);
        org.junit.Assert.assertNotNull(defaultPrettyPrinter11);
        org.junit.Assert.assertNull(inputDecorator14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ , #]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(jsonParser43);
        org.junit.Assert.assertNotNull(jsonGenerator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(inputDecorator55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[ , #]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(jsonParser84);
        org.junit.Assert.assertNotNull(jsonGenerator86);
        org.junit.Assert.assertNotNull(jsonFactory88);
        org.junit.Assert.assertNotNull(jsonGenerator90);
    }

    @Test
    public void test687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test687");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator1 = jsonFactory0.getInputDecorator();
        boolean boolean2 = jsonFactory0.requiresPropertyOrdering();
        com.fasterxml.jackson.core.JsonFactory jsonFactory3 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator4 = jsonFactory3.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext5 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext6 = null;
        java.io.InputStream inputStream7 = null;
        byte[] byteArray8 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream11 = new com.fasterxml.jackson.core.io.MergedStream(iOContext6, inputStream7, byteArray8, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext12 = null;
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext12, inputStream13, byteArray14, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader21 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext5, inputStream7, byteArray14, 0, 0, false);
        char[] charArray24 = new char[] { ' ', '#' };
        int int25 = uTF32Reader21.read(charArray24);
        char[] charArray29 = new char[] { ' ', '#', '4' };
        int int32 = uTF32Reader21.read(charArray29, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser33 = jsonFactory3.createParser((java.io.Reader) uTF32Reader21);
        int int35 = jsonParser33.nextIntValue((int) 'a');
        int int36 = jsonParser33.getFeatureMask();
        double double37 = jsonParser33.getValueAsDouble();
        java.lang.Object obj38 = jsonParser33.getEmbeddedObject();
        com.fasterxml.jackson.core.JsonParser.Feature feature39 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        boolean boolean40 = jsonParser33.isEnabled(feature39);
        com.fasterxml.jackson.core.JsonFactory jsonFactory41 = jsonFactory0.disable(feature39);
        boolean boolean42 = jsonFactory41.requiresPropertyOrdering();
        com.fasterxml.jackson.core.io.IOContext iOContext43 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext44 = null;
        java.io.InputStream inputStream45 = null;
        byte[] byteArray46 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream49 = new com.fasterxml.jackson.core.io.MergedStream(iOContext44, inputStream45, byteArray46, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext50 = null;
        java.io.InputStream inputStream51 = null;
        byte[] byteArray52 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream55 = new com.fasterxml.jackson.core.io.MergedStream(iOContext50, inputStream51, byteArray52, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader59 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext43, inputStream45, byteArray52, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser62 = jsonFactory41.createParser(byteArray52, 0, (int) (byte) 0);
        boolean boolean63 = jsonFactory41.requiresCustomCodec();
        java.io.OutputStream outputStream64 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator65 = jsonFactory41.createJsonGenerator(outputStream64);
        boolean boolean66 = jsonFactory41.requiresPropertyOrdering();
        org.junit.Assert.assertNull(inputDecorator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputDecorator4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(jsonParser33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + feature39 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature39.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jsonFactory41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(jsonParser62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jsonGenerator65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test688");
        com.fasterxml.jackson.core.JsonFactory jsonFactory0 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version1 = jsonFactory0.version();
        com.fasterxml.jackson.core.io.IOContext iOContext2 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext3 = null;
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream8 = new com.fasterxml.jackson.core.io.MergedStream(iOContext3, inputStream4, byteArray5, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader18 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext2, inputStream4, byteArray11, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser19 = jsonFactory0.createParser((java.io.Reader) uTF32Reader18);
        boolean boolean20 = jsonFactory0.requiresPropertyOrdering();
        java.lang.String str21 = jsonFactory0.getFormatName();
        com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory0.createParser("");
        com.fasterxml.jackson.core.JsonFactory jsonFactory24 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.io.InputDecorator inputDecorator25 = jsonFactory24.getInputDecorator();
        com.fasterxml.jackson.core.io.IOContext iOContext26 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext27 = null;
        java.io.InputStream inputStream28 = null;
        byte[] byteArray29 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream32 = new com.fasterxml.jackson.core.io.MergedStream(iOContext27, inputStream28, byteArray29, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader42 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext26, inputStream28, byteArray35, 0, 0, false);
        char[] charArray45 = new char[] { ' ', '#' };
        int int46 = uTF32Reader42.read(charArray45);
        char[] charArray50 = new char[] { ' ', '#', '4' };
        int int53 = uTF32Reader42.read(charArray50, (int) (short) 100, (int) (byte) 0);
        com.fasterxml.jackson.core.JsonParser jsonParser54 = jsonFactory24.createParser((java.io.Reader) uTF32Reader42);
        java.io.Writer writer55 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator56 = jsonFactory24.createJsonGenerator(writer55);
        com.fasterxml.jackson.core.ObjectCodec objectCodec57 = null;
        com.fasterxml.jackson.core.JsonFactory jsonFactory58 = jsonFactory24.setCodec(objectCodec57);
        java.io.Writer writer59 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator60 = jsonFactory58.createGenerator(writer59);
        java.io.Writer writer61 = null;
        com.fasterxml.jackson.core.JsonGenerator jsonGenerator62 = jsonFactory58.createGenerator(writer61);
        com.fasterxml.jackson.core.JsonParser.Feature feature63 = com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS;
        com.fasterxml.jackson.core.JsonFactory jsonFactory64 = jsonFactory58.enable(feature63);
        com.fasterxml.jackson.core.JsonFactory jsonFactory66 = jsonFactory0.configure(feature63, false);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(jsonParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "JSON" + "'", str21, "JSON");
        org.junit.Assert.assertNotNull(jsonParser23);
        org.junit.Assert.assertNull(inputDecorator25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ , #]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , #, 4]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(jsonParser54);
        org.junit.Assert.assertNotNull(jsonGenerator56);
        org.junit.Assert.assertNotNull(jsonFactory58);
        org.junit.Assert.assertNotNull(jsonGenerator60);
        org.junit.Assert.assertNotNull(jsonGenerator62);
        org.junit.Assert.assertTrue("'" + feature63 + "' != '" + com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS + "'", feature63.equals(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS));
        org.junit.Assert.assertNotNull(jsonFactory64);
        org.junit.Assert.assertNotNull(jsonFactory66);
    }

    @Test
    public void test689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test689");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer8 = iOContext7.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext9 = null;
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream14 = new com.fasterxml.jackson.core.io.MergedStream(iOContext9, inputStream10, byteArray11, 0, (int) (short) -1);
        int int15 = mergedStream14.available();
        boolean boolean16 = mergedStream14.markSupported();
        int int17 = mergedStream14.available();
        int int18 = mergedStream14.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory19 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version20 = jsonFactory19.version();
        com.fasterxml.jackson.core.io.IOContext iOContext21 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext22 = null;
        java.io.InputStream inputStream23 = null;
        byte[] byteArray24 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream27 = new com.fasterxml.jackson.core.io.MergedStream(iOContext22, inputStream23, byteArray24, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext28 = null;
        java.io.InputStream inputStream29 = null;
        byte[] byteArray30 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream33 = new com.fasterxml.jackson.core.io.MergedStream(iOContext28, inputStream29, byteArray30, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader37 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext21, inputStream23, byteArray30, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser38 = jsonFactory19.createParser((java.io.Reader) uTF32Reader37);
        com.fasterxml.jackson.core.JsonFactory jsonFactory40 = jsonFactory19.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString41 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int50 = serializedString41.appendQuotedUTF8(byteArray48, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser53 = jsonFactory19.createParser(byteArray48, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream56 = new com.fasterxml.jackson.core.io.MergedStream(iOContext7, (java.io.InputStream) mergedStream14, byteArray48, (int) (short) 10, 79);
        boolean boolean57 = iOContext7.isResourceManaged();
        com.fasterxml.jackson.core.ObjectCodec objectCodec59 = null;
        java.io.OutputStream outputStream60 = null;
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator61 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 1, objectCodec59, outputStream60);
        com.fasterxml.jackson.core.io.IOContext iOContext62 = null;
        java.io.InputStream inputStream63 = null;
        byte[] byteArray64 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext62, inputStream63, byteArray64, 0, (int) (short) -1);
        boolean boolean68 = mergedStream67.markSupported();
        int int69 = mergedStream67.available();
        int int70 = mergedStream67.available();
        com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper byteSourceJsonBootstrapper71 = new com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper(iOContext7, (java.io.InputStream) mergedStream67);
        int int72 = byteSourceJsonBootstrapper71._bytesPerChar;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(textBuffer8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(jsonParser38);
        org.junit.Assert.assertNotNull(jsonFactory40);
        org.junit.Assert.assertNotNull(serializedString41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(jsonParser53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test690");
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation2 = null;
        java.lang.Throwable throwable3 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException4 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation2, throwable3);
        java.lang.String str5 = jsonParseException4.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext7 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) jsonParseException4, false);
        com.fasterxml.jackson.core.ObjectCodec objectCodec9 = null;
        java.io.OutputStream outputStream10 = null;
        com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler11 = new com.fasterxml.jackson.core.util.BufferRecycler();
        com.fasterxml.jackson.core.JsonLocation jsonLocation13 = null;
        java.lang.Throwable throwable14 = null;
        com.fasterxml.jackson.core.JsonParseException jsonParseException15 = new com.fasterxml.jackson.core.JsonParseException("hi!", jsonLocation13, throwable14);
        java.lang.String str16 = jsonParseException15.getOriginalMessage();
        com.fasterxml.jackson.core.io.IOContext iOContext18 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler11, (java.lang.Object) jsonParseException15, false);
        com.fasterxml.jackson.core.util.TextBuffer textBuffer19 = iOContext18.constructTextBuffer();
        com.fasterxml.jackson.core.io.IOContext iOContext20 = null;
        java.io.InputStream inputStream21 = null;
        byte[] byteArray22 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream25 = new com.fasterxml.jackson.core.io.MergedStream(iOContext20, inputStream21, byteArray22, 0, (int) (short) -1);
        int int26 = mergedStream25.available();
        boolean boolean27 = mergedStream25.markSupported();
        int int28 = mergedStream25.available();
        int int29 = mergedStream25.available();
        com.fasterxml.jackson.core.JsonFactory jsonFactory30 = new com.fasterxml.jackson.core.JsonFactory();
        com.fasterxml.jackson.core.Version version31 = jsonFactory30.version();
        com.fasterxml.jackson.core.io.IOContext iOContext32 = null;
        com.fasterxml.jackson.core.io.IOContext iOContext33 = null;
        java.io.InputStream inputStream34 = null;
        byte[] byteArray35 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream38 = new com.fasterxml.jackson.core.io.MergedStream(iOContext33, inputStream34, byteArray35, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.IOContext iOContext39 = null;
        java.io.InputStream inputStream40 = null;
        byte[] byteArray41 = new byte[] {};
        com.fasterxml.jackson.core.io.MergedStream mergedStream44 = new com.fasterxml.jackson.core.io.MergedStream(iOContext39, inputStream40, byteArray41, 0, (int) (short) -1);
        com.fasterxml.jackson.core.io.UTF32Reader uTF32Reader48 = new com.fasterxml.jackson.core.io.UTF32Reader(iOContext32, inputStream34, byteArray41, 0, 0, false);
        com.fasterxml.jackson.core.JsonParser jsonParser49 = jsonFactory30.createParser((java.io.Reader) uTF32Reader48);
        com.fasterxml.jackson.core.JsonFactory jsonFactory51 = jsonFactory30.setRootValueSeparator("");
        com.fasterxml.jackson.core.io.SerializedString serializedString52 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -65, (byte) 1, (byte) 0, (byte) 0 };
        int int61 = serializedString52.appendQuotedUTF8(byteArray59, (int) ' ');
        com.fasterxml.jackson.core.JsonParser jsonParser64 = jsonFactory30.createParser(byteArray59, 0, 56320);
        com.fasterxml.jackson.core.io.MergedStream mergedStream67 = new com.fasterxml.jackson.core.io.MergedStream(iOContext18, (java.io.InputStream) mergedStream25, byteArray59, (int) (short) 10, 79);
        com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator70 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext7, (int) (byte) 100, objectCodec9, outputStream10, byteArray59, (int) (byte) 10, true);
        java.io.Reader reader72 = null;
        com.fasterxml.jackson.core.ObjectCodec objectCodec73 = null;
        com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer74 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot();
        int int75 = charsToNameCanonicalizer74.collisionCount();
        int int76 = charsToNameCanonicalizer74.bucketCount();
        com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser77 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext7, (int) (byte) -65, reader72, objectCodec73, charsToNameCanonicalizer74);
        readerBasedJsonParser77.close();
        com.fasterxml.jackson.core.ObjectCodec objectCodec79 = null;
        readerBasedJsonParser77._objectCodec = objectCodec79;
        java.lang.Object obj81 = readerBasedJsonParser77.getInputSource();
        com.fasterxml.jackson.core.JsonToken jsonToken82 = readerBasedJsonParser77.nextToken();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(textBuffer19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(jsonParser49);
        org.junit.Assert.assertNotNull(jsonFactory51);
        org.junit.Assert.assertNotNull(serializedString52);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -65, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(jsonParser64);
        org.junit.Assert.assertNotNull(charsToNameCanonicalizer74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 64 + "'", int76 == 64);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNull(jsonToken82);
    }
}
