package org.jsoup.nodes;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.jsoup.nodes.Evaluator.Attribute attribute1 = new org.jsoup.nodes.Evaluator.Attribute("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Evaluator.Tag tag3 = new org.jsoup.nodes.Evaluator.Tag("hi!");
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str7 = document6.outerHtml();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node11 = document10.parentNode;
        java.lang.String str12 = document10.title();
        org.jsoup.nodes.Element element14 = document10.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element15 = document6.appendChild((org.jsoup.nodes.Node) document10);
        boolean boolean16 = tag3.matches((org.jsoup.nodes.Element) document6);
        java.lang.String str17 = document6.toString();
        java.lang.String str19 = document6.attr("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Element element21 = document6.prependElement("<html>\n <head>\n </head>\n <body>\n </body>\n</html>");
        boolean boolean22 = attribute1.matches((org.jsoup.nodes.Element) document6);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str7, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.jsoup.nodes.Element element0 = null;
        org.jsoup.nodes.Element[] elementArray1 = new org.jsoup.nodes.Element[] { element0 };
        org.jsoup.select.Elements elements2 = new org.jsoup.select.Elements(elementArray1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str7 = document6.outerHtml();
        org.jsoup.select.Elements elements8 = document6.getAllElements();
        org.jsoup.select.Elements elements10 = elements8.prepend("");
        org.jsoup.select.Elements elements12 = elements10.prepend("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        int int14 = elements12.lastIndexOf((java.lang.Object) '#');
        elements12.clear();
        boolean boolean16 = elements2.addAll(0, (java.util.Collection<org.jsoup.nodes.Element>) elements12);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements18 = elements2.prepend("&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(elementArray1);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str7, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements14 = document2.select("hi");
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor15 = elements14.listIterator();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(elementItor15);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("hi");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Element element12 = document8.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) document8);
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node17 = document16.parentNode;
        java.lang.String str18 = document16.title();
        org.jsoup.nodes.Attributes attributes19 = document16.attributes();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        org.jsoup.select.Elements elements25 = document22.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element26 = document16.prependChild((org.jsoup.nodes.Node) document22);
        org.jsoup.select.Elements elements28 = document16.select("hi");
        org.jsoup.nodes.Element element29 = document8.appendChild((org.jsoup.nodes.Node) document16);
        org.jsoup.nodes.Element element31 = element29.prependText("#document");
        org.jsoup.nodes.Document document33 = org.jsoup.nodes.Document.createShell(" !");
        org.jsoup.nodes.Element element34 = element31.appendChild((org.jsoup.nodes.Node) document33);
        boolean boolean35 = tag1.matches(element31);
        java.lang.String str36 = element31.data();
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(attributes19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.prepend("hi");
        org.jsoup.select.Elements elements12 = elements10.toggleClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        java.lang.Object[] objArray13 = elements12.toArray();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[hi\n<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\nhi\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\n hi\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\n hi hi!\n</body>\n</html>, \n<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\nhi\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\n hi\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\n hi hi!\n</body>\n</html>, \n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\n hi\n</head>, \n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\n hi hi!\n</body>]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[hi\n<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\nhi\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\n hi\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\n hi hi!\n</body>\n</html>, \n<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\nhi\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\n hi\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\n hi hi!\n</body>\n</html>, \n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\n hi\n</head>, \n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n\nhi!\">\n hi hi!\n</body>]");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("\n<!---->", "\n<!---->");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("");
        java.lang.String str5 = textNode4.nodeName();
        boolean boolean7 = textNode4.hasAttr("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        java.lang.String str8 = textNode4.getWholeText();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#text" + "'", str5, "#text");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        org.jsoup.select.Elements elements14 = document6.getElementsByTag("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element16 = document6.createElement("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated string is empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertNotNull(elements14);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Element element29 = document20.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements30 = element29.getAllElements();
        org.jsoup.nodes.Element element31 = elements30.first();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str35 = document34.outerHtml();
        org.jsoup.select.Elements elements36 = document34.getAllElements();
        java.lang.String str37 = document34.data();
        org.jsoup.nodes.Element element39 = document34.text("");
        org.jsoup.nodes.Node node40 = document34.parentNode;
        org.jsoup.select.Elements elements43 = document34.getElementsByAttributeValue("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>", "<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean44 = elements30.addAll((java.util.Collection<org.jsoup.nodes.Element>) elements43);
        org.jsoup.nodes.Document document48 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node49 = document48.parentNode;
        java.lang.String str50 = document48.title();
        org.jsoup.nodes.Attributes attributes51 = document48.attributes();
        org.jsoup.nodes.Document document54 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node55 = document54.parentNode;
        org.jsoup.select.Elements elements57 = document54.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element58 = document48.prependChild((org.jsoup.nodes.Node) document54);
        org.jsoup.select.Elements elements60 = document54.getElementsByClass("!");
        java.util.Spliterator<org.jsoup.nodes.Element> elementSpliterator61 = elements60.spliterator();
        org.jsoup.nodes.Document document64 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node65 = document64.parentNode;
        java.lang.String str66 = document64.title();
        org.jsoup.nodes.Attributes attributes67 = document64.attributes();
        org.jsoup.nodes.Attribute attribute70 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        java.lang.String str71 = attribute70.html();
        attributes67.put(attribute70);
        java.lang.String str73 = attributes67.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator74 = attributes67.spliterator();
        boolean boolean76 = attributes67.hasKey("<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
        boolean boolean77 = elements60.remove((java.lang.Object) "<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
        boolean boolean78 = elements43.addAll(0, (java.util.Collection<org.jsoup.nodes.Element>) elements60);
        java.util.Iterator<org.jsoup.nodes.Element> elementItor79 = elements60.iterator();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str35, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(elements43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(attributes51);
        org.junit.Assert.assertNotNull(document54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(elements57);
        org.junit.Assert.assertNotNull(element58);
        org.junit.Assert.assertNotNull(elements60);
        org.junit.Assert.assertNotNull(elementSpliterator61);
        org.junit.Assert.assertNotNull(document64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(attributes67);
        org.junit.Assert.assertNotNull(attribute70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi=\"\"" + "'", str71, "hi=\"\"");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + " hi=\"\"" + "'", str73, " hi=\"\"");
        org.junit.Assert.assertNotNull(attributeSpliterator74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(elementItor79);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Element element29 = document20.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Element element30 = element29.firstElementSibling();
        org.jsoup.nodes.Element element32 = element29.append("hi! <html> <head> </head> <body> hi! </body> </html>");
        org.jsoup.nodes.Element element34 = element29.prependElement("<html> <head> </head> <body> hi! </body> </html> <html> <head> </head> <body> hi! </body> </html>  <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNull(element30);
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertNotNull(element34);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        org.jsoup.nodes.Element element3 = new org.jsoup.nodes.Element(tag1, "!");
        boolean boolean4 = tag1.isData();
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node8 = document7.parentNode;
        org.jsoup.select.Elements elements10 = document7.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements12 = elements10.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements14 = elements12.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str16 = elements14.attr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean17 = tag1.equals((java.lang.Object) "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str18 = tag1.toString();
        org.jsoup.nodes.Element element20 = new org.jsoup.nodes.Element(tag1, "[ , !]");
        org.jsoup.select.Elements elements21 = element20.getAllElements();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(elements21);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        org.jsoup.select.Elements elements9 = document6.getElementsByIndexLessThan((int) 'a');
        boolean boolean10 = indexLessThan3.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        org.jsoup.select.Elements elements15 = document13.getAllElements();
        org.jsoup.select.Elements elements16 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan3, (org.jsoup.nodes.Element) document13);
        boolean boolean17 = tag1.matches((org.jsoup.nodes.Element) document13);
        org.jsoup.parser.Tag tag19 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean20 = tag19.preserveWhitespace();
        org.jsoup.nodes.Element element22 = new org.jsoup.nodes.Element(tag19, "\n<!---->");
        org.jsoup.select.Elements elements23 = element22.children();
        boolean boolean24 = tag1.matches(element22);
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node28 = document27.parentNode;
        java.lang.String str29 = document27.title();
        org.jsoup.nodes.Element element31 = document27.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean32 = tag1.matches((org.jsoup.nodes.Element) document27);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(tag19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        org.jsoup.select.Elements elements7 = document4.getElementsByIndexLessThan((int) 'a');
        boolean boolean8 = indexLessThan1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        java.lang.String str13 = document11.title();
        org.jsoup.nodes.Attributes attributes14 = document11.attributes();
        org.jsoup.nodes.Node node17 = document11.attr("hi!", "hi!");
        org.jsoup.select.Elements elements18 = document11.getAllElements();
        boolean boolean19 = indexLessThan1.matches((org.jsoup.nodes.Element) document11);
        org.jsoup.select.Elements elements20 = document11.getAllElements();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node24 = document23.parentNode;
        java.lang.String str25 = document23.title();
        org.jsoup.nodes.Attributes attributes26 = document23.attributes();
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node30 = document29.parentNode;
        org.jsoup.select.Elements elements32 = document29.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element33 = document23.prependChild((org.jsoup.nodes.Node) document29);
        boolean boolean34 = elements20.contains((java.lang.Object) element33);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(elements32);
        org.junit.Assert.assertNotNull(element33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Attribute attribute8 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        java.lang.String str9 = attribute8.html();
        attributes5.put(attribute8);
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator11 = attributes5.spliterator();
        java.lang.String str12 = attributes5.toString();
        boolean boolean14 = attributes5.hasKey("\n<!---->");
        java.lang.String str15 = attributes5.toString();
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor16 = attributes5.iterator();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(attribute8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi=\"\"" + "'", str9, "hi=\"\"");
        org.junit.Assert.assertNotNull(attributeSpliterator11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + " hi=\"\"" + "'", str12, " hi=\"\"");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + " hi=\"\"" + "'", str15, " hi=\"\"");
        org.junit.Assert.assertNotNull(attributeItor16);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.nodes.Element element8 = document2.text("");
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str12 = document11.outerHtml();
        org.jsoup.select.Elements elements13 = document11.getAllElements();
        boolean boolean14 = element8.equals((java.lang.Object) elements13);
        java.lang.String str15 = elements13.html();
        java.lang.String str16 = elements13.text();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str12, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!" + "'", str15, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi! hi!  hi!" + "'", str16, "hi! hi!  hi!");
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting2.value = "hi!";
        attributeWithValueStarting2.key = "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>";
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str10 = document9.outerHtml();
        document9.setBaseUri("hi");
        boolean boolean13 = attributeWithValueStarting2.matches((org.jsoup.nodes.Element) document9);
        org.jsoup.nodes.Node node14 = null;
        // The following exception was thrown during execution in test generation
        try {
            document9.removeChild(node14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str10, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("hi");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Element element12 = document8.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) document8);
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node17 = document16.parentNode;
        java.lang.String str18 = document16.title();
        org.jsoup.nodes.Attributes attributes19 = document16.attributes();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        org.jsoup.select.Elements elements25 = document22.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element26 = document16.prependChild((org.jsoup.nodes.Node) document22);
        org.jsoup.select.Elements elements28 = document16.select("hi");
        org.jsoup.nodes.Element element29 = document8.appendChild((org.jsoup.nodes.Node) document16);
        org.jsoup.nodes.Element element31 = element29.prependText("#document");
        org.jsoup.nodes.Document document33 = org.jsoup.nodes.Document.createShell(" !");
        org.jsoup.nodes.Element element34 = element31.appendChild((org.jsoup.nodes.Node) document33);
        boolean boolean35 = tag1.matches(element31);
        java.util.List<org.jsoup.nodes.Node> nodeList36 = element31.childNodes();
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(attributes19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeList36);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.jsoup.nodes.Attribute attribute2 = org.jsoup.nodes.Attribute.createFromEncoded("hi!", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node10 = document9.parentNode;
        java.lang.String str11 = document9.title();
        org.jsoup.nodes.Element element13 = document9.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element14 = document5.appendChild((org.jsoup.nodes.Node) document9);
        org.jsoup.nodes.Element element16 = document5.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str17 = document5.text();
        org.jsoup.nodes.Element element19 = document5.addClass("#document");
        boolean boolean20 = attribute2.equals((java.lang.Object) document5);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str24 = document23.nodeName();
        org.jsoup.select.Elements elements26 = document23.getElementsByAttribute("\n<!---->");
        boolean boolean27 = attribute2.equals((java.lang.Object) document23);
        java.lang.String str28 = document23.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element30 = document23.child((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(attribute2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str17, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#document" + "'", str24, "#document");
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "#document" + "'", str28, "#document");
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.jsoup.nodes.Attribute attribute2 = org.jsoup.nodes.Attribute.createFromEncoded("hi!", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node10 = document9.parentNode;
        java.lang.String str11 = document9.title();
        org.jsoup.nodes.Element element13 = document9.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element14 = document5.appendChild((org.jsoup.nodes.Node) document9);
        org.jsoup.nodes.Element element16 = document5.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str17 = document5.text();
        org.jsoup.nodes.Element element19 = document5.addClass("#document");
        boolean boolean20 = attribute2.equals((java.lang.Object) document5);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str24 = document23.nodeName();
        org.jsoup.select.Elements elements26 = document23.getElementsByAttribute("\n<!---->");
        boolean boolean27 = attribute2.equals((java.lang.Object) document23);
        java.lang.String str28 = document23.baseUri;
        org.junit.Assert.assertNotNull(attribute2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str17, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#document" + "'", str24, "#document");
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.nodes.Element element4 = document2.appendElement("\n&lt;!----&gt;");
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node8 = document7.parentNode;
        java.lang.String str9 = document7.title();
        org.jsoup.nodes.Attributes attributes10 = document7.attributes();
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        org.jsoup.select.Elements elements16 = document13.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element17 = document7.prependChild((org.jsoup.nodes.Node) document13);
        java.lang.String str18 = document13.baseUri();
        org.jsoup.nodes.Document document21 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str22 = document21.outerHtml();
        org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node26 = document25.parentNode;
        java.lang.String str27 = document25.title();
        org.jsoup.nodes.Element element29 = document25.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element30 = document21.appendChild((org.jsoup.nodes.Node) document25);
        org.jsoup.nodes.Attributes attributes31 = document25.attributes();
        document13.addChild((org.jsoup.nodes.Node) document25);
        org.jsoup.nodes.Element element34 = document25.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements35 = element34.getAllElements();
        org.jsoup.nodes.Element element37 = element34.prepend("<!---->=\"\"");
        java.util.List<org.jsoup.nodes.Node> nodeList38 = element34.childNodes;
        org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str42 = document41.outerHtml();
        org.jsoup.select.Elements elements43 = document41.getAllElements();
        java.lang.String str44 = document41.data();
        org.jsoup.nodes.Element element46 = document41.text("");
        org.jsoup.select.Elements elements48 = element46.getElementsByIndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Element element49 = element34.prependChild((org.jsoup.nodes.Node) element46);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element50 = element4.prependChild((org.jsoup.nodes.Node) element49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.lang.NotImplementedException; message: Cannot (yet) move nodes in tree");
        } catch (org.apache.commons.lang.NotImplementedException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str22, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(attributes31);
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str42, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertNotNull(element49);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node8 = document2.parentNode;
        org.jsoup.select.Elements elements10 = document2.getElementsByIndexGreaterThan((int) '4');
        java.lang.String str11 = document2.baseUri();
        org.jsoup.nodes.Element element13 = document2.appendText("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements16 = document2.getElementsByAttributeValueEnding("", "#comment");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated string is empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(element13);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        int int6 = elements5.size();
        org.jsoup.select.Elements elements8 = elements5.toggleClass("#document");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements10 = elements8.select("!");
            org.junit.Assert.fail("Expected exception of type org.jsoup.select.Selector.SelectorParseException; message: Could not parse query !");
        } catch (org.jsoup.select.Selector.SelectorParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(elements8);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements14 = document2.select("hi");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        java.lang.String str20 = document17.data();
        org.jsoup.nodes.Element element22 = document17.text("");
        org.jsoup.nodes.Node node23 = document17.parentNode;
        org.jsoup.select.Elements elements25 = document17.getElementsByIndexGreaterThan((int) '4');
        boolean boolean26 = elements14.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements25);
        org.jsoup.select.Elements elements28 = elements25.select(" hi=\"\"");
        org.jsoup.select.Elements elements30 = elements28.val("\n&lt;!----&gt;");
        boolean boolean32 = elements28.hasClass("<html>\n<head>\n</head>\n<body> #text\n</body>\n</html>\n<html> \n<head> \n</head> \n<body>\n  head  \n</body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.toggleClass("#document");
        org.jsoup.select.Elements elements12 = elements10.select("#declaration");
        org.jsoup.select.Elements elements14 = elements12.removeAttr("<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>&lt;html class=&quot; hi&quot;&gt; &lt;head class=&quot; hi&quot;&gt; &lt;/head&gt; &lt;body class=&quot; hi&quot;&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;head class=&quot; hi&quot;&gt; &lt;/head&gt; &lt;body class=&quot; hi&quot;&gt; hi! &lt;/body&gt; hi!");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elements14);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        java.lang.String str3 = document2.baseUri();
        java.lang.String str4 = document2.html();
        org.jsoup.nodes.Document document5 = document2.normalise();
        org.jsoup.nodes.Document document7 = org.jsoup.nodes.Document.createShell("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str8 = document7.baseUri();
        document5.addChild((org.jsoup.nodes.Node) document7);
        org.jsoup.nodes.Element element11 = document7.html("\n&lt;!----&gt;");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi" + "'", str3, "hi");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>" + "'", str4, "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str8, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(element11);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element12 = document6.nextElementSibling();
        org.jsoup.select.Elements elements13 = document6.siblingElements();
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream14 = elements13.stream();
        boolean boolean15 = elements13.isEmpty();
        boolean boolean16 = elements13.hasText();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNull(element12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elementStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parse("");
        org.jsoup.select.Elements elements3 = document1.select("[!]");
        java.lang.StringBuilder stringBuilder4 = null;
        // The following exception was thrown during execution in test generation
        try {
            document1.outerHtml(stringBuilder4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(elements3);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements14 = document2.select("hi");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        java.lang.String str20 = document17.data();
        org.jsoup.nodes.Element element22 = document17.text("");
        org.jsoup.nodes.Node node23 = document17.parentNode;
        org.jsoup.select.Elements elements25 = document17.getElementsByIndexGreaterThan((int) '4');
        boolean boolean26 = elements14.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements25);
        org.jsoup.nodes.Element element27 = elements25.first();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(element27);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.jsoup.nodes.Evaluator.Attribute attribute1 = new org.jsoup.nodes.Evaluator.Attribute("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        java.lang.String str6 = document4.title();
        org.jsoup.nodes.Attributes attributes7 = document4.attributes();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node11 = document10.parentNode;
        org.jsoup.select.Elements elements13 = document10.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element14 = document4.prependChild((org.jsoup.nodes.Node) document10);
        org.jsoup.select.Elements elements16 = document4.select("hi");
        org.jsoup.select.Elements elements17 = document4.children();
        boolean boolean18 = attribute1.matches((org.jsoup.nodes.Element) document4);
        java.lang.String str19 = document4.id();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        org.jsoup.select.Elements elements25 = document22.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream26 = elements25.stream();
        org.jsoup.select.Elements elements28 = elements25.toggleClass("[ , !]");
        java.lang.Integer int29 = org.jsoup.nodes.Node.indexInList((org.jsoup.nodes.Element) document4, (java.util.List<org.jsoup.nodes.Element>) elements25);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(elementStream26);
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNull(int29);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("org.jsoup.select.Selector$SelectorParseException: <html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>", "#data");
        java.lang.String str3 = document2.outerHtml();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html> \n<head> \n</head> \n<body> org.jsoup.select.Selector$SelectorParseException:  hi!  &lt;#root&gt; \n <html> \n  <head> \n  </head> \n  <body>\n    &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n  </body>\n </html>\n</body>\n</html>" + "'", str3, "<html> \n<head> \n</head> \n<body> org.jsoup.select.Selector$SelectorParseException:  hi!  &lt;#root&gt; \n <html> \n  <head> \n  </head> \n  <body>\n    &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n  </body>\n </html>\n</body>\n</html>");
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements9 = elements7.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.Class<?> wildcardClass13 = document12.getClass();
        int int14 = elements7.lastIndexOf((java.lang.Object) document12);
        org.jsoup.select.Elements elements16 = elements7.eq((int) (short) 10);
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor18 = elements7.listIterator((int) (byte) 0);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(elementItor18);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.jsoup.safety.Whitelist whitelist1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.jsoup.Jsoup.isValid("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!", whitelist1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        java.lang.String str6 = document4.title();
        org.jsoup.nodes.Element element7 = document1.appendChild((org.jsoup.nodes.Node) document4);
        org.jsoup.nodes.Element element8 = document4.empty();
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(element8);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting2.value = "hi!";
        java.lang.String str5 = attributeWithValueStarting2.value;
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        java.lang.String str12 = document8.text();
        org.jsoup.nodes.Element element14 = document8.text("");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        boolean boolean20 = element14.equals((java.lang.Object) elements19);
        boolean boolean21 = attributeWithValueStarting2.matches(element14);
        java.lang.String str22 = element14.text();
        org.jsoup.parser.Tag tag23 = element14.tag();
        boolean boolean24 = tag23.isBlock();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str19 = document18.outerHtml();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Element element26 = document22.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Attributes attributes28 = document22.attributes();
        java.lang.String str29 = document22.title();
        int int30 = elements15.lastIndexOf((java.lang.Object) document22);
        org.jsoup.nodes.Element element32 = document22.appendText("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements34 = element32.getElementsByClass("\n<!---->");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element36 = element32.child((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str19, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertNotNull(elements34);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.select.Elements elements3 = document2.getAllElements();
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) (short) 10);
        org.jsoup.nodes.Node node8 = document2.attr("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>", "#comment");
        java.lang.String str9 = document2.tagName();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "#root" + "'", str9, "#root");
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.jsoup.nodes.Evaluator.AllElements allElements0 = new org.jsoup.nodes.Evaluator.AllElements();
        org.jsoup.nodes.Element element1 = null;
        boolean boolean2 = allElements0.matches(element1);
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.select.Elements elements6 = document5.getAllElements();
        boolean boolean7 = allElements0.matches((org.jsoup.nodes.Element) document5);
        org.jsoup.nodes.Element element8 = null;
        boolean boolean9 = allElements0.matches(element8);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element30 = document20.prependChild((org.jsoup.nodes.Node) document29);
        org.jsoup.select.Elements elements31 = document29.siblingElements();
        org.jsoup.nodes.Node node32 = document29.nextSibling();
        document29.baseUri = "<?hi>";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements36 = document29.select("<html>\n<head>\n</head>\n<body>\n head\n</body>\n</html>");
            org.junit.Assert.fail("Expected exception of type org.jsoup.select.Selector.SelectorParseException; message: Could not parse query <html>?<head>?</head>?<body>? head?</body>?</html>");
        } catch (org.jsoup.select.Selector.SelectorParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(node32);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("hi! <html> <head> </head> <body> hi! </body> </html>");
        org.jsoup.nodes.Element element2 = document1.empty();
        boolean boolean3 = element2.hasText();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.jsoup.safety.Whitelist whitelist1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.jsoup.Jsoup.isValid("<html>\n<head>\n</head>\n<body> #text\n</body>\n</html>\n<html> \n<head> \n</head> \n<body>\n  head  \n</body>\n</html>", whitelist1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        java.lang.String str3 = document2.baseUri();
        java.lang.String str4 = document2.html();
        org.jsoup.nodes.Document document5 = document2.normalise();
        java.lang.String str7 = document5.attr("<html class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi" + "'", str3, "hi");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>" + "'", str4, "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        document2.title("<html>\n <head>\n </head>\n <body>\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.toggleClass("[ , !]");
        org.jsoup.select.Elements elements10 = elements8.removeClass("#data");
        org.jsoup.select.Elements elements11 = new org.jsoup.select.Elements((java.util.List<org.jsoup.nodes.Element>) elements10);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor15 = attributes12.iterator();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Attributes attributes21 = document18.attributes();
        java.lang.String str22 = attributes21.html();
        attributes12.addAll(attributes21);
        attributes12.put("head", "[ , #, d, o, c, u, m, e, n, t]");
        java.lang.String str27 = attributes12.toString();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(attributeItor15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + " head=\"[ , #, d, o, c, u, m, e, n, t]\"" + "'", str27, " head=\"[ , #, d, o, c, u, m, e, n, t]\"");
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        int int9 = elements8.size();
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str13 = document12.outerHtml();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node17 = document16.parentNode;
        java.lang.String str18 = document16.title();
        org.jsoup.nodes.Element element20 = document16.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element21 = document12.appendChild((org.jsoup.nodes.Node) document16);
        org.jsoup.nodes.Node node22 = document16.parentNode;
        org.jsoup.nodes.Element[] elementArray23 = new org.jsoup.nodes.Element[] { document16 };
        org.jsoup.select.Elements elements24 = new org.jsoup.select.Elements(elementArray23);
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node29 = document28.parentNode;
        java.lang.String str30 = document28.title();
        org.jsoup.nodes.Attributes attributes31 = document28.attributes();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node35 = document34.parentNode;
        org.jsoup.select.Elements elements37 = document34.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element38 = document28.prependChild((org.jsoup.nodes.Node) document34);
        java.util.List<org.jsoup.nodes.Node> nodeList39 = document28.childNodes;
        org.jsoup.select.Elements elements41 = document28.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str45 = document44.outerHtml();
        org.jsoup.nodes.Document document48 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node49 = document48.parentNode;
        java.lang.String str50 = document48.title();
        org.jsoup.nodes.Element element52 = document48.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element53 = document44.appendChild((org.jsoup.nodes.Node) document48);
        org.jsoup.nodes.Attributes attributes54 = document48.attributes();
        java.lang.String str55 = document48.title();
        int int56 = elements41.lastIndexOf((java.lang.Object) document48);
        org.jsoup.select.Elements elements58 = elements41.eq((int) '#');
        boolean boolean59 = elements24.addAll(0, (java.util.Collection<org.jsoup.nodes.Element>) elements58);
        boolean boolean60 = elements8.addAll((java.util.Collection<org.jsoup.nodes.Element>) elements58);
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream61 = elements58.stream();
        java.lang.String str62 = elements58.text();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str13, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(elementArray23);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(attributes31);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(elements37);
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertNotNull(nodeList39);
        org.junit.Assert.assertNotNull(elements41);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str45, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(element52);
        org.junit.Assert.assertNotNull(element53);
        org.junit.Assert.assertNotNull(attributes54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(elements58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(elementStream61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.canContainBlock();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str7 = document6.outerHtml();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node11 = document10.parentNode;
        java.lang.String str12 = document10.title();
        org.jsoup.nodes.Element element14 = document10.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element15 = document6.appendChild((org.jsoup.nodes.Node) document10);
        org.jsoup.nodes.Attributes attributes16 = document10.attributes();
        boolean boolean18 = attributes16.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor19 = attributes16.iterator();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Attributes attributes25 = document22.attributes();
        java.lang.String str26 = attributes25.html();
        attributes16.addAll(attributes25);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor28 = attributes16.iterator();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str32 = document31.outerHtml();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        java.lang.String str37 = document35.title();
        org.jsoup.nodes.Element element39 = document35.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element40 = document31.appendChild((org.jsoup.nodes.Node) document35);
        org.jsoup.nodes.Attributes attributes41 = document35.attributes();
        boolean boolean43 = attributes41.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor44 = attributes41.iterator();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node48 = document47.parentNode;
        java.lang.String str49 = document47.title();
        org.jsoup.nodes.Attributes attributes50 = document47.attributes();
        java.lang.String str51 = attributes50.html();
        attributes41.addAll(attributes50);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor53 = attributes50.iterator();
        attributes16.addAll(attributes50);
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator55 = attributes50.spliterator();
        org.jsoup.nodes.Element element56 = new org.jsoup.nodes.Element(tag1, "[!]", attributes50);
        org.jsoup.nodes.TextNode textNode59 = org.jsoup.nodes.TextNode.createFromEncoded("\n<!---->", "\n<!---->");
        boolean boolean60 = textNode59.isBlank();
        org.jsoup.nodes.TextNode textNode62 = textNode59.text("hi");
        org.jsoup.nodes.Element element63 = element56.appendChild((org.jsoup.nodes.Node) textNode62);
        org.jsoup.nodes.Element element65 = element63.val("<!---->=\"\"");
        org.jsoup.nodes.Element element67 = element65.val("hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str7, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(attributeItor19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(attributes25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(attributeItor28);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str32, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(attributes41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(attributeItor44);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(attributes50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(attributeItor53);
        org.junit.Assert.assertNotNull(attributeSpliterator55);
        org.junit.Assert.assertNotNull(textNode59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(textNode62);
        org.junit.Assert.assertNotNull(element63);
        org.junit.Assert.assertNotNull(element65);
        org.junit.Assert.assertNotNull(element67);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements14 = document2.select("hi");
        org.jsoup.select.Elements elements15 = document2.children();
        org.jsoup.nodes.Element element16 = null;
        org.jsoup.nodes.Element[] elementArray17 = new org.jsoup.nodes.Element[] { element16 };
        org.jsoup.select.Elements elements18 = new org.jsoup.select.Elements(elementArray17);
        boolean boolean19 = elements15.remove((java.lang.Object) elements18);
        java.lang.String str20 = elements15.val();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elementArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements9 = elements7.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str11 = elements9.attr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str20 = document19.outerHtml();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node24 = document23.parentNode;
        java.lang.String str25 = document23.title();
        org.jsoup.nodes.Element element27 = document23.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element28 = document19.appendChild((org.jsoup.nodes.Node) document23);
        org.jsoup.nodes.Node node29 = document23.parentNode;
        document14.setParentNode(node29);
        boolean boolean31 = elements9.remove((java.lang.Object) document14);
        java.lang.String str32 = document14.toString();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str20, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>" + "'", str32, "<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("hi! <html> <head> </head> <body> hi! </body> </html>", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        org.jsoup.select.Elements elements8 = document5.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream9 = elements8.stream();
        boolean boolean11 = elements8.hasClass("");
        java.lang.Integer int12 = org.jsoup.nodes.Node.indexInList((org.jsoup.nodes.Element) document2, (java.util.List<org.jsoup.nodes.Element>) elements8);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elementStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.select.Elements elements3 = document2.getAllElements();
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) (short) 10);
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting8 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting8.value = "hi!";
        attributeWithValueStarting8.key = "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>";
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str16 = document15.outerHtml();
        document15.setBaseUri("hi");
        boolean boolean19 = attributeWithValueStarting8.matches((org.jsoup.nodes.Element) document15);
        boolean boolean21 = document15.hasClass("[ , #, d, o, c, u, m, e, n, t]");
        boolean boolean22 = elements5.contains((java.lang.Object) document15);
        org.jsoup.select.Elements elements24 = elements5.wrap("#data");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str16, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(elements24);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.toggleClass("#document");
        java.util.Iterator<org.jsoup.nodes.Element> elementItor11 = elements10.iterator();
        java.lang.String str12 = elements10.outerHtml();
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream13 = elements10.stream();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elementItor11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>\n</html>\n\n<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>\n</html>\n\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>" + "'", str12, "<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>\n</html>\n\n<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>\n</html>\n\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>");
        org.junit.Assert.assertNotNull(elementStream13);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.parser.Tag tag3 = document2.tag();
        org.jsoup.nodes.Element element5 = new org.jsoup.nodes.Element(tag3, "\n&lt;!----&gt;");
        boolean boolean6 = tag3.canContainBlock();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.outerHtml();
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Element element18 = document14.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document10.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Attributes attributes20 = document14.attributes();
        java.lang.String str22 = attributes20.get("hi!");
        java.lang.String str24 = attributes20.get("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = new org.jsoup.nodes.Element(tag3, "<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>", attributes20);
        boolean boolean26 = tag3.isInline();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str11, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        org.jsoup.nodes.Element element3 = new org.jsoup.nodes.Element(tag1, "!");
        boolean boolean4 = tag1.isData();
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node8 = document7.parentNode;
        org.jsoup.select.Elements elements10 = document7.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements12 = elements10.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements14 = elements12.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str16 = elements14.attr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean17 = tag1.equals((java.lang.Object) "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str18 = tag1.toString();
        org.jsoup.nodes.Element element20 = new org.jsoup.nodes.Element(tag1, "[ , !]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements22 = element20.select("<?head>");
            org.junit.Assert.fail("Expected exception of type org.jsoup.select.Selector.SelectorParseException; message: Could not parse query <?head>");
        } catch (org.jsoup.select.Selector.SelectorParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.jsoup.nodes.Node node4 = document1.attr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!", "#text");
        java.lang.StringBuilder stringBuilder5 = null;
        // The following exception was thrown during execution in test generation
        try {
            document1.indent(stringBuilder5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("hi!");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Element element12 = document8.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) document8);
        boolean boolean14 = tag1.matches((org.jsoup.nodes.Element) document4);
        java.lang.String str15 = document4.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node17 = document4.childNode((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "#document" + "'", str15, "#document");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.jsoup.nodes.Evaluator.Id id1 = new org.jsoup.nodes.Evaluator.Id("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Document document3 = org.jsoup.nodes.Document.createShell("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element5 = document3.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        boolean boolean6 = id1.matches(element5);
        org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parseBodyFragment("hi! <html> <head> </head> <body> hi! </body> </html>");
        boolean boolean9 = id1.matches((org.jsoup.nodes.Element) document8);
        int int10 = document8.nodeDepth();
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertNotNull(element5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.jsoup.safety.Whitelist whitelist1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.jsoup.Jsoup.clean(" head=\"[ , #, d, o, c, u, m, e, n, t]\"", whitelist1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.jsoup.nodes.Evaluator.AllElements allElements0 = new org.jsoup.nodes.Evaluator.AllElements();
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        boolean boolean4 = allElements0.matches((org.jsoup.nodes.Element) document3);
        java.lang.String str5 = document3.val();
        java.lang.String str6 = document3.baseUri;
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi" + "'", str6, "hi");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements14 = document2.select("hi");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        java.lang.String str20 = document17.data();
        org.jsoup.nodes.Element element22 = document17.text("");
        org.jsoup.nodes.Node node23 = document17.parentNode;
        org.jsoup.select.Elements elements25 = document17.getElementsByIndexGreaterThan((int) '4');
        boolean boolean26 = elements14.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements25);
        org.jsoup.select.Elements elements28 = elements14.removeClass("");
        int int29 = elements14.size();
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str33 = document32.outerHtml();
        org.jsoup.nodes.Document document36 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node37 = document36.parentNode;
        java.lang.String str38 = document36.title();
        org.jsoup.nodes.Element element40 = document36.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element41 = document32.appendChild((org.jsoup.nodes.Node) document36);
        org.jsoup.nodes.Element element43 = document32.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str44 = document32.text();
        org.jsoup.nodes.Element element46 = document32.addClass("#document");
        java.lang.String str47 = element46.baseUri;
        org.jsoup.nodes.Element element49 = element46.prependText("hi! hi! hi!");
        boolean boolean50 = elements14.equals((java.lang.Object) element49);
        boolean boolean51 = elements14.hasText();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str33, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(element41);
        org.junit.Assert.assertNotNull(element43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str44, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(element49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.DataNode dataNode6 = org.jsoup.nodes.DataNode.createFromEncoded("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!", "");
        java.lang.String str7 = dataNode6.getWholeData();
        org.jsoup.nodes.Node node9 = dataNode6.removeAttr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element10 = document2.appendChild((org.jsoup.nodes.Node) dataNode6);
        document2.setBaseUri("");
        java.util.Set<java.lang.String> strSet13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element14 = document2.classNames(strSet13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(dataNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!" + "'", str7, "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(element10);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.jsoup.nodes.Evaluator.Class class1 = new org.jsoup.nodes.Evaluator.Class("");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Element element12 = document8.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) document8);
        org.jsoup.nodes.Element element15 = document4.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str16 = document4.text();
        org.jsoup.select.Elements elements18 = document4.getElementsByIndexLessThan((int) (byte) 1);
        document4.title(" !");
        boolean boolean21 = class1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node25 = document24.parentNode;
        java.lang.String str26 = document24.title();
        org.jsoup.nodes.Attributes attributes27 = document24.attributes();
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node31 = document30.parentNode;
        org.jsoup.select.Elements elements33 = document30.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element34 = document24.prependChild((org.jsoup.nodes.Node) document30);
        java.util.List<org.jsoup.nodes.Node> nodeList35 = document24.childNodes;
        boolean boolean36 = document24.hasText();
        org.jsoup.nodes.Node node37 = document24.parent();
        java.lang.String str38 = document24.html();
        boolean boolean39 = class1.matches((org.jsoup.nodes.Element) document24);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str16, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(attributes27);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str38, "<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element12 = document6.nextElementSibling();
        org.jsoup.select.Elements elements13 = document6.siblingElements();
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream14 = elements13.stream();
        org.jsoup.select.Elements elements16 = elements13.val("hi");
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        org.jsoup.select.Elements elements21 = document19.getAllElements();
        org.jsoup.nodes.Element element23 = document19.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements24 = element23.getAllElements();
        java.util.List<org.jsoup.nodes.Node> nodeList25 = element23.childNodes;
        int int26 = elements13.lastIndexOf((java.lang.Object) element23);
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node30 = document29.parentNode;
        java.lang.String str31 = document29.title();
        org.jsoup.nodes.Attributes attributes32 = document29.attributes();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        org.jsoup.select.Elements elements38 = document35.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element39 = document29.prependChild((org.jsoup.nodes.Node) document35);
        org.jsoup.select.Elements elements41 = document29.select("hi");
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str45 = document44.outerHtml();
        org.jsoup.select.Elements elements46 = document44.getAllElements();
        java.lang.String str47 = document44.data();
        org.jsoup.nodes.Element element49 = document44.text("");
        org.jsoup.nodes.Node node50 = document44.parentNode;
        org.jsoup.select.Elements elements52 = document44.getElementsByIndexGreaterThan((int) '4');
        boolean boolean53 = elements41.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements52);
        boolean boolean54 = elements52.hasText();
        java.lang.String str56 = elements52.attr(" !");
        boolean boolean57 = elements13.equals((java.lang.Object) str56);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNull(element12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elementStream14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(nodeList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(attributes32);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(elements41);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str45, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(element49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(elements52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.select.Elements elements3 = document2.getAllElements();
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) (short) 10);
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting8 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting8.value = "hi!";
        attributeWithValueStarting8.key = "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>";
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str16 = document15.outerHtml();
        document15.setBaseUri("hi");
        boolean boolean19 = attributeWithValueStarting8.matches((org.jsoup.nodes.Element) document15);
        boolean boolean21 = document15.hasClass("[ , #, d, o, c, u, m, e, n, t]");
        boolean boolean22 = elements5.contains((java.lang.Object) document15);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements25 = document15.getElementsByAttributeValue("hi! hi!  hi!", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated string is empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str16, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        org.jsoup.select.Elements elements9 = document6.getElementsByIndexLessThan((int) 'a');
        boolean boolean10 = indexLessThan3.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        org.jsoup.select.Elements elements15 = document13.getAllElements();
        org.jsoup.select.Elements elements16 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan3, (org.jsoup.nodes.Element) document13);
        boolean boolean17 = tag1.matches((org.jsoup.nodes.Element) document13);
        document13.baseUri = "hi=\"\"";
        org.jsoup.nodes.Element element21 = document13.appendText("");
        org.jsoup.nodes.Element element23 = element21.prependText(" !");
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node27 = document26.parentNode;
        java.lang.String str28 = document26.title();
        org.jsoup.nodes.Attributes attributes29 = document26.attributes();
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node33 = document32.parentNode;
        org.jsoup.select.Elements elements35 = document32.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element36 = document26.prependChild((org.jsoup.nodes.Node) document32);
        java.lang.String str37 = document32.baseUri();
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str41 = document40.outerHtml();
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node45 = document44.parentNode;
        java.lang.String str46 = document44.title();
        org.jsoup.nodes.Element element48 = document44.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element49 = document40.appendChild((org.jsoup.nodes.Node) document44);
        org.jsoup.nodes.Attributes attributes50 = document44.attributes();
        document32.addChild((org.jsoup.nodes.Node) document44);
        org.jsoup.nodes.Document document53 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element54 = document44.prependChild((org.jsoup.nodes.Node) document53);
        org.jsoup.select.Elements elements55 = document53.siblingElements();
        boolean boolean56 = element21.equals((java.lang.Object) document53);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(attributes29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str41, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(element48);
        org.junit.Assert.assertNotNull(element49);
        org.junit.Assert.assertNotNull(attributes50);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNotNull(element54);
        org.junit.Assert.assertNotNull(elements55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str8 = document7.outerHtml();
        org.jsoup.select.Elements elements9 = document7.getAllElements();
        java.lang.String str10 = document7.data();
        org.jsoup.nodes.Element element12 = document7.text("");
        org.jsoup.nodes.Node node13 = document7.parentNode;
        org.jsoup.select.Elements elements15 = document7.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element17 = document7.text("hi=\"\"");
        org.jsoup.select.Elements elements18 = document7.children();
        org.jsoup.nodes.Element element21 = document7.attr("hi!", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        boolean boolean22 = elements4.remove((java.lang.Object) element21);
        java.lang.Object[] objArray23 = elements4.toArray();
        org.jsoup.nodes.Element element24 = null;
        boolean boolean25 = elements4.add(element24);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str8, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>, \n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>, \n<head>\n</head>, \n<body> hi!\n</body>]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>, \n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>, \n<head>\n</head>, \n<body> hi!\n</body>]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str8 = document7.outerHtml();
        org.jsoup.select.Elements elements9 = document7.getAllElements();
        java.lang.String str10 = document7.data();
        org.jsoup.nodes.Element element12 = document7.text("");
        org.jsoup.nodes.Node node13 = document7.parentNode;
        org.jsoup.select.Elements elements15 = document7.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element17 = document7.text("hi=\"\"");
        org.jsoup.select.Elements elements18 = document7.children();
        org.jsoup.nodes.Element element21 = document7.attr("hi!", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        boolean boolean22 = elements4.remove((java.lang.Object) element21);
        java.lang.String str23 = element21.tagName();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str8, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "#root" + "'", str23, "#root");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.jsoup.nodes.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.nodes.Evaluator.AttributeWithValueEnding("hi=\"\"", "#document");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.nodeName();
        org.jsoup.select.Elements elements8 = document5.getElementsByAttribute("\n<!---->");
        boolean boolean9 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document5);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#document" + "'", str6, "#document");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.jsoup.select.Elements elements4 = document1.getElementsByAttributeValueStarting("head", "#document");
        java.lang.Object[] objArray5 = elements4.toArray();
        org.jsoup.select.Elements elements8 = elements4.attr("[ , #, d, o, c, u, m, e, n, t]", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.Spliterator<org.jsoup.nodes.Element> elementSpliterator9 = elements8.spliterator();
        java.lang.String str10 = elements8.text();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elementSpliterator9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("");
        document1.baseUri = "";
        org.jsoup.select.Elements elements5 = document1.getElementsByIndexEquals((int) (byte) -1);
        org.jsoup.nodes.Document document6 = document1.normalise();
        org.jsoup.nodes.Element element8 = document6.appendText("\n<!---->");
        org.jsoup.select.Elements elements11 = document6.getElementsByAttributeValueNot("#text", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        java.util.Set<java.lang.String> strSet12 = document6.classNames();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.select.Elements elements9 = document2.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        java.lang.String str15 = document13.title();
        org.jsoup.nodes.Attributes attributes16 = document13.attributes();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        org.jsoup.select.Elements elements22 = document19.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element23 = document13.prependChild((org.jsoup.nodes.Node) document19);
        java.util.List<org.jsoup.nodes.Node> nodeList24 = document13.childNodes;
        org.jsoup.select.Elements elements26 = document13.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements28 = elements26.removeAttr("hi");
        org.jsoup.select.Elements elements29 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements28);
        org.jsoup.select.Elements elements31 = elements29.select("hi");
        org.jsoup.select.Elements elements33 = elements29.eq((int) '4');
        org.jsoup.select.Elements elements35 = elements33.wrap("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = elements9.addAll((int) (byte) -1, (java.util.Collection<org.jsoup.nodes.Element>) elements35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(nodeList24);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertNotNull(elements35);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.nodes.Element element8 = document2.text("");
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str12 = document11.outerHtml();
        org.jsoup.select.Elements elements13 = document11.getAllElements();
        boolean boolean14 = element8.equals((java.lang.Object) elements13);
        boolean boolean16 = element8.hasClass("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        java.lang.String str17 = element8.toString();
        org.jsoup.nodes.Element element19 = element8.appendText("<!---->=\"\"");
        org.jsoup.select.Elements elements21 = element19.getElementsByIndexEquals((int) ' ');
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str12, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body>\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(elements21);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element3 = document1.appendText("<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements6 = document1.getElementsByAttributeValueEnding("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!", "<html>\n<head>\n</head>\n<body>\n</body>\n</html><<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>>");
        java.lang.String str7 = elements6.val();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node8 = document2.parentNode;
        org.jsoup.select.Elements elements10 = document2.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element12 = document2.text("hi=\"\"");
        org.jsoup.select.Elements elements13 = document2.children();
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting16 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting16.value = "hi!";
        org.jsoup.parser.Tag tag20 = org.jsoup.parser.Tag.valueOf("hi!");
        org.jsoup.nodes.Element element22 = new org.jsoup.nodes.Element(tag20, "!");
        boolean boolean23 = attributeWithValueStarting16.matches(element22);
        org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parseBodyFragment("#data");
        boolean boolean26 = attributeWithValueStarting16.matches((org.jsoup.nodes.Element) document25);
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node30 = document29.parentNode;
        java.lang.String str31 = document29.title();
        org.jsoup.nodes.Attributes attributes32 = document29.attributes();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        org.jsoup.select.Elements elements38 = document35.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element39 = document29.prependChild((org.jsoup.nodes.Node) document35);
        java.lang.String str40 = document35.baseUri();
        org.jsoup.nodes.Document document43 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str44 = document43.outerHtml();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node48 = document47.parentNode;
        java.lang.String str49 = document47.title();
        org.jsoup.nodes.Element element51 = document47.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element52 = document43.appendChild((org.jsoup.nodes.Node) document47);
        org.jsoup.nodes.Attributes attributes53 = document47.attributes();
        document35.addChild((org.jsoup.nodes.Node) document47);
        org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element57 = document47.prependChild((org.jsoup.nodes.Node) document56);
        org.jsoup.select.Elements elements58 = document56.siblingElements();
        org.jsoup.nodes.Node node59 = document56.nextSibling();
        org.jsoup.nodes.Document document62 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str63 = document62.outerHtml();
        org.jsoup.select.Elements elements64 = document62.getAllElements();
        java.lang.String str65 = document62.data();
        org.jsoup.nodes.Element element67 = document62.text("");
        org.jsoup.nodes.Node node68 = document62.parentNode;
        org.jsoup.select.Elements elements70 = document62.getElementsByIndexGreaterThan((int) '4');
        java.lang.String str71 = document62.baseUri();
        org.jsoup.nodes.Element element73 = document62.appendText("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document74 = document62.normalise();
        org.jsoup.nodes.Document[] documentArray75 = new org.jsoup.nodes.Document[] { document25, document56, document74 };
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Document[] documentArray76 = elements13.toArray(documentArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(tag20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(attributes32);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str44, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(element51);
        org.junit.Assert.assertNotNull(element52);
        org.junit.Assert.assertNotNull(attributes53);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertNotNull(element57);
        org.junit.Assert.assertNotNull(elements58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str63, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(element67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(elements70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNotNull(element73);
        org.junit.Assert.assertNotNull(document74);
        org.junit.Assert.assertNotNull(documentArray75);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.select.Elements elements9 = document2.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Evaluator.AttributeWithValueContaining attributeWithValueContaining12 = new org.jsoup.nodes.Evaluator.AttributeWithValueContaining("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!", "head");
        int int13 = elements9.indexOf((java.lang.Object) "head");
        org.jsoup.nodes.Element element15 = elements9.get(0);
        org.jsoup.select.Elements elements17 = elements9.toggleClass("<?hi>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(elements17);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Element element29 = document20.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements30 = element29.getAllElements();
        int int31 = elements30.size();
        java.lang.String str32 = elements30.text();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html> <head> </head> <body> hi! </body> </html> <html> <head> </head> <body> hi! </body> </html>  <html> <head> </head> <body> hi! </body> </html>" + "'", str32, "<html> <head> </head> <body> hi! </body> </html> <html> <head> </head> <body> hi! </body> </html>  <html> <head> </head> <body> hi! </body> </html>");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("");
        document1.baseUri = "";
        java.lang.String str4 = document1.tagName();
        org.jsoup.nodes.Node node5 = document1.parentNode;
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#root" + "'", str4, "#root");
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan1 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) ' ');
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.select.Elements elements5 = document4.getAllElements();
        boolean boolean6 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document4);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        org.jsoup.select.Elements elements7 = document4.getElementsByIndexLessThan((int) 'a');
        boolean boolean8 = indexLessThan1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        org.jsoup.select.Elements elements13 = document11.getAllElements();
        org.jsoup.select.Elements elements14 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan1, (org.jsoup.nodes.Element) document11);
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan16 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        org.jsoup.select.Elements elements22 = document19.getElementsByIndexLessThan((int) 'a');
        boolean boolean23 = indexLessThan16.matches((org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node27 = document26.parentNode;
        java.lang.String str28 = document26.title();
        org.jsoup.nodes.Attributes attributes29 = document26.attributes();
        org.jsoup.nodes.Node node32 = document26.attr("hi!", "hi!");
        org.jsoup.select.Elements elements33 = document26.getAllElements();
        boolean boolean34 = indexLessThan16.matches((org.jsoup.nodes.Element) document26);
        org.jsoup.select.Elements elements35 = document26.getAllElements();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str39 = document38.nodeName();
        org.jsoup.select.Elements elements42 = document38.getElementsByAttributeValueContaining("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>", " !");
        boolean boolean43 = document26.equals((java.lang.Object) elements42);
        boolean boolean44 = indexLessThan1.matches((org.jsoup.nodes.Element) document26);
        org.jsoup.nodes.Node node45 = null;
        // The following exception was thrown during execution in test generation
        try {
            document26.removeChild(node45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(attributes29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "#document" + "'", str39, "#document");
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        org.jsoup.select.Elements elements7 = document4.getElementsByIndexLessThan((int) 'a');
        boolean boolean8 = indexLessThan1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Evaluator.Attribute attribute10 = new org.jsoup.nodes.Evaluator.Attribute("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        java.lang.String str15 = document13.title();
        org.jsoup.nodes.Attributes attributes16 = document13.attributes();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        org.jsoup.select.Elements elements22 = document19.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element23 = document13.prependChild((org.jsoup.nodes.Node) document19);
        org.jsoup.select.Elements elements25 = document13.select("hi");
        org.jsoup.select.Elements elements26 = document13.children();
        boolean boolean27 = attribute10.matches((org.jsoup.nodes.Element) document13);
        boolean boolean28 = indexLessThan1.matches((org.jsoup.nodes.Element) document13);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements30 = document13.select("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated string is empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", " hi=\"\"");
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("[ , !]", "hi=\"\"");
        java.lang.String str6 = document5.html();
        java.lang.String str7 = document5.html();
        boolean boolean8 = attributeWithValueStarting2.matches((org.jsoup.nodes.Element) document5);
        java.lang.String str10 = document5.attr("<html>\n <head>\n </head>\n <body>\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>" + "'", str7, "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Node node8 = document2.attr("hi!", "hi!");
        org.jsoup.select.Elements elements9 = document2.getAllElements();
        org.jsoup.nodes.Element element11 = document2.appendElement("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        java.lang.String str12 = document2.val();
        org.jsoup.nodes.Element element14 = document2.wrap("#comment");
        java.lang.String str15 = document2.toString();
        java.lang.String str16 = document2.data();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(element14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>" + "'", str15, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.select.Elements elements8 = document2.getElementsByAttributeValueNot("<html> <head> </head> <body> hi! </body> </html> <head> </head> <body> hi! </body> hi!", "hi!");
        org.jsoup.nodes.Attributes attributes9 = document2.attributes();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(attributes9);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Node node8 = document2.attr("hi!", "hi!");
        org.jsoup.select.Elements elements9 = document2.getAllElements();
        org.jsoup.nodes.Element element11 = document2.appendElement("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        java.lang.String str12 = document2.val();
        boolean boolean13 = document2.isBlock();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements9 = elements7.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements11 = elements7.prepend("hi=\"\"");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elements11);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.jsoup.nodes.Document document3 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node4 = document3.parentNode;
        org.jsoup.select.Elements elements6 = document3.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements8 = elements6.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements10 = elements8.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements11 = org.jsoup.select.Selector.select("#comment", (java.lang.Iterable<org.jsoup.nodes.Element>) elements10);
        org.jsoup.select.Elements elements13 = elements11.removeClass("\n<!---->");
        java.util.function.UnaryOperator<org.jsoup.nodes.Element> elementUnaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            elements11.replaceAll(elementUnaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(elements13);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        java.lang.String str9 = elements8.html();
        java.lang.String str10 = elements8.val();
        org.jsoup.select.Elements elements12 = elements8.val("hi");
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str16 = document15.outerHtml();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        java.lang.String str21 = document19.title();
        org.jsoup.nodes.Element element23 = document19.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element24 = document15.appendChild((org.jsoup.nodes.Node) document19);
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node28 = document27.parentNode;
        java.lang.String str29 = document27.title();
        org.jsoup.nodes.Attributes attributes30 = document27.attributes();
        org.jsoup.nodes.Document document33 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node34 = document33.parentNode;
        org.jsoup.select.Elements elements36 = document33.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element37 = document27.prependChild((org.jsoup.nodes.Node) document33);
        org.jsoup.select.Elements elements39 = document27.select("hi");
        org.jsoup.nodes.Element element40 = document19.appendChild((org.jsoup.nodes.Node) document27);
        org.jsoup.nodes.Element element42 = document27.addClass("#declaration");
        boolean boolean43 = elements8.add(element42);
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan45 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document48 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node49 = document48.parentNode;
        org.jsoup.select.Elements elements51 = document48.getElementsByIndexLessThan((int) 'a');
        boolean boolean52 = indexLessThan45.matches((org.jsoup.nodes.Element) document48);
        org.jsoup.nodes.Document document55 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node56 = document55.parentNode;
        org.jsoup.select.Elements elements57 = document55.getAllElements();
        org.jsoup.select.Elements elements58 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan45, (org.jsoup.nodes.Element) document55);
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan60 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document63 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node64 = document63.parentNode;
        org.jsoup.select.Elements elements66 = document63.getElementsByIndexLessThan((int) 'a');
        boolean boolean67 = indexLessThan60.matches((org.jsoup.nodes.Element) document63);
        org.jsoup.nodes.Document document70 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node71 = document70.parentNode;
        java.lang.String str72 = document70.title();
        org.jsoup.nodes.Attributes attributes73 = document70.attributes();
        org.jsoup.nodes.Node node76 = document70.attr("hi!", "hi!");
        org.jsoup.select.Elements elements77 = document70.getAllElements();
        boolean boolean78 = indexLessThan60.matches((org.jsoup.nodes.Element) document70);
        org.jsoup.select.Elements elements79 = document70.getAllElements();
        org.jsoup.nodes.Document document82 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str83 = document82.nodeName();
        org.jsoup.select.Elements elements86 = document82.getElementsByAttributeValueContaining("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>", " !");
        boolean boolean87 = document70.equals((java.lang.Object) elements86);
        boolean boolean88 = indexLessThan45.matches((org.jsoup.nodes.Element) document70);
        java.util.List<org.jsoup.nodes.Node> nodeList89 = document70.childNodes;
        boolean boolean90 = element42.equals((java.lang.Object) document70);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!" + "'", str9, "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str16, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(attributes30);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(elements36);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(elements39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(elements51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(elements57);
        org.junit.Assert.assertNotNull(elements58);
        org.junit.Assert.assertNotNull(document63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(elements66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(document70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(attributes73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(elements77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(elements79);
        org.junit.Assert.assertNotNull(document82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "#document" + "'", str83, "#document");
        org.junit.Assert.assertNotNull(elements86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(nodeList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>&lt;html class=&quot; hi&quot;&gt; &lt;head class=&quot; hi&quot;&gt; &lt;/head&gt; &lt;body class=&quot; hi&quot;&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;head class=&quot; hi&quot;&gt; &lt;/head&gt; &lt;body class=&quot; hi&quot;&gt; hi! &lt;/body&gt; hi!", " hi=\"\"");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parse("i");
        org.junit.Assert.assertNotNull(document1);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element30 = document20.prependChild((org.jsoup.nodes.Node) document29);
        org.jsoup.select.Elements elements31 = document29.siblingElements();
        org.jsoup.nodes.Node node32 = document29.nextSibling();
        boolean boolean34 = document29.hasClass("<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str35 = document29.id();
        java.lang.String str36 = document29.nodeName();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "#document" + "'", str36, "#document");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("[ , !]");
        java.lang.String str2 = tag1.getName();
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        org.jsoup.select.Elements elements7 = document5.getAllElements();
        org.jsoup.nodes.Element element9 = document5.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements10 = element9.getAllElements();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = element9.childNodes;
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Attributes attributes17 = document14.attributes();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        org.jsoup.select.Elements elements23 = document20.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element24 = document14.prependChild((org.jsoup.nodes.Node) document20);
        java.lang.String str25 = document20.baseUri();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str29 = document28.outerHtml();
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node33 = document32.parentNode;
        java.lang.String str34 = document32.title();
        org.jsoup.nodes.Element element36 = document32.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element37 = document28.appendChild((org.jsoup.nodes.Node) document32);
        org.jsoup.nodes.Attributes attributes38 = document32.attributes();
        document20.addChild((org.jsoup.nodes.Node) document32);
        org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element42 = document32.prependChild((org.jsoup.nodes.Node) document41);
        element9.setParentNode((org.jsoup.nodes.Node) document41);
        org.jsoup.nodes.Element element45 = document41.addClass("#declaration");
        boolean boolean46 = tag1.equals((java.lang.Object) document41);
        java.lang.String str47 = tag1.toString();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[ , !]" + "'", str2, "[ , !]");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(element9);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str29, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(attributes38);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertNotNull(element45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[ , !]" + "'", str47, "[ , !]");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Attribute attribute8 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        java.lang.String str9 = attribute8.html();
        attributes5.put(attribute8);
        attribute8.setKey("<html>\n<head>\n <title> !</title>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(attribute8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi=\"\"" + "'", str9, "hi=\"\"");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        boolean boolean13 = document2.hasAttr("hi!");
        org.jsoup.nodes.Element element14 = document2.parent();
        boolean boolean16 = document2.hasAttr("#comment");
        org.jsoup.nodes.Node node18 = document2.removeAttr("<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>&lt;html class=&quot; hi&quot;&gt; &lt;head class=&quot; hi&quot;&gt; &lt;/head&gt; &lt;body class=&quot; hi&quot;&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;head class=&quot; hi&quot;&gt; &lt;/head&gt; &lt;body class=&quot; hi&quot;&gt; hi! &lt;/body&gt; hi!");
        node18.setBaseUri("<html> <head> </head> <body> hi! </body> </html> <head> </head> <body> hi! </body> hi!");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(element14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.jsoup.nodes.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.nodes.Evaluator.AttributeWithValueEnding("\n<!---->", "hi!");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        document5.setBaseUri("hi");
        boolean boolean9 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document5);
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node13 = document12.parentNode;
        java.lang.String str14 = document12.title();
        org.jsoup.nodes.Attributes attributes15 = document12.attributes();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        org.jsoup.select.Elements elements21 = document18.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element22 = document12.prependChild((org.jsoup.nodes.Node) document18);
        java.lang.String str23 = document18.baseUri();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str27 = document26.outerHtml();
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node31 = document30.parentNode;
        java.lang.String str32 = document30.title();
        org.jsoup.nodes.Element element34 = document30.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element35 = document26.appendChild((org.jsoup.nodes.Node) document30);
        org.jsoup.nodes.Attributes attributes36 = document30.attributes();
        document18.addChild((org.jsoup.nodes.Node) document30);
        org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element40 = document30.prependChild((org.jsoup.nodes.Node) document39);
        boolean boolean41 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document30);
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting44 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting44.value = "hi!";
        java.lang.String str47 = attributeWithValueStarting44.value;
        org.jsoup.nodes.Document document50 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node51 = document50.parentNode;
        org.jsoup.select.Elements elements53 = document50.getElementsByIndexLessThan((int) 'a');
        java.lang.String str54 = document50.text();
        org.jsoup.nodes.Element element56 = document50.text("");
        org.jsoup.nodes.Document document59 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str60 = document59.outerHtml();
        org.jsoup.select.Elements elements61 = document59.getAllElements();
        boolean boolean62 = element56.equals((java.lang.Object) elements61);
        boolean boolean63 = attributeWithValueStarting44.matches(element56);
        org.jsoup.nodes.Element element66 = element56.attr("hi!", "");
        org.jsoup.select.Elements elements67 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) attributeWithValueEnding2, element56);
        java.lang.String str68 = element56.tagName();
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str27, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(attributes36);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(elements53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(element56);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str60, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(element66);
        org.junit.Assert.assertNotNull(elements67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "#root" + "'", str68, "#root");
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.jsoup.nodes.Evaluator.Class class1 = new org.jsoup.nodes.Evaluator.Class("");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Element element12 = document8.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) document8);
        org.jsoup.nodes.Element element15 = document4.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str16 = document4.text();
        org.jsoup.select.Elements elements18 = document4.getElementsByIndexLessThan((int) (byte) 1);
        document4.title(" !");
        boolean boolean21 = class1.matches((org.jsoup.nodes.Element) document4);
        java.lang.String str22 = document4.outerHtml();
        org.jsoup.nodes.Element element23 = document4.parent();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = element23.id();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str16, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n<head>\n <title> !</title>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>" + "'", str22, "<html>\n<head>\n <title> !</title>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.junit.Assert.assertNull(element23);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Element element29 = document20.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements30 = element29.getAllElements();
        org.jsoup.nodes.Element element31 = elements30.first();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str35 = document34.outerHtml();
        org.jsoup.select.Elements elements36 = document34.getAllElements();
        java.lang.String str37 = document34.data();
        org.jsoup.nodes.Element element39 = document34.text("");
        org.jsoup.nodes.Node node40 = document34.parentNode;
        org.jsoup.select.Elements elements43 = document34.getElementsByAttributeValue("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>", "<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean44 = elements30.addAll((java.util.Collection<org.jsoup.nodes.Element>) elements43);
        java.lang.String str45 = elements30.html();
        boolean boolean47 = elements30.hasClass("<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>\n</html>\n\n<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>\n</html>\n\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str35, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(elements43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "<html>\n    <head>\n    </head>\n    <body>\n     &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n    </body>\n   </html>\n<head>\n    </head>\n    <body>\n     &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n    </body>\n\n&lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;" + "'", str45, "<html>\n    <head>\n    </head>\n    <body>\n     &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n    </body>\n   </html>\n<head>\n    </head>\n    <body>\n     &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n    </body>\n\n&lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Node node12 = document6.parentNode;
        org.jsoup.nodes.Element[] elementArray13 = new org.jsoup.nodes.Element[] { document6 };
        org.jsoup.select.Elements elements14 = new org.jsoup.select.Elements(elementArray13);
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Attributes attributes21 = document18.attributes();
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node25 = document24.parentNode;
        org.jsoup.select.Elements elements27 = document24.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element28 = document18.prependChild((org.jsoup.nodes.Node) document24);
        java.util.List<org.jsoup.nodes.Node> nodeList29 = document18.childNodes;
        org.jsoup.select.Elements elements31 = document18.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str35 = document34.outerHtml();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node39 = document38.parentNode;
        java.lang.String str40 = document38.title();
        org.jsoup.nodes.Element element42 = document38.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element43 = document34.appendChild((org.jsoup.nodes.Node) document38);
        org.jsoup.nodes.Attributes attributes44 = document38.attributes();
        java.lang.String str45 = document38.title();
        int int46 = elements31.lastIndexOf((java.lang.Object) document38);
        org.jsoup.select.Elements elements48 = elements31.eq((int) '#');
        boolean boolean49 = elements14.addAll(0, (java.util.Collection<org.jsoup.nodes.Element>) elements48);
        org.jsoup.select.Elements elements51 = elements14.select("[ , !]");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting54 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting54.value = "hi!";
        java.lang.String str57 = attributeWithValueStarting54.value;
        org.jsoup.nodes.Document document60 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node61 = document60.parentNode;
        org.jsoup.select.Elements elements63 = document60.getElementsByIndexLessThan((int) 'a');
        java.lang.String str64 = document60.text();
        org.jsoup.nodes.Element element66 = document60.text("");
        org.jsoup.nodes.Document document69 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str70 = document69.outerHtml();
        org.jsoup.select.Elements elements71 = document69.getAllElements();
        boolean boolean72 = element66.equals((java.lang.Object) elements71);
        boolean boolean73 = attributeWithValueStarting54.matches(element66);
        boolean boolean74 = element66.preserveWhitespace();
        element66.setBaseUri("#declaration");
        int int77 = elements51.lastIndexOf((java.lang.Object) "#declaration");
        org.jsoup.nodes.Element element79 = null;
        // The following exception was thrown during execution in test generation
        try {
            elements51.add(4, element79);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(elementArray13);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str35, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertNotNull(element43);
        org.junit.Assert.assertNotNull(attributes44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(elements51);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(elements63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(element66);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str70, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Node node12 = document6.parentNode;
        org.jsoup.nodes.Element[] elementArray13 = new org.jsoup.nodes.Element[] { document6 };
        org.jsoup.select.Elements elements14 = new org.jsoup.select.Elements(elementArray13);
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Attributes attributes21 = document18.attributes();
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node25 = document24.parentNode;
        org.jsoup.select.Elements elements27 = document24.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element28 = document18.prependChild((org.jsoup.nodes.Node) document24);
        java.util.List<org.jsoup.nodes.Node> nodeList29 = document18.childNodes;
        org.jsoup.select.Elements elements31 = document18.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str35 = document34.outerHtml();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node39 = document38.parentNode;
        java.lang.String str40 = document38.title();
        org.jsoup.nodes.Element element42 = document38.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element43 = document34.appendChild((org.jsoup.nodes.Node) document38);
        org.jsoup.nodes.Attributes attributes44 = document38.attributes();
        java.lang.String str45 = document38.title();
        int int46 = elements31.lastIndexOf((java.lang.Object) document38);
        org.jsoup.select.Elements elements48 = elements31.eq((int) '#');
        boolean boolean49 = elements14.addAll(0, (java.util.Collection<org.jsoup.nodes.Element>) elements48);
        java.lang.Object[] objArray50 = elements14.toArray();
        org.jsoup.nodes.Document document53 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str54 = document53.outerHtml();
        org.jsoup.select.Elements elements55 = document53.getAllElements();
        java.lang.String str56 = document53.data();
        org.jsoup.nodes.Element element58 = document53.text("");
        org.jsoup.nodes.Node node59 = document53.parentNode;
        org.jsoup.select.Elements elements61 = document53.getElementsByIndexGreaterThan((int) '4');
        boolean boolean62 = elements14.remove((java.lang.Object) elements61);
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor63 = elements14.listIterator();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(elementArray13);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(nodeList29);
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str35, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertNotNull(element43);
        org.junit.Assert.assertNotNull(attributes44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>]");
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str54, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(element58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(elements61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(elementItor63);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("\n<!---->", "\n<!---->");
        boolean boolean3 = textNode2.isBlank();
        org.jsoup.nodes.TextNode textNode5 = textNode2.text("hi");
        java.lang.String str6 = textNode2.toString();
        java.lang.String str7 = textNode2.baseUri();
        java.lang.String str8 = textNode2.baseUri();
        java.lang.StringBuilder stringBuilder9 = null;
        // The following exception was thrown during execution in test generation
        try {
            textNode2.outerHtml(stringBuilder9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(textNode5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi" + "'", str6, "hi");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<!---->" + "'", str7, "<!---->");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<!---->" + "'", str8, "<!---->");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        java.lang.String str28 = document20.outerHtml();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n  <head>\n  </head>\n  <body>\n   &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n  </body>\n </html>" + "'", str28, "<html>\n  <head>\n  </head>\n  <body>\n   &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n  </body>\n </html>");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.jsoup.nodes.TextNode textNode2 = new org.jsoup.nodes.TextNode("[ , #, d, o, c, u, m, e, n, t]", "<html class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>");
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("#declaration", "\n&lt;!----&gt;");
        boolean boolean4 = document2.hasClass("<html>\n<head>\n <title> !</title>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str8 = document7.outerHtml();
        org.jsoup.select.Elements elements9 = document7.getAllElements();
        java.lang.String str10 = document7.data();
        org.jsoup.nodes.Element element12 = document7.text("");
        org.jsoup.nodes.Node node13 = document7.parentNode;
        org.jsoup.select.Elements elements15 = document7.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element17 = document7.text("hi=\"\"");
        org.jsoup.select.Elements elements18 = document7.children();
        org.jsoup.nodes.Element element21 = document7.attr("hi!", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        boolean boolean22 = elements4.remove((java.lang.Object) element21);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str27 = document26.outerHtml();
        org.jsoup.select.Elements elements28 = document26.getAllElements();
        java.lang.String str29 = document26.data();
        org.jsoup.nodes.Element element31 = document26.text("");
        org.jsoup.nodes.Node node32 = document26.parentNode;
        org.jsoup.select.Elements elements34 = document26.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element36 = document26.text("hi=\"\"");
        boolean boolean37 = document26.hasText();
        org.jsoup.nodes.Element element39 = document26.createElement("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.jsoup.nodes.Element element41 = document26.prependText("org.jsoup.select.Selector$SelectorParseException: <html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str45 = document44.outerHtml();
        org.jsoup.nodes.Document document48 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node49 = document48.parentNode;
        java.lang.String str50 = document48.title();
        org.jsoup.nodes.Element element52 = document48.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element53 = document44.appendChild((org.jsoup.nodes.Node) document48);
        org.jsoup.nodes.Element element54 = document48.head();
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan56 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document59 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node60 = document59.parentNode;
        org.jsoup.select.Elements elements62 = document59.getElementsByIndexLessThan((int) 'a');
        boolean boolean63 = indexLessThan56.matches((org.jsoup.nodes.Element) document59);
        boolean boolean64 = element54.equals((java.lang.Object) boolean63);
        boolean boolean65 = element41.equals((java.lang.Object) element54);
        // The following exception was thrown during execution in test generation
        try {
            elements4.add((int) (short) -1, element41);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str8, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str27, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(element41);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str45, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(element52);
        org.junit.Assert.assertNotNull(element53);
        org.junit.Assert.assertNotNull(element54);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(elements62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element30 = document20.prependChild((org.jsoup.nodes.Node) document29);
        java.lang.String str31 = document20.val();
        org.jsoup.nodes.Element element33 = document20.text("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.nodes.Element element35 = element33.wrap("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.jsoup.nodes.Element element37 = element35.val("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(element33);
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(element37);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements17 = elements15.removeAttr("hi");
        org.jsoup.select.Elements elements18 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements17);
        org.jsoup.select.Elements elements20 = elements18.select("hi");
        org.jsoup.select.Elements elements22 = elements18.toggleClass("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.select.Elements elements24 = elements22.removeAttr("<#root>\n  <html>\n   <head>\n   </head>\n   <body> hi!\n   </body>\n  </html>\n </#root>\n <html>\n  <head>\n  </head>\n  <body> hi!\n  </body>\n </html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(elements24);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        org.jsoup.select.Elements elements9 = document6.getElementsByIndexLessThan((int) 'a');
        boolean boolean10 = indexLessThan3.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        org.jsoup.select.Elements elements15 = document13.getAllElements();
        org.jsoup.select.Elements elements16 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan3, (org.jsoup.nodes.Element) document13);
        boolean boolean17 = tag1.matches((org.jsoup.nodes.Element) document13);
        document13.baseUri = "hi=\"\"";
        org.jsoup.nodes.Element element21 = document13.appendText("");
        org.jsoup.nodes.Element element23 = element21.prependText(" !");
        org.jsoup.nodes.Element element25 = element23.addClass("\n<!---->");
        org.jsoup.select.Elements elements27 = element23.getElementsByAttribute("<html>\n<head>\n</head>\n<body>\n</body>\n</html><<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>><hi!>\n</hi!>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(elements27);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.select.Elements elements3 = document2.getAllElements();
        boolean boolean4 = elements3.hasText();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.jsoup.safety.Whitelist whitelist2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.jsoup.Jsoup.clean("4", "<?hi!>", whitelist2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements17 = elements15.removeAttr("hi");
        org.jsoup.select.Elements elements18 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements17);
        org.jsoup.select.Elements elements20 = elements18.select("hi");
        org.jsoup.select.Elements elements22 = elements20.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(elements22);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node31 = document30.parentNode;
        java.lang.String str32 = document30.title();
        org.jsoup.nodes.Attributes attributes33 = document30.attributes();
        org.jsoup.nodes.Document document36 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node37 = document36.parentNode;
        org.jsoup.select.Elements elements39 = document36.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element40 = document30.prependChild((org.jsoup.nodes.Node) document36);
        java.util.List<org.jsoup.nodes.Node> nodeList41 = document30.childNodes;
        org.jsoup.select.Elements elements43 = document30.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document46 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str47 = document46.outerHtml();
        org.jsoup.nodes.Document document50 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node51 = document50.parentNode;
        java.lang.String str52 = document50.title();
        org.jsoup.nodes.Element element54 = document50.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element55 = document46.appendChild((org.jsoup.nodes.Node) document50);
        org.jsoup.nodes.Attributes attributes56 = document50.attributes();
        java.lang.String str57 = document50.title();
        int int58 = elements43.lastIndexOf((java.lang.Object) document50);
        org.jsoup.nodes.Element element60 = document50.appendText("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        document20.addChild((org.jsoup.nodes.Node) document50);
        org.jsoup.nodes.Element element62 = document20.firstElementSibling();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(attributes33);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(elements39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(nodeList41);
        org.junit.Assert.assertNotNull(elements43);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str47, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(element54);
        org.junit.Assert.assertNotNull(element55);
        org.junit.Assert.assertNotNull(attributes56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(element60);
        org.junit.Assert.assertNotNull(element62);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements6 = document2.getElementsByAttributeValueContaining("\n&lt;!----&gt;", "hi");
        java.lang.Object[] objArray7 = elements6.toArray();
        org.jsoup.select.Elements elements9 = elements6.wrap("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>");
        java.lang.String str10 = elements9.val();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("");
        document1.baseUri = "";
        java.lang.String str4 = document1.tagName();
        org.jsoup.nodes.Element element5 = document1.body();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#root" + "'", str4, "#root");
        org.junit.Assert.assertNotNull(element5);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("!\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document1);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        int int7 = elements5.size();
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.nodes.Element> elementList11 = elements5.subList(100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(elementStream8);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node31 = document30.parentNode;
        java.lang.String str32 = document30.title();
        org.jsoup.nodes.Attributes attributes33 = document30.attributes();
        org.jsoup.nodes.Attribute attribute36 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        java.lang.String str37 = attribute36.html();
        attributes33.put(attribute36);
        java.lang.String str39 = attributes33.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator40 = attributes33.spliterator();
        int int41 = attributes33.size();
        int int42 = attributes33.size();
        boolean boolean43 = document20.equals((java.lang.Object) attributes33);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(attributes33);
        org.junit.Assert.assertNotNull(attribute36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi=\"\"" + "'", str37, "hi=\"\"");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + " hi=\"\"" + "'", str39, " hi=\"\"");
        org.junit.Assert.assertNotNull(attributeSpliterator40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        org.jsoup.select.Elements elements14 = document11.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements16 = elements14.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str18 = elements14.attr(" hi=\"\"");
        boolean boolean19 = elements8.removeAll((java.util.Collection<org.jsoup.nodes.Element>) elements14);
        org.jsoup.nodes.Document document22 = org.jsoup.Jsoup.parseBodyFragment("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.jsoup.select.Elements elements25 = document22.getElementsByAttributeValueStarting("head", "#document");
        java.lang.Object[] objArray26 = elements25.toArray();
        org.jsoup.select.Elements elements29 = elements25.attr(" !", "#text");
        boolean boolean30 = elements14.addAll(4, (java.util.Collection<org.jsoup.nodes.Element>) elements29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.nodes.Element> elementList33 = elements14.subList(0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(0) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(elements29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.jsoup.nodes.XmlDeclaration xmlDeclaration3 = new org.jsoup.nodes.XmlDeclaration("hi!", "!", false);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        boolean boolean8 = document6.isBlock();
        xmlDeclaration3.addChild((org.jsoup.nodes.Node) document6);
        java.lang.String str10 = xmlDeclaration3.toString();
        java.lang.StringBuilder stringBuilder11 = null;
        // The following exception was thrown during execution in test generation
        try {
            xmlDeclaration3.outerHtml(stringBuilder11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "<?hi!>" + "'", str10, "<?hi!>");
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.jsoup.nodes.Evaluator.Id id1 = new org.jsoup.nodes.Evaluator.Id("[ , #, d, o, c, u, m, e, n, t]");
        org.jsoup.nodes.Evaluator.AttributeWithValueNot attributeWithValueNot4 = new org.jsoup.nodes.Evaluator.AttributeWithValueNot("\n<!---->", "#root");
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str8 = document7.outerHtml();
        org.jsoup.select.Elements elements9 = document7.getAllElements();
        java.lang.String str10 = document7.data();
        java.lang.String str11 = document7.baseUri();
        org.jsoup.nodes.Element element13 = document7.text("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element15 = element13.val("#declaration");
        boolean boolean16 = attributeWithValueNot4.matches(element15);
        boolean boolean17 = id1.matches(element15);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str8, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "");
        boolean boolean4 = document2.hasClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("#text", "");
        org.jsoup.nodes.Element element4 = document2.append("<html>\n<head>\n</head>\n<body>\n head\n</body>\n</html>");
        org.jsoup.nodes.Element element6 = document2.addClass("\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>");
        org.jsoup.nodes.Element element7 = element6.parent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = element7.hasClass("\n<!--<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>-->");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNull(element7);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parse("#data");
        org.junit.Assert.assertNotNull(document1);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.prepend("hi");
        org.jsoup.select.Elements elements12 = elements10.toggleClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str16 = document15.outerHtml();
        org.jsoup.select.Elements elements17 = document15.getAllElements();
        java.lang.String str18 = document15.data();
        org.jsoup.nodes.Element element20 = document15.text("");
        org.jsoup.nodes.Node node21 = document15.parentNode;
        org.jsoup.select.Elements elements23 = document15.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element25 = document15.text("hi=\"\"");
        org.jsoup.nodes.Element element27 = document15.getElementById("#data");
        org.jsoup.parser.Tag tag28 = document15.tag();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str32 = document31.outerHtml();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        java.lang.String str37 = document35.title();
        org.jsoup.nodes.Element element39 = document35.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element40 = document31.appendChild((org.jsoup.nodes.Node) document35);
        org.jsoup.nodes.Node node41 = document35.parentNode;
        org.jsoup.nodes.Element[] elementArray42 = new org.jsoup.nodes.Element[] { document35 };
        org.jsoup.select.Elements elements43 = new org.jsoup.select.Elements(elementArray42);
        org.jsoup.select.Elements elements44 = new org.jsoup.select.Elements(elementArray42);
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting47 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        int int48 = elements44.indexOf((java.lang.Object) attributeWithValueStarting47);
        boolean boolean49 = tag28.equals((java.lang.Object) attributeWithValueStarting47);
        boolean boolean50 = elements10.equals((java.lang.Object) boolean49);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str16, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNull(element27);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str32, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(elementArray42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element13 = document2.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str14 = document2.text();
        org.jsoup.select.Elements elements16 = document2.getElementsByIndexLessThan((int) (byte) 1);
        document2.title(" !");
        org.jsoup.nodes.DataNode dataNode21 = new org.jsoup.nodes.DataNode("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        java.lang.String str22 = dataNode21.nodeName();
        // The following exception was thrown during execution in test generation
        try {
            document2.replaceWith((org.jsoup.nodes.Node) dataNode21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str14, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#data" + "'", str22, "#data");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Element element29 = document20.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements30 = element29.getAllElements();
        org.jsoup.nodes.Element element32 = element29.prepend("<!---->=\"\"");
        java.util.List<org.jsoup.nodes.Node> nodeList33 = element29.childNodes;
        org.jsoup.nodes.Document document36 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str37 = document36.outerHtml();
        org.jsoup.select.Elements elements38 = document36.getAllElements();
        java.lang.String str39 = document36.data();
        org.jsoup.nodes.Element element41 = document36.text("");
        org.jsoup.select.Elements elements43 = element41.getElementsByIndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Element element44 = element29.prependChild((org.jsoup.nodes.Node) element41);
        org.jsoup.nodes.Element element45 = element29.previousElementSibling();
        org.jsoup.select.Elements elements48 = element29.getElementsByAttributeValueContaining(" head=\"[ , #, d, o, c, u, m, e, n, t]\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!=\"#declaration\"");
        java.lang.String str49 = elements48.text();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str37, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(element41);
        org.junit.Assert.assertNotNull(elements43);
        org.junit.Assert.assertNotNull(element44);
        org.junit.Assert.assertNull(element45);
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("hi!");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Element element12 = document8.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) document8);
        boolean boolean14 = tag1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document15 = document4.normalise();
        org.jsoup.select.Elements elements17 = document4.getElementsByTag("[4]");
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertNotNull(elements17);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Element element6 = document2.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements7 = element6.getAllElements();
        org.jsoup.nodes.Element element9 = element6.getElementById("<html>\n<head>\n</head>\n<body>\n hi=&quot;&quot;\n</body>\n</html>");
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parseBodyFragment("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.parser.Tag tag13 = document12.tag();
        boolean boolean14 = element6.equals((java.lang.Object) document12);
        java.lang.String str15 = document12.toString();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNull(element9);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n<head>\n</head>\n<body>\n &lt;#root&gt; \n <html> \n  <head> \n  </head> \n  <body>\n    hi!    \n   <html> \n    <head> \n    </head> \n    <body>\n      hi!  \n    </body>\n   </html>\n  </body>\n </html>\n</body>\n</html>" + "'", str15, "<html>\n<head>\n</head>\n<body>\n &lt;#root&gt; \n <html> \n  <head> \n  </head> \n  <body>\n    hi!    \n   <html> \n    <head> \n    </head> \n    <body>\n      hi!  \n    </body>\n   </html>\n  </body>\n </html>\n</body>\n</html>");
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parse("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements4 = document1.getElementsByAttributeValue("hi=\"\"", "#data");
        org.jsoup.parser.Tag tag5 = document1.tag();
        boolean boolean7 = document1.hasAttr("[ , #, d, o, c, u, m, e, n, t]");
        java.lang.String str8 = document1.nodeName();
        org.jsoup.nodes.Document document9 = document1.normalise();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(tag5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#document" + "'", str8, "#document");
        org.junit.Assert.assertNotNull(document9);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        org.jsoup.select.Elements elements14 = document6.getElementsByTag("hi!");
        org.jsoup.select.Elements elements15 = document6.getAllElements();
        org.jsoup.nodes.Attribute attribute18 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        org.jsoup.nodes.Document document21 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node22 = document21.parentNode;
        java.lang.String str23 = document21.title();
        boolean boolean24 = attribute18.equals((java.lang.Object) str23);
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node28 = document27.parentNode;
        org.jsoup.select.Elements elements30 = document27.getElementsByIndexLessThan((int) 'a');
        java.lang.String str31 = document27.text();
        org.jsoup.select.Elements elements34 = document27.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean35 = attribute18.equals((java.lang.Object) elements34);
        boolean boolean36 = elements15.remove((java.lang.Object) attribute18);
        java.lang.String str37 = attribute18.getValue();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(attribute18);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.jsoup.nodes.Evaluator.AllElements allElements0 = new org.jsoup.nodes.Evaluator.AllElements();
        org.jsoup.nodes.Element element1 = null;
        boolean boolean2 = allElements0.matches(element1);
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!", "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        boolean boolean6 = allElements0.matches((org.jsoup.nodes.Element) document5);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        org.jsoup.select.Elements elements7 = document4.getElementsByIndexLessThan((int) 'a');
        boolean boolean8 = indexLessThan1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Evaluator.Attribute attribute10 = new org.jsoup.nodes.Evaluator.Attribute("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        java.lang.String str15 = document13.title();
        org.jsoup.nodes.Attributes attributes16 = document13.attributes();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        org.jsoup.select.Elements elements22 = document19.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element23 = document13.prependChild((org.jsoup.nodes.Node) document19);
        org.jsoup.select.Elements elements25 = document13.select("hi");
        org.jsoup.select.Elements elements26 = document13.children();
        boolean boolean27 = attribute10.matches((org.jsoup.nodes.Element) document13);
        boolean boolean28 = indexLessThan1.matches((org.jsoup.nodes.Element) document13);
        org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        java.lang.String str32 = document31.baseUri();
        org.jsoup.select.Elements elements34 = document31.getElementsByTag(" !");
        boolean boolean35 = indexLessThan1.matches((org.jsoup.nodes.Element) document31);
        indexLessThan1.index = '<';
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi" + "'", str32, "hi");
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Element element29 = document20.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements30 = element29.getAllElements();
        org.jsoup.nodes.Element element31 = elements30.first();
        org.jsoup.select.Elements elements33 = elements30.append("hi! hi! hi!");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(elements33);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str19 = document18.outerHtml();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Element element26 = document22.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Attributes attributes28 = document22.attributes();
        java.lang.String str29 = document22.title();
        int int30 = elements15.lastIndexOf((java.lang.Object) document22);
        org.jsoup.nodes.Element element32 = document22.appendText("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Element element33 = element32.firstElementSibling();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str19, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertNotNull(element33);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node8 = document2.parentNode;
        org.jsoup.select.Elements elements10 = document2.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element11 = elements10.first();
        java.lang.Object obj12 = null;
        int int13 = elements10.lastIndexOf(obj12);
        java.util.Iterator<org.jsoup.nodes.Element> elementItor14 = elements10.iterator();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNull(element11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(elementItor14);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.parser.Tag tag13 = element12.tag();
        org.jsoup.select.Elements elements14 = element12.getAllElements();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertNotNull(elements14);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements9 = elements7.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str11 = elements9.attr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        elements9.clear();
        org.jsoup.select.Elements elements13 = new org.jsoup.select.Elements((java.util.List<org.jsoup.nodes.Element>) elements9);
        org.jsoup.select.Elements elements14 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements9);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell(" hi=\"\"");
        java.lang.String str2 = document1.baseUri();
        org.jsoup.select.Elements elements3 = document1.getAllElements();
        java.util.List<org.jsoup.nodes.Element> elementList6 = elements3.subList(0, 0);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi=\"\"" + "'", str2, "hi=\"\"");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementList6);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        org.jsoup.select.Elements elements9 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements8);
        boolean boolean11 = elements9.hasClass(" hi=\"\"");
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        org.jsoup.select.Elements elements17 = document14.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements19 = elements17.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream20 = elements17.stream();
        boolean boolean21 = elements9.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements17);
        boolean boolean23 = elements9.hasAttr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertNotNull(elementStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Element element12 = document8.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) document8);
        org.jsoup.nodes.Element element14 = document8.head();
        java.lang.String str15 = element14.id();
        boolean boolean16 = tag1.matches(element14);
        java.lang.String str17 = element14.baseUri();
        org.jsoup.select.Elements elements19 = element14.getElementsByTag("<html> <head> </head> <body> hi! </body> </html> <head> </head> <body> hi! </body> hi!");
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Node node25 = null;
        document22.parentNode = node25;
        boolean boolean27 = elements19.remove((java.lang.Object) node25);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements17 = elements15.removeAttr("hi");
        org.jsoup.select.Elements elements18 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements17);
        org.jsoup.select.Elements elements20 = elements18.select("hi");
        org.jsoup.select.Elements elements22 = elements18.toggleClass("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.select.Elements elements24 = elements22.toggleClass("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!=\"#comment\"");
        org.jsoup.select.Elements elements26 = elements22.addClass("<!---->=\"\"");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(elements26);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.jsoup.nodes.Evaluator.AttributeWithValueNot attributeWithValueNot2 = new org.jsoup.nodes.Evaluator.AttributeWithValueNot("<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>", "<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("#text", "");
        org.jsoup.nodes.Element element6 = document5.head();
        org.jsoup.nodes.Element element8 = document5.appendText("<#root>\n  <html>\n   <head>\n   </head>\n   <body> hi!\n   </body>\n  </html>\n </#root>\n <html>\n  <head>\n  </head>\n  <body> hi!\n  </body>\n </html>");
        boolean boolean9 = attributeWithValueNot2.matches((org.jsoup.nodes.Element) document5);
        org.jsoup.nodes.Evaluator.AttributeWithValueEnding attributeWithValueEnding12 = new org.jsoup.nodes.Evaluator.AttributeWithValueEnding("\n<!---->", "hi!");
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str16 = document15.outerHtml();
        document15.setBaseUri("hi");
        boolean boolean19 = attributeWithValueEnding12.matches((org.jsoup.nodes.Element) document15);
        attributeWithValueEnding12.value = "hi! <html> <head> </head> <body> hi! </body> </html>";
        org.jsoup.nodes.Document document23 = org.jsoup.nodes.Document.createShell(" hi=\"\"");
        org.jsoup.select.Elements elements24 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) attributeWithValueEnding12, (org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Element element26 = document23.prepend("");
        boolean boolean27 = attributeWithValueNot2.matches((org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Attributes attributes28 = document23.attributes();
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str16, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(attributes28);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.toggleClass("#document");
        org.jsoup.select.Elements elements12 = elements5.addClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean13 = elements5.hasText();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting2.value = "hi!";
        java.lang.String str5 = attributeWithValueStarting2.value;
        attributeWithValueStarting2.key = "hi";
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.nodeName();
        org.jsoup.nodes.Element element12 = document10.parent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = attributeWithValueStarting2.matches(element12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "#document" + "'", str11, "#document");
        org.junit.Assert.assertNull(element12);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        java.lang.String str9 = elements8.html();
        java.lang.String str10 = elements8.val();
        org.jsoup.select.Elements elements12 = elements8.val("hi");
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str16 = document15.outerHtml();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        java.lang.String str21 = document19.title();
        org.jsoup.nodes.Element element23 = document19.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element24 = document15.appendChild((org.jsoup.nodes.Node) document19);
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node28 = document27.parentNode;
        java.lang.String str29 = document27.title();
        org.jsoup.nodes.Attributes attributes30 = document27.attributes();
        org.jsoup.nodes.Document document33 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node34 = document33.parentNode;
        org.jsoup.select.Elements elements36 = document33.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element37 = document27.prependChild((org.jsoup.nodes.Node) document33);
        org.jsoup.select.Elements elements39 = document27.select("hi");
        org.jsoup.nodes.Element element40 = document19.appendChild((org.jsoup.nodes.Node) document27);
        org.jsoup.nodes.Element element42 = document27.addClass("#declaration");
        boolean boolean43 = elements8.add(element42);
        org.jsoup.nodes.Element element45 = element42.val("i");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!" + "'", str9, "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str16, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(attributes30);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(elements36);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(elements39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(element45);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.jsoup.nodes.Evaluator.Attribute attribute1 = new org.jsoup.nodes.Evaluator.Attribute("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        java.lang.String str6 = document4.title();
        org.jsoup.nodes.Attributes attributes7 = document4.attributes();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node11 = document10.parentNode;
        org.jsoup.select.Elements elements13 = document10.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element14 = document4.prependChild((org.jsoup.nodes.Node) document10);
        org.jsoup.select.Elements elements16 = document4.select("hi");
        org.jsoup.select.Elements elements17 = document4.children();
        boolean boolean18 = attribute1.matches((org.jsoup.nodes.Element) document4);
        java.lang.String str19 = document4.id();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements21 = document4.select("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated string is empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell(" #document");
        org.junit.Assert.assertNotNull(document1);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Element element29 = document20.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements30 = element29.getAllElements();
        org.jsoup.nodes.Element element32 = element29.prepend("<!---->=\"\"");
        java.util.List<org.jsoup.nodes.Node> nodeList33 = element29.childNodes;
        org.jsoup.nodes.Document document36 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str37 = document36.outerHtml();
        org.jsoup.select.Elements elements38 = document36.getAllElements();
        java.lang.String str39 = document36.data();
        org.jsoup.nodes.Element element41 = document36.text("");
        org.jsoup.select.Elements elements43 = element41.getElementsByIndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Element element44 = element29.prependChild((org.jsoup.nodes.Node) element41);
        org.jsoup.nodes.Element element46 = element29.wrap("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node50 = document49.parentNode;
        java.lang.String str51 = document49.title();
        org.jsoup.nodes.Attributes attributes52 = document49.attributes();
        org.jsoup.nodes.Document document55 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node56 = document55.parentNode;
        org.jsoup.select.Elements elements58 = document55.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element59 = document49.prependChild((org.jsoup.nodes.Node) document55);
        org.jsoup.select.Elements elements61 = document55.getElementsByClass("!");
        org.jsoup.nodes.Element element63 = document55.append("hi!");
        org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parse("", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        java.lang.String[] strArray74 = new java.lang.String[] { "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"", "[ , #, d, o, c, u, m, e, n, t]", "<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>", "#data", "#declaration", "#declaration", "\n&lt;!----&gt;" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        org.jsoup.nodes.Element element77 = document66.classNames((java.util.Set<java.lang.String>) strSet75);
        org.jsoup.nodes.Element element78 = element63.classNames((java.util.Set<java.lang.String>) strSet75);
        org.jsoup.nodes.Element element79 = element46.classNames((java.util.Set<java.lang.String>) strSet75);
        org.jsoup.nodes.Document document82 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str83 = document82.outerHtml();
        org.jsoup.nodes.Document document86 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node87 = document86.parentNode;
        java.lang.String str88 = document86.title();
        org.jsoup.nodes.Element element90 = document86.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element91 = document82.appendChild((org.jsoup.nodes.Node) document86);
        org.jsoup.parser.Tag tag92 = element91.tag();
        boolean boolean93 = tag92.isInline();
        java.lang.String str94 = tag92.getName();
        boolean boolean95 = element79.equals((java.lang.Object) tag92);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str37, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(element41);
        org.junit.Assert.assertNotNull(elements43);
        org.junit.Assert.assertNotNull(element44);
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(attributes52);
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(elements58);
        org.junit.Assert.assertNotNull(element59);
        org.junit.Assert.assertNotNull(elements61);
        org.junit.Assert.assertNotNull(element63);
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(element77);
        org.junit.Assert.assertNotNull(element78);
        org.junit.Assert.assertNotNull(element79);
        org.junit.Assert.assertNotNull(document82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str83, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document86);
        org.junit.Assert.assertNull(node87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(element90);
        org.junit.Assert.assertNotNull(element91);
        org.junit.Assert.assertNotNull(tag92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "#root" + "'", str94, "#root");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = node3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        java.lang.String str3 = document2.baseUri();
        java.lang.String str4 = document2.html();
        org.jsoup.nodes.Document document5 = document2.normalise();
        org.jsoup.nodes.Document document7 = org.jsoup.nodes.Document.createShell("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str8 = document7.baseUri();
        document5.addChild((org.jsoup.nodes.Node) document7);
        int int10 = document7.nodeDepth();
        org.jsoup.select.Elements elements11 = document7.siblingElements();
        java.util.List<org.jsoup.nodes.Node> nodeList12 = document7.siblingNodes();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi" + "'", str3, "hi");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>" + "'", str4, "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str8, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(nodeList12);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.select.Elements elements9 = document2.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Evaluator.AttributeWithValueContaining attributeWithValueContaining12 = new org.jsoup.nodes.Evaluator.AttributeWithValueContaining("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!", "head");
        int int13 = elements9.indexOf((java.lang.Object) "head");
        org.jsoup.nodes.Element element15 = elements9.get(0);
        org.jsoup.nodes.Node node16 = element15.parentNode;
        org.jsoup.nodes.Element element18 = element15.val("<html>\n<head>\n</head>\n<body>\n</body>\n</html><<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>><hi!>\n</hi!>");
        java.util.Set<java.lang.String> strSet19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element20 = element15.classNames(strSet19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(element18);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element30 = document20.prependChild((org.jsoup.nodes.Node) document29);
        java.lang.String str31 = document20.val();
        org.jsoup.nodes.Element element33 = document20.text("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.nodes.Element element35 = element33.wrap("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.jsoup.select.Elements elements37 = element35.getElementsByIndexGreaterThan((int) (short) -1);
        java.util.function.UnaryOperator<org.jsoup.nodes.Element> elementUnaryOperator38 = null;
        // The following exception was thrown during execution in test generation
        try {
            elements37.replaceAll(elementUnaryOperator38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(element33);
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(elements37);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element12 = document6.head();
        org.jsoup.nodes.Attributes attributes13 = element12.attributes;
        java.lang.String str15 = attributes13.get("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(attributes13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.jsoup.safety.Whitelist whitelist1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.jsoup.Jsoup.isValid("org.jsoup.select.Selector$SelectorParseException: <html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>", whitelist1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str19 = document18.outerHtml();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Element element26 = document22.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Attributes attributes28 = document22.attributes();
        java.lang.String str29 = document22.title();
        int int30 = elements15.lastIndexOf((java.lang.Object) document22);
        org.jsoup.nodes.XmlDeclaration xmlDeclaration34 = new org.jsoup.nodes.XmlDeclaration("hi!", "!", false);
        org.jsoup.nodes.Document document37 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node38 = document37.parentNode;
        boolean boolean39 = document37.isBlock();
        xmlDeclaration34.addChild((org.jsoup.nodes.Node) document37);
        org.jsoup.nodes.Element element42 = document37.html("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        boolean boolean43 = elements15.contains((java.lang.Object) document37);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str19, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("[ , !]");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        java.lang.String str6 = document4.title();
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str10 = document9.outerHtml();
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        java.lang.String str15 = document13.title();
        org.jsoup.nodes.Element element17 = document13.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element18 = document9.appendChild((org.jsoup.nodes.Node) document13);
        org.jsoup.nodes.Node node19 = document13.parentNode;
        document4.setParentNode(node19);
        boolean boolean21 = tag1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document23 = org.jsoup.nodes.Document.createShell("hi!");
        org.jsoup.nodes.Element element24 = document4.prependChild((org.jsoup.nodes.Node) document23);
        org.jsoup.nodes.Element element26 = document4.text("<?head>");
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str10, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element26);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node8 = document2.parentNode;
        org.jsoup.select.Elements elements10 = document2.getElementsByIndexGreaterThan((int) '4');
        java.lang.String str11 = document2.baseUri();
        org.jsoup.nodes.Element element13 = document2.appendText("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document14 = document2.normalise();
        org.jsoup.select.Elements elements16 = document2.getElementsByIndexEquals(0);
        org.jsoup.nodes.Attributes attributes17 = document2.attributes;
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(attributes17);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan1 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) ' ');
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        org.jsoup.select.Elements elements9 = document6.getElementsByIndexLessThan((int) 'a');
        boolean boolean10 = indexLessThan3.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Element element12 = document6.prepend("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        boolean boolean13 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node17 = document16.parentNode;
        java.lang.String str18 = document16.title();
        org.jsoup.nodes.Attributes attributes19 = document16.attributes();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        org.jsoup.select.Elements elements25 = document22.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element26 = document16.prependChild((org.jsoup.nodes.Node) document22);
        java.lang.String str27 = document22.baseUri();
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str31 = document30.outerHtml();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node35 = document34.parentNode;
        java.lang.String str36 = document34.title();
        org.jsoup.nodes.Element element38 = document34.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element39 = document30.appendChild((org.jsoup.nodes.Node) document34);
        org.jsoup.nodes.Attributes attributes40 = document34.attributes();
        document22.addChild((org.jsoup.nodes.Node) document34);
        org.jsoup.nodes.Element element43 = document34.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements44 = element43.getAllElements();
        org.jsoup.nodes.Element element46 = element43.prepend("<!---->=\"\"");
        java.util.List<org.jsoup.nodes.Node> nodeList47 = element43.childNodes;
        org.jsoup.nodes.Document document50 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str51 = document50.outerHtml();
        org.jsoup.select.Elements elements52 = document50.getAllElements();
        java.lang.String str53 = document50.data();
        org.jsoup.nodes.Element element55 = document50.text("");
        org.jsoup.select.Elements elements57 = element55.getElementsByIndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Element element58 = element43.prependChild((org.jsoup.nodes.Node) element55);
        org.jsoup.nodes.Element element60 = element55.toggleClass("");
        java.lang.String str61 = element55.data();
        org.jsoup.select.Elements elements62 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexGreaterThan1, element55);
        org.jsoup.select.Elements elements65 = element55.getElementsByAttributeValueContaining("<?hi>", "<html>\n<head>\n</head>\n<body>\n</body>\n</html><<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>><hi!>\n</hi!>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(attributes19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str31, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(attributes40);
        org.junit.Assert.assertNotNull(element43);
        org.junit.Assert.assertNotNull(elements44);
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str51, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(element55);
        org.junit.Assert.assertNotNull(elements57);
        org.junit.Assert.assertNotNull(element58);
        org.junit.Assert.assertNotNull(element60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(elements62);
        org.junit.Assert.assertNotNull(elements65);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element13 = document2.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str14 = document2.text();
        org.jsoup.nodes.Element element16 = document2.addClass("#document");
        org.jsoup.select.Elements elements19 = element16.getElementsByAttributeValueNot("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>", "#comment");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream20 = elements19.stream();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str14, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertNotNull(elementStream20);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Element element29 = document20.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements30 = element29.getAllElements();
        int int31 = elements30.size();
        java.lang.Class<?> wildcardClass32 = elements30.getClass();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Element element12 = document8.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) document8);
        org.jsoup.nodes.Element element14 = document8.head();
        java.lang.String str15 = element14.id();
        boolean boolean16 = tag1.matches(element14);
        org.jsoup.nodes.Element element18 = element14.getElementById("<!---->");
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(element18);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor15 = attributes12.iterator();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Attributes attributes21 = document18.attributes();
        java.lang.String str22 = attributes21.html();
        attributes12.addAll(attributes21);
        java.lang.String str24 = attributes12.toString();
        boolean boolean26 = attributes12.hasKey("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node30 = document29.parentNode;
        java.lang.String str31 = document29.title();
        org.jsoup.nodes.Attributes attributes32 = document29.attributes();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        org.jsoup.select.Elements elements38 = document35.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element39 = document29.prependChild((org.jsoup.nodes.Node) document35);
        java.util.List<org.jsoup.nodes.Node> nodeList40 = document29.childNodes;
        org.jsoup.select.Elements elements42 = document29.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document45 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str46 = document45.outerHtml();
        org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node50 = document49.parentNode;
        java.lang.String str51 = document49.title();
        org.jsoup.nodes.Element element53 = document49.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element54 = document45.appendChild((org.jsoup.nodes.Node) document49);
        org.jsoup.nodes.Attributes attributes55 = document49.attributes();
        java.lang.String str56 = document49.title();
        int int57 = elements42.lastIndexOf((java.lang.Object) document49);
        org.jsoup.nodes.Element element59 = document49.appendText("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements61 = element59.getElementsByClass("\n<!---->");
        boolean boolean62 = attributes12.equals((java.lang.Object) element59);
        java.util.List<org.jsoup.nodes.Node> nodeList63 = element59.siblingNodes();
        boolean boolean64 = element59.hasText();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(attributeItor15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(attributes32);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str46, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(element53);
        org.junit.Assert.assertNotNull(element54);
        org.junit.Assert.assertNotNull(attributes55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(element59);
        org.junit.Assert.assertNotNull(elements61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell(" hi=\"\"");
        java.lang.String str2 = document1.baseUri();
        org.jsoup.select.Elements elements3 = document1.getAllElements();
        java.util.Iterator<org.jsoup.nodes.Element> elementItor4 = elements3.iterator();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi=\"\"" + "'", str2, "hi=\"\"");
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elementItor4);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByIndexEquals((int) 'h');
        org.jsoup.nodes.Element element17 = document2.text("<!---->");
        org.jsoup.nodes.Evaluator.Tag tag19 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan21 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node25 = document24.parentNode;
        org.jsoup.select.Elements elements27 = document24.getElementsByIndexLessThan((int) 'a');
        boolean boolean28 = indexLessThan21.matches((org.jsoup.nodes.Element) document24);
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node32 = document31.parentNode;
        org.jsoup.select.Elements elements33 = document31.getAllElements();
        org.jsoup.select.Elements elements34 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan21, (org.jsoup.nodes.Element) document31);
        boolean boolean35 = tag19.matches((org.jsoup.nodes.Element) document31);
        document31.baseUri = "hi=\"\"";
        org.jsoup.nodes.Element element39 = document31.appendText("");
        org.jsoup.nodes.Element element41 = element39.prependText(" !");
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parseBodyFragment("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Element element46 = document44.toggleClass("");
        // The following exception was thrown during execution in test generation
        try {
            document2.replaceChild((org.jsoup.nodes.Node) element41, (org.jsoup.nodes.Node) document44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated expression is false");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(element41);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(element46);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Element element6 = document2.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements7 = element6.getAllElements();
        java.lang.String str8 = element6.html();
        org.jsoup.select.Elements elements11 = element6.getElementsByAttributeValueStarting(" hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str15 = document14.outerHtml();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Element element22 = document18.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element23 = document14.appendChild((org.jsoup.nodes.Node) document18);
        org.jsoup.nodes.Attributes attributes24 = document18.attributes();
        boolean boolean26 = attributes24.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor27 = attributes24.iterator();
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node31 = document30.parentNode;
        java.lang.String str32 = document30.title();
        org.jsoup.nodes.Attributes attributes33 = document30.attributes();
        java.lang.String str34 = attributes33.html();
        attributes24.addAll(attributes33);
        attributes24.remove(" hi=\"\"");
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str41 = document40.outerHtml();
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node45 = document44.parentNode;
        java.lang.String str46 = document44.title();
        org.jsoup.nodes.Element element48 = document44.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element49 = document40.appendChild((org.jsoup.nodes.Node) document44);
        org.jsoup.nodes.Attributes attributes50 = document44.attributes();
        boolean boolean52 = attributes50.hasKey("hi!");
        int int53 = attributes50.size();
        int int54 = attributes50.size();
        attributes24.addAll(attributes50);
        int int56 = elements11.lastIndexOf((java.lang.Object) attributes24);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str15, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(attributes24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(attributeItor27);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(attributes33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str41, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(element48);
        org.junit.Assert.assertNotNull(element49);
        org.junit.Assert.assertNotNull(attributes50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node8 = document2.parentNode;
        org.jsoup.select.Elements elements10 = document2.getElementsByIndexGreaterThan((int) '4');
        java.lang.String str11 = document2.baseUri();
        java.lang.String str12 = document2.nodeName();
        java.lang.String str13 = document2.data();
        boolean boolean15 = document2.hasAttr("&lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "#document" + "'", str12, "#document");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.jsoup.nodes.Evaluator.Id id1 = new org.jsoup.nodes.Evaluator.Id("\n<!--<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>-->");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        java.lang.String str6 = document4.title();
        org.jsoup.nodes.Attributes attributes7 = document4.attributes();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node11 = document10.parentNode;
        org.jsoup.select.Elements elements13 = document10.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element14 = document4.prependChild((org.jsoup.nodes.Node) document10);
        java.lang.String str15 = document10.baseUri();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str19 = document18.outerHtml();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Element element26 = document22.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Attributes attributes28 = document22.attributes();
        document10.addChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Element element31 = document22.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements32 = element31.getAllElements();
        boolean boolean34 = element31.equals((java.lang.Object) "<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
        boolean boolean35 = id1.matches(element31);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str19, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(elements32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element17 = document2.addClass("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        boolean boolean18 = element17.preserveWhitespace();
        org.jsoup.select.Elements elements20 = element17.getElementsByIndexLessThan(0);
        java.lang.String str21 = element17.tagName();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#root" + "'", str21, "#root");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("#declaration", "");
        java.lang.String str3 = document2.data();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        org.jsoup.select.Elements elements9 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements8);
        org.jsoup.select.Elements elements12 = elements8.attr("head", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean14 = elements12.hasAttr("[4]");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        java.lang.String[] strArray10 = new java.lang.String[] { "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"", "[ , #, d, o, c, u, m, e, n, t]", "<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>", "#data", "#declaration", "#declaration", "\n&lt;!----&gt;" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        org.jsoup.nodes.Element element13 = document2.classNames((java.util.Set<java.lang.String>) strSet11);
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        element13.addChild((org.jsoup.nodes.Node) document20);
        boolean boolean28 = element13.hasClass("<!---->=\"\"");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.jsoup.nodes.Evaluator.Attribute attribute1 = new org.jsoup.nodes.Evaluator.Attribute("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        java.lang.String str6 = document4.title();
        org.jsoup.nodes.Attributes attributes7 = document4.attributes();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node11 = document10.parentNode;
        org.jsoup.select.Elements elements13 = document10.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element14 = document4.prependChild((org.jsoup.nodes.Node) document10);
        org.jsoup.select.Elements elements16 = document4.select("hi");
        org.jsoup.select.Elements elements17 = document4.children();
        boolean boolean18 = attribute1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document20 = org.jsoup.nodes.Document.createShell("");
        document20.baseUri = "";
        org.jsoup.select.Elements elements24 = document20.getElementsByIndexEquals((int) (byte) -1);
        org.jsoup.nodes.Document document25 = document20.normalise();
        org.jsoup.nodes.Element element27 = document25.appendText("\n<!---->");
        boolean boolean28 = attribute1.matches((org.jsoup.nodes.Element) document25);
        org.jsoup.nodes.Node node29 = document25.parent();
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node29);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.nodes.Element element8 = document2.text("");
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str12 = document11.outerHtml();
        org.jsoup.select.Elements elements13 = document11.getAllElements();
        boolean boolean14 = element8.equals((java.lang.Object) elements13);
        org.jsoup.select.Elements elements15 = new org.jsoup.select.Elements((java.util.List<org.jsoup.nodes.Element>) elements13);
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream16 = elements15.parallelStream();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str20 = document19.outerHtml();
        org.jsoup.select.Elements elements21 = document19.getAllElements();
        org.jsoup.select.Elements elements23 = elements21.append("#document");
        boolean boolean24 = elements21.hasText();
        boolean boolean25 = elements15.removeAll((java.util.Collection<org.jsoup.nodes.Element>) elements21);
        org.jsoup.nodes.Element element26 = null;
        boolean boolean27 = elements21.add(element26);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements29 = elements21.html("#document");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str12, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(elementStream16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str20, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.jsoup.nodes.Evaluator.IndexEquals indexEquals1 = new org.jsoup.nodes.Evaluator.IndexEquals((int) '!');
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        java.lang.String str6 = document4.title();
        org.jsoup.nodes.Attributes attributes7 = document4.attributes();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node11 = document10.parentNode;
        org.jsoup.select.Elements elements13 = document10.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element14 = document4.prependChild((org.jsoup.nodes.Node) document10);
        java.util.List<org.jsoup.nodes.Node> nodeList15 = document4.childNodes;
        org.jsoup.select.Elements elements17 = document4.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document4.addClass("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        boolean boolean20 = indexEquals1.matches((org.jsoup.nodes.Element) document4);
        int int21 = indexEquals1.index;
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 33 + "'", int21 == 33);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Element element29 = document20.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements30 = element29.getAllElements();
        org.jsoup.nodes.Element element31 = elements30.first();
        org.jsoup.select.Elements elements33 = elements30.html("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(elements33);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.toggleClass("#document");
        org.jsoup.select.Elements elements12 = elements5.addClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str16 = document15.outerHtml();
        org.jsoup.select.Elements elements17 = document15.getAllElements();
        org.jsoup.select.Elements elements19 = elements17.append("#document");
        int int20 = elements5.indexOf((java.lang.Object) "#document");
        org.jsoup.select.Elements elements22 = elements5.val("<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
        org.jsoup.nodes.Element element23 = elements5.last();
        java.lang.String str24 = element23.val();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str16, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n<head>\n</head>\n<body>\n</body>\n</html>" + "'", str24, "<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell(" hi=\"\"");
        org.jsoup.nodes.Element element2 = document1.body();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element2);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str19 = document18.outerHtml();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Element element26 = document22.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Attributes attributes28 = document22.attributes();
        java.lang.String str29 = document22.title();
        int int30 = elements15.lastIndexOf((java.lang.Object) document22);
        int int31 = elements15.size();
        org.jsoup.nodes.Element element32 = elements15.first();
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor33 = elements15.listIterator();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str19, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(element32);
        org.junit.Assert.assertNotNull(elementItor33);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.jsoup.nodes.Evaluator.Class class1 = new org.jsoup.nodes.Evaluator.Class("");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Element element12 = document8.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) document8);
        org.jsoup.nodes.Element element15 = document4.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str16 = document4.text();
        org.jsoup.select.Elements elements18 = document4.getElementsByIndexLessThan((int) (byte) 1);
        document4.title(" !");
        boolean boolean21 = class1.matches((org.jsoup.nodes.Element) document4);
        java.lang.String str22 = document4.outerHtml();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements24 = document4.select("\n  <head>\n  </head>");
            org.junit.Assert.fail("Expected exception of type org.jsoup.select.Selector.SelectorParseException; message: Could not parse query <head>?  </head>");
        } catch (org.jsoup.select.Selector.SelectorParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str16, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n<head>\n <title> !</title>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>" + "'", str22, "<html>\n<head>\n <title> !</title>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.select.Elements elements6 = elements4.prepend("");
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.outerHtml();
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Element element18 = document14.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document10.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Element element20 = document14.nextElementSibling();
        org.jsoup.select.Elements elements21 = document14.siblingElements();
        org.jsoup.nodes.Element element22 = elements4.set(1, (org.jsoup.nodes.Element) document14);
        java.util.Spliterator<org.jsoup.nodes.Element> elementSpliterator23 = elements4.spliterator();
        java.lang.String str25 = elements4.attr("#data");
        org.jsoup.select.Elements elements28 = elements4.attr("[4]", "<html> <head> </head> <body> hi! </body> </html> <head> </head> <body> hi! </body> hi!");
        boolean boolean30 = elements28.hasClass("<!---->");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str11, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNull(element20);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(elementSpliterator23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.jsoup.nodes.Evaluator.Class class1 = new org.jsoup.nodes.Evaluator.Class("");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Element element12 = document8.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) document8);
        org.jsoup.nodes.Element element15 = document4.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str16 = document4.text();
        org.jsoup.select.Elements elements18 = document4.getElementsByIndexLessThan((int) (byte) 1);
        document4.title(" !");
        boolean boolean21 = class1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Evaluator.AllElements allElements22 = new org.jsoup.nodes.Evaluator.AllElements();
        org.jsoup.nodes.Document document25 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        boolean boolean26 = allElements22.matches((org.jsoup.nodes.Element) document25);
        java.lang.String str27 = document25.val();
        boolean boolean28 = class1.matches((org.jsoup.nodes.Element) document25);
        document25.baseUri = " hi=\"\"";
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str16, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.jsoup.nodes.Evaluator.Id id1 = new org.jsoup.nodes.Evaluator.Id("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Document document3 = org.jsoup.nodes.Document.createShell("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element5 = document3.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        boolean boolean6 = id1.matches(element5);
        org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parseBodyFragment("hi! <html> <head> </head> <body> hi! </body> </html>");
        boolean boolean9 = id1.matches((org.jsoup.nodes.Element) document8);
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node13 = document12.parentNode;
        java.lang.String str14 = document12.title();
        org.jsoup.nodes.Attributes attributes15 = document12.attributes();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        org.jsoup.select.Elements elements21 = document18.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element22 = document12.prependChild((org.jsoup.nodes.Node) document18);
        org.jsoup.select.Elements elements24 = document12.select("hi");
        org.jsoup.select.Elements elements25 = document12.children();
        java.lang.String str26 = document12.nodeName();
        boolean boolean27 = id1.matches((org.jsoup.nodes.Element) document12);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertNotNull(element5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#document" + "'", str26, "#document");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        org.jsoup.select.Elements elements8 = document5.getElementsByIndexLessThan((int) 'a');
        java.lang.String str9 = document5.text();
        org.jsoup.select.Elements elements12 = document5.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        int int14 = elements12.lastIndexOf((java.lang.Object) 'a');
        org.jsoup.select.Elements elements16 = elements12.addClass("");
        org.jsoup.nodes.Evaluator.Tag tag18 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan20 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node24 = document23.parentNode;
        org.jsoup.select.Elements elements26 = document23.getElementsByIndexLessThan((int) 'a');
        boolean boolean27 = indexLessThan20.matches((org.jsoup.nodes.Element) document23);
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node31 = document30.parentNode;
        org.jsoup.select.Elements elements32 = document30.getAllElements();
        org.jsoup.select.Elements elements33 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan20, (org.jsoup.nodes.Element) document30);
        boolean boolean34 = tag18.matches((org.jsoup.nodes.Element) document30);
        document30.baseUri = "hi=\"\"";
        org.jsoup.nodes.Element element38 = document30.appendText("");
        boolean boolean39 = elements16.add(element38);
        org.jsoup.select.Elements elements41 = elements16.append("4");
        java.lang.Integer int42 = org.jsoup.nodes.Node.indexInList((org.jsoup.nodes.Element) document2, (java.util.List<org.jsoup.nodes.Element>) elements16);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(elements32);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(elements41);
        org.junit.Assert.assertNull(int42);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        org.jsoup.select.Elements elements7 = document4.getElementsByIndexLessThan((int) 'a');
        boolean boolean8 = indexLessThan1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Evaluator.Attribute attribute10 = new org.jsoup.nodes.Evaluator.Attribute("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        java.lang.String str15 = document13.title();
        org.jsoup.nodes.Attributes attributes16 = document13.attributes();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        org.jsoup.select.Elements elements22 = document19.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element23 = document13.prependChild((org.jsoup.nodes.Node) document19);
        org.jsoup.select.Elements elements25 = document13.select("hi");
        org.jsoup.select.Elements elements26 = document13.children();
        boolean boolean27 = attribute10.matches((org.jsoup.nodes.Element) document13);
        boolean boolean28 = indexLessThan1.matches((org.jsoup.nodes.Element) document13);
        org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        java.lang.String str32 = document31.baseUri();
        org.jsoup.select.Elements elements34 = document31.getElementsByTag(" !");
        boolean boolean35 = indexLessThan1.matches((org.jsoup.nodes.Element) document31);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements37 = document31.getElementsByTag("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated string is empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi" + "'", str32, "hi");
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Element element6 = document2.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements7 = element6.getAllElements();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = element6.childNodes;
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        java.lang.String str13 = document11.title();
        org.jsoup.nodes.Attributes attributes14 = document11.attributes();
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node18 = document17.parentNode;
        org.jsoup.select.Elements elements20 = document17.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element21 = document11.prependChild((org.jsoup.nodes.Node) document17);
        java.lang.String str22 = document17.baseUri();
        org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str26 = document25.outerHtml();
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node30 = document29.parentNode;
        java.lang.String str31 = document29.title();
        org.jsoup.nodes.Element element33 = document29.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element34 = document25.appendChild((org.jsoup.nodes.Node) document29);
        org.jsoup.nodes.Attributes attributes35 = document29.attributes();
        document17.addChild((org.jsoup.nodes.Node) document29);
        org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element39 = document29.prependChild((org.jsoup.nodes.Node) document38);
        element6.setParentNode((org.jsoup.nodes.Node) document38);
        org.jsoup.nodes.Element element42 = document38.addClass("#declaration");
        org.jsoup.select.Elements elements45 = element42.getElementsByAttributeValueContaining("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>", "hi=\"\"");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream46 = elements45.parallelStream();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str26, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(element33);
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertNotNull(attributes35);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertNotNull(elements45);
        org.junit.Assert.assertNotNull(elementStream46);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element13 = document2.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.jsoup.nodes.Element element15 = element13.toggleClass("#data");
        org.jsoup.parser.Tag tag17 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean18 = tag17.preserveWhitespace();
        org.jsoup.nodes.Element element20 = new org.jsoup.nodes.Element(tag17, "\n<!---->");
        org.jsoup.select.Elements elements21 = element20.children();
        org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parseBodyFragment("[!]", "[ , !]");
        // The following exception was thrown during execution in test generation
        try {
            element15.replaceChild((org.jsoup.nodes.Node) element20, (org.jsoup.nodes.Node) document24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated expression is false");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(tag17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(document24);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.prepend("hi");
        org.jsoup.select.Elements elements12 = elements10.toggleClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements13 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements12);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("#data");
        org.jsoup.nodes.Node node2 = document1.parent();
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        org.jsoup.select.Elements elements8 = document5.getElementsByIndexLessThan((int) 'a');
        java.lang.String str9 = document5.text();
        org.jsoup.nodes.Element element11 = document5.text("");
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str15 = document14.outerHtml();
        org.jsoup.select.Elements elements16 = document14.getAllElements();
        boolean boolean17 = element11.equals((java.lang.Object) elements16);
        boolean boolean19 = element11.hasClass("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        java.lang.String str20 = element11.toString();
        java.util.Set<java.lang.String> strSet21 = element11.classNames();
        org.jsoup.nodes.Element element22 = document1.classNames(strSet21);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str15, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n<head>\n</head>\n<body>\n</body>\n</html>" + "'", str20, "<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(element22);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        org.jsoup.nodes.Element element3 = new org.jsoup.nodes.Element(tag1, "!");
        boolean boolean4 = tag1.isData();
        org.jsoup.nodes.Evaluator.Tag tag6 = new org.jsoup.nodes.Evaluator.Tag("hi!");
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str10 = document9.outerHtml();
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        java.lang.String str15 = document13.title();
        org.jsoup.nodes.Element element17 = document13.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element18 = document9.appendChild((org.jsoup.nodes.Node) document13);
        boolean boolean19 = tag6.matches((org.jsoup.nodes.Element) document9);
        boolean boolean20 = tag1.equals((java.lang.Object) tag6);
        org.jsoup.nodes.Element element22 = new org.jsoup.nodes.Element(tag1, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Element element24 = element22.appendElement("<html>\n<head>\n</head>\n<body>\n &lt;#root&gt; \n <html> \n  <head> \n  </head> \n  <body>\n    hi!    \n   <html> \n    <head> \n    </head> \n    <body>\n      hi!  \n    </body>\n   </html>\n  </body>\n </html>\n</body>\n</html><&lt;!----&gt;>\n</&lt;!----&gt;>");
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str10, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(element24);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node8 = document2.parentNode;
        org.jsoup.select.Elements elements10 = document2.getElementsByIndexGreaterThan((int) '4');
        java.lang.String str11 = document2.baseUri();
        org.jsoup.nodes.Element element13 = document2.appendText("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document14 = document2.normalise();
        org.jsoup.nodes.Element element16 = document2.prependElement("<html>\n    <head>\n    </head>\n    <body>\n     &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n    </body>\n   </html>\n<head>\n    </head>\n    <body>\n     &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n    </body>\n\n&lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(element16);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.parser.Tag tag3 = document2.tag();
        org.jsoup.nodes.Element element5 = new org.jsoup.nodes.Element(tag3, "\n&lt;!----&gt;");
        boolean boolean6 = tag3.canContainBlock();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.outerHtml();
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Element element18 = document14.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document10.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Attributes attributes20 = document14.attributes();
        java.lang.String str22 = attributes20.get("hi!");
        java.lang.String str24 = attributes20.get("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = new org.jsoup.nodes.Element(tag3, "<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>", attributes20);
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting28 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting28.value = "hi!";
        java.lang.String str31 = attributeWithValueStarting28.value;
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node35 = document34.parentNode;
        org.jsoup.select.Elements elements37 = document34.getElementsByIndexLessThan((int) 'a');
        java.lang.String str38 = document34.text();
        org.jsoup.nodes.Element element40 = document34.text("");
        org.jsoup.nodes.Document document43 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str44 = document43.outerHtml();
        org.jsoup.select.Elements elements45 = document43.getAllElements();
        boolean boolean46 = element40.equals((java.lang.Object) elements45);
        boolean boolean47 = attributeWithValueStarting28.matches(element40);
        java.lang.String str48 = element40.text();
        org.jsoup.parser.Tag tag49 = element40.tag();
        org.jsoup.nodes.Document document53 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str54 = document53.outerHtml();
        org.jsoup.nodes.Document document57 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node58 = document57.parentNode;
        java.lang.String str59 = document57.title();
        org.jsoup.nodes.Element element61 = document57.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element62 = document53.appendChild((org.jsoup.nodes.Node) document57);
        org.jsoup.nodes.Attributes attributes63 = document57.attributes();
        boolean boolean65 = attributes63.hasKey("hi!");
        int int66 = attributes63.size();
        int int67 = attributes63.size();
        java.util.List<org.jsoup.nodes.Attribute> attributeList68 = attributes63.asList();
        java.lang.String str69 = attributes63.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator70 = attributes63.spliterator();
        org.jsoup.nodes.Document document73 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str74 = document73.outerHtml();
        org.jsoup.nodes.Document document77 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node78 = document77.parentNode;
        java.lang.String str79 = document77.title();
        org.jsoup.nodes.Element element81 = document77.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element82 = document73.appendChild((org.jsoup.nodes.Node) document77);
        org.jsoup.nodes.Attributes attributes83 = document77.attributes();
        boolean boolean85 = attributes83.hasKey("hi!");
        int int86 = attributes83.size();
        int int87 = attributes83.size();
        java.util.List<org.jsoup.nodes.Attribute> attributeList88 = attributes83.asList();
        java.lang.String str89 = attributes83.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator90 = attributes83.spliterator();
        attributes63.addAll(attributes83);
        org.jsoup.nodes.Element element92 = new org.jsoup.nodes.Element(tag49, "", attributes63);
        attributes20.addAll(attributes63);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str11, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(elements37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str44, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(tag49);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str54, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(element61);
        org.junit.Assert.assertNotNull(element62);
        org.junit.Assert.assertNotNull(attributes63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(attributeList68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(attributeSpliterator70);
        org.junit.Assert.assertNotNull(document73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str74, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document77);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(element81);
        org.junit.Assert.assertNotNull(element82);
        org.junit.Assert.assertNotNull(attributes83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(attributeList88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(attributeSpliterator90);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element12 = document6.nextElementSibling();
        org.jsoup.select.Elements elements13 = document6.siblingElements();
        org.jsoup.nodes.Attributes attributes14 = document6.attributes;
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor15 = attributes14.iterator();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNull(element12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertNotNull(attributeItor15);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.select.Elements elements3 = document2.getAllElements();
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) (short) 10);
        document2.title("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        java.lang.String str8 = document2.outerHtml();
        java.lang.String str9 = document2.id();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n <title>&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;</title>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str8, "<html>\n<head>\n <title>&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;</title>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        org.jsoup.nodes.Element element14 = document6.removeClass("<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>");
        org.jsoup.select.Elements elements15 = document6.getAllElements();
        org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parseBodyFragment("hi! <html> <head> </head> <body> hi! </body> </html>");
        org.jsoup.nodes.Element element18 = document17.empty();
        org.jsoup.nodes.Element element19 = document6.appendChild((org.jsoup.nodes.Node) element18);
        org.jsoup.nodes.Element element21 = element18.wrap("<html>\n  <head>\n  </head>\n  <body>\n   &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n  </body>\n </html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(element21);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.toggleClass("#document");
        java.util.Iterator<org.jsoup.nodes.Element> elementItor11 = elements10.iterator();
        org.jsoup.select.Elements elements13 = elements10.removeAttr("#comment");
        elements10.clear();
        org.jsoup.nodes.Element element15 = elements10.first();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elementItor11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNull(element15);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.append("hi=\"\"");
        int int8 = elements5.size();
        java.lang.String str9 = elements5.text();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi=\"\" hi!hi=\"\"hi=\"\"hi=\"\" hi=\"\" hi!hi=\"\"hi=\"\" hi=\"\" hi!hi=\"\"" + "'", str9, "hi=\"\" hi!hi=\"\"hi=\"\"hi=\"\" hi=\"\" hi!hi=\"\"hi=\"\" hi=\"\" hi!hi=\"\"");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.jsoup.nodes.Evaluator.AttributeWithValueNot attributeWithValueNot2 = new org.jsoup.nodes.Evaluator.AttributeWithValueNot("<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>", "<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parseBodyFragment("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        boolean boolean6 = attributeWithValueNot2.matches((org.jsoup.nodes.Element) document5);
        attributeWithValueNot2.value = "#root";
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.jsoup.safety.Whitelist whitelist1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.jsoup.Jsoup.isValid("<html> <head> </head> <body> hi! </body> </html> <head> </head> <body> hi! </body> hi!", whitelist1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.jsoup.nodes.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.nodes.Evaluator.AttributeWithValueEnding("\n<!---->", "hi!");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        document5.setBaseUri("hi");
        boolean boolean9 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document5);
        org.jsoup.nodes.Element element11 = document5.prependText("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements12 = document5.children();
        boolean boolean14 = document5.hasClass("[ , !]");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Element element6 = document2.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements7 = element6.getAllElements();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = element6.childNodes;
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        java.lang.String str13 = document11.title();
        org.jsoup.nodes.Attributes attributes14 = document11.attributes();
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node18 = document17.parentNode;
        org.jsoup.select.Elements elements20 = document17.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element21 = document11.prependChild((org.jsoup.nodes.Node) document17);
        java.lang.String str22 = document17.baseUri();
        org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str26 = document25.outerHtml();
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node30 = document29.parentNode;
        java.lang.String str31 = document29.title();
        org.jsoup.nodes.Element element33 = document29.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element34 = document25.appendChild((org.jsoup.nodes.Node) document29);
        org.jsoup.nodes.Attributes attributes35 = document29.attributes();
        document17.addChild((org.jsoup.nodes.Node) document29);
        org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element39 = document29.prependChild((org.jsoup.nodes.Node) document38);
        element6.setParentNode((org.jsoup.nodes.Node) document38);
        org.jsoup.select.Elements elements41 = element6.children();
        org.jsoup.nodes.XmlDeclaration xmlDeclaration45 = new org.jsoup.nodes.XmlDeclaration("<html>\n<head>\n</head>\n<body>\n head\n</body>\n</html>", "<html>\n<head>\n</head>\n<body>\n head\n</body>\n</html>", false);
        java.lang.String str46 = xmlDeclaration45.nodeName();
        org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node50 = document49.parentNode;
        org.jsoup.select.Elements elements52 = document49.getElementsByIndexLessThan((int) 'a');
        java.lang.String str53 = document49.text();
        org.jsoup.nodes.Element element55 = document49.text("");
        org.jsoup.nodes.Document document58 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node59 = document58.parentNode;
        org.jsoup.select.Elements elements60 = document58.getAllElements();
        org.jsoup.nodes.Element element62 = document58.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements63 = element62.getAllElements();
        org.jsoup.nodes.Element element64 = document49.appendChild((org.jsoup.nodes.Node) element62);
        org.jsoup.select.Elements elements67 = document49.getElementsByAttributeValueNot("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.jsoup.nodes.Element element69 = document49.appendElement("hi!");
        java.lang.String str70 = document49.outerHtml();
        // The following exception was thrown during execution in test generation
        try {
            element6.replaceChild((org.jsoup.nodes.Node) xmlDeclaration45, (org.jsoup.nodes.Node) document49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated expression is false");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str26, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(element33);
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertNotNull(attributes35);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(elements41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#declaration" + "'", str46, "#declaration");
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(elements52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(element55);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(elements60);
        org.junit.Assert.assertNotNull(element62);
        org.junit.Assert.assertNotNull(elements63);
        org.junit.Assert.assertNotNull(element64);
        org.junit.Assert.assertNotNull(elements67);
        org.junit.Assert.assertNotNull(element69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "<html>\n<head>\n</head>\n<body>\n</body>\n</html><<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>><hi!>\n</hi!>" + "'", str70, "<html>\n<head>\n</head>\n<body>\n</body>\n</html><<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>><hi!>\n</hi!>");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.preserveWhitespace();
        java.lang.String str3 = tag1.toString();
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node8 = document7.parentNode;
        java.lang.String str9 = document7.title();
        org.jsoup.nodes.Attributes attributes10 = document7.attributes();
        java.lang.String str11 = attributes10.html();
        org.jsoup.nodes.Element element12 = new org.jsoup.nodes.Element(tag1, "!", attributes10);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor13 = attributes10.iterator();
        java.lang.String str15 = attributes10.get("<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str19 = document18.outerHtml();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Element element26 = document22.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Attributes attributes28 = document22.attributes();
        boolean boolean30 = attributes28.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor31 = attributes28.iterator();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node35 = document34.parentNode;
        java.lang.String str36 = document34.title();
        org.jsoup.nodes.Attributes attributes37 = document34.attributes();
        java.lang.String str38 = attributes37.html();
        attributes28.addAll(attributes37);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor40 = attributes28.iterator();
        org.jsoup.nodes.Document document43 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str44 = document43.outerHtml();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node48 = document47.parentNode;
        java.lang.String str49 = document47.title();
        org.jsoup.nodes.Element element51 = document47.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element52 = document43.appendChild((org.jsoup.nodes.Node) document47);
        org.jsoup.nodes.Attributes attributes53 = document47.attributes();
        boolean boolean55 = attributes53.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor56 = attributes53.iterator();
        org.jsoup.nodes.Document document59 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node60 = document59.parentNode;
        java.lang.String str61 = document59.title();
        org.jsoup.nodes.Attributes attributes62 = document59.attributes();
        java.lang.String str63 = attributes62.html();
        attributes53.addAll(attributes62);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor65 = attributes62.iterator();
        attributes28.addAll(attributes62);
        attributes10.addAll(attributes28);
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(attributeItor13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str19, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(attributeItor31);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(attributes37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(attributeItor40);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str44, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(element51);
        org.junit.Assert.assertNotNull(element52);
        org.junit.Assert.assertNotNull(attributes53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(attributeItor56);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(attributes62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(attributeItor65);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        int int2 = indexLessThan1.index;
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream12 = elements11.stream();
        org.jsoup.select.Elements elements14 = elements11.addClass("hi");
        org.jsoup.select.Elements elements15 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements14);
        java.lang.Integer int16 = org.jsoup.nodes.Node.indexInList((org.jsoup.nodes.Element) document5, (java.util.List<org.jsoup.nodes.Element>) elements15);
        org.jsoup.nodes.Element element18 = document5.removeClass("");
        boolean boolean19 = indexLessThan1.matches((org.jsoup.nodes.Element) document5);
        indexLessThan1.index = '!';
        indexLessThan1.index = (short) 0;
        int int24 = indexLessThan1.index;
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(elementStream12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements17 = elements15.removeAttr("hi");
        org.jsoup.select.Elements elements18 = new org.jsoup.select.Elements((java.util.List<org.jsoup.nodes.Element>) elements15);
        org.jsoup.nodes.Document document21 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node22 = document21.parentNode;
        org.jsoup.select.Elements elements24 = document21.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream25 = elements24.stream();
        int int26 = elements24.size();
        boolean boolean28 = elements24.hasAttr("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        boolean boolean29 = elements15.containsAll((java.util.Collection<org.jsoup.nodes.Element>) elements24);
        java.lang.String str31 = elements24.attr("!");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(elementStream25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        java.lang.String str7 = document6.baseUri();
        java.lang.String str8 = document6.html();
        org.jsoup.nodes.Document document9 = document6.normalise();
        org.jsoup.nodes.Document document11 = org.jsoup.nodes.Document.createShell("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str12 = document11.baseUri();
        document9.addChild((org.jsoup.nodes.Node) document11);
        org.jsoup.nodes.Element element15 = document11.createElement("#document");
        org.jsoup.nodes.Attributes attributes16 = document11.attributes;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element17 = document2.prependChild((org.jsoup.nodes.Node) document11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.lang.NotImplementedException; message: Cannot (yet) move nodes in tree");
        } catch (org.apache.commons.lang.NotImplementedException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi" + "'", str7, "hi");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>" + "'", str8, "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str12, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(attributes16);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting2.value = "hi!";
        java.lang.String str5 = attributeWithValueStarting2.value;
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        java.lang.String str12 = document8.text();
        org.jsoup.nodes.Element element14 = document8.text("");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        boolean boolean20 = element14.equals((java.lang.Object) elements19);
        boolean boolean21 = attributeWithValueStarting2.matches(element14);
        org.jsoup.nodes.Element element24 = element14.attr("hi!", "");
        org.jsoup.nodes.Attributes attributes25 = element14.attributes;
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor26 = attributes25.iterator();
        java.util.List<org.jsoup.nodes.Attribute> attributeList27 = attributes25.asList();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(attributes25);
        org.junit.Assert.assertNotNull(attributeItor26);
        org.junit.Assert.assertNotNull(attributeList27);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Element element29 = document20.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements30 = element29.getAllElements();
        org.jsoup.nodes.Element element32 = element29.prepend("<!---->=\"\"");
        java.util.List<org.jsoup.nodes.Node> nodeList33 = element29.childNodes;
        org.jsoup.nodes.Document document36 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str37 = document36.outerHtml();
        org.jsoup.select.Elements elements38 = document36.getAllElements();
        java.lang.String str39 = document36.data();
        org.jsoup.nodes.Element element41 = document36.text("");
        org.jsoup.select.Elements elements43 = element41.getElementsByIndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Element element44 = element29.prependChild((org.jsoup.nodes.Node) element41);
        org.jsoup.nodes.Element element46 = element29.wrap("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        element46.setBaseUri("\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>");
        java.util.Set<java.lang.String> strSet49 = element46.classNames();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str37, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(element41);
        org.junit.Assert.assertNotNull(elements43);
        org.junit.Assert.assertNotNull(element44);
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertNotNull(strSet49);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements14 = document8.getElementsByClass("!");
        java.util.Spliterator<org.jsoup.nodes.Element> elementSpliterator15 = elements14.spliterator();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Attributes attributes21 = document18.attributes();
        org.jsoup.nodes.Attribute attribute24 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        java.lang.String str25 = attribute24.html();
        attributes21.put(attribute24);
        java.lang.String str27 = attributes21.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator28 = attributes21.spliterator();
        boolean boolean30 = attributes21.hasKey("<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
        boolean boolean31 = elements14.remove((java.lang.Object) "<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
        org.jsoup.nodes.DataNode dataNode34 = new org.jsoup.nodes.DataNode("hi", "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        java.lang.String str35 = dataNode34.toString();
        java.lang.String str36 = dataNode34.nodeName();
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan38 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) (byte) 10);
        org.jsoup.nodes.Document document40 = new org.jsoup.nodes.Document(" hi=\"\"");
        boolean boolean41 = indexGreaterThan38.matches((org.jsoup.nodes.Element) document40);
        dataNode34.setParentNode((org.jsoup.nodes.Node) document40);
        boolean boolean43 = elements14.equals((java.lang.Object) dataNode34);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(elementSpliterator15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertNotNull(attribute24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi=\"\"" + "'", str25, "hi=\"\"");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + " hi=\"\"" + "'", str27, " hi=\"\"");
        org.junit.Assert.assertNotNull(attributeSpliterator28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi" + "'", str35, "hi");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "#data" + "'", str36, "#data");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.jsoup.nodes.Attribute attribute2 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        java.lang.String str7 = document5.title();
        boolean boolean8 = attribute2.equals((java.lang.Object) str7);
        boolean boolean10 = attribute2.equals((java.lang.Object) 100L);
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str14 = document13.outerHtml();
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node18 = document17.parentNode;
        java.lang.String str19 = document17.title();
        org.jsoup.nodes.Element element21 = document17.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element22 = document13.appendChild((org.jsoup.nodes.Node) document17);
        org.jsoup.nodes.Attributes attributes23 = document17.attributes();
        boolean boolean24 = attribute2.equals((java.lang.Object) attributes23);
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator25 = attributes23.spliterator();
        org.junit.Assert.assertNotNull(attribute2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str14, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(attributes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(attributeSpliterator25);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor15 = attributes12.iterator();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Attributes attributes21 = document18.attributes();
        java.lang.String str22 = attributes21.html();
        attributes12.addAll(attributes21);
        attributes12.remove(" hi=\"\"");
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str29 = document28.outerHtml();
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node33 = document32.parentNode;
        java.lang.String str34 = document32.title();
        org.jsoup.nodes.Element element36 = document32.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element37 = document28.appendChild((org.jsoup.nodes.Node) document32);
        org.jsoup.nodes.Attributes attributes38 = document32.attributes();
        boolean boolean40 = attributes38.hasKey("hi!");
        int int41 = attributes38.size();
        int int42 = attributes38.size();
        attributes12.addAll(attributes38);
        java.lang.String str44 = attributes12.toString();
        java.lang.String str45 = attributes12.html();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(attributeItor15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str29, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(attributes38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        org.jsoup.select.Elements elements9 = document6.getElementsByIndexLessThan((int) 'a');
        boolean boolean10 = indexLessThan3.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        org.jsoup.select.Elements elements15 = document13.getAllElements();
        org.jsoup.select.Elements elements16 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan3, (org.jsoup.nodes.Element) document13);
        boolean boolean17 = tag1.matches((org.jsoup.nodes.Element) document13);
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str21 = document20.nodeName();
        boolean boolean22 = tag1.matches((org.jsoup.nodes.Element) document20);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#document" + "'", str21, "#document");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        org.jsoup.select.Elements elements9 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements8);
        org.jsoup.select.Elements elements11 = elements9.append(" !");
        int int12 = elements11.size();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.isEmpty();
        boolean boolean3 = tag1.preserveWhitespace();
        org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parseBodyFragment("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "hi");
        boolean boolean7 = tag1.equals((java.lang.Object) "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean8 = tag1.isInline();
        java.lang.String str9 = tag1.toString();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor15 = attributes12.iterator();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Attributes attributes21 = document18.attributes();
        java.lang.String str22 = attributes21.html();
        attributes12.addAll(attributes21);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor24 = attributes12.iterator();
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting27 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting27.value = "hi!";
        java.lang.String str30 = attributeWithValueStarting27.value;
        org.jsoup.nodes.Document document33 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node34 = document33.parentNode;
        org.jsoup.select.Elements elements36 = document33.getElementsByIndexLessThan((int) 'a');
        java.lang.String str37 = document33.text();
        org.jsoup.nodes.Element element39 = document33.text("");
        org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str43 = document42.outerHtml();
        org.jsoup.select.Elements elements44 = document42.getAllElements();
        boolean boolean45 = element39.equals((java.lang.Object) elements44);
        boolean boolean46 = attributeWithValueStarting27.matches(element39);
        org.jsoup.nodes.Element element49 = element39.attr("hi!", "");
        org.jsoup.nodes.Attributes attributes50 = element39.attributes;
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor51 = attributes50.iterator();
        attributes50.put("!\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "<html>\n<head>\n #document\n</head>\n<body> hi!#document\n</body>#document\n</html>#document\n<head>\n #document\n</head>\n<body> hi!#document\n</body>#document\n#document\nhi!#document");
        org.jsoup.nodes.Attribute attribute57 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        org.jsoup.nodes.Document document60 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node61 = document60.parentNode;
        java.lang.String str62 = document60.title();
        boolean boolean63 = attribute57.equals((java.lang.Object) str62);
        boolean boolean65 = attribute57.equals((java.lang.Object) 100L);
        org.jsoup.nodes.Document document68 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str69 = document68.outerHtml();
        org.jsoup.nodes.Document document72 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node73 = document72.parentNode;
        java.lang.String str74 = document72.title();
        org.jsoup.nodes.Element element76 = document72.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element77 = document68.appendChild((org.jsoup.nodes.Node) document72);
        org.jsoup.nodes.Attributes attributes78 = document72.attributes();
        boolean boolean79 = attribute57.equals((java.lang.Object) attributes78);
        java.lang.String str80 = attribute57.html();
        attributes50.put(attribute57);
        boolean boolean82 = attributes12.equals((java.lang.Object) attribute57);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(attributeItor15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(attributeItor24);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(elements36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str43, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(element49);
        org.junit.Assert.assertNotNull(attributes50);
        org.junit.Assert.assertNotNull(attributeItor51);
        org.junit.Assert.assertNotNull(attribute57);
        org.junit.Assert.assertNotNull(document60);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(document68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str69, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(element76);
        org.junit.Assert.assertNotNull(element77);
        org.junit.Assert.assertNotNull(attributes78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi=\"\"" + "'", str80, "hi=\"\"");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.jsoup.nodes.Evaluator.AttributeWithValue attributeWithValue2 = new org.jsoup.nodes.Evaluator.AttributeWithValue("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node10 = document9.parentNode;
        java.lang.String str11 = document9.title();
        org.jsoup.nodes.Element element13 = document9.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element14 = document5.appendChild((org.jsoup.nodes.Node) document9);
        org.jsoup.nodes.Element element15 = document9.head();
        org.jsoup.nodes.Evaluator.Tag tag17 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str21 = document20.outerHtml();
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node25 = document24.parentNode;
        java.lang.String str26 = document24.title();
        org.jsoup.nodes.Element element28 = document24.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element29 = document20.appendChild((org.jsoup.nodes.Node) document24);
        org.jsoup.nodes.Element element30 = document24.head();
        java.lang.String str31 = element30.id();
        boolean boolean32 = tag17.matches(element30);
        java.lang.String str33 = element30.baseUri();
        element15.parentNode = element30;
        boolean boolean35 = attributeWithValue2.matches(element30);
        java.lang.String str36 = attributeWithValue2.value;
        java.lang.String str37 = attributeWithValue2.value;
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parseBodyFragment("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!", " hi=\"\"");
        boolean boolean41 = attributeWithValue2.matches((org.jsoup.nodes.Element) document40);
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node45 = document44.parentNode;
        org.jsoup.select.Elements elements47 = document44.getElementsByIndexLessThan((int) 'a');
        java.lang.String str48 = document44.text();
        org.jsoup.nodes.Element element50 = document44.text("");
        org.jsoup.nodes.Document document53 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node54 = document53.parentNode;
        org.jsoup.select.Elements elements55 = document53.getAllElements();
        org.jsoup.nodes.Element element57 = document53.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements58 = element57.getAllElements();
        org.jsoup.nodes.Element element59 = document44.appendChild((org.jsoup.nodes.Node) element57);
        org.jsoup.select.Elements elements62 = document44.getElementsByAttributeValueNot("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str63 = document44.tagName();
        org.jsoup.nodes.Document document66 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str67 = document66.outerHtml();
        org.jsoup.nodes.Document document70 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node71 = document70.parentNode;
        java.lang.String str72 = document70.title();
        org.jsoup.nodes.Element element74 = document70.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element75 = document66.appendChild((org.jsoup.nodes.Node) document70);
        java.util.Set<java.lang.String> strSet76 = document70.classNames();
        org.jsoup.nodes.Element element77 = document44.classNames(strSet76);
        org.jsoup.nodes.Element element78 = document40.appendChild((org.jsoup.nodes.Node) element77);
        org.jsoup.nodes.Element element80 = document40.append("\n  <head>\n  </head>");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str21, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!" + "'", str36, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!" + "'", str37, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(elements47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(element50);
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(elements55);
        org.junit.Assert.assertNotNull(element57);
        org.junit.Assert.assertNotNull(elements58);
        org.junit.Assert.assertNotNull(element59);
        org.junit.Assert.assertNotNull(elements62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "#root" + "'", str63, "#root");
        org.junit.Assert.assertNotNull(document66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str67, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(element74);
        org.junit.Assert.assertNotNull(element75);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(element77);
        org.junit.Assert.assertNotNull(element78);
        org.junit.Assert.assertNotNull(element80);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document("");
        org.jsoup.nodes.Attributes attributes2 = document1.attributes();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator3 = attributes2.spliterator();
        java.lang.String str5 = attributes2.get("<?hi!>");
        org.junit.Assert.assertNotNull(attributes2);
        org.junit.Assert.assertNotNull(attributeSpliterator3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Element element6 = document2.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements7 = element6.getAllElements();
        java.util.List<org.jsoup.nodes.Node> nodeList8 = element6.childNodes;
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        java.lang.String str13 = document11.title();
        org.jsoup.nodes.Attributes attributes14 = document11.attributes();
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node18 = document17.parentNode;
        org.jsoup.select.Elements elements20 = document17.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element21 = document11.prependChild((org.jsoup.nodes.Node) document17);
        java.lang.String str22 = document17.baseUri();
        org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str26 = document25.outerHtml();
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node30 = document29.parentNode;
        java.lang.String str31 = document29.title();
        org.jsoup.nodes.Element element33 = document29.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element34 = document25.appendChild((org.jsoup.nodes.Node) document29);
        org.jsoup.nodes.Attributes attributes35 = document29.attributes();
        document17.addChild((org.jsoup.nodes.Node) document29);
        org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element39 = document29.prependChild((org.jsoup.nodes.Node) document38);
        element6.setParentNode((org.jsoup.nodes.Node) document38);
        org.jsoup.select.Elements elements41 = element6.children();
        org.jsoup.select.Elements elements43 = elements41.append("\n<!--<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>-->");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(nodeList8);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str26, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(element33);
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertNotNull(attributes35);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(elements41);
        org.junit.Assert.assertNotNull(elements43);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        boolean boolean5 = document2.hasAttr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("\n<!---->", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements3 = document2.children();
        java.lang.String str4 = document2.title();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        boolean boolean4 = document2.isBlock();
        java.lang.String str5 = document2.title();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.jsoup.nodes.Evaluator.AttributeWithValue attributeWithValue2 = new org.jsoup.nodes.Evaluator.AttributeWithValue("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>", "#document");
        java.lang.String str3 = attributeWithValue2.key;
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str6 = document5.baseUri();
        org.jsoup.select.Elements elements7 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) attributeWithValue2, (org.jsoup.nodes.Element) document5);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(elements7);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean2 = tag1.isData();
        org.jsoup.nodes.Element element4 = new org.jsoup.nodes.Element(tag1, " hi=\"\"");
        boolean boolean5 = tag1.isData();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        java.lang.String str12 = document8.text();
        org.jsoup.select.Elements elements15 = document8.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str16 = document8.text();
        boolean boolean17 = tag1.equals((java.lang.Object) str16);
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str2 = document1.baseUri();
        java.lang.String str3 = document1.baseUri;
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str2, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node8 = document2.parentNode;
        org.jsoup.select.Elements elements10 = document2.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element12 = document2.text("hi=\"\"");
        boolean boolean13 = document2.hasText();
        org.jsoup.nodes.Element element15 = document2.text("hi=\"\"");
        java.lang.String str16 = document2.id();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node18 = document2.removeAttr("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated string is empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.jsoup.nodes.Evaluator.Class class1 = new org.jsoup.nodes.Evaluator.Class("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.select.Elements elements6 = document4.getAllElements();
        java.lang.String str7 = document4.data();
        org.jsoup.nodes.Element element9 = document4.text("");
        org.jsoup.nodes.Node node10 = document4.parentNode;
        org.jsoup.select.Elements elements12 = document4.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element14 = document4.text("hi=\"\"");
        org.jsoup.select.Elements elements15 = document4.children();
        org.jsoup.nodes.Element element17 = document4.appendText("head");
        boolean boolean18 = class1.matches(element17);
        java.lang.StringBuilder stringBuilder19 = null;
        // The following exception was thrown during execution in test generation
        try {
            element17.outerHtml(stringBuilder19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(element9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document("<html>\n<head>\n</head>\n<body>\n head\n</body>\n</html>");
        java.lang.String str2 = document1.tagName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "#root" + "'", str2, "#root");
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.jsoup.nodes.Evaluator.Attribute attribute1 = new org.jsoup.nodes.Evaluator.Attribute("h");
        org.jsoup.nodes.Evaluator.AttributeWithValueEnding attributeWithValueEnding4 = new org.jsoup.nodes.Evaluator.AttributeWithValueEnding("\n<!---->", "hi!");
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str8 = document7.outerHtml();
        document7.setBaseUri("hi");
        boolean boolean11 = attributeWithValueEnding4.matches((org.jsoup.nodes.Element) document7);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Attributes attributes17 = document14.attributes();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        org.jsoup.select.Elements elements23 = document20.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element24 = document14.prependChild((org.jsoup.nodes.Node) document20);
        java.lang.String str25 = document20.baseUri();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str29 = document28.outerHtml();
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node33 = document32.parentNode;
        java.lang.String str34 = document32.title();
        org.jsoup.nodes.Element element36 = document32.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element37 = document28.appendChild((org.jsoup.nodes.Node) document32);
        org.jsoup.nodes.Attributes attributes38 = document32.attributes();
        document20.addChild((org.jsoup.nodes.Node) document32);
        org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element42 = document32.prependChild((org.jsoup.nodes.Node) document41);
        boolean boolean43 = attributeWithValueEnding4.matches((org.jsoup.nodes.Element) document32);
        java.lang.String str44 = document32.title();
        boolean boolean45 = attribute1.matches((org.jsoup.nodes.Element) document32);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str8, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str29, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(attributes38);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element13 = document2.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str14 = document2.text();
        boolean boolean16 = document2.hasClass("\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str14, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.nodes.Element element8 = document2.text("");
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str12 = document11.outerHtml();
        org.jsoup.select.Elements elements13 = document11.getAllElements();
        boolean boolean14 = element8.equals((java.lang.Object) elements13);
        boolean boolean16 = element8.hasClass("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        element8.baseUri = "#document";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element20 = element8.child((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str12, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        org.jsoup.select.Elements elements7 = document4.getElementsByIndexLessThan((int) 'a');
        boolean boolean8 = indexLessThan1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        org.jsoup.select.Elements elements13 = document11.getAllElements();
        org.jsoup.select.Elements elements14 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan1, (org.jsoup.nodes.Element) document11);
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan16 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        org.jsoup.select.Elements elements22 = document19.getElementsByIndexLessThan((int) 'a');
        boolean boolean23 = indexLessThan16.matches((org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node27 = document26.parentNode;
        java.lang.String str28 = document26.title();
        org.jsoup.nodes.Attributes attributes29 = document26.attributes();
        org.jsoup.nodes.Node node32 = document26.attr("hi!", "hi!");
        org.jsoup.select.Elements elements33 = document26.getAllElements();
        boolean boolean34 = indexLessThan16.matches((org.jsoup.nodes.Element) document26);
        org.jsoup.select.Elements elements35 = document26.getAllElements();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str39 = document38.nodeName();
        org.jsoup.select.Elements elements42 = document38.getElementsByAttributeValueContaining("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>", " !");
        boolean boolean43 = document26.equals((java.lang.Object) elements42);
        boolean boolean44 = indexLessThan1.matches((org.jsoup.nodes.Element) document26);
        java.util.List<org.jsoup.nodes.Node> nodeList45 = document26.childNodes;
        org.jsoup.nodes.Element element46 = document26.body();
        java.lang.String str47 = document26.toString();
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(attributes29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "#document" + "'", str39, "#document");
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(nodeList45);
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str47, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor6 = attributes5.iterator();
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str10 = document9.outerHtml();
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        java.lang.String str15 = document13.title();
        org.jsoup.nodes.Element element17 = document13.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element18 = document9.appendChild((org.jsoup.nodes.Node) document13);
        org.jsoup.nodes.Element element19 = document13.nextElementSibling();
        org.jsoup.nodes.Attributes attributes20 = document13.attributes;
        attributes5.addAll(attributes20);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(attributeItor6);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str10, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNull(element19);
        org.junit.Assert.assertNotNull(attributes20);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.jsoup.safety.Whitelist whitelist1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.jsoup.Jsoup.isValid("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!=\"#declaration\"", whitelist1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor15 = attributes12.iterator();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Attributes attributes21 = document18.attributes();
        java.lang.String str22 = attributes21.html();
        attributes12.addAll(attributes21);
        java.lang.String str24 = attributes12.toString();
        java.lang.String str25 = attributes12.toString();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(attributeItor15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        java.lang.String str9 = elements8.html();
        java.lang.String str10 = elements8.val();
        org.jsoup.select.Elements elements12 = elements8.val("hi");
        org.jsoup.select.Elements elements14 = elements12.removeClass("<html>\n<head>\n <title> !</title>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.nodes.Element> elementItor16 = elements14.listIterator((int) 'h');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 104");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!" + "'", str9, "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elements14);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node8 = document2.parentNode;
        org.jsoup.select.Elements elements10 = document2.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element12 = document2.text("hi=\"\"");
        org.jsoup.select.Elements elements13 = document2.children();
        org.jsoup.nodes.Element element15 = document2.appendText("head");
        org.jsoup.nodes.Element element17 = document2.text("");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element19 = document2.getElementById("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated string is empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(element17);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.select.Elements elements6 = elements4.prepend("");
        org.jsoup.select.Elements elements8 = elements6.prepend("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        int int10 = elements8.lastIndexOf((java.lang.Object) '#');
        elements8.clear();
        org.jsoup.select.Elements elements13 = elements8.wrap("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node18 = document17.parentNode;
        java.lang.String str19 = document17.title();
        org.jsoup.nodes.Attributes attributes20 = document17.attributes();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node24 = document23.parentNode;
        org.jsoup.select.Elements elements26 = document23.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element27 = document17.prependChild((org.jsoup.nodes.Node) document23);
        java.lang.String str28 = document23.baseUri();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str32 = document31.outerHtml();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        java.lang.String str37 = document35.title();
        org.jsoup.nodes.Element element39 = document35.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element40 = document31.appendChild((org.jsoup.nodes.Node) document35);
        org.jsoup.nodes.Attributes attributes41 = document35.attributes();
        document23.addChild((org.jsoup.nodes.Node) document35);
        org.jsoup.nodes.Element element44 = document35.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements45 = element44.getAllElements();
        org.jsoup.nodes.Element element47 = element44.prepend("<!---->=\"\"");
        java.util.List<org.jsoup.nodes.Node> nodeList48 = element44.childNodes;
        org.jsoup.nodes.Document document51 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str52 = document51.outerHtml();
        org.jsoup.select.Elements elements53 = document51.getAllElements();
        java.lang.String str54 = document51.data();
        org.jsoup.nodes.Element element56 = document51.text("");
        org.jsoup.select.Elements elements58 = element56.getElementsByIndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Element element59 = element44.prependChild((org.jsoup.nodes.Node) element56);
        java.util.List<org.jsoup.nodes.Node> nodeList60 = element56.childNodes;
        java.util.List<org.jsoup.nodes.Node> nodeList61 = element56.siblingNodes();
        // The following exception was thrown during execution in test generation
        try {
            elements13.add((int) '!', element56);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 33, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str32, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(attributes41);
        org.junit.Assert.assertNotNull(element44);
        org.junit.Assert.assertNotNull(elements45);
        org.junit.Assert.assertNotNull(element47);
        org.junit.Assert.assertNotNull(nodeList48);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str52, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(element56);
        org.junit.Assert.assertNotNull(elements58);
        org.junit.Assert.assertNotNull(element59);
        org.junit.Assert.assertNotNull(nodeList60);
        org.junit.Assert.assertNotNull(nodeList61);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!=\"#declaration\"");
        org.junit.Assert.assertNotNull(document1);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        org.jsoup.nodes.Element element14 = document6.removeClass("<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>");
        org.jsoup.select.Elements elements15 = document6.getAllElements();
        org.jsoup.nodes.Element element17 = document6.val("");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(element17);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str8 = document7.outerHtml();
        org.jsoup.select.Elements elements9 = document7.getAllElements();
        java.lang.String str10 = document7.data();
        org.jsoup.nodes.Element element12 = document7.text("");
        org.jsoup.nodes.Node node13 = document7.parentNode;
        org.jsoup.select.Elements elements15 = document7.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element17 = document7.text("hi=\"\"");
        boolean boolean18 = document7.hasText();
        org.jsoup.nodes.Element element20 = document7.text("hi=\"\"");
        document2.parentNode = element20;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element22 = document2.nextElementSibling();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str8, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(element20);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.jsoup.nodes.Evaluator.Attribute attribute1 = new org.jsoup.nodes.Evaluator.Attribute("org.jsoup.select.Selector$SelectorParseException: <html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting4 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting4.value = "hi!";
        java.lang.String str7 = attributeWithValueStarting4.value;
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node11 = document10.parentNode;
        org.jsoup.select.Elements elements13 = document10.getElementsByIndexLessThan((int) 'a');
        java.lang.String str14 = document10.text();
        org.jsoup.nodes.Element element16 = document10.text("");
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str20 = document19.outerHtml();
        org.jsoup.select.Elements elements21 = document19.getAllElements();
        boolean boolean22 = element16.equals((java.lang.Object) elements21);
        boolean boolean23 = attributeWithValueStarting4.matches(element16);
        java.lang.String str24 = element16.text();
        org.jsoup.parser.Tag tag25 = element16.tag();
        boolean boolean26 = attribute1.matches(element16);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str20, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(tag25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.jsoup.nodes.Document document3 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node4 = document3.parentNode;
        org.jsoup.select.Elements elements6 = document3.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements8 = elements6.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements10 = elements8.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements11 = org.jsoup.select.Selector.select("#comment", (java.lang.Iterable<org.jsoup.nodes.Element>) elements10);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements13 = elements10.wrap("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated string is empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements11);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        java.lang.String str9 = elements8.html();
        java.lang.String str10 = elements8.val();
        boolean boolean12 = elements8.hasClass("[ , #, d, o, c, u, m, e, n, t]");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!" + "'", str9, "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        boolean boolean4 = document2.isBlock();
        org.jsoup.select.Elements elements6 = document2.getElementsByIndexLessThan((int) (byte) 0);
        java.util.Iterator<org.jsoup.nodes.Element> elementItor7 = elements6.iterator();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elementItor7);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.jsoup.nodes.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.nodes.Evaluator.AttributeWithValueEnding("\n<!---->", "hi!");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        document5.setBaseUri("hi");
        boolean boolean9 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document5);
        org.jsoup.nodes.Element element11 = document5.prependText("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements12 = document5.children();
        org.jsoup.nodes.Element element14 = null;
        // The following exception was thrown during execution in test generation
        try {
            elements12.add(10, element14);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(elements12);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.select.Elements elements6 = elements4.prepend("");
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.outerHtml();
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Element element18 = document14.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document10.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Element element20 = document14.nextElementSibling();
        org.jsoup.select.Elements elements21 = document14.siblingElements();
        org.jsoup.nodes.Element element22 = elements4.set(1, (org.jsoup.nodes.Element) document14);
        org.jsoup.nodes.Evaluator.Class class24 = new org.jsoup.nodes.Evaluator.Class("");
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str28 = document27.outerHtml();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node32 = document31.parentNode;
        java.lang.String str33 = document31.title();
        org.jsoup.nodes.Element element35 = document31.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element36 = document27.appendChild((org.jsoup.nodes.Node) document31);
        org.jsoup.nodes.Element element38 = document27.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str39 = document27.text();
        org.jsoup.select.Elements elements41 = document27.getElementsByIndexLessThan((int) (byte) 1);
        document27.title(" !");
        boolean boolean44 = class24.matches((org.jsoup.nodes.Element) document27);
        // The following exception was thrown during execution in test generation
        try {
            element22.removeChild((org.jsoup.nodes.Node) document27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated expression is false");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str11, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNull(element20);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str28, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str39, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(elements41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element13 = document2.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str14 = document2.text();
        org.jsoup.nodes.Element element16 = document2.addClass("#document");
        org.jsoup.nodes.Element element18 = document2.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str14, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertNotNull(element18);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parse("!");
        org.junit.Assert.assertNotNull(document1);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan1 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) ' ');
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting4 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting4.value = "hi!";
        attributeWithValueStarting4.key = "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>";
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str12 = document11.outerHtml();
        document11.setBaseUri("hi");
        boolean boolean15 = attributeWithValueStarting4.matches((org.jsoup.nodes.Element) document11);
        boolean boolean17 = document11.hasClass("[ , #, d, o, c, u, m, e, n, t]");
        boolean boolean18 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document11);
        boolean boolean20 = document11.hasAttr("<html>\n  <head>\n  </head>\n  <body>\n   &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n  </body>\n </html>");
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str12, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        java.lang.String str12 = element11.outerHtml();
        org.jsoup.select.Elements elements14 = element11.getElementsByIndexEquals((int) (byte) 0);
        boolean boolean15 = element11.isBlock();
        org.jsoup.parser.Tag tag16 = element11.tag();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>" + "'", str12, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(tag16);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("\n<!---->", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        java.lang.String str3 = document2.val();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str7 = document6.outerHtml();
        org.jsoup.select.Elements elements8 = document6.getAllElements();
        java.lang.String str9 = document6.data();
        java.lang.String str10 = document6.baseUri();
        org.jsoup.nodes.Element element12 = document6.text("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean13 = document2.equals((java.lang.Object) document6);
        document2.title("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str7, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("");
        document1.baseUri = "";
        org.jsoup.nodes.Element element5 = document1.html("#document");
        org.jsoup.select.Elements elements7 = document1.getElementsByAttribute("!");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element5);
        org.junit.Assert.assertNotNull(elements7);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("");
        document1.baseUri = "";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements6 = document1.getElementsByAttributeValueContaining("<html>\n  <head>\n  </head>\n  <body>\n   &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n  </body>\n </html>", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated string is empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document1);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Attributes attributes17 = document14.attributes();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        org.jsoup.select.Elements elements23 = document20.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element24 = document14.prependChild((org.jsoup.nodes.Node) document20);
        org.jsoup.select.Elements elements26 = document14.select("hi");
        org.jsoup.nodes.Element element27 = document6.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Element element28 = document14.nextElementSibling();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNull(element28);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting2.value = "hi!";
        java.lang.String str5 = attributeWithValueStarting2.value;
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        java.lang.String str12 = document8.text();
        org.jsoup.nodes.Element element14 = document8.text("");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        boolean boolean20 = element14.equals((java.lang.Object) elements19);
        boolean boolean21 = attributeWithValueStarting2.matches(element14);
        org.jsoup.nodes.Element element24 = element14.attr("hi!", "");
        boolean boolean25 = element24.preserveWhitespace();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.canContainBlock();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str7 = document6.outerHtml();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node11 = document10.parentNode;
        java.lang.String str12 = document10.title();
        org.jsoup.nodes.Element element14 = document10.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element15 = document6.appendChild((org.jsoup.nodes.Node) document10);
        org.jsoup.nodes.Attributes attributes16 = document10.attributes();
        boolean boolean18 = attributes16.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor19 = attributes16.iterator();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Attributes attributes25 = document22.attributes();
        java.lang.String str26 = attributes25.html();
        attributes16.addAll(attributes25);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor28 = attributes16.iterator();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str32 = document31.outerHtml();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        java.lang.String str37 = document35.title();
        org.jsoup.nodes.Element element39 = document35.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element40 = document31.appendChild((org.jsoup.nodes.Node) document35);
        org.jsoup.nodes.Attributes attributes41 = document35.attributes();
        boolean boolean43 = attributes41.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor44 = attributes41.iterator();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node48 = document47.parentNode;
        java.lang.String str49 = document47.title();
        org.jsoup.nodes.Attributes attributes50 = document47.attributes();
        java.lang.String str51 = attributes50.html();
        attributes41.addAll(attributes50);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor53 = attributes50.iterator();
        attributes16.addAll(attributes50);
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator55 = attributes50.spliterator();
        org.jsoup.nodes.Element element56 = new org.jsoup.nodes.Element(tag1, "[!]", attributes50);
        org.jsoup.nodes.Element element58 = new org.jsoup.nodes.Element(tag1, "<html>\n <head>\n </head>\n <body>\n </body>\n</html>");
        boolean boolean59 = tag1.isInline();
        boolean boolean60 = tag1.isEmpty();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str7, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(attributeItor19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(attributes25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(attributeItor28);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str32, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(attributes41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(attributeItor44);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(attributes50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(attributeItor53);
        org.junit.Assert.assertNotNull(attributeSpliterator55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element2 = document1.head();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element2);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.select.Elements elements9 = document2.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Evaluator.AttributeWithValueContaining attributeWithValueContaining12 = new org.jsoup.nodes.Evaluator.AttributeWithValueContaining("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!", "head");
        int int13 = elements9.indexOf((java.lang.Object) "head");
        org.jsoup.nodes.Element element15 = elements9.get(0);
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str20 = document19.outerHtml();
        org.jsoup.select.Elements elements21 = document19.getAllElements();
        java.lang.String str22 = document19.data();
        org.jsoup.nodes.Element element24 = document19.text("");
        org.jsoup.nodes.Node node25 = document19.parentNode;
        org.jsoup.select.Elements elements27 = document19.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element29 = document19.text("hi=\"\"");
        org.jsoup.nodes.Element element30 = element29.parent();
        org.jsoup.nodes.Element element31 = elements9.set((int) (short) 1, element29);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str20, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNull(element30);
        org.junit.Assert.assertNotNull(element31);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        java.lang.String str3 = document2.baseUri();
        java.lang.String str4 = document2.html();
        org.jsoup.nodes.Document document5 = document2.normalise();
        document2.title("<!---->=\"\"");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi" + "'", str3, "hi");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>" + "'", str4, "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document5);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element13 = document2.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str14 = document2.text();
        org.jsoup.select.Elements elements16 = document2.getElementsByIndexLessThan((int) (byte) 1);
        document2.title(" !");
        org.jsoup.nodes.Element element19 = document2.body();
        java.util.Set<java.lang.String> strSet20 = element19.classNames();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str14, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(strSet20);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        boolean boolean5 = document2.hasText();
        boolean boolean6 = document2.preserveWhitespace();
        java.lang.String str7 = document2.title();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting2.value = "hi!";
        java.lang.String str5 = attributeWithValueStarting2.value;
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        java.lang.String str12 = document8.text();
        org.jsoup.nodes.Element element14 = document8.text("");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        boolean boolean20 = element14.equals((java.lang.Object) elements19);
        boolean boolean21 = attributeWithValueStarting2.matches(element14);
        java.lang.String str22 = element14.text();
        org.jsoup.parser.Tag tag23 = element14.tag();
        org.jsoup.nodes.Element element25 = new org.jsoup.nodes.Element(tag23, "<html>\n<head>\n</head>\n<body>\n hi=&quot;&quot;\n</body>\n</html>");
        java.lang.String str26 = tag23.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "#root" + "'", str26, "#root");
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        org.jsoup.nodes.Element element14 = document6.removeClass("<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>");
        org.jsoup.select.Elements elements15 = document6.getAllElements();
        org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parseBodyFragment("hi! <html> <head> </head> <body> hi! </body> </html>");
        org.jsoup.nodes.Element element18 = document17.empty();
        org.jsoup.nodes.Element element19 = document6.appendChild((org.jsoup.nodes.Node) element18);
        org.jsoup.nodes.TextNode textNode22 = org.jsoup.nodes.TextNode.createFromEncoded("\n<!---->", "\n<!---->");
        boolean boolean23 = textNode22.isBlank();
        org.jsoup.nodes.TextNode textNode25 = textNode22.text("hi");
        org.jsoup.nodes.Element element26 = element18.prependChild((org.jsoup.nodes.Node) textNode22);
        org.jsoup.nodes.Element element28 = element18.prependText("4");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(textNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(textNode25);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element28);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.jsoup.nodes.Evaluator.AttributeWithValueNot attributeWithValueNot2 = new org.jsoup.nodes.Evaluator.AttributeWithValueNot("\n<!---->", "#root");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        org.jsoup.select.Elements elements7 = document5.getAllElements();
        java.lang.String str8 = document5.data();
        java.lang.String str9 = document5.baseUri();
        org.jsoup.nodes.Element element11 = document5.text("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = element11.val("#declaration");
        boolean boolean14 = attributeWithValueNot2.matches(element13);
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        java.lang.String str20 = document17.data();
        org.jsoup.nodes.Element element22 = document17.text("");
        org.jsoup.nodes.Node node23 = document17.parentNode;
        org.jsoup.select.Elements elements25 = document17.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element27 = document17.text("hi=\"\"");
        org.jsoup.select.Elements elements28 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) attributeWithValueNot2, (org.jsoup.nodes.Element) document17);
        attributeWithValueNot2.key = "#comment";
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(elements28);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("#data", "\n<!--<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!-->");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements14 = document8.getElementsByClass("!");
        org.jsoup.nodes.Element element16 = document8.append("hi!");
        org.jsoup.nodes.Document document19 = org.jsoup.Jsoup.parse("", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        java.lang.String[] strArray27 = new java.lang.String[] { "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"", "[ , #, d, o, c, u, m, e, n, t]", "<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>", "#data", "#declaration", "#declaration", "\n&lt;!----&gt;" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        org.jsoup.nodes.Element element30 = document19.classNames((java.util.Set<java.lang.String>) strSet28);
        org.jsoup.nodes.Element element31 = element16.classNames((java.util.Set<java.lang.String>) strSet28);
        org.jsoup.select.Elements elements33 = element31.getElementsByIndexEquals((int) '<');
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(elements33);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", " hi=\"\"");
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("[ , !]", "hi=\"\"");
        java.lang.String str6 = document5.html();
        java.lang.String str7 = document5.html();
        boolean boolean8 = attributeWithValueStarting2.matches((org.jsoup.nodes.Element) document5);
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        org.jsoup.select.Elements elements14 = document11.getElementsByIndexLessThan((int) 'a');
        java.lang.String str15 = document11.text();
        org.jsoup.select.Elements elements18 = document11.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        int int20 = elements18.lastIndexOf((java.lang.Object) 'a');
        org.jsoup.select.Elements elements22 = elements18.addClass("");
        org.jsoup.nodes.Evaluator.Tag tag24 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan26 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node30 = document29.parentNode;
        org.jsoup.select.Elements elements32 = document29.getElementsByIndexLessThan((int) 'a');
        boolean boolean33 = indexLessThan26.matches((org.jsoup.nodes.Element) document29);
        org.jsoup.nodes.Document document36 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node37 = document36.parentNode;
        org.jsoup.select.Elements elements38 = document36.getAllElements();
        org.jsoup.select.Elements elements39 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan26, (org.jsoup.nodes.Element) document36);
        boolean boolean40 = tag24.matches((org.jsoup.nodes.Element) document36);
        document36.baseUri = "hi=\"\"";
        org.jsoup.nodes.Element element44 = document36.appendText("");
        boolean boolean45 = elements22.add(element44);
        boolean boolean46 = attributeWithValueStarting2.matches(element44);
        attributeWithValueStarting2.value = "!";
        attributeWithValueStarting2.key = "<html class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>";
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>" + "'", str7, "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(elements32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(elements39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(element44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell(" !");
        org.jsoup.nodes.Element element3 = document1.appendText("[!]");
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        org.jsoup.select.Elements elements9 = document6.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream10 = elements9.stream();
        org.jsoup.select.Elements elements12 = elements9.addClass("hi");
        org.jsoup.select.Elements elements13 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements12);
        boolean boolean15 = elements13.hasClass(" hi=\"\"");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        org.jsoup.select.Elements elements21 = document18.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements23 = elements21.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream24 = elements21.stream();
        boolean boolean25 = elements13.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements21);
        org.jsoup.select.Elements elements27 = elements13.val("");
        java.lang.Integer int28 = org.jsoup.nodes.Node.indexInList(element3, (java.util.List<org.jsoup.nodes.Element>) elements27);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elementStream10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(elementStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertNull(int28);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        org.jsoup.nodes.Element element3 = new org.jsoup.nodes.Element(tag1, "!");
        boolean boolean4 = tag1.isData();
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node8 = document7.parentNode;
        org.jsoup.select.Elements elements10 = document7.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements12 = elements10.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements14 = elements12.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str16 = elements14.attr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean17 = tag1.equals((java.lang.Object) "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str18 = tag1.toString();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str23 = document22.outerHtml();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node27 = document26.parentNode;
        java.lang.String str28 = document26.title();
        org.jsoup.nodes.Element element30 = document26.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element31 = document22.appendChild((org.jsoup.nodes.Node) document26);
        org.jsoup.nodes.Attributes attributes32 = document26.attributes();
        boolean boolean34 = attributes32.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor35 = attributes32.iterator();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node39 = document38.parentNode;
        java.lang.String str40 = document38.title();
        org.jsoup.nodes.Attributes attributes41 = document38.attributes();
        java.lang.String str42 = attributes41.html();
        attributes32.addAll(attributes41);
        attributes32.remove(" hi=\"\"");
        org.jsoup.nodes.Document document48 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str49 = document48.outerHtml();
        org.jsoup.nodes.Document document52 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node53 = document52.parentNode;
        java.lang.String str54 = document52.title();
        org.jsoup.nodes.Element element56 = document52.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element57 = document48.appendChild((org.jsoup.nodes.Node) document52);
        org.jsoup.nodes.Attributes attributes58 = document52.attributes();
        boolean boolean60 = attributes58.hasKey("hi!");
        int int61 = attributes58.size();
        int int62 = attributes58.size();
        attributes32.addAll(attributes58);
        org.jsoup.nodes.Element element64 = new org.jsoup.nodes.Element(tag1, "<html>\n<head>\n #document\n</head>\n<body> hi!#document\n</body>#document\n</html>#document\n<head>\n #document\n</head>\n<body> hi!#document\n</body>#document\n#document\nhi!#document", attributes32);
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str23, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(attributes32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(attributeItor35);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(attributes41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(document48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str49, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(element56);
        org.junit.Assert.assertNotNull(element57);
        org.junit.Assert.assertNotNull(attributes58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor15 = attributes12.iterator();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Attributes attributes21 = document18.attributes();
        java.lang.String str22 = attributes21.html();
        attributes12.addAll(attributes21);
        java.lang.String str24 = attributes12.toString();
        boolean boolean26 = attributes12.hasKey("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node30 = document29.parentNode;
        java.lang.String str31 = document29.title();
        org.jsoup.nodes.Attributes attributes32 = document29.attributes();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        org.jsoup.select.Elements elements38 = document35.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element39 = document29.prependChild((org.jsoup.nodes.Node) document35);
        java.util.List<org.jsoup.nodes.Node> nodeList40 = document29.childNodes;
        org.jsoup.select.Elements elements42 = document29.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document45 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str46 = document45.outerHtml();
        org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node50 = document49.parentNode;
        java.lang.String str51 = document49.title();
        org.jsoup.nodes.Element element53 = document49.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element54 = document45.appendChild((org.jsoup.nodes.Node) document49);
        org.jsoup.nodes.Attributes attributes55 = document49.attributes();
        java.lang.String str56 = document49.title();
        int int57 = elements42.lastIndexOf((java.lang.Object) document49);
        org.jsoup.nodes.Element element59 = document49.appendText("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements61 = element59.getElementsByClass("\n<!---->");
        boolean boolean62 = attributes12.equals((java.lang.Object) element59);
        org.jsoup.nodes.Element element64 = element59.addClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.util.List<org.jsoup.nodes.Node> nodeList65 = element59.childNodes();
        java.lang.String str66 = element59.data();
        org.jsoup.nodes.Element element68 = element59.prependText("");
        org.jsoup.nodes.Attribute attribute71 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        org.jsoup.nodes.Document document74 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node75 = document74.parentNode;
        java.lang.String str76 = document74.title();
        boolean boolean77 = attribute71.equals((java.lang.Object) str76);
        boolean boolean79 = attribute71.equals((java.lang.Object) 100L);
        java.lang.String str80 = attribute71.getValue();
        boolean boolean81 = element59.equals((java.lang.Object) str80);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(attributeItor15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(attributes32);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str46, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(element53);
        org.junit.Assert.assertNotNull(element54);
        org.junit.Assert.assertNotNull(attributes55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(element59);
        org.junit.Assert.assertNotNull(elements61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(element64);
        org.junit.Assert.assertNotNull(nodeList65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(element68);
        org.junit.Assert.assertNotNull(attribute71);
        org.junit.Assert.assertNotNull(document74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.jsoup.nodes.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.nodes.Evaluator.AttributeWithValueEnding("\n<!---->", "hi!");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        document5.setBaseUri("hi");
        boolean boolean9 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document5);
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node13 = document12.parentNode;
        java.lang.String str14 = document12.title();
        org.jsoup.nodes.Attributes attributes15 = document12.attributes();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        org.jsoup.select.Elements elements21 = document18.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element22 = document12.prependChild((org.jsoup.nodes.Node) document18);
        java.lang.String str23 = document18.baseUri();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str27 = document26.outerHtml();
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node31 = document30.parentNode;
        java.lang.String str32 = document30.title();
        org.jsoup.nodes.Element element34 = document30.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element35 = document26.appendChild((org.jsoup.nodes.Node) document30);
        org.jsoup.nodes.Attributes attributes36 = document30.attributes();
        document18.addChild((org.jsoup.nodes.Node) document30);
        org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element40 = document30.prependChild((org.jsoup.nodes.Node) document39);
        boolean boolean41 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document30);
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting44 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting44.value = "hi!";
        java.lang.String str47 = attributeWithValueStarting44.value;
        org.jsoup.nodes.Document document50 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node51 = document50.parentNode;
        org.jsoup.select.Elements elements53 = document50.getElementsByIndexLessThan((int) 'a');
        java.lang.String str54 = document50.text();
        org.jsoup.nodes.Element element56 = document50.text("");
        org.jsoup.nodes.Document document59 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str60 = document59.outerHtml();
        org.jsoup.select.Elements elements61 = document59.getAllElements();
        boolean boolean62 = element56.equals((java.lang.Object) elements61);
        boolean boolean63 = attributeWithValueStarting44.matches(element56);
        org.jsoup.nodes.Element element66 = element56.attr("hi!", "");
        org.jsoup.select.Elements elements67 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) attributeWithValueEnding2, element56);
        java.util.List<org.jsoup.nodes.Node> nodeList68 = element56.childNodes;
        org.jsoup.nodes.Element element70 = element56.append("");
        org.jsoup.nodes.Element element73 = element56.attr("!=\"\"", "[ , !]=\"\"");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str27, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(attributes36);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(elements53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(element56);
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str60, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(element66);
        org.junit.Assert.assertNotNull(elements67);
        org.junit.Assert.assertNotNull(nodeList68);
        org.junit.Assert.assertNotNull(element70);
        org.junit.Assert.assertNotNull(element73);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Attribute attribute8 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        java.lang.String str9 = attribute8.html();
        attributes5.put(attribute8);
        java.lang.String str12 = attributes5.get("\n<!---->");
        attributes5.remove("hi! hi!  hi!");
        java.lang.String str15 = attributes5.html();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(attribute8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi=\"\"" + "'", str9, "hi=\"\"");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + " hi=\"\"" + "'", str15, " hi=\"\"");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.jsoup.nodes.Evaluator.Class class1 = new org.jsoup.nodes.Evaluator.Class("");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Element element12 = document8.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) document8);
        org.jsoup.nodes.Element element15 = document4.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str16 = document4.text();
        org.jsoup.select.Elements elements18 = document4.getElementsByIndexLessThan((int) (byte) 1);
        document4.title(" !");
        boolean boolean21 = class1.matches((org.jsoup.nodes.Element) document4);
        java.lang.String str22 = document4.outerHtml();
        org.jsoup.nodes.Element element23 = document4.parent();
        org.jsoup.nodes.Element element25 = document4.text("org.jsoup.select.Selector$SelectorParseException: <html> <head> </head> <body> hi! </body> </html><#root> <html> <head> </head> <body> &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; </body> </html> </#root>");
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str16, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n<head>\n <title> !</title>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>" + "'", str22, "<html>\n<head>\n <title> !</title>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.junit.Assert.assertNull(element23);
        org.junit.Assert.assertNotNull(element25);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.select.Elements elements9 = document2.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.select.Elements elements13 = document12.getAllElements();
        org.jsoup.select.Elements elements15 = document12.getElementsByIndexLessThan((int) (short) 10);
        boolean boolean16 = elements9.equals((java.lang.Object) elements15);
        java.lang.String str17 = elements15.val();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.jsoup.nodes.Evaluator.AllElements allElements0 = new org.jsoup.nodes.Evaluator.AllElements();
        org.jsoup.nodes.Element element1 = null;
        boolean boolean2 = allElements0.matches(element1);
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node10 = document9.parentNode;
        java.lang.String str11 = document9.title();
        org.jsoup.nodes.Element element13 = document9.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element14 = document5.appendChild((org.jsoup.nodes.Node) document9);
        org.jsoup.nodes.Element element15 = document9.nextElementSibling();
        org.jsoup.nodes.Attributes attributes16 = document9.attributes;
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        org.jsoup.select.Elements elements22 = document19.getElementsByIndexLessThan((int) 'a');
        java.lang.String str23 = document19.text();
        org.jsoup.nodes.Element element25 = document19.text("");
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str29 = document28.outerHtml();
        org.jsoup.select.Elements elements30 = document28.getAllElements();
        boolean boolean31 = element25.equals((java.lang.Object) elements30);
        org.jsoup.select.Elements elements33 = element25.getElementsByIndexEquals((int) '#');
        document9.parentNode = element25;
        boolean boolean35 = allElements0.matches(element25);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNull(element15);
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str29, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str8 = elements5.text();
        org.jsoup.nodes.Evaluator.AttributeWithValue attributeWithValue11 = new org.jsoup.nodes.Evaluator.AttributeWithValue("hi! <html> <head> </head> <body> hi! </body> </html>", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        int int12 = elements5.indexOf((java.lang.Object) attributeWithValue11);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi! hi!  hi!" + "'", str8, "hi! hi!  hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str19 = document18.outerHtml();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Element element26 = document22.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Attributes attributes28 = document22.attributes();
        java.lang.String str29 = document22.title();
        int int30 = elements15.lastIndexOf((java.lang.Object) document22);
        org.jsoup.nodes.Element element32 = document22.appendText("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements34 = element32.getElementsByClass("\n<!---->");
        element32.baseUri = "<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>";
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements39 = element32.getElementsByAttributeValue("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated string is empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str19, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertNotNull(elements34);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        java.lang.StringBuilder stringBuilder3 = null;
        // The following exception was thrown during execution in test generation
        try {
            document2.outerHtml(stringBuilder3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.append("hi=\"\"");
        java.lang.String str8 = elements7.outerHtml();
        org.jsoup.nodes.Evaluator.Tag tag10 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str14 = document13.outerHtml();
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node18 = document17.parentNode;
        java.lang.String str19 = document17.title();
        org.jsoup.nodes.Element element21 = document17.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element22 = document13.appendChild((org.jsoup.nodes.Node) document17);
        org.jsoup.nodes.Element element23 = document17.head();
        java.lang.String str24 = element23.id();
        boolean boolean25 = tag10.matches(element23);
        boolean boolean26 = elements7.remove((java.lang.Object) tag10);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n hi=&quot;&quot;\n</head>\n<body> hi!hi=&quot;&quot;\n</body>hi=&quot;&quot;\n</html>hi=&quot;&quot;\n\n<html>\n<head>\n hi=&quot;&quot;\n</head>\n<body> hi!hi=&quot;&quot;\n</body>hi=&quot;&quot;\n</html>\n\n<head>\n hi=&quot;&quot;\n</head>\n\n<body> hi!hi=&quot;&quot;\n</body>" + "'", str8, "<html>\n<head>\n hi=&quot;&quot;\n</head>\n<body> hi!hi=&quot;&quot;\n</body>hi=&quot;&quot;\n</html>hi=&quot;&quot;\n\n<html>\n<head>\n hi=&quot;&quot;\n</head>\n<body> hi!hi=&quot;&quot;\n</body>hi=&quot;&quot;\n</html>\n\n<head>\n hi=&quot;&quot;\n</head>\n\n<body> hi!hi=&quot;&quot;\n</body>");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str14, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>");
        org.jsoup.nodes.Element element3 = document1.text("");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element3);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        java.lang.String str9 = elements8.html();
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node13 = document12.parentNode;
        java.lang.String str14 = document12.title();
        org.jsoup.nodes.Attributes attributes15 = document12.attributes();
        org.jsoup.nodes.Node node18 = document12.attr("hi!", "hi!");
        org.jsoup.select.Elements elements19 = document12.getAllElements();
        boolean boolean20 = elements8.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements19);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node24 = document23.parentNode;
        org.jsoup.select.Elements elements26 = document23.getElementsByIndexLessThan((int) 'a');
        java.lang.String str27 = document23.text();
        org.jsoup.nodes.Element element29 = document23.text("");
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str33 = document32.outerHtml();
        org.jsoup.select.Elements elements34 = document32.getAllElements();
        boolean boolean35 = element29.equals((java.lang.Object) elements34);
        org.jsoup.select.Elements elements37 = element29.getElementsByIndexEquals((int) '#');
        boolean boolean38 = elements8.equals((java.lang.Object) '#');
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!" + "'", str9, "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str33, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(elements37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str19 = document18.outerHtml();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Element element26 = document22.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Attributes attributes28 = document22.attributes();
        java.lang.String str29 = document22.title();
        int int30 = elements15.lastIndexOf((java.lang.Object) document22);
        org.jsoup.nodes.Element element32 = document22.appendText("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements34 = element32.getElementsByClass("\n<!---->");
        org.jsoup.nodes.Document document37 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str38 = document37.outerHtml();
        org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node42 = document41.parentNode;
        java.lang.String str43 = document41.title();
        org.jsoup.nodes.Element element45 = document41.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element46 = document37.appendChild((org.jsoup.nodes.Node) document41);
        org.jsoup.nodes.Element element47 = document41.nextElementSibling();
        org.jsoup.select.Elements elements48 = document41.siblingElements();
        boolean boolean50 = elements48.hasClass("\n<!---->");
        int int51 = elements34.lastIndexOf((java.lang.Object) boolean50);
        org.jsoup.nodes.Document document55 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str56 = document55.outerHtml();
        org.jsoup.nodes.Document document59 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node60 = document59.parentNode;
        java.lang.String str61 = document59.title();
        org.jsoup.nodes.Element element63 = document59.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element64 = document55.appendChild((org.jsoup.nodes.Node) document59);
        org.jsoup.nodes.Document document67 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node68 = document67.parentNode;
        java.lang.String str69 = document67.title();
        org.jsoup.nodes.Attributes attributes70 = document67.attributes();
        org.jsoup.nodes.Document document73 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node74 = document73.parentNode;
        org.jsoup.select.Elements elements76 = document73.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element77 = document67.prependChild((org.jsoup.nodes.Node) document73);
        org.jsoup.select.Elements elements79 = document67.select("hi");
        org.jsoup.nodes.Element element80 = document59.appendChild((org.jsoup.nodes.Node) document67);
        org.jsoup.nodes.Element element82 = document67.child(0);
        org.jsoup.nodes.Element element84 = element82.wrap("\n<!--<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!-->");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element85 = elements34.set(0, element82);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str19, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str38, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(element45);
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertNull(element47);
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str56, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(element63);
        org.junit.Assert.assertNotNull(element64);
        org.junit.Assert.assertNotNull(document67);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(attributes70);
        org.junit.Assert.assertNotNull(document73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(elements76);
        org.junit.Assert.assertNotNull(element77);
        org.junit.Assert.assertNotNull(elements79);
        org.junit.Assert.assertNotNull(element80);
        org.junit.Assert.assertNotNull(element82);
        org.junit.Assert.assertNull(element84);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("");
        document1.baseUri = "";
        org.jsoup.select.Elements elements5 = document1.getElementsByIndexEquals((int) (byte) -1);
        org.jsoup.nodes.Document document6 = document1.normalise();
        org.jsoup.nodes.Element element8 = document6.appendText("\n<!---->");
        document6.title("[]");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNotNull(element8);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Attribute attribute8 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        java.lang.String str9 = attribute8.html();
        attributes5.put(attribute8);
        java.lang.String str11 = attribute8.getValue();
        java.lang.String str12 = attribute8.getKey();
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node16 = document15.parentNode;
        org.jsoup.select.Elements elements18 = document15.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements20 = elements18.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream21 = elements18.stream();
        org.jsoup.select.Elements elements23 = elements18.prepend("hi");
        org.jsoup.select.Elements elements25 = elements23.toggleClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements27 = elements25.eq((int) 'i');
        boolean boolean28 = attribute8.equals((java.lang.Object) 'i');
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(attribute8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi=\"\"" + "'", str9, "hi=\"\"");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi" + "'", str12, "hi");
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(elementStream21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.jsoup.nodes.Document document2 = org.jsoup.nodes.Document.createShell("");
        document2.baseUri = "";
        org.jsoup.nodes.Element element6 = document2.html("#document");
        org.jsoup.select.Elements elements7 = org.jsoup.select.Selector.select("#data", element6);
        org.jsoup.nodes.Element element9 = element6.val("<html>\n <head>\n </head>\n <body>\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(element9);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.nodes.Element element8 = document2.text("");
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        org.jsoup.select.Elements elements13 = document11.getAllElements();
        org.jsoup.nodes.Element element15 = document11.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements16 = element15.getAllElements();
        org.jsoup.nodes.Element element17 = document2.appendChild((org.jsoup.nodes.Node) element15);
        org.jsoup.select.Elements elements19 = element15.select("#declaration");
        org.jsoup.nodes.Element element21 = element15.prependElement("!\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertNotNull(element21);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        document2.setBaseUri("hi");
        java.lang.String str6 = document2.id();
        org.jsoup.nodes.Attributes attributes7 = document2.attributes();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(attributes7);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("[ , !]");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        java.lang.String str6 = document4.title();
        org.jsoup.nodes.Attributes attributes7 = document4.attributes();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node11 = document10.parentNode;
        org.jsoup.select.Elements elements13 = document10.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element14 = document4.prependChild((org.jsoup.nodes.Node) document10);
        java.lang.String str15 = document10.baseUri();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str19 = document18.outerHtml();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Element element26 = document22.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Attributes attributes28 = document22.attributes();
        document10.addChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element32 = document22.prependChild((org.jsoup.nodes.Node) document31);
        java.lang.String str33 = document22.val();
        org.jsoup.nodes.Element element35 = document22.text("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        boolean boolean36 = tag1.matches((org.jsoup.nodes.Element) document22);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str19, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (short) 100);
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.select.Elements elements6 = document4.getAllElements();
        java.lang.String str7 = document4.data();
        org.jsoup.nodes.Element element9 = document4.text("");
        boolean boolean11 = document4.hasClass("hi!");
        java.lang.String str12 = document4.id();
        boolean boolean13 = indexLessThan1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document16 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        org.jsoup.select.Elements elements22 = document19.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream23 = elements22.stream();
        org.jsoup.select.Elements elements25 = elements22.addClass("hi");
        org.jsoup.select.Elements elements26 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements25);
        java.lang.Integer int27 = org.jsoup.nodes.Node.indexInList((org.jsoup.nodes.Element) document16, (java.util.List<org.jsoup.nodes.Element>) elements26);
        org.jsoup.nodes.Element element29 = document16.removeClass("");
        boolean boolean31 = document16.hasClass("<!---->");
        boolean boolean32 = indexLessThan1.matches((org.jsoup.nodes.Element) document16);
        int int33 = document16.nodeDepth();
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(element9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(elementStream23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("", "<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        java.lang.String str9 = elements8.html();
        java.lang.String str10 = elements8.text();
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str15 = document14.outerHtml();
        org.jsoup.select.Elements elements18 = document14.getElementsByAttributeValueContaining("\n&lt;!----&gt;", "hi");
        java.lang.Object[] objArray19 = elements18.toArray();
        org.jsoup.select.Elements elements21 = elements18.wrap("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = elements8.addAll((int) (byte) -1, (java.util.Collection<org.jsoup.nodes.Element>) elements21);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!" + "'", str9, "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi! hi!  hi!" + "'", str10, "hi! hi!  hi!");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str15, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(elements21);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor15 = attributes12.iterator();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Attributes attributes21 = document18.attributes();
        java.lang.String str22 = attributes21.html();
        attributes12.addAll(attributes21);
        java.lang.String str24 = attributes12.toString();
        boolean boolean26 = attributes12.hasKey("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node30 = document29.parentNode;
        java.lang.String str31 = document29.title();
        org.jsoup.nodes.Attributes attributes32 = document29.attributes();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        org.jsoup.select.Elements elements38 = document35.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element39 = document29.prependChild((org.jsoup.nodes.Node) document35);
        java.util.List<org.jsoup.nodes.Node> nodeList40 = document29.childNodes;
        org.jsoup.select.Elements elements42 = document29.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document45 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str46 = document45.outerHtml();
        org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node50 = document49.parentNode;
        java.lang.String str51 = document49.title();
        org.jsoup.nodes.Element element53 = document49.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element54 = document45.appendChild((org.jsoup.nodes.Node) document49);
        org.jsoup.nodes.Attributes attributes55 = document49.attributes();
        java.lang.String str56 = document49.title();
        int int57 = elements42.lastIndexOf((java.lang.Object) document49);
        org.jsoup.nodes.Element element59 = document49.appendText("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements61 = element59.getElementsByClass("\n<!---->");
        boolean boolean62 = attributes12.equals((java.lang.Object) element59);
        org.jsoup.nodes.Element element64 = element59.addClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.util.List<org.jsoup.nodes.Node> nodeList65 = element59.childNodes();
        java.lang.String str66 = element59.data();
        org.jsoup.nodes.Element element68 = element59.prependText("");
        java.lang.String str69 = element59.toString();
        org.jsoup.nodes.Element element70 = element59.nextElementSibling();
        // The following exception was thrown during execution in test generation
        try {
            element70.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(attributeItor15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(attributes32);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(nodeList40);
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertNotNull(document45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str46, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(element53);
        org.junit.Assert.assertNotNull(element54);
        org.junit.Assert.assertNotNull(attributes55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(element59);
        org.junit.Assert.assertNotNull(elements61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(element64);
        org.junit.Assert.assertNotNull(nodeList65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(element68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>&lt;html class=&quot; hi&quot;&gt; &lt;head class=&quot; hi&quot;&gt; &lt;/head&gt; &lt;body class=&quot; hi&quot;&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;head class=&quot; hi&quot;&gt; &lt;/head&gt; &lt;body class=&quot; hi&quot;&gt; hi! &lt;/body&gt; hi!" + "'", str69, "<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>&lt;html class=&quot; hi&quot;&gt; &lt;head class=&quot; hi&quot;&gt; &lt;/head&gt; &lt;body class=&quot; hi&quot;&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;head class=&quot; hi&quot;&gt; &lt;/head&gt; &lt;body class=&quot; hi&quot;&gt; hi! &lt;/body&gt; hi!");
        org.junit.Assert.assertNull(element70);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements17 = elements15.removeAttr("hi");
        org.jsoup.select.Elements elements18 = new org.jsoup.select.Elements((java.util.List<org.jsoup.nodes.Element>) elements15);
        boolean boolean20 = elements15.remove((java.lang.Object) 100L);
        boolean boolean22 = elements15.is("#declaration");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node8 = document2.parentNode;
        org.jsoup.select.Elements elements10 = document2.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element12 = document2.text("hi=\"\"");
        org.jsoup.nodes.Element element14 = document2.getElementById("#data");
        org.jsoup.parser.Tag tag15 = document2.tag();
        java.lang.String str16 = tag15.toString();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNull(element14);
        org.junit.Assert.assertNotNull(tag15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "#root" + "'", str16, "#root");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        int int2 = indexLessThan1.index;
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        org.jsoup.select.Elements elements7 = document5.getAllElements();
        org.jsoup.nodes.Element element9 = document5.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements10 = element9.getAllElements();
        java.lang.String str11 = element9.html();
        boolean boolean12 = element9.preserveWhitespace();
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str16 = document15.outerHtml();
        org.jsoup.select.Elements elements17 = document15.getAllElements();
        java.lang.String str18 = document15.data();
        org.jsoup.nodes.Element element20 = document15.text("");
        org.jsoup.nodes.Node node21 = document15.parentNode;
        org.jsoup.select.Elements elements23 = document15.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element25 = document15.text("hi=\"\"");
        boolean boolean26 = document15.hasText();
        boolean boolean27 = element9.equals((java.lang.Object) boolean26);
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str31 = document30.outerHtml();
        org.jsoup.select.Elements elements32 = document30.getAllElements();
        java.lang.String str33 = document30.data();
        org.jsoup.nodes.Element element35 = document30.text("");
        boolean boolean37 = document30.hasClass("hi!");
        boolean boolean38 = element9.equals((java.lang.Object) document30);
        boolean boolean39 = indexLessThan1.matches(element9);
        org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str43 = document42.outerHtml();
        org.jsoup.select.Elements elements44 = document42.getAllElements();
        java.lang.String str45 = document42.data();
        org.jsoup.nodes.Element element47 = document42.text("");
        boolean boolean49 = document42.hasClass("hi!");
        org.jsoup.nodes.Element element51 = document42.appendElement("<html>\n<head>\n</head>\n<body>\n &lt;#root&gt; \n <html> \n  <head> \n  </head> \n  <body>\n    hi!    \n   <html> \n    <head> \n    </head> \n    <body>\n      hi!  \n    </body>\n   </html>\n  </body>\n </html>\n</body>\n</html>");
        boolean boolean52 = indexLessThan1.matches(element51);
        org.jsoup.select.Elements elements54 = element51.getElementsByIndexEquals(100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(element9);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str16, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str31, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str43, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(element47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(element51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(elements54);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.jsoup.nodes.Evaluator.AttributeWithValueNot attributeWithValueNot2 = new org.jsoup.nodes.Evaluator.AttributeWithValueNot("\n<!---->", "#root");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        org.jsoup.select.Elements elements7 = document5.getAllElements();
        java.lang.String str8 = document5.data();
        java.lang.String str9 = document5.baseUri();
        org.jsoup.nodes.Element element11 = document5.text("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = element11.val("#declaration");
        boolean boolean14 = attributeWithValueNot2.matches(element13);
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node18 = document17.parentNode;
        java.lang.String str19 = document17.title();
        org.jsoup.nodes.Attributes attributes20 = document17.attributes();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node24 = document23.parentNode;
        org.jsoup.select.Elements elements26 = document23.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element27 = document17.prependChild((org.jsoup.nodes.Node) document23);
        java.lang.String str28 = document23.baseUri();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str32 = document31.outerHtml();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        java.lang.String str37 = document35.title();
        org.jsoup.nodes.Element element39 = document35.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element40 = document31.appendChild((org.jsoup.nodes.Node) document35);
        org.jsoup.nodes.Attributes attributes41 = document35.attributes();
        document23.addChild((org.jsoup.nodes.Node) document35);
        org.jsoup.nodes.Document document44 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element45 = document35.prependChild((org.jsoup.nodes.Node) document44);
        document44.title("hi");
        boolean boolean48 = attributeWithValueNot2.matches((org.jsoup.nodes.Element) document44);
        attributeWithValueNot2.key = "";
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str32, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(attributes41);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNotNull(element45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Node node12 = document6.parentNode;
        boolean boolean14 = node12.hasAttr("hi");
        org.jsoup.nodes.Node node17 = node12.attr("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>", "h");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean2 = tag1.canContainBlock();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str7 = document6.outerHtml();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node11 = document10.parentNode;
        java.lang.String str12 = document10.title();
        org.jsoup.nodes.Element element14 = document10.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element15 = document6.appendChild((org.jsoup.nodes.Node) document10);
        org.jsoup.nodes.Attributes attributes16 = document10.attributes();
        boolean boolean18 = attributes16.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor19 = attributes16.iterator();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Attributes attributes25 = document22.attributes();
        java.lang.String str26 = attributes25.html();
        attributes16.addAll(attributes25);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor28 = attributes16.iterator();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str32 = document31.outerHtml();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        java.lang.String str37 = document35.title();
        org.jsoup.nodes.Element element39 = document35.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element40 = document31.appendChild((org.jsoup.nodes.Node) document35);
        org.jsoup.nodes.Attributes attributes41 = document35.attributes();
        boolean boolean43 = attributes41.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor44 = attributes41.iterator();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node48 = document47.parentNode;
        java.lang.String str49 = document47.title();
        org.jsoup.nodes.Attributes attributes50 = document47.attributes();
        java.lang.String str51 = attributes50.html();
        attributes41.addAll(attributes50);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor53 = attributes50.iterator();
        attributes16.addAll(attributes50);
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator55 = attributes50.spliterator();
        org.jsoup.nodes.Element element56 = new org.jsoup.nodes.Element(tag1, "[!]", attributes50);
        org.jsoup.nodes.TextNode textNode59 = org.jsoup.nodes.TextNode.createFromEncoded("\n<!---->", "\n<!---->");
        boolean boolean60 = textNode59.isBlank();
        org.jsoup.nodes.TextNode textNode62 = textNode59.text("hi");
        org.jsoup.nodes.Element element63 = element56.appendChild((org.jsoup.nodes.Node) textNode62);
        org.jsoup.nodes.Element element65 = element63.val("<!---->=\"\"");
        org.jsoup.nodes.Document document68 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node69 = document68.parentNode;
        java.lang.String str70 = document68.title();
        org.jsoup.nodes.Attributes attributes71 = document68.attributes();
        org.jsoup.nodes.Document document74 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node75 = document74.parentNode;
        org.jsoup.select.Elements elements77 = document74.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element78 = document68.prependChild((org.jsoup.nodes.Node) document74);
        org.jsoup.select.Elements elements79 = document68.children();
        org.jsoup.nodes.Element element80 = element63.appendChild((org.jsoup.nodes.Node) document68);
        org.jsoup.nodes.Element element81 = document68.previousElementSibling();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element83 = element81.append("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str7, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(attributeItor19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(attributes25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(attributeItor28);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str32, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(attributes41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(attributeItor44);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(attributes50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(attributeItor53);
        org.junit.Assert.assertNotNull(attributeSpliterator55);
        org.junit.Assert.assertNotNull(textNode59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(textNode62);
        org.junit.Assert.assertNotNull(element63);
        org.junit.Assert.assertNotNull(element65);
        org.junit.Assert.assertNotNull(document68);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(attributes71);
        org.junit.Assert.assertNotNull(document74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(elements77);
        org.junit.Assert.assertNotNull(element78);
        org.junit.Assert.assertNotNull(elements79);
        org.junit.Assert.assertNotNull(element80);
        org.junit.Assert.assertNull(element81);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.jsoup.safety.Whitelist whitelist1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.jsoup.Jsoup.clean("<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>", whitelist1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements17 = elements15.removeAttr("hi");
        org.jsoup.select.Elements elements18 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements17);
        org.jsoup.select.Elements elements20 = elements18.select("hi");
        org.jsoup.select.Elements elements22 = elements18.toggleClass("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.nodes.Evaluator.IndexEquals indexEquals24 = new org.jsoup.nodes.Evaluator.IndexEquals(0);
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str28 = document27.outerHtml();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node32 = document31.parentNode;
        java.lang.String str33 = document31.title();
        org.jsoup.nodes.Element element35 = document31.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element36 = document27.appendChild((org.jsoup.nodes.Node) document31);
        org.jsoup.nodes.Element element37 = document31.nextElementSibling();
        org.jsoup.select.Elements elements38 = document31.siblingElements();
        org.jsoup.nodes.Attributes attributes39 = document31.attributes;
        boolean boolean40 = indexEquals24.matches((org.jsoup.nodes.Element) document31);
        org.jsoup.select.Elements elements41 = document31.siblingElements();
        boolean boolean42 = elements18.add((org.jsoup.nodes.Element) document31);
        java.util.Spliterator<org.jsoup.nodes.Element> elementSpliterator43 = elements18.spliterator();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str28, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertNull(element37);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(attributes39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(elements41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(elementSpliterator43);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document("");
        org.jsoup.select.Elements elements4 = document1.getElementsByAttributeValueStarting("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "head");
        org.jsoup.select.Elements elements6 = elements4.html("[]");
        org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        java.lang.String str10 = document9.baseUri();
        org.jsoup.nodes.Element element11 = document9.head();
        org.jsoup.select.Elements elements12 = document9.getAllElements();
        boolean boolean13 = elements6.containsAll((java.util.Collection<org.jsoup.nodes.Element>) elements12);
        java.lang.String str14 = elements12.text();
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi" + "'", str10, "hi");
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi hi  hi" + "'", str14, "hi hi  hi");
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements9 = elements7.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements11 = elements7.addClass("<!---->=\"\"");
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        org.jsoup.select.Elements elements17 = document14.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements19 = elements17.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream20 = elements17.stream();
        org.jsoup.select.Elements elements22 = elements17.toggleClass("#document");
        java.util.Iterator<org.jsoup.nodes.Element> elementItor23 = elements22.iterator();
        org.jsoup.select.Elements elements25 = elements22.removeAttr("#comment");
        org.jsoup.select.Elements elements27 = elements22.append("");
        boolean boolean28 = elements11.addAll((java.util.Collection<org.jsoup.nodes.Element>) elements22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<org.jsoup.nodes.Element> elementItor30 = elements11.listIterator((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertNotNull(elementStream20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(elementItor23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parse("<?hi>");
        org.junit.Assert.assertNotNull(document1);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.jsoup.nodes.Evaluator.AllElements allElements0 = new org.jsoup.nodes.Evaluator.AllElements();
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        boolean boolean4 = allElements0.matches((org.jsoup.nodes.Element) document3);
        org.jsoup.select.Elements elements6 = document3.getElementsByClass("<html> <head> </head> <body> hi! </body> </html> <head> </head> <body> hi! </body> hi!");
        org.jsoup.select.Elements elements8 = document3.getElementsByTag("#data");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.nodes.Element> elementList11 = elements8.subList(1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements8);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("");
        document1.baseUri = "";
        org.jsoup.nodes.Element element5 = document1.html("#document");
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str9 = document8.outerHtml();
        org.jsoup.select.Elements elements10 = document8.getAllElements();
        java.lang.String str11 = document8.data();
        org.jsoup.nodes.Element element13 = document8.text("");
        org.jsoup.nodes.Node node14 = document8.parentNode;
        org.jsoup.select.Elements elements16 = document8.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element18 = document8.text("hi=\"\"");
        org.jsoup.nodes.Element element19 = element18.parent();
        document1.addChild((org.jsoup.nodes.Node) element18);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str9, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNull(element19);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        org.jsoup.select.Elements elements9 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements8);
        org.jsoup.select.Elements elements12 = elements8.attr("head", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements14 = elements12.val("#text");
        elements12.clear();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elements14);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document("hi! hi!  hi!");
        java.lang.String str2 = document1.tagName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "#root" + "'", str2, "#root");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.jsoup.nodes.Document document3 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node4 = document3.parentNode;
        org.jsoup.select.Elements elements6 = document3.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements8 = elements6.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements10 = elements8.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements11 = org.jsoup.select.Selector.select("#comment", (java.lang.Iterable<org.jsoup.nodes.Element>) elements10);
        org.jsoup.select.Elements elements13 = elements11.removeClass("\n<!---->");
        java.lang.String str14 = elements13.text();
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements9 = elements7.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements11 = elements7.addClass("<!---->=\"\"");
        boolean boolean12 = elements7.isEmpty();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        java.lang.Object[] objArray9 = elements8.toArray();
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str13 = document12.outerHtml();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node17 = document16.parentNode;
        java.lang.String str18 = document16.title();
        org.jsoup.nodes.Element element20 = document16.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element21 = document12.appendChild((org.jsoup.nodes.Node) document16);
        org.jsoup.nodes.Element element22 = document16.nextElementSibling();
        org.jsoup.select.Elements elements23 = document16.siblingElements();
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream24 = elements23.stream();
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node28 = document27.parentNode;
        org.jsoup.select.Elements elements30 = document27.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream31 = elements30.stream();
        org.jsoup.select.Elements elements33 = elements30.addClass("hi");
        java.lang.String str34 = elements33.html();
        boolean boolean35 = elements23.removeAll((java.util.Collection<org.jsoup.nodes.Element>) elements33);
        boolean boolean36 = elements8.removeAll((java.util.Collection<org.jsoup.nodes.Element>) elements33);
        java.util.ListIterator<org.jsoup.nodes.Element> elementItor37 = elements33.listIterator();
        int int38 = elements33.size();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>, \n<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>, \n<head class=\" hi\">\n</head>, \n<body class=\" hi\"> hi!\n</body>]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>, \n<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>, \n<head class=\" hi\">\n</head>, \n<body class=\" hi\"> hi!\n</body>]");
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str13, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNull(element22);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(elementStream24);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(elementStream31);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!" + "'", str34, "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(elementItor37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("<html class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>", "[ , #, d, o, c, u, m, e, n, t]");
        java.lang.String str4 = textNode2.absUrl("<html> <head> </head> <body> hi! </body> </html> <head> </head> <body> hi! </body> hi!");
        boolean boolean5 = textNode2.isBlank();
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.toggleClass("#document");
        org.jsoup.select.Elements elements12 = elements5.addClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str16 = document15.outerHtml();
        org.jsoup.select.Elements elements17 = document15.getAllElements();
        org.jsoup.select.Elements elements19 = elements17.append("#document");
        int int20 = elements5.indexOf((java.lang.Object) "#document");
        org.jsoup.select.Elements elements22 = elements5.val("<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
        org.jsoup.nodes.Element element23 = elements5.last();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element25 = elements5.get((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str16, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(element23);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.toggleClass("[ , !]");
        org.jsoup.select.Elements elements10 = elements8.removeClass("#data");
        org.jsoup.select.Elements elements12 = elements8.html("\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream13 = elements12.stream();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elementStream13);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.jsoup.nodes.Evaluator.AttributeWithValueNot attributeWithValueNot2 = new org.jsoup.nodes.Evaluator.AttributeWithValueNot("\n<!---->", "#root");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        org.jsoup.select.Elements elements7 = document5.getAllElements();
        java.lang.String str8 = document5.data();
        java.lang.String str9 = document5.baseUri();
        org.jsoup.nodes.Element element11 = document5.text("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = element11.val("#declaration");
        boolean boolean14 = attributeWithValueNot2.matches(element13);
        attributeWithValueNot2.value = "<html>\n<head>\n</head>\n<body>\n</body>\n</html><<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>>";
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.jsoup.nodes.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.nodes.Evaluator.AttributeWithValueContaining("#document", "hi=\"\"");
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!", "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        boolean boolean6 = attributeWithValueContaining2.matches((org.jsoup.nodes.Element) document5);
        java.lang.String str7 = attributeWithValueContaining2.key;
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#document" + "'", str7, "#document");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document("<html>\n<head>\n</head>\n<body>\n head\n</body>\n</html>");
        org.jsoup.nodes.Element element2 = document1.empty();
        boolean boolean4 = element2.hasClass("");
        org.junit.Assert.assertNotNull(element2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.select.Elements elements6 = elements4.prepend("");
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.outerHtml();
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Element element18 = document14.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document10.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Element element20 = document14.nextElementSibling();
        org.jsoup.select.Elements elements21 = document14.siblingElements();
        org.jsoup.nodes.Element element22 = elements4.set(1, (org.jsoup.nodes.Element) document14);
        java.util.Spliterator<org.jsoup.nodes.Element> elementSpliterator23 = elements4.spliterator();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node27 = document26.parentNode;
        org.jsoup.select.Elements elements29 = document26.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements31 = elements29.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream32 = elements29.stream();
        org.jsoup.select.Elements elements34 = elements29.toggleClass("#document");
        java.util.Iterator<org.jsoup.nodes.Element> elementItor35 = elements34.iterator();
        org.jsoup.select.Elements elements37 = elements34.removeAttr("#comment");
        boolean boolean38 = elements4.removeAll((java.util.Collection<org.jsoup.nodes.Element>) elements34);
        org.jsoup.nodes.Element element40 = elements34.get(0);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str11, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNull(element20);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(elementSpliterator23);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(elements29);
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(elementStream32);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(elementItor35);
        org.junit.Assert.assertNotNull(elements37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(element40);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Element element29 = document20.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Node node30 = element29.parentNode;
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element32 = element29.child(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements14 = document8.getElementsByClass("!");
        int int16 = elements14.lastIndexOf((java.lang.Object) 100.0f);
        org.jsoup.select.Elements elements18 = elements14.val("");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(elements18);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan1 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) ' ');
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        org.jsoup.select.Elements elements9 = document6.getElementsByIndexLessThan((int) 'a');
        boolean boolean10 = indexLessThan3.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Element element12 = document6.prepend("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        boolean boolean13 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node17 = document16.parentNode;
        java.lang.String str18 = document16.title();
        org.jsoup.nodes.Attributes attributes19 = document16.attributes();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        org.jsoup.select.Elements elements25 = document22.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element26 = document16.prependChild((org.jsoup.nodes.Node) document22);
        java.lang.String str27 = document22.baseUri();
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str31 = document30.outerHtml();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node35 = document34.parentNode;
        java.lang.String str36 = document34.title();
        org.jsoup.nodes.Element element38 = document34.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element39 = document30.appendChild((org.jsoup.nodes.Node) document34);
        org.jsoup.nodes.Attributes attributes40 = document34.attributes();
        document22.addChild((org.jsoup.nodes.Node) document34);
        org.jsoup.nodes.Element element43 = document34.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements44 = element43.getAllElements();
        org.jsoup.nodes.Element element46 = element43.prepend("<!---->=\"\"");
        java.util.List<org.jsoup.nodes.Node> nodeList47 = element43.childNodes;
        org.jsoup.nodes.Document document50 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str51 = document50.outerHtml();
        org.jsoup.select.Elements elements52 = document50.getAllElements();
        java.lang.String str53 = document50.data();
        org.jsoup.nodes.Element element55 = document50.text("");
        org.jsoup.select.Elements elements57 = element55.getElementsByIndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Element element58 = element43.prependChild((org.jsoup.nodes.Node) element55);
        org.jsoup.nodes.Element element60 = element55.toggleClass("");
        java.lang.String str61 = element55.data();
        org.jsoup.select.Elements elements62 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexGreaterThan1, element55);
        org.jsoup.nodes.Document document65 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node66 = document65.parentNode;
        org.jsoup.select.Elements elements68 = document65.getElementsByIndexLessThan((int) 'a');
        java.lang.String str69 = document65.text();
        org.jsoup.select.Elements elements72 = document65.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str73 = document65.text();
        org.jsoup.select.Elements elements74 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexGreaterThan1, (org.jsoup.nodes.Element) document65);
        // The following exception was thrown during execution in test generation
        try {
            document65.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(attributes19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str31, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(attributes40);
        org.junit.Assert.assertNotNull(element43);
        org.junit.Assert.assertNotNull(elements44);
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str51, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(element55);
        org.junit.Assert.assertNotNull(elements57);
        org.junit.Assert.assertNotNull(element58);
        org.junit.Assert.assertNotNull(element60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(elements62);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(elements68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(elements72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(elements74);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        org.jsoup.select.Elements elements9 = document6.getElementsByIndexLessThan((int) 'a');
        boolean boolean10 = indexLessThan3.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        org.jsoup.select.Elements elements15 = document13.getAllElements();
        org.jsoup.select.Elements elements16 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan3, (org.jsoup.nodes.Element) document13);
        boolean boolean17 = tag1.matches((org.jsoup.nodes.Element) document13);
        java.util.List<org.jsoup.nodes.Node> nodeList18 = document13.childNodes;
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeList18);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        document2.setBaseUri("hi");
        java.lang.String str6 = document2.text();
        org.jsoup.nodes.Element element8 = document2.prepend("\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(element8);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.select.Elements elements6 = elements4.prepend("");
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.outerHtml();
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Element element18 = document14.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document10.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Element element20 = document14.nextElementSibling();
        org.jsoup.select.Elements elements21 = document14.siblingElements();
        org.jsoup.nodes.Element element22 = elements4.set(1, (org.jsoup.nodes.Element) document14);
        java.util.Spliterator<org.jsoup.nodes.Element> elementSpliterator23 = elements4.spliterator();
        java.lang.String str25 = elements4.attr("#data");
        org.jsoup.select.Elements elements27 = elements4.prepend("org.jsoup.select.Selector$SelectorParseException: <html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str11, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNull(element20);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(elementSpliterator23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(elements27);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (short) 100);
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.select.Elements elements6 = document4.getAllElements();
        java.lang.String str7 = document4.data();
        org.jsoup.nodes.Element element9 = document4.text("");
        boolean boolean11 = document4.hasClass("hi!");
        java.lang.String str12 = document4.id();
        boolean boolean13 = indexLessThan1.matches((org.jsoup.nodes.Element) document4);
        int int14 = indexLessThan1.index;
        indexLessThan1.index = 100;
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str20 = document19.outerHtml();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node24 = document23.parentNode;
        java.lang.String str25 = document23.title();
        org.jsoup.nodes.Element element27 = document23.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element28 = document19.appendChild((org.jsoup.nodes.Node) document23);
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node32 = document31.parentNode;
        java.lang.String str33 = document31.title();
        org.jsoup.nodes.Attributes attributes34 = document31.attributes();
        org.jsoup.nodes.Document document37 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node38 = document37.parentNode;
        org.jsoup.select.Elements elements40 = document37.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element41 = document31.prependChild((org.jsoup.nodes.Node) document37);
        org.jsoup.select.Elements elements43 = document31.select("hi");
        org.jsoup.nodes.Element element44 = document23.appendChild((org.jsoup.nodes.Node) document31);
        org.jsoup.nodes.Element element46 = document31.addClass("#declaration");
        document31.remove();
        boolean boolean48 = indexLessThan1.matches((org.jsoup.nodes.Element) document31);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(element9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str20, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(attributes34);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(elements40);
        org.junit.Assert.assertNotNull(element41);
        org.junit.Assert.assertNotNull(elements43);
        org.junit.Assert.assertNotNull(element44);
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node8 = document2.parentNode;
        org.jsoup.select.Elements elements10 = document2.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element12 = document2.text("hi=\"\"");
        org.jsoup.select.Elements elements13 = document2.children();
        org.jsoup.select.Elements elements15 = document2.getElementsByClass("[ , !]");
        java.lang.String str16 = elements15.val();
        org.jsoup.select.Elements elements18 = elements15.val("");
        org.jsoup.nodes.Document document21 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node22 = document21.parentNode;
        java.lang.String str23 = document21.title();
        org.jsoup.nodes.Attributes attributes24 = document21.attributes();
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node28 = document27.parentNode;
        org.jsoup.select.Elements elements30 = document27.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element31 = document21.prependChild((org.jsoup.nodes.Node) document27);
        java.util.List<org.jsoup.nodes.Node> nodeList32 = document21.childNodes;
        org.jsoup.select.Elements elements34 = document21.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements36 = elements34.removeAttr("hi");
        org.jsoup.select.Elements elements37 = new org.jsoup.select.Elements((java.util.List<org.jsoup.nodes.Element>) elements34);
        org.jsoup.select.Elements elements39 = elements34.addClass("");
        boolean boolean40 = elements15.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements34);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(attributes24);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(nodeList32);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(elements36);
        org.junit.Assert.assertNotNull(elements39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.jsoup.safety.Whitelist whitelist1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.jsoup.Jsoup.clean("<html>\n<head>\n <title>&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;</title>\n</head>\n<body> hi!\n</body>\n</html>", whitelist1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("#declaration", "\n&lt;!----&gt;");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node10 = document9.parentNode;
        java.lang.String str11 = document9.title();
        org.jsoup.nodes.Element element13 = document9.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element14 = document5.appendChild((org.jsoup.nodes.Node) document9);
        org.jsoup.nodes.Element element15 = document9.head();
        org.jsoup.nodes.Evaluator.Tag tag17 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str21 = document20.outerHtml();
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node25 = document24.parentNode;
        java.lang.String str26 = document24.title();
        org.jsoup.nodes.Element element28 = document24.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element29 = document20.appendChild((org.jsoup.nodes.Node) document24);
        org.jsoup.nodes.Element element30 = document24.head();
        java.lang.String str31 = element30.id();
        boolean boolean32 = tag17.matches(element30);
        java.lang.String str33 = element30.baseUri();
        element15.parentNode = element30;
        org.jsoup.select.Elements elements35 = element15.getAllElements();
        document2.parentNode = element15;
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str21, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(elements35);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("<html> \n<head> \n</head> \n<body> org.jsoup.select.Selector$SelectorParseException:  hi!  &lt;#root&gt; \n <html> \n  <head> \n  </head> \n  <body>\n    &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n  </body>\n </html>\n</body>\n</html>", " head=\"[ , #, d, o, c, u, m, e, n, t]\"");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element12 = document6.nextElementSibling();
        org.jsoup.select.Elements elements13 = document6.siblingElements();
        boolean boolean15 = elements13.hasClass("\n<!---->");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        org.jsoup.select.Elements elements21 = document18.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream22 = elements21.stream();
        org.jsoup.select.Elements elements24 = elements21.toggleClass("[ , !]");
        int int25 = elements24.size();
        boolean boolean26 = elements13.containsAll((java.util.Collection<org.jsoup.nodes.Element>) elements24);
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.select.Elements elements31 = document30.getAllElements();
        org.jsoup.select.Elements elements33 = document30.getElementsByIndexLessThan((int) (short) 10);
        org.jsoup.nodes.Node node36 = document30.attr("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>", "#comment");
        org.jsoup.nodes.Element element38 = document30.prepend("<html>\n<head>\n <title> !</title>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        elements24.add(0, element38);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNull(element12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(elementStream22);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(element38);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        java.lang.String str14 = attributes12.get("hi!");
        boolean boolean16 = attributes12.hasKey("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!=\"#comment\"");
        boolean boolean18 = attributes12.hasKey("<html>\n<head>\n</head>\n<body>\n &lt;#root&gt; \n <html> \n  <head> \n  </head> \n  <body>\n    hi!    \n   <html> \n    <head> \n    </head> \n    <body>\n      hi!  \n    </body>\n   </html>\n  </body>\n </html>\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting2.value = "hi!";
        java.lang.String str5 = attributeWithValueStarting2.value;
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        java.lang.String str12 = document8.text();
        org.jsoup.nodes.Element element14 = document8.text("");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        boolean boolean20 = element14.equals((java.lang.Object) elements19);
        boolean boolean21 = attributeWithValueStarting2.matches(element14);
        org.jsoup.nodes.Element element24 = element14.attr("hi!", "");
        org.jsoup.nodes.Attributes attributes25 = element14.attributes;
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor26 = attributes25.iterator();
        attributes25.put("!\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "<html>\n<head>\n #document\n</head>\n<body> hi!#document\n</body>#document\n</html>#document\n<head>\n #document\n</head>\n<body> hi!#document\n</body>#document\n#document\nhi!#document");
        org.jsoup.nodes.Attribute attribute32 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        java.lang.String str37 = document35.title();
        boolean boolean38 = attribute32.equals((java.lang.Object) str37);
        boolean boolean40 = attribute32.equals((java.lang.Object) 100L);
        org.jsoup.nodes.Document document43 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str44 = document43.outerHtml();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node48 = document47.parentNode;
        java.lang.String str49 = document47.title();
        org.jsoup.nodes.Element element51 = document47.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element52 = document43.appendChild((org.jsoup.nodes.Node) document47);
        org.jsoup.nodes.Attributes attributes53 = document47.attributes();
        boolean boolean54 = attribute32.equals((java.lang.Object) attributes53);
        java.lang.String str55 = attribute32.html();
        attributes25.put(attribute32);
        java.lang.String str57 = attribute32.html();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(attributes25);
        org.junit.Assert.assertNotNull(attributeItor26);
        org.junit.Assert.assertNotNull(attribute32);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str44, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(element51);
        org.junit.Assert.assertNotNull(element52);
        org.junit.Assert.assertNotNull(attributes53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi=\"\"" + "'", str55, "hi=\"\"");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi=\"\"" + "'", str57, "hi=\"\"");
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        int int6 = elements5.size();
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str10 = document9.outerHtml();
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        java.lang.String str15 = document13.title();
        org.jsoup.nodes.Element element17 = document13.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element18 = document9.appendChild((org.jsoup.nodes.Node) document13);
        org.jsoup.nodes.Element element19 = document13.head();
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan21 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node25 = document24.parentNode;
        org.jsoup.select.Elements elements27 = document24.getElementsByIndexLessThan((int) 'a');
        boolean boolean28 = indexLessThan21.matches((org.jsoup.nodes.Element) document24);
        boolean boolean29 = element19.equals((java.lang.Object) boolean28);
        int int30 = elements5.lastIndexOf((java.lang.Object) boolean28);
        org.jsoup.nodes.Document document33 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node34 = document33.parentNode;
        org.jsoup.select.Elements elements36 = document33.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream37 = elements36.stream();
        org.jsoup.select.Elements elements39 = elements36.addClass("hi");
        org.jsoup.select.Elements elements40 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements39);
        boolean boolean42 = elements40.hasClass(" hi=\"\"");
        org.jsoup.select.Elements elements44 = elements40.addClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        java.util.Iterator<org.jsoup.nodes.Element> elementItor45 = elements44.iterator();
        org.jsoup.select.Elements elements47 = elements44.val("h");
        org.jsoup.nodes.Element element48 = elements47.first();
        boolean boolean49 = elements5.containsAll((java.util.Collection<org.jsoup.nodes.Element>) elements47);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str10, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(elements36);
        org.junit.Assert.assertNotNull(elementStream37);
        org.junit.Assert.assertNotNull(elements39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(elements44);
        org.junit.Assert.assertNotNull(elementItor45);
        org.junit.Assert.assertNotNull(elements47);
        org.junit.Assert.assertNotNull(element48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("[ , !]");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Element element12 = document8.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element13 = document4.appendChild((org.jsoup.nodes.Node) document8);
        org.jsoup.nodes.Element element15 = document4.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str16 = document4.text();
        org.jsoup.nodes.Element element18 = document4.addClass("#document");
        org.jsoup.nodes.Element element20 = document4.createElement("hi!");
        org.jsoup.select.Elements elements23 = document4.getElementsByAttributeValueContaining("#comment", "#comment");
        boolean boolean24 = tag1.matches((org.jsoup.nodes.Element) document4);
        java.lang.String str25 = document4.data();
        org.jsoup.select.Elements elements27 = document4.getElementsByIndexGreaterThan((int) (short) -1);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str16, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(elements27);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Element element6 = document2.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements7 = element6.getAllElements();
        java.lang.String str8 = element6.html();
        boolean boolean9 = element6.preserveWhitespace();
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str13 = document12.outerHtml();
        org.jsoup.select.Elements elements14 = document12.getAllElements();
        java.lang.String str15 = document12.data();
        org.jsoup.nodes.Element element17 = document12.text("");
        org.jsoup.nodes.Node node18 = document12.parentNode;
        org.jsoup.select.Elements elements20 = document12.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element22 = document12.text("hi=\"\"");
        boolean boolean23 = document12.hasText();
        boolean boolean24 = element6.equals((java.lang.Object) boolean23);
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str28 = document27.outerHtml();
        org.jsoup.select.Elements elements29 = document27.getAllElements();
        java.lang.String str30 = document27.data();
        org.jsoup.nodes.Element element32 = document27.text("");
        boolean boolean34 = document27.hasClass("hi!");
        boolean boolean35 = element6.equals((java.lang.Object) document27);
        org.jsoup.select.Elements elements37 = document27.getElementsByIndexLessThan(0);
        java.lang.String str38 = document27.html();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str13, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str28, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(elements37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<html>\n<head>\n</head>\n<body>\n</body>\n</html>" + "'", str38, "<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Element element6 = document2.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean8 = element6.hasAttr("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        java.lang.String str9 = element6.data();
        java.lang.String str11 = element6.absUrl("<?hi>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.jsoup.nodes.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.nodes.Evaluator.AttributeWithValueEnding("\n<!---->", "hi!");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        document5.setBaseUri("hi");
        boolean boolean9 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document5);
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str13 = document12.outerHtml();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node17 = document16.parentNode;
        java.lang.String str18 = document16.title();
        org.jsoup.nodes.Element element20 = document16.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element21 = document12.appendChild((org.jsoup.nodes.Node) document16);
        org.jsoup.nodes.Element element23 = document12.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str24 = document12.text();
        org.jsoup.nodes.Element element26 = document12.addClass("#document");
        java.lang.String str27 = element26.baseUri;
        org.jsoup.nodes.Element element30 = element26.attr("<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>", "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.jsoup.nodes.Element element32 = element26.text("");
        boolean boolean33 = attributeWithValueEnding2.matches(element26);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str13, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str24, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.jsoup.nodes.Attribute attribute2 = org.jsoup.nodes.Attribute.createFromEncoded("hi!", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node10 = document9.parentNode;
        java.lang.String str11 = document9.title();
        org.jsoup.nodes.Element element13 = document9.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element14 = document5.appendChild((org.jsoup.nodes.Node) document9);
        org.jsoup.nodes.Element element16 = document5.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str17 = document5.text();
        org.jsoup.nodes.Element element19 = document5.addClass("#document");
        boolean boolean20 = attribute2.equals((java.lang.Object) document5);
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str24 = document23.nodeName();
        org.jsoup.select.Elements elements26 = document23.getElementsByAttribute("\n<!---->");
        boolean boolean27 = attribute2.equals((java.lang.Object) document23);
        java.lang.String str28 = attribute2.html();
        org.junit.Assert.assertNotNull(attribute2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str17, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#document" + "'", str24, "#document");
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"" + "'", str28, "hi!=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("\n<!---->", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        java.lang.String str3 = document2.val();
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan(4);
        org.jsoup.select.Elements elements7 = elements5.prepend("#data");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.nodes.Element> elementList10 = elements7.subList((int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(32) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        org.jsoup.select.Elements elements9 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements8);
        boolean boolean11 = elements9.hasClass(" hi=\"\"");
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        org.jsoup.select.Elements elements17 = document14.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements19 = elements17.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream20 = elements17.stream();
        boolean boolean21 = elements9.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements17);
        elements17.clear();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertNotNull(elementStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        int int15 = attributes12.size();
        int int16 = attributes12.size();
        java.util.List<org.jsoup.nodes.Attribute> attributeList17 = attributes12.asList();
        java.lang.String str18 = attributes12.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator19 = attributes12.spliterator();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str23 = document22.outerHtml();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node27 = document26.parentNode;
        java.lang.String str28 = document26.title();
        org.jsoup.nodes.Element element30 = document26.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element31 = document22.appendChild((org.jsoup.nodes.Node) document26);
        org.jsoup.nodes.Attributes attributes32 = document26.attributes();
        boolean boolean34 = attributes32.hasKey("hi!");
        int int35 = attributes32.size();
        int int36 = attributes32.size();
        java.util.List<org.jsoup.nodes.Attribute> attributeList37 = attributes32.asList();
        java.lang.String str38 = attributes32.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator39 = attributes32.spliterator();
        attributes12.addAll(attributes32);
        attributes32.remove("#text");
        attributes32.put("<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>", "\n<!--<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!-->");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(attributeList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(attributeSpliterator19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str23, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(attributes32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(attributeList37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(attributeSpliterator39);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!=\"#declaration\"");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element12 = document6.head();
        org.jsoup.nodes.Attributes attributes13 = element12.attributes;
        org.jsoup.nodes.Element element15 = element12.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements17 = element15.getElementsByClass("<html> <head> </head> <body> hi! </body> </html> <head> </head> <body> hi! </body> hi!");
        java.lang.Object[] objArray18 = elements17.toArray();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(attributes13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements9 = elements7.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str11 = elements9.attr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        elements9.clear();
        org.jsoup.select.Elements elements13 = new org.jsoup.select.Elements((java.util.List<org.jsoup.nodes.Element>) elements9);
        org.jsoup.nodes.Element element14 = elements9.first();
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan16 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        org.jsoup.select.Elements elements22 = document19.getElementsByIndexLessThan((int) 'a');
        boolean boolean23 = indexLessThan16.matches((org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node27 = document26.parentNode;
        org.jsoup.select.Elements elements28 = document26.getAllElements();
        org.jsoup.select.Elements elements29 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan16, (org.jsoup.nodes.Element) document26);
        org.jsoup.nodes.Element element30 = document26.body();
        int int31 = elements9.indexOf((java.lang.Object) document26);
        org.jsoup.select.Elements elements33 = elements9.removeAttr(" #document");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(element14);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(elements29);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(elements33);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        org.jsoup.select.Elements elements9 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements8);
        org.jsoup.select.Elements elements12 = elements8.attr("head", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements14 = elements12.val("#text");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node18 = document17.parentNode;
        java.lang.String str19 = document17.title();
        org.jsoup.nodes.Attributes attributes20 = document17.attributes();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node24 = document23.parentNode;
        org.jsoup.select.Elements elements26 = document23.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element27 = document17.prependChild((org.jsoup.nodes.Node) document23);
        org.jsoup.select.Elements elements29 = document23.getElementsByClass("!");
        org.jsoup.nodes.Element element31 = document23.append("hi!");
        int int32 = elements12.lastIndexOf((java.lang.Object) document23);
        java.lang.String str33 = elements12.outerHtml();
        org.jsoup.select.Elements elements35 = elements12.eq(0);
        boolean boolean36 = elements35.hasText();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(elements29);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>" + "'", str33, "<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>");
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        java.lang.String str12 = element11.outerHtml();
        org.jsoup.select.Elements elements14 = element11.getElementsByIndexEquals((int) (byte) 0);
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.nodes.Document document21 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node22 = document21.parentNode;
        java.lang.String str23 = document21.title();
        org.jsoup.nodes.Element element25 = document21.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element26 = document17.appendChild((org.jsoup.nodes.Node) document21);
        org.jsoup.nodes.Node node27 = document21.parentNode;
        java.lang.String str28 = document21.data();
        org.jsoup.nodes.Element element30 = document21.createElement("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        boolean boolean31 = element11.equals((java.lang.Object) element30);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>" + "'", str12, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        int int6 = attributes5.size();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("#text", "");
        org.jsoup.nodes.Element element4 = document2.append("<html>\n<head>\n</head>\n<body>\n head\n</body>\n</html>");
        java.lang.String str5 = document2.text();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#text head" + "'", str5, "#text head");
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.jsoup.nodes.Attribute attribute2 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        java.lang.String str3 = attribute2.html();
        java.lang.String str4 = attribute2.getValue();
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node8 = document7.parentNode;
        java.lang.String str9 = document7.title();
        org.jsoup.nodes.Attributes attributes10 = document7.attributes();
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        org.jsoup.select.Elements elements16 = document13.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element17 = document7.prependChild((org.jsoup.nodes.Node) document13);
        java.util.List<org.jsoup.nodes.Node> nodeList18 = document7.childNodes;
        boolean boolean19 = document7.hasText();
        org.jsoup.nodes.Node node20 = document7.parent();
        boolean boolean21 = attribute2.equals((java.lang.Object) node20);
        attribute2.setKey("hi hi  hi");
        org.junit.Assert.assertNotNull(attribute2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi=\"\"" + "'", str3, "hi=\"\"");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(nodeList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Attributes attributes17 = document14.attributes();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        org.jsoup.select.Elements elements23 = document20.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element24 = document14.prependChild((org.jsoup.nodes.Node) document20);
        org.jsoup.select.Elements elements26 = document14.select("hi");
        org.jsoup.nodes.Element element27 = document6.appendChild((org.jsoup.nodes.Node) document14);
        java.lang.String str28 = document6.text();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html> <head> </head> <body> hi! </body> </html> hi! hi!" + "'", str28, "<html> <head> </head> <body> hi! </body> </html> hi! hi!");
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element12 = document6.nextElementSibling();
        org.jsoup.nodes.Attributes attributes13 = document6.attributes;
        org.jsoup.parser.Tag tag15 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean16 = tag15.isEmpty();
        boolean boolean17 = tag15.preserveWhitespace();
        org.jsoup.nodes.Element element19 = new org.jsoup.nodes.Element(tag15, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str20 = element19.className();
        org.jsoup.nodes.Element element22 = element19.addClass("\n<!---->");
        boolean boolean23 = attributes13.equals((java.lang.Object) "\n<!---->");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNull(element12);
        org.junit.Assert.assertNotNull(attributes13);
        org.junit.Assert.assertNotNull(tag15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Attributes attributes11 = document8.attributes();
        java.lang.String str12 = attributes11.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator13 = attributes11.spliterator();
        attributes5.addAll(attributes11);
        attributes5.remove("hi! hi! hi!");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(attributes11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(attributeSpliterator13);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor15 = attributes12.iterator();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Attributes attributes21 = document18.attributes();
        java.lang.String str22 = attributes21.html();
        attributes12.addAll(attributes21);
        attributes12.remove(" hi=\"\"");
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str29 = document28.outerHtml();
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node33 = document32.parentNode;
        java.lang.String str34 = document32.title();
        org.jsoup.nodes.Element element36 = document32.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element37 = document28.appendChild((org.jsoup.nodes.Node) document32);
        org.jsoup.nodes.Attributes attributes38 = document32.attributes();
        boolean boolean40 = attributes38.hasKey("hi!");
        int int41 = attributes38.size();
        int int42 = attributes38.size();
        attributes12.addAll(attributes38);
        boolean boolean45 = attributes12.hasKey("#declaration");
        int int46 = attributes12.size();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(attributeItor15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str29, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(attributes38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.jsoup.nodes.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.nodes.Evaluator.AttributeWithValueContaining("<html>\n<head>\n</head>\n<body>\n head\n</body>\n</html>", "<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>&lt;html class=&quot; hi&quot;&gt; &lt;head class=&quot; hi&quot;&gt; &lt;/head&gt; &lt;body class=&quot; hi&quot;&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;head class=&quot; hi&quot;&gt; &lt;/head&gt; &lt;body class=&quot; hi&quot;&gt; hi! &lt;/body&gt; hi!");
        org.jsoup.parser.Tag tag4 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean5 = tag4.canContainBlock();
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str10 = document9.outerHtml();
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        java.lang.String str15 = document13.title();
        org.jsoup.nodes.Element element17 = document13.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element18 = document9.appendChild((org.jsoup.nodes.Node) document13);
        org.jsoup.nodes.Attributes attributes19 = document13.attributes();
        boolean boolean21 = attributes19.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor22 = attributes19.iterator();
        org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node26 = document25.parentNode;
        java.lang.String str27 = document25.title();
        org.jsoup.nodes.Attributes attributes28 = document25.attributes();
        java.lang.String str29 = attributes28.html();
        attributes19.addAll(attributes28);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor31 = attributes19.iterator();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str35 = document34.outerHtml();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node39 = document38.parentNode;
        java.lang.String str40 = document38.title();
        org.jsoup.nodes.Element element42 = document38.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element43 = document34.appendChild((org.jsoup.nodes.Node) document38);
        org.jsoup.nodes.Attributes attributes44 = document38.attributes();
        boolean boolean46 = attributes44.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor47 = attributes44.iterator();
        org.jsoup.nodes.Document document50 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node51 = document50.parentNode;
        java.lang.String str52 = document50.title();
        org.jsoup.nodes.Attributes attributes53 = document50.attributes();
        java.lang.String str54 = attributes53.html();
        attributes44.addAll(attributes53);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor56 = attributes53.iterator();
        attributes19.addAll(attributes53);
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator58 = attributes53.spliterator();
        org.jsoup.nodes.Element element59 = new org.jsoup.nodes.Element(tag4, "[!]", attributes53);
        org.jsoup.nodes.Element element61 = new org.jsoup.nodes.Element(tag4, "<html>\n <head>\n </head>\n <body>\n </body>\n</html>");
        boolean boolean62 = attributeWithValueContaining2.matches(element61);
        org.jsoup.select.Elements elements64 = element61.getElementsByTag("<html> \n<head> \n</head> \n<body> org.jsoup.select.Selector$SelectorParseException:  hi!  &lt;#root&gt; \n <html> \n  <head> \n  </head> \n  <body>\n    &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n  </body>\n </html>\n</body>\n</html>");
        org.junit.Assert.assertNotNull(tag4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str10, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(attributes19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(attributeItor22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(attributeItor31);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str35, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertNotNull(element43);
        org.junit.Assert.assertNotNull(attributes44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(attributeItor47);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(attributes53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(attributeItor56);
        org.junit.Assert.assertNotNull(attributeSpliterator58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(elements64);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        org.jsoup.select.Elements elements7 = document4.getElementsByIndexLessThan((int) 'a');
        boolean boolean8 = indexLessThan1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Evaluator.Attribute attribute10 = new org.jsoup.nodes.Evaluator.Attribute("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        java.lang.String str15 = document13.title();
        org.jsoup.nodes.Attributes attributes16 = document13.attributes();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        org.jsoup.select.Elements elements22 = document19.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element23 = document13.prependChild((org.jsoup.nodes.Node) document19);
        org.jsoup.select.Elements elements25 = document13.select("hi");
        org.jsoup.select.Elements elements26 = document13.children();
        boolean boolean27 = attribute10.matches((org.jsoup.nodes.Element) document13);
        boolean boolean28 = indexLessThan1.matches((org.jsoup.nodes.Element) document13);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Node node30 = document13.childNode(33);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 33, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node8 = document2.parentNode;
        org.jsoup.select.Elements elements10 = document2.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element12 = document2.text("hi=\"\"");
        boolean boolean13 = document2.hasText();
        org.jsoup.nodes.Element element15 = document2.text("hi=\"\"");
        org.jsoup.nodes.Element element17 = element15.addClass("hi=\"\"");
        java.lang.StringBuilder stringBuilder18 = null;
        // The following exception was thrown during execution in test generation
        try {
            element17.outerHtml(stringBuilder18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(element17);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.nodes.Element element8 = document2.text("");
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str12 = document11.outerHtml();
        org.jsoup.select.Elements elements13 = document11.getAllElements();
        boolean boolean14 = element8.equals((java.lang.Object) elements13);
        boolean boolean16 = element8.hasClass("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.jsoup.nodes.XmlDeclaration xmlDeclaration20 = new org.jsoup.nodes.XmlDeclaration("hi!", "!", false);
        java.lang.String str21 = xmlDeclaration20.baseUri();
        java.lang.String str22 = xmlDeclaration20.nodeName();
        element8.addChild((org.jsoup.nodes.Node) xmlDeclaration20);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str12, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "!" + "'", str21, "!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "#declaration" + "'", str22, "#declaration");
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node8 = document2.parentNode;
        org.jsoup.select.Elements elements10 = document2.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element12 = document2.text("hi=\"\"");
        boolean boolean13 = document2.hasText();
        org.jsoup.nodes.Element element15 = document2.text("hi=\"\"");
        org.jsoup.nodes.Element element17 = element15.removeClass("#declaration");
        boolean boolean18 = element15.isBlock();
        org.jsoup.select.Elements elements20 = element15.getElementsByClass("[4]");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(elements20);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.jsoup.nodes.Evaluator.Attribute attribute1 = new org.jsoup.nodes.Evaluator.Attribute("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        java.lang.String str6 = document4.title();
        org.jsoup.nodes.Attributes attributes7 = document4.attributes();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node11 = document10.parentNode;
        org.jsoup.select.Elements elements13 = document10.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element14 = document4.prependChild((org.jsoup.nodes.Node) document10);
        org.jsoup.select.Elements elements16 = document4.select("hi");
        org.jsoup.select.Elements elements17 = document4.children();
        boolean boolean18 = attribute1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document20 = org.jsoup.nodes.Document.createShell("");
        document20.baseUri = "";
        org.jsoup.select.Elements elements24 = document20.getElementsByIndexEquals((int) (byte) -1);
        org.jsoup.nodes.Document document25 = document20.normalise();
        org.jsoup.nodes.Element element27 = document25.appendText("\n<!---->");
        boolean boolean28 = attribute1.matches((org.jsoup.nodes.Element) document25);
        org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parse("", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        boolean boolean32 = attribute1.matches((org.jsoup.nodes.Element) document31);
        org.jsoup.select.Elements elements35 = document31.getElementsByAttributeValueNot("\n&lt;!----&gt;", "#declaration");
        org.jsoup.select.Elements elements37 = document31.getElementsByIndexLessThan((int) '#');
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(elements37);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.jsoup.nodes.Document document3 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node4 = document3.parentNode;
        java.lang.String str5 = document3.title();
        org.jsoup.nodes.Attributes attributes6 = document3.attributes();
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node10 = document9.parentNode;
        org.jsoup.select.Elements elements12 = document9.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element13 = document3.prependChild((org.jsoup.nodes.Node) document9);
        org.jsoup.select.Elements elements15 = document3.select("hi");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str19 = document18.outerHtml();
        org.jsoup.select.Elements elements20 = document18.getAllElements();
        java.lang.String str21 = document18.data();
        org.jsoup.nodes.Element element23 = document18.text("");
        org.jsoup.nodes.Node node24 = document18.parentNode;
        org.jsoup.select.Elements elements26 = document18.getElementsByIndexGreaterThan((int) '4');
        boolean boolean27 = elements15.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements26);
        boolean boolean28 = elements26.hasText();
        java.lang.String str30 = elements26.attr(" !");
        boolean boolean31 = elements26.isEmpty();
        org.jsoup.select.Elements elements32 = org.jsoup.select.Selector.select("<html>\n<head>\n</head>\n<body>\n &lt;#root&gt; \n <html> \n  <head> \n  </head> \n  <body>\n    hi!    \n   <html> \n    <head> \n    </head> \n    <body>\n      hi!  \n    </body>\n   </html>\n  </body>\n </html>\n</body>\n</html><&lt;!----&gt;>\n</&lt;!----&gt;>", (java.lang.Iterable<org.jsoup.nodes.Element>) elements26);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(attributes6);
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str19, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(elements32);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.select.Elements elements7 = document2.getAllElements();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(elements7);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("", "");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.jsoup.nodes.Document document3 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str4 = document3.outerHtml();
        org.jsoup.select.Elements elements5 = document3.getAllElements();
        org.jsoup.select.Elements elements7 = elements5.prepend("");
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str12 = document11.outerHtml();
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node16 = document15.parentNode;
        java.lang.String str17 = document15.title();
        org.jsoup.nodes.Element element19 = document15.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element20 = document11.appendChild((org.jsoup.nodes.Node) document15);
        org.jsoup.nodes.Element element21 = document15.nextElementSibling();
        org.jsoup.select.Elements elements22 = document15.siblingElements();
        org.jsoup.nodes.Element element23 = elements5.set(1, (org.jsoup.nodes.Element) document15);
        java.util.Spliterator<org.jsoup.nodes.Element> elementSpliterator24 = elements5.spliterator();
        org.jsoup.select.Elements elements25 = org.jsoup.select.Selector.select("[ , !]", (java.lang.Iterable<org.jsoup.nodes.Element>) elements5);
        org.jsoup.select.Elements elements26 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements5);
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node30 = document29.parentNode;
        org.jsoup.select.Elements elements31 = document29.getAllElements();
        org.jsoup.nodes.Element element33 = document29.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements34 = element33.getAllElements();
        java.util.List<org.jsoup.nodes.Node> nodeList35 = element33.childNodes;
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node39 = document38.parentNode;
        java.lang.String str40 = document38.title();
        org.jsoup.nodes.Attributes attributes41 = document38.attributes();
        org.jsoup.nodes.Document document44 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node45 = document44.parentNode;
        org.jsoup.select.Elements elements47 = document44.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element48 = document38.prependChild((org.jsoup.nodes.Node) document44);
        java.lang.String str49 = document44.baseUri();
        org.jsoup.nodes.Document document52 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str53 = document52.outerHtml();
        org.jsoup.nodes.Document document56 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node57 = document56.parentNode;
        java.lang.String str58 = document56.title();
        org.jsoup.nodes.Element element60 = document56.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element61 = document52.appendChild((org.jsoup.nodes.Node) document56);
        org.jsoup.nodes.Attributes attributes62 = document56.attributes();
        document44.addChild((org.jsoup.nodes.Node) document56);
        org.jsoup.nodes.Document document65 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element66 = document56.prependChild((org.jsoup.nodes.Node) document65);
        element33.setParentNode((org.jsoup.nodes.Node) document65);
        org.jsoup.select.Elements elements68 = element33.children();
        java.lang.String str69 = elements68.val();
        org.jsoup.nodes.Document document72 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node73 = document72.parentNode;
        org.jsoup.select.Elements elements75 = document72.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream76 = elements75.stream();
        org.jsoup.select.Elements elements78 = elements75.toggleClass("[ , !]");
        int int79 = elements78.size();
        boolean boolean80 = elements68.addAll((java.util.Collection<org.jsoup.nodes.Element>) elements78);
        boolean boolean81 = elements5.remove((java.lang.Object) elements68);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str4, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str12, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertNull(element21);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(elementSpliterator24);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(element33);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(nodeList35);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(attributes41);
        org.junit.Assert.assertNotNull(document44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(elements47);
        org.junit.Assert.assertNotNull(element48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(document52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str53, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(element60);
        org.junit.Assert.assertNotNull(element61);
        org.junit.Assert.assertNotNull(attributes62);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertNotNull(element66);
        org.junit.Assert.assertNotNull(elements68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(elements75);
        org.junit.Assert.assertNotNull(elementStream76);
        org.junit.Assert.assertNotNull(elements78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("[!]", "[ , !]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements4 = org.jsoup.select.Selector.select("<#root>\n  <html>\n   <head>\n   </head>\n   <body> hi!\n   </body>\n  </html>\n </#root>\n <html>\n  <head>\n  </head>\n  <body> hi!\n  </body>\n </html>", (org.jsoup.nodes.Element) document3);
            org.junit.Assert.fail("Expected exception of type org.jsoup.select.Selector.SelectorParseException; message: Could not parse query <#root>?  <html>?   <head>?   </head>?   <body> hi!?   </body>?  </html>? </#root>? <html>?  <head>?  </head>?  <body> hi!?  </body>? </html>");
        } catch (org.jsoup.select.Selector.SelectorParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document3);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements13 = document8.children();
        org.jsoup.select.Elements elements15 = elements13.html("a#document");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements17 = elements13.select("hi=\"\" hi!hi=\"\"hi=\"\"hi=\"\" hi=\"\" hi!hi=\"\"hi=\"\" hi=\"\" hi!hi=\"\"");
            org.junit.Assert.fail("Expected exception of type org.jsoup.select.Selector.SelectorParseException; message: Could not parse query hi=\"\" hi!hi=\"\"hi=\"\"hi=\"\" hi=\"\" hi!hi=\"\"hi=\"\" hi=\"\" hi!hi=\"\"");
        } catch (org.jsoup.select.Selector.SelectorParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements15);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("");
        document1.baseUri = "";
        org.jsoup.nodes.Element element5 = document1.html("#document");
        org.jsoup.select.Elements elements8 = element5.getElementsByAttributeValue("&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;", "<html>\n  <head>\n  </head>\n  <body>\n   &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n  </body>\n </html>");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(element5);
        org.junit.Assert.assertNotNull(elements8);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        int int13 = attributes12.size();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator14 = attributes12.spliterator();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(attributeSpliterator14);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements14 = document8.getElementsByClass("!");
        boolean boolean16 = document8.hasAttr("");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.jsoup.nodes.Attribute attribute2 = new org.jsoup.nodes.Attribute(" !", "<html>\n <head>\n </head>\n <body>\n </body>\n</html>");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        org.jsoup.nodes.Document document9 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node10 = document9.parentNode;
        java.lang.String str11 = document9.title();
        org.jsoup.nodes.Element element13 = document9.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element14 = document5.appendChild((org.jsoup.nodes.Node) document9);
        org.jsoup.nodes.Element element15 = document9.head();
        java.lang.String str16 = element15.id();
        org.jsoup.select.Elements elements19 = element15.getElementsByAttributeValueNot("\n<!---->", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str23 = document22.outerHtml();
        org.jsoup.select.Elements elements24 = document22.getAllElements();
        java.lang.String str25 = document22.data();
        org.jsoup.nodes.Element element27 = document22.text("");
        element15.addChild((org.jsoup.nodes.Node) document22);
        boolean boolean29 = attribute2.equals((java.lang.Object) element15);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str23, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements9 = elements7.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str11 = elements9.attr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str20 = document19.outerHtml();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node24 = document23.parentNode;
        java.lang.String str25 = document23.title();
        org.jsoup.nodes.Element element27 = document23.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element28 = document19.appendChild((org.jsoup.nodes.Node) document23);
        org.jsoup.nodes.Node node29 = document23.parentNode;
        document14.setParentNode(node29);
        boolean boolean31 = elements9.remove((java.lang.Object) document14);
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element33 = elements9.get((int) 'h');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 104, Size: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str20, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("<html>\n<head>\n</head>\n<body>\n</body>\n</html><<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>><hi!>\n</hi!>");
        java.lang.String str2 = document1.id();
        org.jsoup.select.Elements elements4 = document1.getElementsByIndexEquals(0);
        java.lang.String str5 = document1.baseUri();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", " hi=\"\"");
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("[ , !]", "hi=\"\"");
        java.lang.String str6 = document5.html();
        java.lang.String str7 = document5.html();
        boolean boolean8 = attributeWithValueStarting2.matches((org.jsoup.nodes.Element) document5);
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        org.jsoup.select.Elements elements14 = document11.getElementsByIndexLessThan((int) 'a');
        java.lang.String str15 = document11.text();
        org.jsoup.select.Elements elements18 = document11.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        int int20 = elements18.lastIndexOf((java.lang.Object) 'a');
        org.jsoup.select.Elements elements22 = elements18.addClass("");
        org.jsoup.nodes.Evaluator.Tag tag24 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan26 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node30 = document29.parentNode;
        org.jsoup.select.Elements elements32 = document29.getElementsByIndexLessThan((int) 'a');
        boolean boolean33 = indexLessThan26.matches((org.jsoup.nodes.Element) document29);
        org.jsoup.nodes.Document document36 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node37 = document36.parentNode;
        org.jsoup.select.Elements elements38 = document36.getAllElements();
        org.jsoup.select.Elements elements39 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan26, (org.jsoup.nodes.Element) document36);
        boolean boolean40 = tag24.matches((org.jsoup.nodes.Element) document36);
        document36.baseUri = "hi=\"\"";
        org.jsoup.nodes.Element element44 = document36.appendText("");
        boolean boolean45 = elements22.add(element44);
        boolean boolean46 = attributeWithValueStarting2.matches(element44);
        org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str50 = document49.outerHtml();
        org.jsoup.nodes.Document document53 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node54 = document53.parentNode;
        java.lang.String str55 = document53.title();
        org.jsoup.nodes.Element element57 = document53.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element58 = document49.appendChild((org.jsoup.nodes.Node) document53);
        org.jsoup.nodes.Node node59 = document53.parentNode;
        java.lang.String str60 = document53.data();
        org.jsoup.select.Elements elements63 = document53.getElementsByAttributeValueEnding("#declaration", " hi=\"\"");
        boolean boolean64 = attributeWithValueStarting2.matches((org.jsoup.nodes.Element) document53);
        attributeWithValueStarting2.key = "&lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;";
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>" + "'", str7, "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(elements32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(elements39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(element44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str50, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(element57);
        org.junit.Assert.assertNotNull(element58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(elements63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.nodeName();
        org.jsoup.select.Elements elements6 = document2.getElementsByAttributeValueContaining("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>", " !");
        org.jsoup.select.Elements elements9 = document2.getElementsByAttributeValueNot("hi=\"\"", "#root");
        java.lang.String str10 = elements9.html();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#document" + "'", str3, "#document");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!" + "'", str10, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.nodes.Element element8 = document2.text("");
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        org.jsoup.select.Elements elements13 = document11.getAllElements();
        org.jsoup.nodes.Element element15 = document11.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements16 = element15.getAllElements();
        org.jsoup.nodes.Element element17 = document2.appendChild((org.jsoup.nodes.Node) element15);
        org.jsoup.select.Elements elements20 = document2.getElementsByAttributeValueNot("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str21 = document2.tagName();
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str25 = document24.outerHtml();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node29 = document28.parentNode;
        java.lang.String str30 = document28.title();
        org.jsoup.nodes.Element element32 = document28.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element33 = document24.appendChild((org.jsoup.nodes.Node) document28);
        java.util.Set<java.lang.String> strSet34 = document28.classNames();
        org.jsoup.nodes.Element element35 = document2.classNames(strSet34);
        org.jsoup.nodes.Element element37 = element35.toggleClass("[!]");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "#root" + "'", str21, "#root");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str25, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertNotNull(element33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(element37);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.jsoup.nodes.Evaluator.Tag tag1 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        org.jsoup.select.Elements elements9 = document6.getElementsByIndexLessThan((int) 'a');
        boolean boolean10 = indexLessThan3.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        org.jsoup.select.Elements elements15 = document13.getAllElements();
        org.jsoup.select.Elements elements16 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan3, (org.jsoup.nodes.Element) document13);
        boolean boolean17 = tag1.matches((org.jsoup.nodes.Element) document13);
        document13.baseUri = "hi=\"\"";
        org.jsoup.nodes.Element element21 = document13.appendText("");
        org.jsoup.nodes.Element element23 = element21.prependText(" !");
        java.lang.String str24 = element21.data();
        org.jsoup.select.Elements elements26 = element21.getElementsByClass("\n<!---->");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.nodes.Element> elementList29 = elements26.subList((int) (short) 0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(elements26);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str19 = document18.outerHtml();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Element element26 = document22.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Attributes attributes28 = document22.attributes();
        java.lang.String str29 = document22.title();
        int int30 = elements15.lastIndexOf((java.lang.Object) document22);
        org.jsoup.select.Elements elements32 = elements15.prepend("&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;");
        org.jsoup.select.Elements elements34 = elements32.removeAttr(" !");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str19, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(elements32);
        org.junit.Assert.assertNotNull(elements34);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        org.jsoup.select.Elements elements8 = document5.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream9 = elements8.stream();
        org.jsoup.select.Elements elements11 = elements8.addClass("hi");
        org.jsoup.select.Elements elements12 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements11);
        java.lang.Integer int13 = org.jsoup.nodes.Node.indexInList((org.jsoup.nodes.Element) document2, (java.util.List<org.jsoup.nodes.Element>) elements12);
        org.jsoup.select.Elements elements14 = new org.jsoup.select.Elements((java.util.List<org.jsoup.nodes.Element>) elements12);
        org.jsoup.select.Elements elements16 = elements14.select("#data");
        org.jsoup.select.Elements elements18 = elements14.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.Object[] objArray19 = elements18.toArray();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elementStream9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[<html class=\" hi\">\n<head class=\" hi\">\n <html> \n  <head> \n  </head> \n  <body>\n    hi!  &lt;#root&gt; \n   <html> \n    <head> \n    </head> \n    <body>\n      &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n    </body>\n   </html>\n  </body>\n </html>\n</head>\n<body class=\" hi\"> hi!\n <html> \n  <head> \n  </head> \n  <body>\n    hi!  &lt;#root&gt; \n   <html> \n    <head> \n    </head> \n    <body>\n      &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n    </body>\n   </html>\n  </body>\n </html>\n</body>\n<html> \n <head> \n </head> \n <body>\n   hi!  &lt;#root&gt; \n  <html> \n   <head> \n   </head> \n   <body>\n     &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n   </body>\n  </html>\n </body>\n</html>\n</html>\n<html> \n<head> \n</head> \n<body>\n  hi!  &lt;#root&gt; \n <html> \n  <head> \n  </head> \n  <body>\n    &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n  </body>\n </html>\n</body>\n</html>, \n<html class=\" hi\">\n<head class=\" hi\">\n <html> \n  <head> \n  </head> \n  <body>\n    hi!  &lt;#root&gt; \n   <html> \n    <head> \n    </head> \n    <body>\n      &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n    </body>\n   </html>\n  </body>\n </html>\n</head>\n<body class=\" hi\"> hi!\n <html> \n  <head> \n  </head> \n  <body>\n    hi!  &lt;#root&gt; \n   <html> \n    <head> \n    </head> \n    <body>\n      &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n    </body>\n   </html>\n  </body>\n </html>\n</body>\n<html> \n <head> \n </head> \n <body>\n   hi!  &lt;#root&gt; \n  <html> \n   <head> \n   </head> \n   <body>\n     &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n   </body>\n  </html>\n </body>\n</html>\n</html>, \n<head class=\" hi\">\n <html> \n  <head> \n  </head> \n  <body>\n    hi!  &lt;#root&gt; \n   <html> \n    <head> \n    </head> \n    <body>\n      &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n    </body>\n   </html>\n  </body>\n </html>\n</head>, \n<body class=\" hi\"> hi!\n <html> \n  <head> \n  </head> \n  <body>\n    hi!  &lt;#root&gt; \n   <html> \n    <head> \n    </head> \n    <body>\n      &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n    </body>\n   </html>\n  </body>\n </html>\n</body>]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[<html class=\" hi\">\n<head class=\" hi\">\n <html> \n  <head> \n  </head> \n  <body>\n    hi!  &lt;#root&gt; \n   <html> \n    <head> \n    </head> \n    <body>\n      &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n    </body>\n   </html>\n  </body>\n </html>\n</head>\n<body class=\" hi\"> hi!\n <html> \n  <head> \n  </head> \n  <body>\n    hi!  &lt;#root&gt; \n   <html> \n    <head> \n    </head> \n    <body>\n      &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n    </body>\n   </html>\n  </body>\n </html>\n</body>\n<html> \n <head> \n </head> \n <body>\n   hi!  &lt;#root&gt; \n  <html> \n   <head> \n   </head> \n   <body>\n     &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n   </body>\n  </html>\n </body>\n</html>\n</html>\n<html> \n<head> \n</head> \n<body>\n  hi!  &lt;#root&gt; \n <html> \n  <head> \n  </head> \n  <body>\n    &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n  </body>\n </html>\n</body>\n</html>, \n<html class=\" hi\">\n<head class=\" hi\">\n <html> \n  <head> \n  </head> \n  <body>\n    hi!  &lt;#root&gt; \n   <html> \n    <head> \n    </head> \n    <body>\n      &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n    </body>\n   </html>\n  </body>\n </html>\n</head>\n<body class=\" hi\"> hi!\n <html> \n  <head> \n  </head> \n  <body>\n    hi!  &lt;#root&gt; \n   <html> \n    <head> \n    </head> \n    <body>\n      &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n    </body>\n   </html>\n  </body>\n </html>\n</body>\n<html> \n <head> \n </head> \n <body>\n   hi!  &lt;#root&gt; \n  <html> \n   <head> \n   </head> \n   <body>\n     &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n   </body>\n  </html>\n </body>\n</html>\n</html>, \n<head class=\" hi\">\n <html> \n  <head> \n  </head> \n  <body>\n    hi!  &lt;#root&gt; \n   <html> \n    <head> \n    </head> \n    <body>\n      &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n    </body>\n   </html>\n  </body>\n </html>\n</head>, \n<body class=\" hi\"> hi!\n <html> \n  <head> \n  </head> \n  <body>\n    hi!  &lt;#root&gt; \n   <html> \n    <head> \n    </head> \n    <body>\n      &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;   \n    </body>\n   </html>\n  </body>\n </html>\n</body>]");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan1 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) ' ');
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        org.jsoup.select.Elements elements9 = document6.getElementsByIndexLessThan((int) 'a');
        boolean boolean10 = indexLessThan3.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Element element12 = document6.prepend("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        boolean boolean13 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node17 = document16.parentNode;
        org.jsoup.select.Elements elements18 = document16.getAllElements();
        boolean boolean19 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document16);
        org.jsoup.nodes.Element element21 = document16.text("#text");
        org.jsoup.nodes.Element element23 = element21.html("\n<<html>\n<head>\n</head>\n<body>\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body>\n</body>\n</html>>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(element23);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Node node8 = document2.attr("hi!", "hi!");
        org.jsoup.select.Elements elements9 = document2.getAllElements();
        org.jsoup.nodes.Element element11 = document2.appendElement("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        java.lang.String str12 = document2.baseUri;
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements14 = document2.select("hi");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        java.lang.String str20 = document17.data();
        org.jsoup.nodes.Element element22 = document17.text("");
        org.jsoup.nodes.Node node23 = document17.parentNode;
        org.jsoup.select.Elements elements25 = document17.getElementsByIndexGreaterThan((int) '4');
        boolean boolean26 = elements14.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements25);
        org.jsoup.select.Elements elements28 = elements14.removeClass("");
        org.jsoup.select.Elements elements30 = elements28.removeClass("#comment");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.nodes.Element> elementList33 = elements28.subList((int) '<', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(60) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(elements30);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.parser.Tag tag3 = document2.tag();
        org.jsoup.nodes.Element element5 = new org.jsoup.nodes.Element(tag3, "\n&lt;!----&gt;");
        boolean boolean6 = tag3.canContainBlock();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.outerHtml();
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Element element18 = document14.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document10.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Attributes attributes20 = document14.attributes();
        java.lang.String str22 = attributes20.get("hi!");
        java.lang.String str24 = attributes20.get("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = new org.jsoup.nodes.Element(tag3, "<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>", attributes20);
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node29 = document28.parentNode;
        org.jsoup.select.Elements elements31 = document28.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream32 = elements31.stream();
        org.jsoup.select.Elements elements34 = elements31.addClass("hi");
        org.jsoup.select.Elements elements35 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements34);
        org.jsoup.select.Elements elements38 = elements34.attr("head", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements40 = elements38.val("#text");
        org.jsoup.nodes.Document document43 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node44 = document43.parentNode;
        java.lang.String str45 = document43.title();
        org.jsoup.nodes.Attributes attributes46 = document43.attributes();
        org.jsoup.nodes.Document document49 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node50 = document49.parentNode;
        org.jsoup.select.Elements elements52 = document49.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element53 = document43.prependChild((org.jsoup.nodes.Node) document49);
        org.jsoup.select.Elements elements55 = document49.getElementsByClass("!");
        org.jsoup.nodes.Element element57 = document49.append("hi!");
        int int58 = elements38.lastIndexOf((java.lang.Object) document49);
        org.jsoup.select.Elements elements60 = elements38.prepend("\n&lt;!----&gt;");
        org.jsoup.nodes.Element element61 = elements38.first();
        element25.parentNode = element61;
        java.lang.Class<?> wildcardClass63 = element61.getClass();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(tag3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str11, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(attributes20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(elementStream32);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(elements40);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(attributes46);
        org.junit.Assert.assertNotNull(document49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(elements52);
        org.junit.Assert.assertNotNull(element53);
        org.junit.Assert.assertNotNull(elements55);
        org.junit.Assert.assertNotNull(element57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(elements60);
        org.junit.Assert.assertNotNull(element61);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.jsoup.safety.Whitelist whitelist1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.jsoup.Jsoup.clean("<html>\n<head>\n</head>\n<body>\n</body>\n</html><<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>><hi!>\n</hi!>", whitelist1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan1 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) ' ');
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting4 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting4.value = "hi!";
        attributeWithValueStarting4.key = "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>";
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str12 = document11.outerHtml();
        document11.setBaseUri("hi");
        boolean boolean15 = attributeWithValueStarting4.matches((org.jsoup.nodes.Element) document11);
        boolean boolean17 = document11.hasClass("[ , #, d, o, c, u, m, e, n, t]");
        boolean boolean18 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document11);
        org.jsoup.nodes.Document document21 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        java.lang.String str22 = document21.baseUri();
        java.lang.String str23 = document21.html();
        org.jsoup.nodes.Document document24 = document21.normalise();
        org.jsoup.nodes.Document document26 = org.jsoup.nodes.Document.createShell("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str27 = document26.baseUri();
        document24.addChild((org.jsoup.nodes.Node) document26);
        org.jsoup.nodes.Element element30 = document26.createElement("#document");
        org.jsoup.nodes.Document document33 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node34 = document33.parentNode;
        java.lang.String str35 = document33.title();
        org.jsoup.nodes.Attributes attributes36 = document33.attributes();
        org.jsoup.nodes.Document document39 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node40 = document39.parentNode;
        org.jsoup.select.Elements elements42 = document39.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element43 = document33.prependChild((org.jsoup.nodes.Node) document39);
        boolean boolean44 = document26.equals((java.lang.Object) document33);
        boolean boolean45 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document33);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str12, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi" + "'", str22, "hi");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>" + "'", str23, "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str27, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(attributes36);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertNotNull(element43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parse("<body>\n <!----> hi!\n</body>", "head");
        org.junit.Assert.assertNotNull(document2);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        java.lang.String str9 = elements8.html();
        java.lang.String str10 = elements8.val();
        org.jsoup.select.Elements elements12 = elements8.val("hi");
        org.jsoup.select.Elements elements14 = elements8.eq((int) '#');
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!" + "'", str9, "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elements14);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        org.jsoup.nodes.Element element14 = document6.removeClass("<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>");
        org.jsoup.select.Elements elements15 = document6.getAllElements();
        org.jsoup.nodes.Document document17 = org.jsoup.Jsoup.parseBodyFragment("hi! <html> <head> </head> <body> hi! </body> </html>");
        org.jsoup.nodes.Element element18 = document17.empty();
        org.jsoup.nodes.Element element19 = document6.appendChild((org.jsoup.nodes.Node) element18);
        java.lang.String str20 = document6.id();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node10 = document2.attr(" hi=\"\"", "!");
        java.lang.Class<?> wildcardClass11 = node10.getClass();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        java.lang.String str6 = attributes5.html();
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor7 = attributes5.iterator();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(attributeItor7);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.jsoup.nodes.Attribute attribute2 = new org.jsoup.nodes.Attribute("!\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "[ , !]=\"\"");
        attribute2.setKey("[ , !]=\"\"");
        org.jsoup.nodes.Evaluator.AttributeWithValueEnding attributeWithValueEnding7 = new org.jsoup.nodes.Evaluator.AttributeWithValueEnding("\n<!---->", "hi!");
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.outerHtml();
        document10.setBaseUri("hi");
        boolean boolean14 = attributeWithValueEnding7.matches((org.jsoup.nodes.Element) document10);
        boolean boolean15 = attribute2.equals((java.lang.Object) boolean14);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str11, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Attributes attributes17 = document14.attributes();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        org.jsoup.select.Elements elements23 = document20.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element24 = document14.prependChild((org.jsoup.nodes.Node) document20);
        org.jsoup.select.Elements elements26 = document14.select("hi");
        org.jsoup.nodes.Element element27 = document6.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Element element28 = element27.parent();
        org.jsoup.select.Elements elements31 = element28.getElementsByAttributeValueContaining("<html> \n<head> \n</head> \n<body>\n  [ , !]  \n</body>\n</html>", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!=\"#declaration\"");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.nodes.Element> elementList34 = elements31.subList((int) '#', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(elements31);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.toggleClass("#document");
        java.util.Iterator<org.jsoup.nodes.Element> elementItor11 = elements10.iterator();
        org.jsoup.select.Elements elements13 = elements10.removeAttr("#comment");
        org.jsoup.select.Elements elements15 = elements10.append("");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        org.jsoup.select.Elements elements20 = document18.getAllElements();
        java.util.Iterator<org.jsoup.nodes.Element> elementItor21 = elements20.iterator();
        boolean boolean22 = elements10.addAll((java.util.Collection<org.jsoup.nodes.Element>) elements20);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elementItor11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(elementItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements6 = document2.getElementsByAttributeValueContaining("org.jsoup.select.Selector$SelectorParseException: <html> <head> </head> <body> hi! </body> </html><#root> <html> <head> </head> <body> &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt; </body> </html> </#root>", "<!---->=\"\"");
        org.jsoup.nodes.Element element8 = document2.html("");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(element8);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("");
        java.lang.String str3 = document1.attr("<html>\n<head>\n</head>\n<body> #text\n</body>\n</html>\n<html> \n<head> \n</head> \n<body>\n  head  \n</body>\n</html>");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan1 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) ' ');
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        org.jsoup.select.Elements elements9 = document6.getElementsByIndexLessThan((int) 'a');
        boolean boolean10 = indexLessThan3.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Element element12 = document6.prepend("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        boolean boolean13 = indexGreaterThan1.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node17 = document16.parentNode;
        java.lang.String str18 = document16.title();
        org.jsoup.nodes.Attributes attributes19 = document16.attributes();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        org.jsoup.select.Elements elements25 = document22.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element26 = document16.prependChild((org.jsoup.nodes.Node) document22);
        java.lang.String str27 = document22.baseUri();
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str31 = document30.outerHtml();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node35 = document34.parentNode;
        java.lang.String str36 = document34.title();
        org.jsoup.nodes.Element element38 = document34.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element39 = document30.appendChild((org.jsoup.nodes.Node) document34);
        org.jsoup.nodes.Attributes attributes40 = document34.attributes();
        document22.addChild((org.jsoup.nodes.Node) document34);
        org.jsoup.nodes.Element element43 = document34.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements44 = element43.getAllElements();
        org.jsoup.nodes.Element element46 = element43.prepend("<!---->=\"\"");
        java.util.List<org.jsoup.nodes.Node> nodeList47 = element43.childNodes;
        org.jsoup.nodes.Document document50 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str51 = document50.outerHtml();
        org.jsoup.select.Elements elements52 = document50.getAllElements();
        java.lang.String str53 = document50.data();
        org.jsoup.nodes.Element element55 = document50.text("");
        org.jsoup.select.Elements elements57 = element55.getElementsByIndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Element element58 = element43.prependChild((org.jsoup.nodes.Node) element55);
        org.jsoup.nodes.Element element60 = element55.toggleClass("");
        java.lang.String str61 = element55.data();
        org.jsoup.select.Elements elements62 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexGreaterThan1, element55);
        org.jsoup.nodes.Document document65 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node66 = document65.parentNode;
        org.jsoup.select.Elements elements68 = document65.getElementsByIndexLessThan((int) 'a');
        java.lang.String str69 = document65.text();
        org.jsoup.select.Elements elements72 = document65.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str73 = document65.text();
        org.jsoup.select.Elements elements74 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexGreaterThan1, (org.jsoup.nodes.Element) document65);
        java.lang.String str75 = elements74.val();
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(attributes19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str31, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(attributes40);
        org.junit.Assert.assertNotNull(element43);
        org.junit.Assert.assertNotNull(elements44);
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertNotNull(nodeList47);
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str51, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(element55);
        org.junit.Assert.assertNotNull(elements57);
        org.junit.Assert.assertNotNull(element58);
        org.junit.Assert.assertNotNull(element60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(elements62);
        org.junit.Assert.assertNotNull(document65);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(elements68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(elements72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(elements74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements17 = elements15.removeAttr("hi");
        org.jsoup.select.Elements elements18 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements17);
        org.jsoup.select.Elements elements20 = elements18.select("hi");
        org.jsoup.select.Elements elements22 = elements18.toggleClass("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.select.Elements elements24 = elements22.toggleClass("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!=\"#comment\"");
        org.jsoup.select.Elements elements26 = elements22.toggleClass("<html class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(elements26);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("#text", "");
        org.jsoup.nodes.Element element4 = document2.append("<html>\n<head>\n</head>\n<body>\n head\n</body>\n</html>");
        java.lang.String str5 = document2.nodeName();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#document" + "'", str5, "#document");
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.jsoup.safety.Whitelist whitelist2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.jsoup.Jsoup.clean("\n<<html>\n<head>\n</head>\n<body>\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body>\n</body>\n</html>>", "", whitelist2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Attributes attributes17 = document14.attributes();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        org.jsoup.select.Elements elements23 = document20.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element24 = document14.prependChild((org.jsoup.nodes.Node) document20);
        org.jsoup.select.Elements elements26 = document14.select("hi");
        org.jsoup.nodes.Element element27 = document6.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Element element28 = element27.parent();
        org.jsoup.select.Elements elements30 = element27.getElementsByTag("#root");
        org.jsoup.select.Elements elements32 = elements30.html("#data");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element34 = elements32.get(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(elements32);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        // The following exception was thrown during execution in test generation
        try {
            attributes12.remove("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated string is empty");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", " hi=\"\"");
        org.jsoup.nodes.Evaluator.Attribute attribute4 = new org.jsoup.nodes.Evaluator.Attribute("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node8 = document7.parentNode;
        java.lang.String str9 = document7.title();
        org.jsoup.nodes.Attributes attributes10 = document7.attributes();
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        org.jsoup.select.Elements elements16 = document13.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element17 = document7.prependChild((org.jsoup.nodes.Node) document13);
        org.jsoup.select.Elements elements19 = document7.select("hi");
        org.jsoup.select.Elements elements20 = document7.children();
        boolean boolean21 = attribute4.matches((org.jsoup.nodes.Element) document7);
        java.lang.String str22 = document7.id();
        boolean boolean23 = attributeWithValueStarting2.matches((org.jsoup.nodes.Element) document7);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str27 = document26.outerHtml();
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node31 = document30.parentNode;
        java.lang.String str32 = document30.title();
        org.jsoup.nodes.Element element34 = document30.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element35 = document26.appendChild((org.jsoup.nodes.Node) document30);
        java.lang.String str36 = element35.outerHtml();
        org.jsoup.select.Elements elements38 = element35.getElementsByIndexEquals((int) (byte) 0);
        org.jsoup.nodes.Element element40 = element35.val("hi!");
        org.jsoup.nodes.Element element42 = element35.val("<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
        boolean boolean43 = attributeWithValueStarting2.matches(element42);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str27, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>" + "'", str36, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element17 = document2.addClass("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document2.prepend("");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(element19);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.jsoup.nodes.Element element0 = null;
        org.jsoup.nodes.Element[] elementArray1 = new org.jsoup.nodes.Element[] { element0 };
        org.jsoup.select.Elements elements2 = new org.jsoup.select.Elements(elementArray1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str7 = document6.outerHtml();
        org.jsoup.select.Elements elements8 = document6.getAllElements();
        org.jsoup.select.Elements elements10 = elements8.prepend("");
        org.jsoup.select.Elements elements12 = elements10.prepend("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        int int14 = elements12.lastIndexOf((java.lang.Object) '#');
        elements12.clear();
        boolean boolean16 = elements2.addAll(0, (java.util.Collection<org.jsoup.nodes.Element>) elements12);
        org.jsoup.select.Elements elements18 = elements2.eq(0);
        org.jsoup.nodes.DataNode dataNode21 = new org.jsoup.nodes.DataNode("hi", "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        java.lang.String str22 = dataNode21.toString();
        boolean boolean23 = elements2.equals((java.lang.Object) dataNode21);
        org.junit.Assert.assertNotNull(elementArray1);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str7, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi" + "'", str22, "hi");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("[ , !]");
        java.lang.String str2 = tag1.getName();
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        org.jsoup.select.Elements elements7 = document5.getAllElements();
        org.jsoup.nodes.Element element9 = document5.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements10 = element9.getAllElements();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = element9.childNodes;
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Attributes attributes17 = document14.attributes();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        org.jsoup.select.Elements elements23 = document20.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element24 = document14.prependChild((org.jsoup.nodes.Node) document20);
        java.lang.String str25 = document20.baseUri();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str29 = document28.outerHtml();
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node33 = document32.parentNode;
        java.lang.String str34 = document32.title();
        org.jsoup.nodes.Element element36 = document32.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element37 = document28.appendChild((org.jsoup.nodes.Node) document32);
        org.jsoup.nodes.Attributes attributes38 = document32.attributes();
        document20.addChild((org.jsoup.nodes.Node) document32);
        org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element42 = document32.prependChild((org.jsoup.nodes.Node) document41);
        element9.setParentNode((org.jsoup.nodes.Node) document41);
        org.jsoup.nodes.Element element45 = document41.addClass("#declaration");
        boolean boolean46 = tag1.equals((java.lang.Object) document41);
        java.lang.String str47 = document41.val();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[ , !]" + "'", str2, "[ , !]");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(element9);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str29, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(attributes38);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertNotNull(element45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parse("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements4 = document1.getElementsByAttributeValue("hi=\"\"", "#data");
        org.jsoup.parser.Tag tag5 = document1.tag();
        boolean boolean7 = document1.hasAttr("[ , #, d, o, c, u, m, e, n, t]");
        org.jsoup.nodes.Element element9 = document1.addClass("<#root>\n  <html>\n   <head>\n   </head>\n   <body> hi!\n   </body>\n  </html>\n </#root>\n <html>\n  <head>\n  </head>\n  <body> hi!\n  </body>\n </html>");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(tag5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(element9);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        java.lang.String str3 = document2.baseUri();
        org.jsoup.nodes.Element element4 = document2.head();
        org.jsoup.select.Elements elements5 = document2.getAllElements();
        java.lang.String str6 = document2.nodeName();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi" + "'", str3, "hi");
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#document" + "'", str6, "#document");
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.jsoup.nodes.Element element0 = null;
        org.jsoup.nodes.Element[] elementArray1 = new org.jsoup.nodes.Element[] { element0 };
        org.jsoup.select.Elements elements2 = new org.jsoup.select.Elements(elementArray1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str7 = document6.outerHtml();
        org.jsoup.select.Elements elements8 = document6.getAllElements();
        org.jsoup.select.Elements elements10 = elements8.prepend("");
        org.jsoup.select.Elements elements12 = elements10.prepend("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        int int14 = elements12.lastIndexOf((java.lang.Object) '#');
        elements12.clear();
        boolean boolean16 = elements2.addAll(0, (java.util.Collection<org.jsoup.nodes.Element>) elements12);
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str21 = document20.outerHtml();
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node25 = document24.parentNode;
        java.lang.String str26 = document24.title();
        org.jsoup.nodes.Element element28 = document24.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element29 = document20.appendChild((org.jsoup.nodes.Node) document24);
        org.jsoup.nodes.Element element30 = document24.nextElementSibling();
        org.jsoup.select.Elements elements31 = document24.siblingElements();
        elements12.add(0, (org.jsoup.nodes.Element) document24);
        org.junit.Assert.assertNotNull(elementArray1);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str7, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str21, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNull(element30);
        org.junit.Assert.assertNotNull(elements31);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        int int13 = attributes12.size();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node17 = document16.parentNode;
        java.lang.String str18 = document16.title();
        org.jsoup.nodes.Attributes attributes19 = document16.attributes();
        org.jsoup.nodes.Attribute attribute22 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        java.lang.String str23 = attribute22.html();
        attributes19.put(attribute22);
        java.lang.String str25 = attribute22.getKey();
        attributes12.put(attribute22);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(attributes19);
        org.junit.Assert.assertNotNull(attribute22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi=\"\"" + "'", str23, "hi=\"\"");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi" + "'", str25, "hi");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("#text", "");
        org.jsoup.nodes.Element element4 = document2.append("<html>\n<head>\n</head>\n<body>\n head\n</body>\n</html>");
        java.lang.String str5 = document2.outerHtml();
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements7 = document2.select("!\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
            org.junit.Assert.fail("Expected exception of type org.jsoup.select.Selector.SelectorParseException; message: Could not parse query !?<html>?<head>?</head>?<body> hi!?</body>?</html>");
        } catch (org.jsoup.select.Selector.SelectorParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> #text\n</body>\n</html>\n<html> \n<head> \n</head> \n<body>\n  head  \n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> #text\n</body>\n</html>\n<html> \n<head> \n</head> \n<body>\n  head  \n</body>\n</html>");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.util.Iterator<org.jsoup.nodes.Element> elementItor5 = elements4.iterator();
        boolean boolean7 = elements4.hasClass("head");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elementItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        java.lang.String str6 = document4.title();
        org.jsoup.nodes.Element element7 = document1.appendChild((org.jsoup.nodes.Node) document4);
        document4.remove();
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(element7);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element12 = document6.nextElementSibling();
        org.jsoup.nodes.Attributes attributes13 = document6.attributes;
        java.util.List<org.jsoup.nodes.Attribute> attributeList14 = attributes13.asList();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNull(element12);
        org.junit.Assert.assertNotNull(attributes13);
        org.junit.Assert.assertNotNull(attributeList14);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        boolean boolean13 = document2.hasAttr("hi!");
        org.jsoup.nodes.Element element14 = document2.parent();
        boolean boolean16 = document2.hasAttr("#comment");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting19 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", " hi=\"\"");
        org.jsoup.nodes.Evaluator.Attribute attribute21 = new org.jsoup.nodes.Evaluator.Attribute("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node25 = document24.parentNode;
        java.lang.String str26 = document24.title();
        org.jsoup.nodes.Attributes attributes27 = document24.attributes();
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node31 = document30.parentNode;
        org.jsoup.select.Elements elements33 = document30.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element34 = document24.prependChild((org.jsoup.nodes.Node) document30);
        org.jsoup.select.Elements elements36 = document24.select("hi");
        org.jsoup.select.Elements elements37 = document24.children();
        boolean boolean38 = attribute21.matches((org.jsoup.nodes.Element) document24);
        java.lang.String str39 = document24.id();
        boolean boolean40 = attributeWithValueStarting19.matches((org.jsoup.nodes.Element) document24);
        document2.parentNode = document24;
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(element14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(attributes27);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertNotNull(elements36);
        org.junit.Assert.assertNotNull(elements37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.nodeName();
        org.jsoup.select.Elements elements5 = document2.getElementsByAttribute("\n<!---->");
        org.jsoup.select.Elements elements8 = document2.getElementsByAttributeValueStarting("!\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "[ , !]=\"\"");
        java.lang.StringBuilder stringBuilder9 = null;
        // The following exception was thrown during execution in test generation
        try {
            document2.indent(stringBuilder9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#document" + "'", str3, "#document");
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements8);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements14 = document8.getElementsByClass("!");
        org.jsoup.nodes.XmlDeclaration xmlDeclaration18 = new org.jsoup.nodes.XmlDeclaration("hi!", "!", false);
        org.jsoup.nodes.Document document21 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node22 = document21.parentNode;
        boolean boolean23 = document21.isBlock();
        xmlDeclaration18.addChild((org.jsoup.nodes.Node) document21);
        org.jsoup.nodes.Element element25 = document8.appendChild((org.jsoup.nodes.Node) xmlDeclaration18);
        java.lang.StringBuilder stringBuilder26 = null;
        // The following exception was thrown during execution in test generation
        try {
            xmlDeclaration18.outerHtml(stringBuilder26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(element25);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.nodes.Element element8 = document2.text("");
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str12 = document11.outerHtml();
        org.jsoup.select.Elements elements13 = document11.getAllElements();
        boolean boolean14 = element8.equals((java.lang.Object) elements13);
        org.jsoup.parser.Tag tag16 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean17 = tag16.canContainBlock();
        org.jsoup.nodes.Document document21 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str22 = document21.outerHtml();
        org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node26 = document25.parentNode;
        java.lang.String str27 = document25.title();
        org.jsoup.nodes.Element element29 = document25.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element30 = document21.appendChild((org.jsoup.nodes.Node) document25);
        org.jsoup.nodes.Attributes attributes31 = document25.attributes();
        boolean boolean33 = attributes31.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor34 = attributes31.iterator();
        org.jsoup.nodes.Document document37 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node38 = document37.parentNode;
        java.lang.String str39 = document37.title();
        org.jsoup.nodes.Attributes attributes40 = document37.attributes();
        java.lang.String str41 = attributes40.html();
        attributes31.addAll(attributes40);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor43 = attributes31.iterator();
        org.jsoup.nodes.Document document46 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str47 = document46.outerHtml();
        org.jsoup.nodes.Document document50 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node51 = document50.parentNode;
        java.lang.String str52 = document50.title();
        org.jsoup.nodes.Element element54 = document50.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element55 = document46.appendChild((org.jsoup.nodes.Node) document50);
        org.jsoup.nodes.Attributes attributes56 = document50.attributes();
        boolean boolean58 = attributes56.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor59 = attributes56.iterator();
        org.jsoup.nodes.Document document62 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node63 = document62.parentNode;
        java.lang.String str64 = document62.title();
        org.jsoup.nodes.Attributes attributes65 = document62.attributes();
        java.lang.String str66 = attributes65.html();
        attributes56.addAll(attributes65);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor68 = attributes65.iterator();
        attributes31.addAll(attributes65);
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator70 = attributes65.spliterator();
        org.jsoup.nodes.Element element71 = new org.jsoup.nodes.Element(tag16, "[!]", attributes65);
        org.jsoup.nodes.Element element73 = new org.jsoup.nodes.Element(tag16, "<html>\n <head>\n </head>\n <body>\n </body>\n</html>");
        element8.setParentNode((org.jsoup.nodes.Node) element73);
        org.jsoup.select.Elements elements75 = element8.siblingElements();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(element8);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str12, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(tag16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str22, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(attributes31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(attributeItor34);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(attributes40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(attributeItor43);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str47, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(element54);
        org.junit.Assert.assertNotNull(element55);
        org.junit.Assert.assertNotNull(attributes56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(attributeItor59);
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(attributes65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(attributeItor68);
        org.junit.Assert.assertNotNull(attributeSpliterator70);
        org.junit.Assert.assertNotNull(elements75);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.jsoup.nodes.Evaluator.AttributeWithValueContaining attributeWithValueContaining2 = new org.jsoup.nodes.Evaluator.AttributeWithValueContaining("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>", "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        attributeWithValueContaining2.value = "#document";
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node8 = document7.parentNode;
        java.lang.String str9 = document7.title();
        org.jsoup.nodes.Attributes attributes10 = document7.attributes();
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        org.jsoup.select.Elements elements16 = document13.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element17 = document7.prependChild((org.jsoup.nodes.Node) document13);
        java.lang.String str18 = document13.baseUri();
        org.jsoup.nodes.Document document21 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str22 = document21.outerHtml();
        org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node26 = document25.parentNode;
        java.lang.String str27 = document25.title();
        org.jsoup.nodes.Element element29 = document25.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element30 = document21.appendChild((org.jsoup.nodes.Node) document25);
        org.jsoup.nodes.Attributes attributes31 = document25.attributes();
        document13.addChild((org.jsoup.nodes.Node) document25);
        org.jsoup.nodes.Element element34 = document25.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements35 = element34.getAllElements();
        org.jsoup.nodes.Element element37 = element34.prepend("<!---->=\"\"");
        java.util.List<org.jsoup.nodes.Node> nodeList38 = element34.childNodes;
        org.jsoup.nodes.Document document41 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str42 = document41.outerHtml();
        org.jsoup.select.Elements elements43 = document41.getAllElements();
        java.lang.String str44 = document41.data();
        org.jsoup.nodes.Element element46 = document41.text("");
        org.jsoup.select.Elements elements48 = element46.getElementsByIndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Element element49 = element34.prependChild((org.jsoup.nodes.Node) element46);
        org.jsoup.nodes.Element element51 = element46.toggleClass("");
        boolean boolean52 = attributeWithValueContaining2.matches(element51);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(attributes10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str22, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(attributes31);
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertNotNull(elements35);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(nodeList38);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str42, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(element46);
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertNotNull(element49);
        org.junit.Assert.assertNotNull(element51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        org.jsoup.select.Elements elements9 = new org.jsoup.select.Elements((java.util.List<org.jsoup.nodes.Element>) elements8);
        java.lang.Object[] objArray10 = elements9.toArray();
        org.jsoup.nodes.Element element12 = elements9.remove(0);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>, \n<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>, \n<head class=\" hi\">\n</head>, \n<body class=\" hi\"> hi!\n</body>]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>, \n<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>, \n<head class=\" hi\">\n</head>, \n<body class=\" hi\"> hi!\n</body>]");
        org.junit.Assert.assertNotNull(element12);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.jsoup.nodes.TextNode textNode2 = org.jsoup.nodes.TextNode.createFromEncoded("\n<!---->", "\n<!---->");
        org.jsoup.nodes.TextNode textNode4 = textNode2.text("");
        java.lang.String str5 = textNode4.nodeName();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        java.lang.String str12 = document8.text();
        org.jsoup.nodes.Element element14 = document8.text("");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node18 = document17.parentNode;
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        org.jsoup.nodes.Element element21 = document17.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements22 = element21.getAllElements();
        org.jsoup.nodes.Element element23 = document8.appendChild((org.jsoup.nodes.Node) element21);
        org.jsoup.select.Elements elements26 = document8.getElementsByAttributeValueNot("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str27 = document8.tagName();
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str31 = document30.outerHtml();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node35 = document34.parentNode;
        java.lang.String str36 = document34.title();
        org.jsoup.nodes.Element element38 = document34.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element39 = document30.appendChild((org.jsoup.nodes.Node) document34);
        java.util.Set<java.lang.String> strSet40 = document34.classNames();
        org.jsoup.nodes.Element element41 = document8.classNames(strSet40);
        textNode4.addChild((org.jsoup.nodes.Node) element41);
        org.junit.Assert.assertNotNull(textNode2);
        org.junit.Assert.assertNotNull(textNode4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#text" + "'", str5, "#text");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "#root" + "'", str27, "#root");
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str31, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(element38);
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(element41);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.jsoup.nodes.Attribute attribute2 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        java.lang.String str7 = document5.title();
        boolean boolean8 = attribute2.equals((java.lang.Object) str7);
        boolean boolean10 = attribute2.equals((java.lang.Object) 100L);
        java.lang.String str11 = attribute2.getValue();
        java.lang.String str12 = attribute2.getValue();
        java.lang.String str13 = attribute2.toString();
        java.lang.String str14 = attribute2.getValue();
        org.junit.Assert.assertNotNull(attribute2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi=\"\"" + "'", str13, "hi=\"\"");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Attributes attributes17 = document14.attributes();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        org.jsoup.select.Elements elements23 = document20.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element24 = document14.prependChild((org.jsoup.nodes.Node) document20);
        org.jsoup.select.Elements elements26 = document14.select("hi");
        org.jsoup.nodes.Element element27 = document6.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Element element29 = element27.prependText("#document");
        org.jsoup.nodes.Element element31 = element29.prependElement("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.select.Elements elements33 = element31.getElementsByIndexEquals(10);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(elements33);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.toggleClass("#document");
        org.jsoup.select.Elements elements12 = elements10.select("#declaration");
        java.lang.String str13 = elements10.html();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>\n</html>\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>\n\nhi!" + "'", str13, "<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>\n</html>\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>\n\nhi!");
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.select.Elements elements6 = elements4.prepend("");
        org.jsoup.select.Elements elements8 = elements6.addClass("#declaration");
        org.jsoup.select.Elements elements10 = elements8.eq(100);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        org.jsoup.select.Elements elements7 = document4.getElementsByIndexLessThan((int) 'a');
        boolean boolean8 = indexLessThan1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        java.lang.String str13 = document11.title();
        org.jsoup.nodes.Attributes attributes14 = document11.attributes();
        org.jsoup.nodes.Node node17 = document11.attr("hi!", "hi!");
        org.jsoup.select.Elements elements18 = document11.getAllElements();
        boolean boolean19 = indexLessThan1.matches((org.jsoup.nodes.Element) document11);
        org.jsoup.select.Elements elements20 = document11.getAllElements();
        org.jsoup.nodes.Document document23 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str24 = document23.nodeName();
        org.jsoup.select.Elements elements27 = document23.getElementsByAttributeValueContaining("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>", " !");
        boolean boolean28 = document11.equals((java.lang.Object) elements27);
        org.jsoup.nodes.Evaluator.Tag tag31 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str35 = document34.outerHtml();
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node39 = document38.parentNode;
        java.lang.String str40 = document38.title();
        org.jsoup.nodes.Element element42 = document38.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element43 = document34.appendChild((org.jsoup.nodes.Node) document38);
        org.jsoup.nodes.Element element44 = document38.head();
        java.lang.String str45 = element44.id();
        boolean boolean46 = tag31.matches(element44);
        java.lang.String str47 = element44.baseUri();
        org.jsoup.select.Elements elements49 = element44.getElementsByTag("<html> <head> </head> <body> hi! </body> </html> <head> </head> <body> hi! </body> hi!");
        org.jsoup.select.Elements elements51 = elements49.removeAttr("<html>\n<head>\n <title>&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;</title>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean52 = elements27.addAll((int) (short) 0, (java.util.Collection<org.jsoup.nodes.Element>) elements51);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(attributes14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "#document" + "'", str24, "#document");
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str35, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertNotNull(element43);
        org.junit.Assert.assertNotNull(element44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(elements49);
        org.junit.Assert.assertNotNull(elements51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.jsoup.nodes.Document document2 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        java.lang.String str3 = document2.baseUri();
        org.jsoup.nodes.Element element4 = document2.head();
        org.jsoup.select.Elements elements5 = document2.getAllElements();
        java.lang.String str6 = document2.id();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi" + "'", str3, "hi");
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!=\"#declaration\"");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan3 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        org.jsoup.select.Elements elements9 = document6.getElementsByIndexLessThan((int) 'a');
        boolean boolean10 = indexLessThan3.matches((org.jsoup.nodes.Element) document6);
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        java.lang.String str15 = document13.title();
        org.jsoup.nodes.Attributes attributes16 = document13.attributes();
        org.jsoup.nodes.Node node19 = document13.attr("hi!", "hi!");
        org.jsoup.select.Elements elements20 = document13.getAllElements();
        boolean boolean21 = indexLessThan3.matches((org.jsoup.nodes.Element) document13);
        java.lang.String str22 = document13.title();
        org.jsoup.nodes.Element element23 = document1.prependChild((org.jsoup.nodes.Node) document13);
        org.jsoup.nodes.Node node24 = document1.parentNode;
        boolean boolean25 = document1.preserveWhitespace();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(attributes16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("[ , !]");
        java.lang.String str2 = tag1.getName();
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        org.jsoup.select.Elements elements7 = document5.getAllElements();
        org.jsoup.nodes.Element element9 = document5.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements10 = element9.getAllElements();
        java.util.List<org.jsoup.nodes.Node> nodeList11 = element9.childNodes;
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Attributes attributes17 = document14.attributes();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        org.jsoup.select.Elements elements23 = document20.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element24 = document14.prependChild((org.jsoup.nodes.Node) document20);
        java.lang.String str25 = document20.baseUri();
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str29 = document28.outerHtml();
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node33 = document32.parentNode;
        java.lang.String str34 = document32.title();
        org.jsoup.nodes.Element element36 = document32.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element37 = document28.appendChild((org.jsoup.nodes.Node) document32);
        org.jsoup.nodes.Attributes attributes38 = document32.attributes();
        document20.addChild((org.jsoup.nodes.Node) document32);
        org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element42 = document32.prependChild((org.jsoup.nodes.Node) document41);
        element9.setParentNode((org.jsoup.nodes.Node) document41);
        org.jsoup.nodes.Element element45 = document41.addClass("#declaration");
        boolean boolean46 = tag1.equals((java.lang.Object) document41);
        boolean boolean47 = tag1.isEmpty();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[ , !]" + "'", str2, "[ , !]");
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(element9);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(nodeList11);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str29, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(attributes38);
        org.junit.Assert.assertNotNull(document41);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertNotNull(element45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Node node12 = document6.parentNode;
        org.jsoup.nodes.Element[] elementArray13 = new org.jsoup.nodes.Element[] { document6 };
        org.jsoup.select.Elements elements14 = new org.jsoup.select.Elements(elementArray13);
        org.jsoup.select.Elements elements15 = new org.jsoup.select.Elements(elementArray13);
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting18 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        int int19 = elements15.indexOf((java.lang.Object) attributeWithValueStarting18);
        org.jsoup.select.Elements elements21 = elements15.wrap("#document");
        boolean boolean22 = elements15.isEmpty();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(elementArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.toggleClass("#document");
        java.util.Iterator<org.jsoup.nodes.Element> elementItor11 = elements10.iterator();
        org.jsoup.select.Elements elements13 = elements10.removeAttr("#comment");
        org.jsoup.select.Elements elements15 = elements10.append("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.jsoup.nodes.Element> elementList18 = elements10.subList(10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elementItor11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements15);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        int int15 = attributes12.size();
        int int16 = attributes12.size();
        java.util.List<org.jsoup.nodes.Attribute> attributeList17 = attributes12.asList();
        java.lang.String str18 = attributes12.toString();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(attributeList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.jsoup.nodes.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.nodes.Evaluator.AttributeWithValueEnding("\n<!---->", "hi!");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        document5.setBaseUri("hi");
        boolean boolean9 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document5);
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node13 = document12.parentNode;
        java.lang.String str14 = document12.title();
        org.jsoup.nodes.Attributes attributes15 = document12.attributes();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        org.jsoup.select.Elements elements21 = document18.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element22 = document12.prependChild((org.jsoup.nodes.Node) document18);
        java.lang.String str23 = document18.baseUri();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str27 = document26.outerHtml();
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node31 = document30.parentNode;
        java.lang.String str32 = document30.title();
        org.jsoup.nodes.Element element34 = document30.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element35 = document26.appendChild((org.jsoup.nodes.Node) document30);
        org.jsoup.nodes.Attributes attributes36 = document30.attributes();
        document18.addChild((org.jsoup.nodes.Node) document30);
        org.jsoup.nodes.Document document39 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element40 = document30.prependChild((org.jsoup.nodes.Node) document39);
        boolean boolean41 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document30);
        org.jsoup.nodes.Element element43 = document30.text("hi=\"\"");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.select.Elements elements45 = document30.select("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
            org.junit.Assert.fail("Expected exception of type org.jsoup.select.Selector.SelectorParseException; message: Could not parse query <html>?<head>?</head>?<body>? hi?</body>?</html>");
        } catch (org.jsoup.select.Selector.SelectorParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(attributes15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str27, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(attributes36);
        org.junit.Assert.assertNotNull(document39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(element43);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting2.value = "hi!";
        java.lang.String str5 = attributeWithValueStarting2.value;
        attributeWithValueStarting2.key = "hi";
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.outerHtml();
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Element element18 = document14.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document10.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Document document20 = document10.normalise();
        org.jsoup.nodes.Element element21 = document10.empty();
        boolean boolean22 = attributeWithValueStarting2.matches(element21);
        java.util.List<org.jsoup.nodes.Node> nodeList23 = element21.childNodes();
        java.util.List<org.jsoup.nodes.Element> elementList24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Integer int25 = org.jsoup.nodes.Node.indexInList(element21, elementList24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str11, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeList23);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.select.Elements elements6 = elements4.append("#document");
        org.jsoup.nodes.Element element7 = elements6.first();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(element7);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.jsoup.nodes.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.nodes.Evaluator.AttributeWithValueEnding("\n<!---->", "hi!");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        document5.setBaseUri("hi");
        boolean boolean9 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document5);
        attributeWithValueEnding2.value = "hi! <html> <head> </head> <body> hi! </body> </html>";
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str15 = document14.outerHtml();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Element element22 = document18.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element23 = document14.appendChild((org.jsoup.nodes.Node) document18);
        java.lang.String str24 = element23.outerHtml();
        boolean boolean25 = attributeWithValueEnding2.matches(element23);
        org.jsoup.nodes.Element element27 = element23.prependElement("<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
        org.jsoup.nodes.Element element28 = element27.firstElementSibling();
        org.jsoup.nodes.Element element29 = element27.previousElementSibling();
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str15, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>" + "'", str24, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNull(element29);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        java.lang.String str9 = elements8.html();
        java.lang.String str10 = elements8.val();
        org.jsoup.select.Elements elements12 = elements8.val("hi");
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str16 = document15.outerHtml();
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        java.lang.String str21 = document19.title();
        org.jsoup.nodes.Element element23 = document19.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element24 = document15.appendChild((org.jsoup.nodes.Node) document19);
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node28 = document27.parentNode;
        java.lang.String str29 = document27.title();
        org.jsoup.nodes.Attributes attributes30 = document27.attributes();
        org.jsoup.nodes.Document document33 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node34 = document33.parentNode;
        org.jsoup.select.Elements elements36 = document33.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element37 = document27.prependChild((org.jsoup.nodes.Node) document33);
        org.jsoup.select.Elements elements39 = document27.select("hi");
        org.jsoup.nodes.Element element40 = document19.appendChild((org.jsoup.nodes.Node) document27);
        org.jsoup.nodes.Element element42 = document27.addClass("#declaration");
        boolean boolean43 = elements8.add(element42);
        boolean boolean45 = element42.hasClass("#document");
        java.lang.String str46 = element42.nodeName();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!" + "'", str9, "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str16, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(attributes30);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(elements36);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(elements39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#document" + "'", str46, "#document");
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting2.value = "hi!";
        java.lang.String str5 = attributeWithValueStarting2.value;
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        java.lang.String str12 = document8.text();
        org.jsoup.nodes.Element element14 = document8.text("");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        boolean boolean20 = element14.equals((java.lang.Object) elements19);
        boolean boolean21 = attributeWithValueStarting2.matches(element14);
        java.lang.String str22 = element14.text();
        org.jsoup.parser.Tag tag23 = element14.tag();
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str28 = document27.outerHtml();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node32 = document31.parentNode;
        java.lang.String str33 = document31.title();
        org.jsoup.nodes.Element element35 = document31.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element36 = document27.appendChild((org.jsoup.nodes.Node) document31);
        org.jsoup.nodes.Attributes attributes37 = document31.attributes();
        boolean boolean39 = attributes37.hasKey("hi!");
        int int40 = attributes37.size();
        int int41 = attributes37.size();
        java.util.List<org.jsoup.nodes.Attribute> attributeList42 = attributes37.asList();
        java.lang.String str43 = attributes37.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator44 = attributes37.spliterator();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str48 = document47.outerHtml();
        org.jsoup.nodes.Document document51 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node52 = document51.parentNode;
        java.lang.String str53 = document51.title();
        org.jsoup.nodes.Element element55 = document51.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element56 = document47.appendChild((org.jsoup.nodes.Node) document51);
        org.jsoup.nodes.Attributes attributes57 = document51.attributes();
        boolean boolean59 = attributes57.hasKey("hi!");
        int int60 = attributes57.size();
        int int61 = attributes57.size();
        java.util.List<org.jsoup.nodes.Attribute> attributeList62 = attributes57.asList();
        java.lang.String str63 = attributes57.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator64 = attributes57.spliterator();
        attributes37.addAll(attributes57);
        org.jsoup.nodes.Element element66 = new org.jsoup.nodes.Element(tag23, "", attributes37);
        boolean boolean67 = tag23.isInline();
        boolean boolean68 = tag23.isEmpty();
        org.jsoup.nodes.Element element70 = new org.jsoup.nodes.Element(tag23, "<!---->");
        org.jsoup.nodes.Document document73 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node74 = document73.parentNode;
        java.lang.String str75 = document73.title();
        org.jsoup.nodes.Attributes attributes76 = document73.attributes();
        org.jsoup.nodes.Document document79 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node80 = document79.parentNode;
        org.jsoup.select.Elements elements82 = document79.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element83 = document73.prependChild((org.jsoup.nodes.Node) document79);
        java.util.List<org.jsoup.nodes.Node> nodeList84 = document73.childNodes;
        org.jsoup.select.Elements elements86 = document73.getElementsByIndexEquals((int) (byte) 0);
        org.jsoup.nodes.Element element87 = element70.prependChild((org.jsoup.nodes.Node) document73);
        org.jsoup.nodes.Element element88 = document73.empty();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str28, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertNotNull(attributes37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(attributeList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(attributeSpliterator44);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str48, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(element55);
        org.junit.Assert.assertNotNull(element56);
        org.junit.Assert.assertNotNull(attributes57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(attributeList62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(attributeSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(document73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(attributes76);
        org.junit.Assert.assertNotNull(document79);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertNotNull(elements82);
        org.junit.Assert.assertNotNull(element83);
        org.junit.Assert.assertNotNull(nodeList84);
        org.junit.Assert.assertNotNull(elements86);
        org.junit.Assert.assertNotNull(element87);
        org.junit.Assert.assertNotNull(element88);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.outerHtml();
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Element element18 = document14.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document10.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Node node20 = document14.parentNode;
        java.lang.String str21 = document14.data();
        org.jsoup.nodes.Element element23 = document14.html("");
        org.jsoup.nodes.Node node26 = document14.attr("<html>\n<head>\n</head>\n<body>\n</body>\n</html>", " hi=\"\"");
        java.util.Set<java.lang.String> strSet27 = document14.classNames();
        org.jsoup.nodes.Element element28 = document2.classNames(strSet27);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str11, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(element28);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.select.Elements elements6 = elements4.append("#document");
        elements4.clear();
        java.util.function.UnaryOperator<org.jsoup.nodes.Element> elementUnaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            elements4.replaceAll(elementUnaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements6);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.select.Elements elements3 = document2.getAllElements();
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) (short) 10);
        java.util.Spliterator<org.jsoup.nodes.Element> elementSpliterator6 = elements5.spliterator();
        int int8 = elements5.lastIndexOf((java.lang.Object) "\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(elements3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementSpliterator6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("<html class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<html class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>\n</html>\n\n<head class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\">\n</head>\n\n<body class=\" hi &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n [ , !]\n&lt;/body&gt;\n&lt;/html&gt;\" head=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" value=\"#text\"> hi!\n</body>", "<html>\n<head>\n</head>\n<body>\n hi=&quot;&quot;\n</body>\n</html>");
        java.lang.String str3 = document2.title();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        int int2 = indexLessThan1.index;
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        org.jsoup.select.Elements elements7 = document5.getAllElements();
        org.jsoup.nodes.Element element9 = document5.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements10 = element9.getAllElements();
        java.lang.String str11 = element9.html();
        boolean boolean12 = element9.preserveWhitespace();
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str16 = document15.outerHtml();
        org.jsoup.select.Elements elements17 = document15.getAllElements();
        java.lang.String str18 = document15.data();
        org.jsoup.nodes.Element element20 = document15.text("");
        org.jsoup.nodes.Node node21 = document15.parentNode;
        org.jsoup.select.Elements elements23 = document15.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element25 = document15.text("hi=\"\"");
        boolean boolean26 = document15.hasText();
        boolean boolean27 = element9.equals((java.lang.Object) boolean26);
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str31 = document30.outerHtml();
        org.jsoup.select.Elements elements32 = document30.getAllElements();
        java.lang.String str33 = document30.data();
        org.jsoup.nodes.Element element35 = document30.text("");
        boolean boolean37 = document30.hasClass("hi!");
        boolean boolean38 = element9.equals((java.lang.Object) document30);
        boolean boolean39 = indexLessThan1.matches(element9);
        org.jsoup.nodes.Document document42 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str43 = document42.outerHtml();
        org.jsoup.select.Elements elements44 = document42.getAllElements();
        java.lang.String str45 = document42.data();
        org.jsoup.nodes.Element element47 = document42.text("");
        boolean boolean49 = document42.hasClass("hi!");
        org.jsoup.nodes.Element element51 = document42.appendElement("<html>\n<head>\n</head>\n<body>\n &lt;#root&gt; \n <html> \n  <head> \n  </head> \n  <body>\n    hi!    \n   <html> \n    <head> \n    </head> \n    <body>\n      hi!  \n    </body>\n   </html>\n  </body>\n </html>\n</body>\n</html>");
        boolean boolean52 = indexLessThan1.matches(element51);
        org.jsoup.nodes.Element element53 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = indexLessThan1.matches(element53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(element9);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str16, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(elements23);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str31, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(document42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str43, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(element47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(element51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.toggleClass("#document");
        org.jsoup.select.Elements elements12 = elements5.addClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream13 = elements12.parallelStream();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node17 = document16.parentNode;
        java.lang.String str18 = document16.title();
        org.jsoup.nodes.Attributes attributes19 = document16.attributes();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        org.jsoup.select.Elements elements25 = document22.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element26 = document16.prependChild((org.jsoup.nodes.Node) document22);
        java.lang.String str27 = document22.baseUri();
        java.lang.String str28 = document22.className();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str32 = document31.outerHtml();
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        java.lang.String str37 = document35.title();
        org.jsoup.nodes.Element element39 = document35.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element40 = document31.appendChild((org.jsoup.nodes.Node) document35);
        org.jsoup.nodes.Element element42 = document31.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str43 = document31.text();
        org.jsoup.nodes.Element element45 = document31.addClass("#document");
        org.jsoup.nodes.Element element47 = document31.createElement("hi!");
        org.jsoup.select.Elements elements50 = document31.getElementsByAttributeValueContaining("#comment", "#comment");
        java.lang.Integer int51 = org.jsoup.nodes.Node.indexInList((org.jsoup.nodes.Element) document22, (java.util.List<org.jsoup.nodes.Element>) elements50);
        boolean boolean52 = elements12.containsAll((java.util.Collection<org.jsoup.nodes.Element>) elements50);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elementStream13);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(attributes19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str32, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(element39);
        org.junit.Assert.assertNotNull(element40);
        org.junit.Assert.assertNotNull(element42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str43, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(element45);
        org.junit.Assert.assertNotNull(element47);
        org.junit.Assert.assertNotNull(elements50);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.jsoup.nodes.Attribute attribute2 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        java.lang.String str7 = document5.title();
        boolean boolean8 = attribute2.equals((java.lang.Object) str7);
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        org.jsoup.select.Elements elements14 = document11.getElementsByIndexLessThan((int) 'a');
        java.lang.String str15 = document11.text();
        org.jsoup.select.Elements elements18 = document11.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean19 = attribute2.equals((java.lang.Object) elements18);
        attribute2.setValue("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        java.lang.String str22 = attribute2.getValue();
        attribute2.setKey("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(attribute2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!" + "'", str22, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.toggleClass("[ , !]");
        // The following exception was thrown during execution in test generation
        try {
            org.jsoup.nodes.Element element10 = elements5.get((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting2.value = "hi!";
        java.lang.String str5 = attributeWithValueStarting2.value;
        attributeWithValueStarting2.key = "hi";
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.outerHtml();
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Element element18 = document14.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document10.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Document document20 = document10.normalise();
        org.jsoup.nodes.Element element21 = document10.empty();
        boolean boolean22 = attributeWithValueStarting2.matches(element21);
        java.util.List<org.jsoup.nodes.Node> nodeList23 = element21.childNodes();
        java.util.Set<java.lang.String> strSet24 = element21.classNames();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str11, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeList23);
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements14 = document2.select("hi");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        java.lang.String str20 = document17.data();
        org.jsoup.nodes.Element element22 = document17.text("");
        org.jsoup.nodes.Node node23 = document17.parentNode;
        org.jsoup.select.Elements elements25 = document17.getElementsByIndexGreaterThan((int) '4');
        boolean boolean26 = elements14.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements25);
        boolean boolean27 = elements25.hasText();
        java.lang.String str29 = elements25.attr(" !");
        org.jsoup.select.Elements elements31 = elements25.html("");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(elements31);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.toggleClass("#document");
        org.jsoup.select.Elements elements12 = elements5.addClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream13 = elements12.parallelStream();
        java.lang.Object[] objArray14 = elements12.toArray();
        org.jsoup.nodes.Document document16 = org.jsoup.nodes.Document.createShell("");
        document16.baseUri = "";
        org.jsoup.select.Elements elements20 = document16.getElementsByIndexEquals((int) (byte) -1);
        java.lang.Object[] objArray21 = elements20.toArray();
        org.jsoup.select.Elements elements22 = new org.jsoup.select.Elements((java.util.List<org.jsoup.nodes.Element>) elements20);
        boolean boolean23 = elements12.contains((java.lang.Object) elements20);
        java.lang.String str25 = elements20.attr("hi=\"\"hi!");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(elementStream13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\">\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\"> hi!\n</body>\n</html>, \n<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\">\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\"> hi!\n</body>\n</html>, \n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\">\n</head>, \n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\"> hi!\n</body>]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\">\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\"> hi!\n</body>\n</html>, \n<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\">\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\"> hi!\n</body>\n</html>, \n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\">\n</head>, \n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document &lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\"> hi!\n</body>]");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Attribute attribute8 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        java.lang.String str9 = attribute8.html();
        attributes5.put(attribute8);
        java.lang.String str11 = attributes5.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator12 = attributes5.spliterator();
        java.lang.String str13 = attributes5.html();
        attributes5.remove("[4]");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(attribute8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi=\"\"" + "'", str9, "hi=\"\"");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + " hi=\"\"" + "'", str11, " hi=\"\"");
        org.junit.Assert.assertNotNull(attributeSpliterator12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + " hi=\"\"" + "'", str13, " hi=\"\"");
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.toggleClass("[ , !]");
        org.jsoup.select.Elements elements10 = elements8.append("<!---->");
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node14 = document13.parentNode;
        org.jsoup.select.Elements elements16 = document13.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream17 = elements16.stream();
        org.jsoup.select.Elements elements19 = elements16.toggleClass("[ , !]");
        org.jsoup.select.Elements elements21 = elements19.append("<!---->");
        boolean boolean22 = elements10.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements21);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(elementStream17);
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        java.lang.String str5 = document2.data();
        org.jsoup.nodes.Element element7 = document2.text("");
        org.jsoup.nodes.Node node8 = document2.parentNode;
        org.jsoup.select.Elements elements10 = document2.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element12 = document2.text("hi=\"\"");
        boolean boolean13 = document2.hasText();
        org.jsoup.nodes.Element element15 = document2.createElement("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.jsoup.nodes.Element element17 = document2.prependText("org.jsoup.select.Selector$SelectorParseException: <html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str21 = document20.outerHtml();
        org.jsoup.nodes.Document document24 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node25 = document24.parentNode;
        java.lang.String str26 = document24.title();
        org.jsoup.nodes.Element element28 = document24.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element29 = document20.appendChild((org.jsoup.nodes.Node) document24);
        org.jsoup.nodes.Element element30 = document24.head();
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan32 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document35 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node36 = document35.parentNode;
        org.jsoup.select.Elements elements38 = document35.getElementsByIndexLessThan((int) 'a');
        boolean boolean39 = indexLessThan32.matches((org.jsoup.nodes.Element) document35);
        boolean boolean40 = element30.equals((java.lang.Object) boolean39);
        boolean boolean41 = element17.equals((java.lang.Object) element30);
        java.util.List<org.jsoup.nodes.Node> nodeList42 = element17.childNodes;
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str21, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(element28);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(document35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(nodeList42);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.jsoup.safety.Whitelist whitelist1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.jsoup.Jsoup.clean("<?hi!>", whitelist1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated object is null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.jsoup.nodes.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.nodes.Evaluator.AttributeWithValueEnding("\n  <head>\n  </head>", "[]");
        org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parseBodyFragment("[ , !]", "hi=\"\"");
        org.jsoup.nodes.Element element7 = document5.removeClass("[ , #, d, o, c, u, m, e, n, t]");
        boolean boolean8 = attributeWithValueEnding2.matches(element7);
        java.lang.String str9 = attributeWithValueEnding2.key;
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(element7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<head>\n  </head>" + "'", str9, "<head>\n  </head>");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.jsoup.nodes.Attribute attribute2 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        java.lang.String str7 = document5.title();
        boolean boolean8 = attribute2.equals((java.lang.Object) str7);
        boolean boolean10 = attribute2.equals((java.lang.Object) 100L);
        org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str14 = document13.outerHtml();
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node18 = document17.parentNode;
        java.lang.String str19 = document17.title();
        org.jsoup.nodes.Element element21 = document17.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element22 = document13.appendChild((org.jsoup.nodes.Node) document17);
        org.jsoup.nodes.Attributes attributes23 = document17.attributes();
        boolean boolean24 = attribute2.equals((java.lang.Object) attributes23);
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node28 = document27.parentNode;
        org.jsoup.select.Elements elements30 = document27.getElementsByIndexLessThan((int) 'a');
        java.lang.String str31 = document27.text();
        org.jsoup.select.Elements elements34 = document27.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean35 = attribute2.equals((java.lang.Object) document27);
        attribute2.setKey("<!---->=\"\"");
        java.lang.String str38 = attribute2.html();
        org.junit.Assert.assertNotNull(attribute2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(document13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str14, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(attributes23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "<!---->=\"\"=\"\"" + "'", str38, "<!---->=\"\"=\"\"");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Element element29 = document20.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements30 = element29.getAllElements();
        org.jsoup.nodes.Element element32 = element29.prepend("<!---->=\"\"");
        java.util.List<org.jsoup.nodes.Node> nodeList33 = element29.childNodes;
        org.jsoup.nodes.Document document36 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str37 = document36.outerHtml();
        org.jsoup.select.Elements elements38 = document36.getAllElements();
        java.lang.String str39 = document36.data();
        org.jsoup.nodes.Element element41 = document36.text("");
        org.jsoup.select.Elements elements43 = element41.getElementsByIndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Element element44 = element29.prependChild((org.jsoup.nodes.Node) element41);
        java.util.List<org.jsoup.nodes.Node> nodeList45 = element29.childNodes;
        java.lang.Object obj46 = null;
        boolean boolean47 = element29.equals(obj46);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertNotNull(nodeList33);
        org.junit.Assert.assertNotNull(document36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str37, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(element41);
        org.junit.Assert.assertNotNull(elements43);
        org.junit.Assert.assertNotNull(element44);
        org.junit.Assert.assertNotNull(nodeList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan1 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        org.jsoup.select.Elements elements7 = document4.getElementsByIndexLessThan((int) 'a');
        boolean boolean8 = indexLessThan1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        org.jsoup.select.Elements elements13 = document11.getAllElements();
        org.jsoup.select.Elements elements14 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan1, (org.jsoup.nodes.Element) document11);
        org.jsoup.nodes.Element element15 = document11.body();
        org.jsoup.nodes.Comment comment18 = new org.jsoup.nodes.Comment("", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        java.lang.String str19 = comment18.toString();
        java.lang.String str20 = comment18.nodeName();
        org.jsoup.nodes.Element element21 = element15.prependChild((org.jsoup.nodes.Node) comment18);
        java.lang.String str22 = element21.toString();
        org.jsoup.select.Elements elements24 = element21.getElementsByTag("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.nodes.Element element25 = elements24.first();
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n<!---->" + "'", str19, "\n<!---->");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "#comment" + "'", str20, "#comment");
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n<body>\n <!----> hi!\n</body>" + "'", str22, "\n<body>\n <!----> hi!\n</body>");
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNull(element25);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements9 = elements7.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str11 = elements9.attr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        elements9.clear();
        org.jsoup.select.Elements elements13 = new org.jsoup.select.Elements((java.util.List<org.jsoup.nodes.Element>) elements9);
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream14 = elements13.stream();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(elementStream14);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        int int15 = attributes12.size();
        int int16 = attributes12.size();
        java.util.List<org.jsoup.nodes.Attribute> attributeList17 = attributes12.asList();
        java.lang.String str18 = attributes12.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator19 = attributes12.spliterator();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str23 = document22.outerHtml();
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node27 = document26.parentNode;
        java.lang.String str28 = document26.title();
        org.jsoup.nodes.Element element30 = document26.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element31 = document22.appendChild((org.jsoup.nodes.Node) document26);
        org.jsoup.nodes.Attributes attributes32 = document26.attributes();
        boolean boolean34 = attributes32.hasKey("hi!");
        int int35 = attributes32.size();
        int int36 = attributes32.size();
        java.util.List<org.jsoup.nodes.Attribute> attributeList37 = attributes32.asList();
        java.lang.String str38 = attributes32.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator39 = attributes32.spliterator();
        attributes12.addAll(attributes32);
        boolean boolean42 = attributes12.hasKey("");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(attributeList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(attributeSpliterator19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str23, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertNotNull(element31);
        org.junit.Assert.assertNotNull(attributes32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(attributeList37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(attributeSpliterator39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("#text", "");
        java.util.Set<java.lang.String> strSet3 = document2.classNames();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.jsoup.nodes.Evaluator.AttributeWithValueEnding attributeWithValueEnding2 = new org.jsoup.nodes.Evaluator.AttributeWithValueEnding("\n<!---->", "hi!");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str6 = document5.outerHtml();
        document5.setBaseUri("hi");
        boolean boolean9 = attributeWithValueEnding2.matches((org.jsoup.nodes.Element) document5);
        org.jsoup.nodes.Element element11 = document5.prependText("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements12 = document5.children();
        org.jsoup.parser.Tag tag13 = document5.tag();
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str6, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(tag13);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element13 = document2.removeClass("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        java.lang.String str14 = document2.text();
        org.jsoup.nodes.Element element16 = document2.addClass("#document");
        java.lang.String str17 = element16.baseUri;
        org.jsoup.nodes.Element element19 = element16.prependText("hi! hi! hi!");
        org.jsoup.nodes.Node node20 = element16.parentNode;
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi! <html> <head> </head> <body> hi! </body> </html>" + "'", str14, "hi! <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("");
        document1.baseUri = "";
        org.jsoup.select.Elements elements5 = document1.getElementsByIndexEquals((int) (short) -1);
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(elements5);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream8 = elements5.stream();
        org.jsoup.select.Elements elements10 = elements5.toggleClass("#document");
        org.jsoup.select.Elements elements12 = elements10.select("#declaration");
        org.jsoup.nodes.Element element13 = elements10.first();
        org.jsoup.select.Elements elements15 = elements10.prepend("<html value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>\n</html>\n<head value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\">\n</head>\n<body value=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt; hi!\n&lt;/body&gt;\n&lt;/html&gt;\" class=\" #document\"> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elementStream8);
        org.junit.Assert.assertNotNull(elements10);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(element13);
        org.junit.Assert.assertNotNull(elements15);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Element element6 = document2.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements7 = element6.getAllElements();
        java.lang.String str8 = element6.html();
        boolean boolean9 = element6.preserveWhitespace();
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str13 = document12.outerHtml();
        org.jsoup.select.Elements elements14 = document12.getAllElements();
        java.lang.String str15 = document12.data();
        org.jsoup.nodes.Element element17 = document12.text("");
        org.jsoup.nodes.Node node18 = document12.parentNode;
        org.jsoup.select.Elements elements20 = document12.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element22 = document12.text("hi=\"\"");
        boolean boolean23 = document12.hasText();
        boolean boolean24 = element6.equals((java.lang.Object) boolean23);
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str28 = document27.outerHtml();
        org.jsoup.select.Elements elements29 = document27.getAllElements();
        java.lang.String str30 = document27.data();
        org.jsoup.nodes.Element element32 = document27.text("");
        boolean boolean34 = document27.hasClass("hi!");
        boolean boolean35 = element6.equals((java.lang.Object) document27);
        org.jsoup.nodes.Element element36 = element6.empty();
        org.jsoup.nodes.Evaluator.AllElements allElements37 = new org.jsoup.nodes.Evaluator.AllElements();
        org.jsoup.nodes.Element element38 = null;
        boolean boolean39 = allElements37.matches(element38);
        org.jsoup.nodes.Element element40 = null;
        boolean boolean41 = allElements37.matches(element40);
        org.jsoup.nodes.Evaluator.IndexEquals indexEquals43 = new org.jsoup.nodes.Evaluator.IndexEquals(4);
        org.jsoup.nodes.Document document46 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str47 = document46.outerHtml();
        org.jsoup.select.Elements elements48 = document46.getAllElements();
        java.lang.String str49 = document46.data();
        java.lang.String str50 = document46.baseUri();
        org.jsoup.nodes.Element element52 = document46.text("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean53 = indexEquals43.matches(element52);
        boolean boolean54 = allElements37.matches(element52);
        org.jsoup.nodes.Element element55 = element36.appendChild((org.jsoup.nodes.Node) element52);
        org.jsoup.nodes.Element element57 = element55.appendText("<html>\n<head>\n #document\n</head>\n<body> hi!#document\n</body>#document\n</html>#document\n<head>\n #document\n</head>\n<body> hi!#document\n</body>#document\n#document\nhi!#document");
        java.lang.String str58 = element57.data();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str13, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str28, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str47, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(element52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(element55);
        org.junit.Assert.assertNotNull(element57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element12 = document6.head();
        java.lang.String str13 = element12.id();
        java.lang.String str14 = element12.nodeName();
        org.jsoup.nodes.Element element15 = element12.lastElementSibling();
        org.jsoup.nodes.Element element16 = element15.previousElementSibling();
        org.jsoup.nodes.Element element19 = element16.attr("\n<!--<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!-->", "");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "head" + "'", str14, "head");
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertNotNull(element19);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        java.lang.String str4 = document3.baseUri();
        org.jsoup.nodes.Element element5 = document3.head();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        java.lang.String str10 = document8.title();
        org.jsoup.nodes.Element element12 = document8.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean13 = document3.equals((java.lang.Object) element12);
        org.jsoup.nodes.Element element15 = document3.removeClass("hi=\"\"");
        org.jsoup.nodes.Element element17 = document3.text("#text");
        org.jsoup.select.Elements elements18 = org.jsoup.select.Selector.select("#declaration", (org.jsoup.nodes.Element) document3);
        org.jsoup.nodes.Element element19 = document3.empty();
        java.lang.StringBuilder stringBuilder20 = null;
        // The following exception was thrown during execution in test generation
        try {
            element19.outerHtml(stringBuilder20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi" + "'", str4, "hi");
        org.junit.Assert.assertNotNull(element5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertNotNull(element19);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        org.jsoup.select.Elements elements14 = document2.select("hi");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        java.lang.String str20 = document17.data();
        org.jsoup.nodes.Element element22 = document17.text("");
        org.jsoup.nodes.Node node23 = document17.parentNode;
        org.jsoup.select.Elements elements25 = document17.getElementsByIndexGreaterThan((int) '4');
        boolean boolean26 = elements14.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements25);
        boolean boolean27 = elements25.hasText();
        java.lang.String str29 = elements25.attr(" !");
        boolean boolean30 = elements25.isEmpty();
        org.jsoup.select.Elements elements33 = elements25.attr("<html>\n<head>\n <title>&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;</title>\n</head>\n<body> hi!\n</body>\n</html>", "<html>\n<head>\n</head>\n<body>\n</body>\n</html><<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(elements33);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting2.value = "hi!";
        java.lang.String str5 = attributeWithValueStarting2.value;
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        java.lang.String str12 = document8.text();
        org.jsoup.nodes.Element element14 = document8.text("");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        boolean boolean20 = element14.equals((java.lang.Object) elements19);
        boolean boolean21 = attributeWithValueStarting2.matches(element14);
        java.lang.String str22 = element14.text();
        org.jsoup.parser.Tag tag23 = element14.tag();
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str28 = document27.outerHtml();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node32 = document31.parentNode;
        java.lang.String str33 = document31.title();
        org.jsoup.nodes.Element element35 = document31.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element36 = document27.appendChild((org.jsoup.nodes.Node) document31);
        org.jsoup.nodes.Attributes attributes37 = document31.attributes();
        boolean boolean39 = attributes37.hasKey("hi!");
        int int40 = attributes37.size();
        int int41 = attributes37.size();
        java.util.List<org.jsoup.nodes.Attribute> attributeList42 = attributes37.asList();
        java.lang.String str43 = attributes37.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator44 = attributes37.spliterator();
        org.jsoup.nodes.Document document47 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str48 = document47.outerHtml();
        org.jsoup.nodes.Document document51 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node52 = document51.parentNode;
        java.lang.String str53 = document51.title();
        org.jsoup.nodes.Element element55 = document51.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element56 = document47.appendChild((org.jsoup.nodes.Node) document51);
        org.jsoup.nodes.Attributes attributes57 = document51.attributes();
        boolean boolean59 = attributes57.hasKey("hi!");
        int int60 = attributes57.size();
        int int61 = attributes57.size();
        java.util.List<org.jsoup.nodes.Attribute> attributeList62 = attributes57.asList();
        java.lang.String str63 = attributes57.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator64 = attributes57.spliterator();
        attributes37.addAll(attributes57);
        org.jsoup.nodes.Element element66 = new org.jsoup.nodes.Element(tag23, "", attributes37);
        boolean boolean67 = tag23.isInline();
        boolean boolean68 = tag23.isEmpty();
        org.jsoup.nodes.Document document72 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node73 = document72.parentNode;
        java.lang.String str74 = document72.title();
        org.jsoup.nodes.Attributes attributes75 = document72.attributes();
        org.jsoup.nodes.Attribute attribute78 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        java.lang.String str79 = attribute78.html();
        attributes75.put(attribute78);
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator81 = attributes75.spliterator();
        java.lang.String str82 = attributes75.toString();
        org.jsoup.nodes.Element element83 = new org.jsoup.nodes.Element(tag23, "!", attributes75);
        java.lang.String str84 = attributes75.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str28, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertNotNull(attributes37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(attributeList42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(attributeSpliterator44);
        org.junit.Assert.assertNotNull(document47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str48, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(element55);
        org.junit.Assert.assertNotNull(element56);
        org.junit.Assert.assertNotNull(attributes57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(attributeList62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(attributeSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(document72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(attributes75);
        org.junit.Assert.assertNotNull(attribute78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi=\"\"" + "'", str79, "hi=\"\"");
        org.junit.Assert.assertNotNull(attributeSpliterator81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + " hi=\"\"" + "'", str82, " hi=\"\"");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + " hi=\"\"" + "'", str84, " hi=\"\"");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parse("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements4 = document1.getElementsByAttributeValue("hi=\"\"", "#data");
        org.jsoup.parser.Tag tag5 = document1.tag();
        boolean boolean6 = tag5.isInline();
        java.lang.String str7 = tag5.getName();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(tag5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#root" + "'", str7, "#root");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str8 = document7.outerHtml();
        org.jsoup.select.Elements elements9 = document7.getAllElements();
        java.lang.String str10 = document7.data();
        org.jsoup.nodes.Element element12 = document7.text("");
        org.jsoup.nodes.Node node13 = document7.parentNode;
        org.jsoup.select.Elements elements15 = document7.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element17 = document7.text("hi=\"\"");
        org.jsoup.select.Elements elements18 = document7.children();
        org.jsoup.nodes.Element element21 = document7.attr("hi!", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        boolean boolean22 = elements4.remove((java.lang.Object) element21);
        java.util.Collection<org.jsoup.nodes.Element> elementCollection24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = elements4.addAll(100, elementCollection24);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str8, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor15 = attributes12.iterator();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Attributes attributes21 = document18.attributes();
        java.lang.String str22 = attributes21.html();
        attributes12.addAll(attributes21);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor24 = attributes12.iterator();
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str28 = document27.outerHtml();
        org.jsoup.nodes.Document document31 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node32 = document31.parentNode;
        java.lang.String str33 = document31.title();
        org.jsoup.nodes.Element element35 = document31.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element36 = document27.appendChild((org.jsoup.nodes.Node) document31);
        org.jsoup.nodes.Attributes attributes37 = document31.attributes();
        boolean boolean39 = attributes37.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor40 = attributes37.iterator();
        org.jsoup.nodes.Document document43 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node44 = document43.parentNode;
        java.lang.String str45 = document43.title();
        org.jsoup.nodes.Attributes attributes46 = document43.attributes();
        java.lang.String str47 = attributes46.html();
        attributes37.addAll(attributes46);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor49 = attributes46.iterator();
        attributes12.addAll(attributes46);
        org.jsoup.nodes.Attribute attribute53 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        org.jsoup.nodes.Document document56 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node57 = document56.parentNode;
        java.lang.String str58 = document56.title();
        boolean boolean59 = attribute53.equals((java.lang.Object) str58);
        attributes12.put(attribute53);
        int int61 = attributes12.size();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(attributeItor15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(attributeItor24);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str28, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertNotNull(attributes37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(attributeItor40);
        org.junit.Assert.assertNotNull(document43);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(attributes46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(attributeItor49);
        org.junit.Assert.assertNotNull(attribute53);
        org.junit.Assert.assertNotNull(document56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.jsoup.nodes.Attribute attribute2 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node6 = document5.parentNode;
        java.lang.String str7 = document5.title();
        boolean boolean8 = attribute2.equals((java.lang.Object) str7);
        boolean boolean10 = attribute2.equals((java.lang.Object) 100L);
        java.lang.String str11 = attribute2.getValue();
        java.lang.String str12 = attribute2.getValue();
        attribute2.setValue("");
        org.junit.Assert.assertNotNull(attribute2);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("hi!");
        org.jsoup.nodes.Element element3 = new org.jsoup.nodes.Element(tag1, "!");
        boolean boolean4 = tag1.isData();
        boolean boolean5 = tag1.preserveWhitespace();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str9 = document8.outerHtml();
        java.util.Set<java.lang.String> strSet10 = document8.classNames();
        boolean boolean11 = tag1.equals((java.lang.Object) strSet10);
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan13 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node17 = document16.parentNode;
        org.jsoup.select.Elements elements19 = document16.getElementsByIndexLessThan((int) 'a');
        boolean boolean20 = indexLessThan13.matches((org.jsoup.nodes.Element) document16);
        org.jsoup.nodes.Element element22 = document16.prepend("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.jsoup.nodes.Element element24 = element22.appendElement("[!]");
        boolean boolean25 = tag1.equals((java.lang.Object) element24);
        java.lang.String str26 = tag1.toString();
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str9, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        org.jsoup.select.Elements elements9 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements8);
        boolean boolean11 = elements9.hasClass(" hi=\"\"");
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Attributes attributes17 = document14.attributes();
        org.jsoup.nodes.Attribute attribute20 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        java.lang.String str21 = attribute20.html();
        attributes17.put(attribute20);
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator23 = attributes17.spliterator();
        java.lang.String str24 = attributes17.toString();
        int int25 = elements9.indexOf((java.lang.Object) attributes17);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(attributes17);
        org.junit.Assert.assertNotNull(attribute20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi=\"\"" + "'", str21, "hi=\"\"");
        org.junit.Assert.assertNotNull(attributeSpliterator23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + " hi=\"\"" + "'", str24, " hi=\"\"");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Attribute attribute8 = org.jsoup.nodes.Attribute.createFromEncoded("hi", "");
        java.lang.String str9 = attribute8.html();
        attributes5.put(attribute8);
        java.lang.String str11 = attributes5.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator12 = attributes5.spliterator();
        int int13 = attributes5.size();
        boolean boolean15 = attributes5.hasKey("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!=\"#declaration\"");
        int int16 = attributes5.size();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(attribute8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi=\"\"" + "'", str9, "hi=\"\"");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + " hi=\"\"" + "'", str11, " hi=\"\"");
        org.junit.Assert.assertNotNull(attributeSpliterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.jsoup.nodes.Evaluator.AllElements allElements0 = new org.jsoup.nodes.Evaluator.AllElements();
        org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parseBodyFragment("hi", "hi");
        boolean boolean4 = allElements0.matches((org.jsoup.nodes.Element) document3);
        org.jsoup.select.Elements elements6 = document3.getElementsByClass("<html> <head> </head> <body> hi! </body> </html> <head> </head> <body> hi! </body> hi!");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting9 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting9.value = "hi!";
        attributeWithValueStarting9.key = "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>";
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        document16.setBaseUri("hi");
        boolean boolean20 = attributeWithValueStarting9.matches((org.jsoup.nodes.Element) document16);
        int int21 = elements6.lastIndexOf((java.lang.Object) attributeWithValueStarting9);
        org.junit.Assert.assertNotNull(document3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor15 = attributes12.iterator();
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        java.lang.String str20 = document18.title();
        org.jsoup.nodes.Attributes attributes21 = document18.attributes();
        java.lang.String str22 = attributes21.html();
        attributes12.addAll(attributes21);
        attributes12.remove(" hi=\"\"");
        org.jsoup.nodes.Document document28 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str29 = document28.outerHtml();
        org.jsoup.nodes.Document document32 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node33 = document32.parentNode;
        java.lang.String str34 = document32.title();
        org.jsoup.nodes.Element element36 = document32.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element37 = document28.appendChild((org.jsoup.nodes.Node) document32);
        org.jsoup.nodes.Attributes attributes38 = document32.attributes();
        boolean boolean40 = attributes38.hasKey("hi!");
        int int41 = attributes38.size();
        int int42 = attributes38.size();
        attributes12.addAll(attributes38);
        java.util.Iterator<org.jsoup.nodes.Attribute> attributeItor44 = attributes38.iterator();
        java.lang.String str45 = attributes38.toString();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(attributeItor15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(document28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str29, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document32);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertNotNull(element37);
        org.junit.Assert.assertNotNull(attributes38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(attributeItor44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element12 = document6.nextElementSibling();
        org.jsoup.select.Elements elements13 = document6.siblingElements();
        java.lang.String str14 = elements13.outerHtml();
        org.jsoup.nodes.Element element15 = elements13.first();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNull(element12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>" + "'", str14, "\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>");
        org.junit.Assert.assertNotNull(element15);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements7 = elements5.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements9 = elements7.append("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str11 = elements9.attr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        elements9.clear();
        org.jsoup.select.Elements elements13 = new org.jsoup.select.Elements((java.util.List<org.jsoup.nodes.Element>) elements9);
        org.jsoup.nodes.Element element14 = elements9.first();
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan16 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        org.jsoup.select.Elements elements22 = document19.getElementsByIndexLessThan((int) 'a');
        boolean boolean23 = indexLessThan16.matches((org.jsoup.nodes.Element) document19);
        org.jsoup.nodes.Document document26 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node27 = document26.parentNode;
        org.jsoup.select.Elements elements28 = document26.getAllElements();
        org.jsoup.select.Elements elements29 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan16, (org.jsoup.nodes.Element) document26);
        org.jsoup.nodes.Element element30 = document26.body();
        int int31 = elements9.indexOf((java.lang.Object) document26);
        java.lang.Class<?> wildcardClass32 = elements9.getClass();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(element14);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(elements22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(document26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(elements29);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element12 = document6.nextElementSibling();
        org.jsoup.select.Elements elements13 = document6.siblingElements();
        boolean boolean15 = elements13.hasClass("\n<!---->");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node19 = document18.parentNode;
        org.jsoup.select.Elements elements21 = document18.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream22 = elements21.stream();
        org.jsoup.select.Elements elements24 = elements21.toggleClass("[ , !]");
        int int25 = elements24.size();
        boolean boolean26 = elements13.containsAll((java.util.Collection<org.jsoup.nodes.Element>) elements24);
        org.jsoup.parser.Tag tag28 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean29 = elements13.remove((java.lang.Object) "hi!");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNull(element12);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(elementStream22);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(tag28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        java.lang.String str15 = document2.attr(" !");
        org.jsoup.nodes.Element element17 = document2.createElement("<#root>\n  <html>\n   <head>\n   </head>\n   <body> hi!\n   </body>\n  </html>\n </#root>\n <html>\n  <head>\n  </head>\n  <body> hi!\n  </body>\n </html>");
        org.jsoup.nodes.Element element19 = document2.toggleClass("<body>\n <!----> hi!\n</body>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(element19);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.nodes.Element element4 = document2.appendElement("\n&lt;!----&gt;");
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        attributes5.put("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNotNull(element4);
        org.junit.Assert.assertNotNull(attributes5);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Node node12 = document6.parentNode;
        java.lang.String str13 = document6.data();
        org.jsoup.nodes.Element element15 = document6.createElement("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.jsoup.nodes.Element element17 = element15.appendElement("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(element17);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.jsoup.nodes.Evaluator.IndexEquals indexEquals1 = new org.jsoup.nodes.Evaluator.IndexEquals(4);
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str5 = document4.outerHtml();
        org.jsoup.select.Elements elements6 = document4.getAllElements();
        java.lang.String str7 = document4.data();
        java.lang.String str8 = document4.baseUri();
        org.jsoup.nodes.Element element10 = document4.text("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean11 = indexEquals1.matches(element10);
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.select.Elements elements15 = document14.getAllElements();
        org.jsoup.select.Elements elements17 = document14.getElementsByIndexLessThan((int) (short) 10);
        document14.title("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        org.jsoup.nodes.Element element20 = document14.head();
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting23 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting23.value = "hi!";
        java.lang.String str26 = attributeWithValueStarting23.value;
        org.jsoup.nodes.Document document29 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node30 = document29.parentNode;
        org.jsoup.select.Elements elements32 = document29.getElementsByIndexLessThan((int) 'a');
        java.lang.String str33 = document29.text();
        org.jsoup.nodes.Element element35 = document29.text("");
        org.jsoup.nodes.Document document38 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str39 = document38.outerHtml();
        org.jsoup.select.Elements elements40 = document38.getAllElements();
        boolean boolean41 = element35.equals((java.lang.Object) elements40);
        boolean boolean42 = attributeWithValueStarting23.matches(element35);
        org.jsoup.nodes.Element element45 = element35.attr("hi!", "");
        org.jsoup.nodes.Attributes attributes46 = element35.attributes;
        java.lang.String str47 = element35.baseUri;
        document14.addChild((org.jsoup.nodes.Node) element35);
        org.jsoup.nodes.Document document51 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str52 = document51.outerHtml();
        org.jsoup.nodes.Document document55 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node56 = document55.parentNode;
        java.lang.String str57 = document55.title();
        org.jsoup.nodes.Element element59 = document55.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element60 = document51.appendChild((org.jsoup.nodes.Node) document55);
        org.jsoup.nodes.Document document63 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node64 = document63.parentNode;
        java.lang.String str65 = document63.title();
        org.jsoup.nodes.Attributes attributes66 = document63.attributes();
        org.jsoup.nodes.Document document69 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node70 = document69.parentNode;
        org.jsoup.select.Elements elements72 = document69.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element73 = document63.prependChild((org.jsoup.nodes.Node) document69);
        org.jsoup.select.Elements elements75 = document63.select("hi");
        org.jsoup.nodes.Element element76 = document55.appendChild((org.jsoup.nodes.Node) document63);
        org.jsoup.nodes.Element element77 = document63.body();
        document14.parentNode = document63;
        org.jsoup.select.Elements elements79 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexEquals1, (org.jsoup.nodes.Element) document63);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str5, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(elements32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(document38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str39, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(element45);
        org.junit.Assert.assertNotNull(attributes46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str52, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(element59);
        org.junit.Assert.assertNotNull(element60);
        org.junit.Assert.assertNotNull(document63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(attributes66);
        org.junit.Assert.assertNotNull(document69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(elements72);
        org.junit.Assert.assertNotNull(element73);
        org.junit.Assert.assertNotNull(elements75);
        org.junit.Assert.assertNotNull(element76);
        org.junit.Assert.assertNotNull(element77);
        org.junit.Assert.assertNotNull(elements79);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Element element6 = document2.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements7 = element6.getAllElements();
        org.jsoup.nodes.Element element9 = element6.getElementById("<html>\n<head>\n</head>\n<body>\n hi=&quot;&quot;\n</body>\n</html>");
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parseBodyFragment("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>", "<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.parser.Tag tag13 = document12.tag();
        boolean boolean14 = element6.equals((java.lang.Object) document12);
        org.jsoup.nodes.TextNode textNode17 = org.jsoup.nodes.TextNode.createFromEncoded("\n<!---->", "\n<!---->");
        java.lang.String str18 = textNode17.toString();
        java.lang.String str19 = textNode17.toString();
        textNode17.baseUri = "!\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>";
        element6.setParentNode((org.jsoup.nodes.Node) textNode17);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertNull(element9);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertNotNull(tag13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(textNode17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n&lt;!----&gt;" + "'", str18, "\n&lt;!----&gt;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n&lt;!----&gt;" + "'", str19, "\n&lt;!----&gt;");
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><#root>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>\n</#root>");
        org.jsoup.select.Elements elements4 = document1.getElementsByAttributeValueStarting("head", "#document");
        java.lang.Object[] objArray5 = elements4.toArray();
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan7 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) ' ');
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan9 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) ' ');
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan11 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) ' ');
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan13 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) ' ');
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan15 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) ' ');
        org.jsoup.nodes.Evaluator.IndexGreaterThan indexGreaterThan17 = new org.jsoup.nodes.Evaluator.IndexGreaterThan((int) ' ');
        org.jsoup.nodes.Evaluator.IndexGreaterThan[] indexGreaterThanArray18 = new org.jsoup.nodes.Evaluator.IndexGreaterThan[] { indexGreaterThan7, indexGreaterThan9, indexGreaterThan11, indexGreaterThan13, indexGreaterThan15, indexGreaterThan17 };
        org.jsoup.nodes.Evaluator.IndexGreaterThan[] indexGreaterThanArray19 = elements4.toArray(indexGreaterThanArray18);
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        org.jsoup.select.Elements elements25 = document22.getElementsByIndexLessThan((int) 'a');
        org.jsoup.select.Elements elements27 = elements25.val("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream28 = elements25.stream();
        org.jsoup.select.Elements elements30 = elements25.toggleClass("#document");
        java.util.Iterator<org.jsoup.nodes.Element> elementItor31 = elements30.iterator();
        org.jsoup.select.Elements elements33 = elements30.removeAttr("#comment");
        boolean boolean34 = elements4.addAll((java.util.Collection<org.jsoup.nodes.Element>) elements33);
        java.lang.String str35 = elements33.text();
        org.jsoup.select.Elements elements37 = elements33.removeAttr("<html>\n<head>\n</head>\n<body> #text\n</body>\n</html>\n<html> \n<head> \n</head> \n<body>\n  head  \n</body>\n</html>");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(indexGreaterThanArray18);
        org.junit.Assert.assertNotNull(indexGreaterThanArray19);
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertNotNull(elementStream28);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertNotNull(elementItor31);
        org.junit.Assert.assertNotNull(elements33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi! hi!  hi!" + "'", str35, "hi! hi!  hi!");
        org.junit.Assert.assertNotNull(elements37);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting2 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting2.value = "hi!";
        java.lang.String str5 = attributeWithValueStarting2.value;
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        java.lang.String str12 = document8.text();
        org.jsoup.nodes.Element element14 = document8.text("");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.select.Elements elements19 = document17.getAllElements();
        boolean boolean20 = element14.equals((java.lang.Object) elements19);
        boolean boolean21 = attributeWithValueStarting2.matches(element14);
        java.lang.String str22 = element14.text();
        org.jsoup.parser.Tag tag23 = element14.tag();
        boolean boolean24 = tag23.canContainBlock();
        org.jsoup.parser.Tag tag26 = org.jsoup.parser.Tag.valueOf("hi!");
        boolean boolean27 = tag26.preserveWhitespace();
        org.jsoup.nodes.Element element29 = new org.jsoup.nodes.Element(tag26, "\n<!---->");
        org.jsoup.nodes.Element element31 = new org.jsoup.nodes.Element(tag26, "\n&lt;!----&gt;");
        boolean boolean32 = tag23.equals((java.lang.Object) "\n&lt;!----&gt;");
        boolean boolean33 = tag23.preserveWhitespace();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(tag23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(tag26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        java.lang.String str9 = elements8.html();
        java.lang.String str10 = elements8.val();
        org.jsoup.select.Elements elements12 = elements8.val("hi");
        boolean boolean14 = elements12.hasAttr("<html> <head> </head> <body> hi! </body> </html> hi! hi!");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!" + "'", str9, "<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Document document29 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Element element30 = document20.prependChild((org.jsoup.nodes.Node) document29);
        java.lang.String str31 = document20.val();
        org.jsoup.nodes.Element element33 = document20.text("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>=\"&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n hi\n&lt;/body&gt;\n&lt;/html&gt;\"");
        org.jsoup.nodes.Element element35 = element33.wrap("<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.jsoup.nodes.Node node38 = element35.attr("#data", "hi! hi!  hi!");
        java.lang.String str39 = node38.nodeName();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(document29);
        org.junit.Assert.assertNotNull(element30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(element33);
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "#document" + "'", str39, "#document");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        org.jsoup.select.Elements elements14 = document6.getElementsByTag("hi!");
        org.jsoup.select.Elements elements15 = document6.getAllElements();
        org.jsoup.nodes.Document document16 = document6.normalise();
        java.lang.String str17 = document6.id();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.lang.String str13 = document8.baseUri();
        org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str17 = document16.outerHtml();
        org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node21 = document20.parentNode;
        java.lang.String str22 = document20.title();
        org.jsoup.nodes.Element element24 = document20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element25 = document16.appendChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Attributes attributes26 = document20.attributes();
        document8.addChild((org.jsoup.nodes.Node) document20);
        org.jsoup.nodes.Element element29 = document20.wrap("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements30 = element29.getAllElements();
        java.lang.String str31 = elements30.text();
        org.jsoup.nodes.Document document34 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str35 = document34.outerHtml();
        org.jsoup.select.Elements elements38 = document34.getElementsByAttributeValueContaining("<?hi>", "[!]");
        org.jsoup.select.Elements elements40 = document34.getElementsByTag("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!");
        org.jsoup.select.Elements elements42 = elements40.addClass("<?head>");
        boolean boolean43 = elements30.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements42);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(document16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str17, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(attributes26);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(elements30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html> <head> </head> <body> hi! </body> </html> <html> <head> </head> <body> hi! </body> </html>  <html> <head> </head> <body> hi! </body> </html>" + "'", str31, "<html> <head> </head> <body> hi! </body> </html> <html> <head> </head> <body> hi! </body> </html>  <html> <head> </head> <body> hi! </body> </html>");
        org.junit.Assert.assertNotNull(document34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str35, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertNotNull(elements40);
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        java.lang.String str2 = tag1.toString();
        org.jsoup.nodes.Element element4 = new org.jsoup.nodes.Element(tag1, "hi=\"\"");
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str8 = document7.outerHtml();
        org.jsoup.nodes.Document document11 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node12 = document11.parentNode;
        java.lang.String str13 = document11.title();
        org.jsoup.nodes.Element element15 = document11.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element16 = document7.appendChild((org.jsoup.nodes.Node) document11);
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node20 = document19.parentNode;
        java.lang.String str21 = document19.title();
        org.jsoup.nodes.Attributes attributes22 = document19.attributes();
        org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node26 = document25.parentNode;
        org.jsoup.select.Elements elements28 = document25.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element29 = document19.prependChild((org.jsoup.nodes.Node) document25);
        org.jsoup.select.Elements elements31 = document19.select("hi");
        org.jsoup.nodes.Element element32 = document11.appendChild((org.jsoup.nodes.Node) document19);
        org.jsoup.nodes.Element element34 = document19.addClass("#declaration");
        org.jsoup.nodes.Node node35 = document19.previousSibling();
        element4.addChild((org.jsoup.nodes.Node) document19);
        org.jsoup.nodes.Document document37 = document19.normalise();
        org.jsoup.nodes.Node node40 = document37.attr("\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<html>\n <head>\n </head>\n <body>\n  &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; hi! &lt;/body&gt; &lt;/html&gt;\n </body>\n</html>", "");
        org.junit.Assert.assertNotNull(tag1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str2, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str8, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNotNull(element16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(attributes22);
        org.junit.Assert.assertNotNull(document25);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(elements28);
        org.junit.Assert.assertNotNull(element29);
        org.junit.Assert.assertNotNull(elements31);
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertNotNull(element34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(document37);
        org.junit.Assert.assertNotNull(node40);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.jsoup.nodes.Evaluator.IndexEquals indexEquals1 = new org.jsoup.nodes.Evaluator.IndexEquals((int) '!');
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node5 = document4.parentNode;
        java.lang.String str6 = document4.title();
        org.jsoup.nodes.Attributes attributes7 = document4.attributes();
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node11 = document10.parentNode;
        org.jsoup.select.Elements elements13 = document10.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element14 = document4.prependChild((org.jsoup.nodes.Node) document10);
        java.util.List<org.jsoup.nodes.Node> nodeList15 = document4.childNodes;
        org.jsoup.select.Elements elements17 = document4.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document4.addClass("<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>");
        boolean boolean20 = indexEquals1.matches((org.jsoup.nodes.Element) document4);
        org.jsoup.nodes.Document document23 = org.jsoup.Jsoup.parse("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!", "<html>\n<head>\n</head>\n<body>\n [ , !]\n</body>\n</html>");
        org.jsoup.select.Elements elements26 = document23.getElementsByAttributeValueStarting("<!---->=\"\"", " hi=\"\"");
        org.jsoup.nodes.Element element27 = document23.parent();
        boolean boolean28 = indexEquals1.matches((org.jsoup.nodes.Element) document23);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(attributes7);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(elements13);
        org.junit.Assert.assertNotNull(element14);
        org.junit.Assert.assertNotNull(nodeList15);
        org.junit.Assert.assertNotNull(elements17);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(document23);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertNull(element27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element12 = document6.head();
        java.lang.String str13 = element12.id();
        org.jsoup.select.Elements elements16 = element12.getElementsByAttributeValueNot("\n<!---->", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str20 = document19.outerHtml();
        org.jsoup.select.Elements elements21 = document19.getAllElements();
        java.lang.String str22 = document19.data();
        org.jsoup.nodes.Element element24 = document19.text("");
        element12.addChild((org.jsoup.nodes.Node) document19);
        java.util.Set<java.lang.String> strSet26 = element12.classNames();
        org.jsoup.select.Elements elements29 = element12.getElementsByAttributeValueContaining(" !", "<!---->=\"\"=\"\"");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(elements16);
        org.junit.Assert.assertNotNull(document19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str20, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(element24);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(elements29);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Element element12 = document6.head();
        org.jsoup.nodes.Evaluator.Tag tag14 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Document document17 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str18 = document17.outerHtml();
        org.jsoup.nodes.Document document21 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node22 = document21.parentNode;
        java.lang.String str23 = document21.title();
        org.jsoup.nodes.Element element25 = document21.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element26 = document17.appendChild((org.jsoup.nodes.Node) document21);
        org.jsoup.nodes.Element element27 = document21.head();
        java.lang.String str28 = element27.id();
        boolean boolean29 = tag14.matches(element27);
        java.lang.String str30 = element27.baseUri();
        element12.parentNode = element27;
        org.jsoup.select.Elements elements32 = element12.getAllElements();
        java.lang.String str33 = elements32.outerHtml();
        java.lang.String str34 = elements32.html();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(document17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str18, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(elements32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n  <head>\n  </head>" + "'", str33, "\n  <head>\n  </head>");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str19 = document18.outerHtml();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Element element26 = document22.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Attributes attributes28 = document22.attributes();
        java.lang.String str29 = document22.title();
        int int30 = elements15.lastIndexOf((java.lang.Object) document22);
        org.jsoup.nodes.Element element32 = document22.val("\n<!---->");
        org.jsoup.select.Elements elements34 = element32.getElementsByIndexGreaterThan((int) (byte) 1);
        java.util.Set<java.lang.String> strSet35 = element32.classNames();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str19, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(strSet35);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        java.lang.String str4 = document2.title();
        org.jsoup.nodes.Attributes attributes5 = document2.attributes();
        org.jsoup.nodes.Document document8 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node9 = document8.parentNode;
        org.jsoup.select.Elements elements11 = document8.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element12 = document2.prependChild((org.jsoup.nodes.Node) document8);
        java.util.List<org.jsoup.nodes.Node> nodeList13 = document2.childNodes;
        org.jsoup.select.Elements elements15 = document2.getElementsByTag("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document18 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str19 = document18.outerHtml();
        org.jsoup.nodes.Document document22 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node23 = document22.parentNode;
        java.lang.String str24 = document22.title();
        org.jsoup.nodes.Element element26 = document22.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element27 = document18.appendChild((org.jsoup.nodes.Node) document22);
        org.jsoup.nodes.Attributes attributes28 = document22.attributes();
        java.lang.String str29 = document22.title();
        int int30 = elements15.lastIndexOf((java.lang.Object) document22);
        org.jsoup.nodes.Element element32 = document22.val("\n<!---->");
        org.jsoup.select.Elements elements34 = element32.getElementsByIndexGreaterThan((int) (byte) 1);
        java.util.List<org.jsoup.nodes.Node> nodeList35 = element32.childNodes();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(attributes5);
        org.junit.Assert.assertNotNull(document8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(elements11);
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNotNull(nodeList13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(document18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str19, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(element26);
        org.junit.Assert.assertNotNull(element27);
        org.junit.Assert.assertNotNull(attributes28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertNotNull(elements34);
        org.junit.Assert.assertNotNull(nodeList35);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.lang.String str6 = document2.text();
        org.jsoup.select.Elements elements9 = document2.getElementsByAttributeValueNot("hi=\"\"", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Evaluator.AttributeWithValueContaining attributeWithValueContaining12 = new org.jsoup.nodes.Evaluator.AttributeWithValueContaining("<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!", "head");
        int int13 = elements9.indexOf((java.lang.Object) "head");
        org.jsoup.nodes.Element element15 = elements9.get(0);
        org.jsoup.nodes.Node node16 = element15.parentNode;
        boolean boolean17 = element15.hasText();
        org.jsoup.nodes.Element element19 = element15.prepend("\n<!---->");
        org.jsoup.select.Elements elements21 = element19.getElementsByIndexLessThan((int) '!');
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(element15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(elements21);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements5 = document2.getElementsByIndexLessThan((int) 'a');
        java.util.stream.Stream<org.jsoup.nodes.Element> elementStream6 = elements5.stream();
        org.jsoup.select.Elements elements8 = elements5.addClass("hi");
        org.jsoup.select.Elements elements9 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements8);
        org.jsoup.select.Elements elements12 = elements8.attr("head", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Document document15 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node16 = document15.parentNode;
        java.lang.String str17 = document15.title();
        org.jsoup.nodes.Attributes attributes18 = document15.attributes();
        org.jsoup.nodes.Document document21 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node22 = document21.parentNode;
        org.jsoup.select.Elements elements24 = document21.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element25 = document15.prependChild((org.jsoup.nodes.Node) document21);
        org.jsoup.select.Elements elements27 = document15.select("hi");
        org.jsoup.nodes.Document document30 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str31 = document30.outerHtml();
        org.jsoup.select.Elements elements32 = document30.getAllElements();
        java.lang.String str33 = document30.data();
        org.jsoup.nodes.Element element35 = document30.text("");
        org.jsoup.nodes.Node node36 = document30.parentNode;
        org.jsoup.select.Elements elements38 = document30.getElementsByIndexGreaterThan((int) '4');
        boolean boolean39 = elements27.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements38);
        org.jsoup.select.Elements elements41 = elements38.select(" hi=\"\"");
        org.jsoup.nodes.Evaluator.AttributeWithValueStarting attributeWithValueStarting44 = new org.jsoup.nodes.Evaluator.AttributeWithValueStarting("hi", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        attributeWithValueStarting44.value = "hi!";
        attributeWithValueStarting44.key = "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>";
        org.jsoup.nodes.Document document51 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str52 = document51.outerHtml();
        document51.setBaseUri("hi");
        boolean boolean55 = attributeWithValueStarting44.matches((org.jsoup.nodes.Element) document51);
        org.jsoup.nodes.Document document58 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str59 = document58.outerHtml();
        org.jsoup.nodes.Document document62 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node63 = document62.parentNode;
        java.lang.String str64 = document62.title();
        org.jsoup.nodes.Element element66 = document62.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element67 = document58.appendChild((org.jsoup.nodes.Node) document62);
        org.jsoup.nodes.Document document70 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node71 = document70.parentNode;
        java.lang.String str72 = document70.title();
        org.jsoup.nodes.Attributes attributes73 = document70.attributes();
        org.jsoup.nodes.Document document76 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node77 = document76.parentNode;
        org.jsoup.select.Elements elements79 = document76.getElementsByIndexLessThan((int) 'a');
        org.jsoup.nodes.Element element80 = document70.prependChild((org.jsoup.nodes.Node) document76);
        org.jsoup.select.Elements elements82 = document70.select("hi");
        org.jsoup.nodes.Element element83 = document62.appendChild((org.jsoup.nodes.Node) document70);
        org.jsoup.nodes.Element element84 = document70.body();
        boolean boolean85 = attributeWithValueStarting44.matches((org.jsoup.nodes.Element) document70);
        boolean boolean86 = elements38.equals((java.lang.Object) boolean85);
        boolean boolean87 = elements12.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements38);
        org.jsoup.parser.TokenQueue tokenQueue89 = new org.jsoup.parser.TokenQueue("hi!");
        boolean boolean91 = tokenQueue89.matchChomp("");
        java.lang.String str92 = tokenQueue89.consumeWord();
        tokenQueue89.addFirst((java.lang.Character) ' ');
        java.lang.String str95 = tokenQueue89.consumeAttributeKey();
        java.lang.String str96 = tokenQueue89.toString();
        tokenQueue89.addFirst("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html><<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>\n</<html>\n<head>\n</head>\n<body>\n hi\n</body>\n</html>>");
        int int99 = elements12.indexOf((java.lang.Object) tokenQueue89);
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements5);
        org.junit.Assert.assertNotNull(elementStream6);
        org.junit.Assert.assertNotNull(elements8);
        org.junit.Assert.assertNotNull(elements12);
        org.junit.Assert.assertNotNull(document15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(attributes18);
        org.junit.Assert.assertNotNull(document21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(elements24);
        org.junit.Assert.assertNotNull(element25);
        org.junit.Assert.assertNotNull(elements27);
        org.junit.Assert.assertNotNull(document30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str31, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(element35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(elements38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(elements41);
        org.junit.Assert.assertNotNull(document51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str52, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(document58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str59, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document62);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(element66);
        org.junit.Assert.assertNotNull(element67);
        org.junit.Assert.assertNotNull(document70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(attributes73);
        org.junit.Assert.assertNotNull(document76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNotNull(elements79);
        org.junit.Assert.assertNotNull(element80);
        org.junit.Assert.assertNotNull(elements82);
        org.junit.Assert.assertNotNull(element83);
        org.junit.Assert.assertNotNull(element84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hi" + "'", str92, "hi");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[ , !]" + "'", str96, "[ , !]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Document document7 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str8 = document7.outerHtml();
        org.jsoup.select.Elements elements9 = document7.getAllElements();
        java.lang.String str10 = document7.data();
        org.jsoup.nodes.Element element12 = document7.text("");
        org.jsoup.nodes.Node node13 = document7.parentNode;
        org.jsoup.select.Elements elements15 = document7.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element17 = document7.text("hi=\"\"");
        org.jsoup.select.Elements elements18 = document7.children();
        org.jsoup.nodes.Element element21 = document7.attr("hi!", "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        boolean boolean22 = elements4.remove((java.lang.Object) element21);
        java.lang.Object[] objArray23 = elements4.toArray();
        org.jsoup.select.Elements elements25 = elements4.val("");
        org.jsoup.select.Elements elements27 = elements25.html("<?hi>");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(document7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str8, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(element12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(elements15);
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNotNull(elements18);
        org.junit.Assert.assertNotNull(element21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[<?hi>, \n<html value=\"\"><?hi>\n</html>, \n<head value=\"\"><?hi>\n</head>, \n<body value=\"\"><?hi>\n</body>]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[<?hi>, \n<html value=\"\"><?hi>\n</html>, \n<head value=\"\"><?hi>\n</head>, \n<body value=\"\"><?hi>\n</body>]");
        org.junit.Assert.assertNotNull(elements25);
        org.junit.Assert.assertNotNull(elements27);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell("#text");
        org.junit.Assert.assertNotNull(document1);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.select.Elements elements6 = elements4.prepend("");
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.outerHtml();
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Element element18 = document14.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document10.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Element element20 = document14.nextElementSibling();
        org.jsoup.select.Elements elements21 = document14.siblingElements();
        org.jsoup.nodes.Element element22 = elements4.set(1, (org.jsoup.nodes.Element) document14);
        java.util.Spliterator<org.jsoup.nodes.Element> elementSpliterator23 = elements4.spliterator();
        org.jsoup.select.Elements elements26 = elements4.attr("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!", " hi=&quot;&quot;");
        org.jsoup.nodes.Evaluator.Tag tag28 = new org.jsoup.nodes.Evaluator.Tag("#document");
        org.jsoup.nodes.Evaluator.IndexLessThan indexLessThan30 = new org.jsoup.nodes.Evaluator.IndexLessThan((int) (byte) -1);
        org.jsoup.nodes.Document document33 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node34 = document33.parentNode;
        org.jsoup.select.Elements elements36 = document33.getElementsByIndexLessThan((int) 'a');
        boolean boolean37 = indexLessThan30.matches((org.jsoup.nodes.Element) document33);
        org.jsoup.nodes.Document document40 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node41 = document40.parentNode;
        org.jsoup.select.Elements elements42 = document40.getAllElements();
        org.jsoup.select.Elements elements43 = org.jsoup.select.Collector.collect((org.jsoup.nodes.Evaluator) indexLessThan30, (org.jsoup.nodes.Element) document40);
        boolean boolean44 = tag28.matches((org.jsoup.nodes.Element) document40);
        org.jsoup.select.Elements elements47 = document40.getElementsByAttributeValueEnding("<html>\n<head>\n</head>\n<body>\n</body>\n</html>", "#text");
        java.lang.String str49 = elements47.attr("<html>\n<head>\n</head>\n<body>\n hi=&quot;&quot;\n</body>\n</html>");
        boolean boolean50 = elements4.retainAll((java.util.Collection<org.jsoup.nodes.Element>) elements47);
        org.jsoup.select.Elements elements52 = elements4.addClass("");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str11, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNull(element20);
        org.junit.Assert.assertNotNull(elements21);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertNotNull(elementSpliterator23);
        org.junit.Assert.assertNotNull(elements26);
        org.junit.Assert.assertNotNull(document33);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(elements36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(document40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(elements42);
        org.junit.Assert.assertNotNull(elements43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(elements47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(elements52);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.jsoup.nodes.Document document1 = new org.jsoup.nodes.Document("hi! hi! hi!");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parseBodyFragment("head");
        org.jsoup.nodes.Document document4 = org.jsoup.parser.Parser.parse("\n<!--<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!-->", "");
        boolean boolean5 = document1.equals((java.lang.Object) "");
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertNotNull(document4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node3 = document2.parentNode;
        org.jsoup.select.Elements elements4 = document2.getAllElements();
        org.jsoup.nodes.Element element6 = document2.createElement("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.select.Elements elements7 = element6.getAllElements();
        java.lang.String str8 = element6.html();
        boolean boolean9 = element6.preserveWhitespace();
        org.jsoup.nodes.Document document12 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str13 = document12.outerHtml();
        org.jsoup.select.Elements elements14 = document12.getAllElements();
        java.lang.String str15 = document12.data();
        org.jsoup.nodes.Element element17 = document12.text("");
        org.jsoup.nodes.Node node18 = document12.parentNode;
        org.jsoup.select.Elements elements20 = document12.getElementsByIndexGreaterThan((int) '4');
        org.jsoup.nodes.Element element22 = document12.text("hi=\"\"");
        boolean boolean23 = document12.hasText();
        boolean boolean24 = element6.equals((java.lang.Object) boolean23);
        org.jsoup.nodes.Document document27 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str28 = document27.outerHtml();
        org.jsoup.select.Elements elements29 = document27.getAllElements();
        java.lang.String str30 = document27.data();
        org.jsoup.nodes.Element element32 = document27.text("");
        boolean boolean34 = document27.hasClass("hi!");
        boolean boolean35 = element6.equals((java.lang.Object) document27);
        org.jsoup.nodes.Element element36 = element6.empty();
        org.jsoup.nodes.Evaluator.AllElements allElements37 = new org.jsoup.nodes.Evaluator.AllElements();
        org.jsoup.nodes.Element element38 = null;
        boolean boolean39 = allElements37.matches(element38);
        org.jsoup.nodes.Element element40 = null;
        boolean boolean41 = allElements37.matches(element40);
        org.jsoup.nodes.Evaluator.IndexEquals indexEquals43 = new org.jsoup.nodes.Evaluator.IndexEquals(4);
        org.jsoup.nodes.Document document46 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str47 = document46.outerHtml();
        org.jsoup.select.Elements elements48 = document46.getAllElements();
        java.lang.String str49 = document46.data();
        java.lang.String str50 = document46.baseUri();
        org.jsoup.nodes.Element element52 = document46.text("<#root>\n<html>\n <head>\n </head>\n <body> hi!\n </body>\n</html>\n</#root>\n<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        boolean boolean53 = indexEquals43.matches(element52);
        boolean boolean54 = allElements37.matches(element52);
        org.jsoup.nodes.Element element55 = element36.appendChild((org.jsoup.nodes.Node) element52);
        org.jsoup.nodes.Element element57 = element55.appendText("<html>\n<head>\n #document\n</head>\n<body> hi!#document\n</body>#document\n</html>#document\n<head>\n #document\n</head>\n<body> hi!#document\n</body>#document\n#document\nhi!#document");
        org.jsoup.nodes.Attributes attributes58 = element57.attributes();
        attributes58.remove("hi! hi!  hi!");
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(elements4);
        org.junit.Assert.assertNotNull(element6);
        org.junit.Assert.assertNotNull(elements7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(document12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str13, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(element17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(elements20);
        org.junit.Assert.assertNotNull(element22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(document27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str28, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(element32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(element36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(document46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str47, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(elements48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(element52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(element55);
        org.junit.Assert.assertNotNull(element57);
        org.junit.Assert.assertNotNull(attributes58);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.jsoup.nodes.Evaluator.AllElements allElements0 = new org.jsoup.nodes.Evaluator.AllElements();
        org.jsoup.nodes.Element element1 = null;
        boolean boolean2 = allElements0.matches(element1);
        org.jsoup.nodes.Document document5 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.select.Elements elements6 = document5.getAllElements();
        boolean boolean7 = allElements0.matches((org.jsoup.nodes.Element) document5);
        org.jsoup.nodes.Document document10 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str11 = document10.outerHtml();
        org.jsoup.nodes.Document document14 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node15 = document14.parentNode;
        java.lang.String str16 = document14.title();
        org.jsoup.nodes.Element element18 = document14.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element19 = document10.appendChild((org.jsoup.nodes.Node) document14);
        org.jsoup.nodes.Element element20 = document14.head();
        org.jsoup.nodes.Attributes attributes21 = element20.attributes;
        org.jsoup.nodes.Element element23 = element20.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>\n<head>\n</head>\n<body> hi!\n</body>\n\nhi!");
        boolean boolean24 = allElements0.matches(element20);
        boolean boolean26 = element20.hasAttr("\n<!--<html class=\" hi\">\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n</html>\n<head class=\" hi\">\n</head>\n<body class=\" hi\"> hi!\n</body>\n\nhi!-->");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(document5);
        org.junit.Assert.assertNotNull(elements6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(document10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str11, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document14);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(element18);
        org.junit.Assert.assertNotNull(element19);
        org.junit.Assert.assertNotNull(element20);
        org.junit.Assert.assertNotNull(attributes21);
        org.junit.Assert.assertNotNull(element23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        java.lang.String str3 = document2.outerHtml();
        org.jsoup.nodes.Document document6 = org.jsoup.parser.Parser.parse("hi!", "hi!");
        org.jsoup.nodes.Node node7 = document6.parentNode;
        java.lang.String str8 = document6.title();
        org.jsoup.nodes.Element element10 = document6.text("<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.jsoup.nodes.Element element11 = document2.appendChild((org.jsoup.nodes.Node) document6);
        org.jsoup.nodes.Attributes attributes12 = document6.attributes();
        boolean boolean14 = attributes12.hasKey("hi!");
        int int15 = attributes12.size();
        int int16 = attributes12.size();
        java.util.List<org.jsoup.nodes.Attribute> attributeList17 = attributes12.asList();
        java.lang.String str18 = attributes12.html();
        java.util.Spliterator<org.jsoup.nodes.Attribute> attributeSpliterator19 = attributes12.spliterator();
        boolean boolean21 = attributes12.hasKey("<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
        java.util.List<org.jsoup.nodes.Attribute> attributeList22 = attributes12.asList();
        int int23 = attributes12.size();
        org.junit.Assert.assertNotNull(document2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>" + "'", str3, "<html>\n<head>\n</head>\n<body> hi!\n</body>\n</html>");
        org.junit.Assert.assertNotNull(document6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(element10);
        org.junit.Assert.assertNotNull(element11);
        org.junit.Assert.assertNotNull(attributes12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(attributeList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(attributeSpliterator19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(attributeList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell(" hi=\"\"");
        java.lang.String str2 = document1.baseUri();
        java.lang.String str3 = document1.tagName();
        java.util.List<org.jsoup.nodes.Node> nodeList4 = document1.childNodes();
        org.junit.Assert.assertNotNull(document1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi=\"\"" + "'", str2, "hi=\"\"");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#root" + "'", str3, "#root");
        org.junit.Assert.assertNotNull(nodeList4);
    }
}

